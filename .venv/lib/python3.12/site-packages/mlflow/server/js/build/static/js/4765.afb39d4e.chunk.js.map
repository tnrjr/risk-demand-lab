{"version":3,"file":"static/js/4765.afb39d4e.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/utils/persistSearchFacets.serializers.ts","experiment-tracking/components/experiment-page/hooks/useExperimentPageSearchFacets.tsx","experiment-tracking/components/experiment-page/models/ExperimentPageSearchFacetsState.tsx","experiment-tracking/pages/experiment-traces/ExperimentTracesPage.tsx","../node_modules/use-clipboard-copy/dist/index.js"],"sourcesContent":["import { isArray } from 'lodash';\nimport { atobUtf8, btoaUtf8 } from '../../../../common/utils/StringUtils';\nimport { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\n\ntype PersistSearchSerializeFunctions<Serialized = any, Unserialized = any> = {\n  serializeLocalStorage?(input: Unserialized): Serialized;\n  serializeQueryString?(input: Unserialized): Serialized;\n  deserializeLocalStorage?(input: Serialized): Unserialized;\n  deserializeQueryString?(input: Serialized): Unserialized;\n};\n\n/**\n * \"Flattens\" the strings array, i.e. merges it into a single value\n */\nconst flattenString = (input: string | string[]) => (isArray(input) ? input.join() : input);\n\n/**\n * All known field serialization and deserialization mechanisms used in search facets state persisting mechanism.\n */\nconst persistSearchStateFieldSerializers: Record<string, PersistSearchSerializeFunctions> = {\n  /**\n   * In rare cases, search filter might contain commas that interfere with `querystring` library\n   * parsing causing it to return array instead of string. Since it's difficult to selectively\n   * change `querystring`'s parsing action, we are making sure that the parsed values are always strings.\n   */\n  searchFilter: {\n    deserializeLocalStorage: flattenString,\n    deserializeQueryString: flattenString,\n  },\n  orderByAsc: {\n    serializeQueryString(input: boolean) {\n      return input.toString();\n    },\n    deserializeQueryString(input: string) {\n      return input === 'true';\n    },\n  },\n  datasetsFilter: {\n    serializeQueryString(inputs: ExperimentPageSearchFacetsState['datasetsFilter']) {\n      const inputsWithoutExperimentId = inputs.map(({ name, digest, context }) => ({\n        name,\n        digest,\n        context,\n      }));\n      return btoaUtf8(JSON.stringify(inputsWithoutExperimentId));\n    },\n    deserializeQueryString(input: string): ExperimentPageSearchFacetsState['datasetsFilter'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return [];\n        }\n        return parsedResult;\n      } catch {\n        return [];\n      }\n    },\n  },\n  /**\n   * Array of visible configured charts are serialized into base64-encoded JSON when put into query string\n   */\n  compareRunCharts: {\n    serializeQueryString(input: ExperimentPageUIState['compareRunCharts']) {\n      return btoaUtf8(JSON.stringify(input));\n    },\n    deserializeQueryString(input: string): ExperimentPageUIState['compareRunCharts'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return undefined;\n        }\n        return parsedResult;\n      } catch {\n        return undefined;\n      }\n    },\n  },\n  /**\n   * For \"compareRunsMode\", we will always save \"undefined\" value to local storage so users will\n   * get back to default view after visiting the view once more.\n   */\n  compareRunsMode: {\n    serializeLocalStorage() {\n      return undefined;\n    },\n  },\n};\n\ntype StateKey = keyof Partial<ExperimentPageSearchFacetsState>;\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to query string.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToQueryString = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeQueryString;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from query string and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromQueryString = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeQueryString;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to local storage.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToLocalStorage = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeLocalStorage;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from local storage and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromLocalStorage = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeLocalStorage;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n","import { assign, entries, isNil, keys, omitBy, pick } from 'lodash';\nimport { useMemo } from 'react';\nimport { NavigateOptions, useParams, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport {\n  ExperimentPageSearchFacetsState,\n  createExperimentPageSearchFacetsState,\n} from '../models/ExperimentPageSearchFacetsState';\nimport {\n  deserializeFieldsFromQueryString,\n  serializeFieldsToQueryString,\n} from '../utils/persistSearchFacets.serializers';\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_KEYS = [\n  'searchFilter',\n  'orderByKey',\n  'orderByAsc',\n  'startTime',\n  'lifecycleFilter',\n  'modelVersionFilter',\n  'datasetsFilter',\n];\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW = 'isPreview';\n\nexport type ExperimentPageQueryParams = any;\n\nexport type ExperimentQueryParamsSearchFacets = ExperimentPageSearchFacetsState & {\n  experimentIds?: string[];\n};\n\nconst getComparedExperimentIds = (comparedExperimentIds: string): string[] => {\n  try {\n    return comparedExperimentIds ? JSON.parse(comparedExperimentIds) : [];\n  } catch {\n    return [];\n  }\n};\n\nexport const useExperimentPageSearchFacets = (): [ExperimentQueryParamsSearchFacets | null, string[], boolean] => {\n  const [queryParams] = useSearchParams();\n\n  // Pick only the keys we care about\n  const pickedValues = useMemo(\n    () => pick(Object.fromEntries(queryParams.entries()), EXPERIMENT_PAGE_QUERY_PARAM_KEYS),\n    [queryParams],\n  );\n\n  // Check if the page is in preview mode. If so, it should not be persisted until explicitly changed\n  const isPreview = queryParams.get(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW) === 'true';\n\n  // Destructure to get raw values\n  const { searchFilter, orderByKey, orderByAsc, startTime, lifecycleFilter, modelVersionFilter, datasetsFilter } =\n    pickedValues;\n\n  const areValuesEmpty = keys(pickedValues).length < 1;\n\n  const { experimentId } = useParams<{ experimentId: string }>();\n  const queryParamsExperimentIds = queryParams.get('experiments');\n\n  // Calculate experiment IDs\n  const experimentIds = useMemo(() => {\n    if (experimentId) {\n      return [experimentId];\n    }\n    if (queryParamsExperimentIds) {\n      return getComparedExperimentIds(queryParamsExperimentIds);\n    }\n    return [];\n  }, [experimentId, queryParamsExperimentIds]);\n\n  // Calculate and memoize search facets\n  const searchFacets = useMemo(() => {\n    if (areValuesEmpty) {\n      return null;\n    }\n    const deserializedFields = deserializeFieldsFromQueryString(\n      omitBy(\n        {\n          searchFilter,\n          orderByKey,\n          orderByAsc,\n          startTime,\n          lifecycleFilter,\n          modelVersionFilter,\n          datasetsFilter,\n        },\n        isNil,\n      ),\n    ) as ExperimentPageSearchFacetsState;\n\n    // If not all fields are provided, fill the gaps with default values\n    return assign(createExperimentPageSearchFacetsState(), deserializedFields);\n  }, [\n    // Use exact values to avoid unnecessary re-renders\n    searchFilter,\n    orderByKey,\n    orderByAsc,\n    startTime,\n    lifecycleFilter,\n    modelVersionFilter,\n    datasetsFilter,\n    areValuesEmpty,\n  ]);\n\n  return [searchFacets, experimentIds, isPreview];\n};\n\nexport const useUpdateExperimentPageSearchFacets = () => {\n  const [, setParams] = useSearchParams();\n\n  return (partialFacets: Partial<ExperimentPageSearchFacetsState>, options?: NavigateOptions) => {\n    const newParams = serializeFieldsToQueryString(partialFacets);\n    setParams((currentParams) => {\n      entries(newParams).forEach(([key, value]) => {\n        currentParams.set(key, value);\n      });\n      currentParams.delete(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW);\n      return currentParams;\n    }, options);\n  };\n};\n","import {\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport type { DatasetSummary, LIFECYCLE_FILTER, MODEL_VERSION_FILTER } from '../../../types';\n\n/**\n * Defines persistable model representing sort and filter values\n * used by runs table and controls\n */\nexport interface ExperimentPageSearchFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter: string;\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey: string;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc: boolean;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime: string;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter: LIFECYCLE_FILTER;\n\n  /**\n   * Datasets filter of runs to display\n   */\n  datasetsFilter: DatasetSummary[];\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter: MODEL_VERSION_FILTER;\n}\n\n/**\n * Defines default experiment page search facets state.\n */\nexport const createExperimentPageSearchFacetsState = (): ExperimentPageSearchFacetsState => ({\n  searchFilter: '',\n  orderByKey: DEFAULT_ORDER_BY_KEY,\n  orderByAsc: DEFAULT_ORDER_BY_ASC,\n  startTime: DEFAULT_START_TIME,\n  lifecycleFilter: DEFAULT_LIFECYCLE_FILTER,\n  datasetsFilter: [],\n  modelVersionFilter: DEFAULT_MODEL_VERSION_FILTER,\n});\n","import { useEffect, useMemo } from 'react';\nimport invariant from 'invariant';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport { ExperimentViewTraces } from '../../components/experiment-page/components/ExperimentViewTraces';\nimport { shouldEnableExperimentPageHeaderV2 } from '../../../common/utils/FeatureUtils';\nimport Routes from '../../routes';\n\nconst ExperimentTracesPage = () => {\n  const { experimentId } = useParams();\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const experimentIds = useMemo(() => [experimentId], [experimentId]);\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (experimentId && !shouldEnableExperimentPageHeaderV2()) {\n      navigate(Routes.getExperimentPageRoute(experimentId));\n    }\n  }, [experimentId, navigate]);\n\n  return <ExperimentViewTraces experimentIds={experimentIds} />;\n};\n\nexport default ExperimentTracesPage;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useClipboard = void 0;\nvar clipboard_copy_1 = __importDefault(require(\"clipboard-copy\"));\nvar react_1 = require(\"react\");\nvar useTimedToggle_1 = require(\"./useTimedToggle\");\nfunction isInputLike(node) {\n    return node && (node.nodeName === 'TEXTAREA' || node.nodeName === 'INPUT');\n}\nfunction useClipboard(options) {\n    if (options === void 0) { options = {}; }\n    var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];\n    var targetRef = react_1.useRef(null);\n    var optionsRef = react_1.useRef(options);\n    optionsRef.current = options;\n    function isSupported() {\n        return (!!navigator.clipboard ||\n            (typeof document.execCommand === 'function' &&\n                typeof document.queryCommandSupported === 'function' &&\n                document.queryCommandSupported('copy')));\n    }\n    var copyHandler = react_1.useCallback(function (text) {\n        var opts = optionsRef.current;\n        var target = targetRef.current;\n        function handleSuccess() {\n            if (opts.onSuccess) {\n                opts.onSuccess();\n            }\n            if (opts.copiedTimeout) {\n                toggleCopied(opts.copiedTimeout);\n            }\n            if (opts.selectOnCopy && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function handleError() {\n            if (opts.onError) {\n                opts.onError();\n            }\n            if (opts.selectOnError !== false && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function copy(value) {\n            clipboard_copy_1.default(value).then(handleSuccess).catch(handleError);\n        }\n        if (typeof text === 'string') {\n            copy(text);\n        }\n        else if (target) {\n            copy(target.value);\n        }\n    }, []);\n    return {\n        copied: copied,\n        copy: copyHandler,\n        isSupported: isSupported,\n        target: targetRef,\n    };\n}\nexports.useClipboard = useClipboard;\n"],"names":["flattenString","input","isArray","join","persistSearchStateFieldSerializers","searchFilter","deserializeLocalStorage","deserializeQueryString","orderByAsc","serializeQueryString","toString","datasetsFilter","inputs","inputsWithoutExperimentId","map","name","digest","context","btoaUtf8","JSON","stringify","parsedResult","parse","atobUtf8","Array","compareRunCharts","compareRunsMode","serializeLocalStorage","EXPERIMENT_PAGE_QUERY_PARAM_KEYS","EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW","useExperimentPageSearchFacets","queryParams","useSearchParams","pickedValues","useMemo","pick","Object","fromEntries","entries","isPreview","get","orderByKey","startTime","lifecycleFilter","modelVersionFilter","areValuesEmpty","keys","length","experimentId","useParams","queryParamsExperimentIds","experimentIds","comparedExperimentIds","getComparedExperimentIds","deserializedFields","resultObject","field","_persistSearchStateFi2","deserializeFn","deserializeFieldsFromQueryString","omitBy","isNil","assign","createExperimentPageSearchFacetsState","useUpdateExperimentPageSearchFacets","setParams","partialFacets","options","newParams","_persistSearchStateFi","serializeFn","serializeFieldsToQueryString","currentParams","forEach","key","value","set","delete","DEFAULT_ORDER_BY_KEY","DEFAULT_ORDER_BY_ASC","DEFAULT_START_TIME","DEFAULT_LIFECYCLE_FILTER","DEFAULT_MODEL_VERSION_FILTER","ExperimentTracesPage","invariant","navigate","useNavigate","useEffect","shouldEnableExperimentPageHeaderV2","Routes","getExperimentPageRoute","_jsx","ExperimentViewTraces","__importDefault","this","mod","__esModule","defineProperty","exports","useClipboard","clipboard_copy_1","require","react_1","useTimedToggle_1","isInputLike","node","nodeName","_a","useTimedToggle","copied","toggleCopied","targetRef","useRef","optionsRef","current","copy","useCallback","text","opts","target","handleSuccess","onSuccess","copiedTimeout","selectOnCopy","select","handleError","onError","selectOnError","default","then","catch","isSupported","navigator","clipboard","document","execCommand","queryCommandSupported"],"sourceRoot":""}