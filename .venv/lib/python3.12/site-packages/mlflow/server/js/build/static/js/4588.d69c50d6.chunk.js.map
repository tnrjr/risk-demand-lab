{"version":3,"file":"static/js/4588.d69c50d6.chunk.js","mappings":"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","sources":["experiment-tracking/components/EntitySearchAutoComplete.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentViewLocalStore.ts","shared/web-shared/hooks/useResizableMaxWidth.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableResizer.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageMode.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageAutoComplete.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageDatasetDropdown.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageOrderBySelector.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageGroupBySelector.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageControls.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelsChartsData.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelsChartsUIState.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListCharts.tsx","common/hooks/useMemoDeep.ts","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelAllMetricsByDataset.tsx","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelListPage.tsx","experiment-tracking/hooks/logged-models/useRelatedRunsDataForLoggedModels.tsx","common/hooks/useArrayMemo.ts","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelPageWrapper.tsx","experiment-tracking/components/EntitySearchAutoComplete.utils.tsx"],"sourcesContent":["import {\n  AutoComplete,\n  Button,\n  CloseIcon,\n  InfoFillIcon,\n  InfoSmallIcon,\n  Input,\n  LegacyTooltip,\n  SearchIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport {\n  EntitySearchAutoCompleteEntity,\n  EntitySearchAutoCompleteOptionGroup,\n  getEntitySearchEntitiesAndIndices,\n  getFilteredOptionsFromEntityName,\n} from './EntitySearchAutoComplete.utils';\nimport { shouldEnableMinMaxMetricsOnExperimentPage } from '../../common/utils/FeatureUtils';\nimport {\n  createQuickRegexpSearchFilter,\n  detectSqlSyntaxInSearchQuery,\n} from './experiment-page/utils/experimentPage.fetch-utils';\nimport { FormattedMessage } from 'react-intl';\nimport { isEqual } from 'lodash';\nimport { useExperimentViewLocalStore } from './experiment-page/hooks/useExperimentViewLocalStore';\n\nconst TOOLTIP_COOKIE_KEY = 'tooltipLastPopup';\nconst WEEK_IN_SECONDS = 604800;\n\nexport type EntitySearchAutoCompleteCompleteProps = {\n  baseOptions: EntitySearchAutoCompleteOptionGroup[];\n  searchFilter: string;\n  onSearchFilterChange: (newValue: string) => void;\n  onClear: () => void;\n  requestError?: ErrorWrapper | Error | null;\n  tooltipContent?: React.ReactNode;\n  placeholder?: string;\n  useQuickFilter?: boolean;\n  defaultActiveFirstOption?: boolean;\n  className?: string;\n};\n\n/**\n * Autocomplete component that provides suggestions for MLflow search entity names.\n */\nexport const EntitySearchAutoComplete = ({\n  baseOptions,\n  searchFilter,\n  requestError = null,\n  onSearchFilterChange,\n  onClear,\n  tooltipContent,\n  placeholder,\n  useQuickFilter,\n  defaultActiveFirstOption = true,\n  className,\n}: EntitySearchAutoCompleteCompleteProps) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const intl = useIntl();\n\n  const [text, setText] = useState<string>('');\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState<boolean | undefined>(undefined);\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n  // Determines whether the text was changed by making a selection in the autocomplete\n  // dialog, as opposed to by typing.\n  const [lastSetBySelection, setLastSetBySelection] = useState(false);\n\n  // How many suggestions should be shown per entity group before the group is ellipsized.\n  const [suggestionLimits, setSuggestionLimits] = useState({\n    Metrics: 10,\n    Parameters: 10,\n    Tags: 10,\n  });\n  // List of entities parsed from `text`.\n  const currentEntitiesRef = useRef<EntitySearchAutoCompleteEntity[]>([]);\n  const [entityBeingEdited, setEntityBeingEdited] = useState<EntitySearchAutoCompleteEntity | undefined>(undefined);\n\n  // Each time we're setting search filter externally, update it here as well\n  useEffect(() => {\n    setText(searchFilter);\n  }, [searchFilter]);\n\n  useEffect(() => {\n    const previousEntities = currentEntitiesRef.current;\n    const newEntities = getEntitySearchEntitiesAndIndices(text);\n    currentEntitiesRef.current = newEntities;\n\n    if (lastSetBySelection) {\n      setLastSetBySelection(false);\n      return;\n    }\n    const currentEntitiesNames = newEntities.map((e) => e.name);\n    const previousEntitiesNames = previousEntities.map((e) => e.name);\n    if (!isEqual(currentEntitiesNames, previousEntitiesNames) && newEntities.length >= previousEntities.length) {\n      let i = 0;\n      while (i < newEntities.length) {\n        if (i >= previousEntities.length || newEntities[i].name.trim() !== previousEntities[i].name.trim()) {\n          setAutocompleteEnabled(true);\n          setEntityBeingEdited(newEntities[i]);\n          return;\n        }\n        i++;\n      }\n    }\n    // If here, no entity is being edited\n    setAutocompleteEnabled(false);\n    // currentEntitiesRef is not used anywhere else and state setters are safe to\n    // omit from hook dependencies as per react docs\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const filteredOptions = useMemo(() => {\n    if (!entityBeingEdited) {\n      return [];\n    }\n    return getFilteredOptionsFromEntityName(baseOptions, entityBeingEdited, suggestionLimits);\n  }, [baseOptions, entityBeingEdited, suggestionLimits]);\n\n  /**\n   * Called when an option is picked from the autocomplete dropdown, either by hitting enter\n   * when selected, or clicking on it\n   * @param value\n   */\n  const onSelect = useCallback(\n    (value: string, option: any) => {\n      if (!entityBeingEdited) {\n        return;\n      }\n      if (value.startsWith('...')) {\n        // Keep the dialog open as this is not a real selection\n        setAutocompleteEnabled(true);\n        const groupName = option.value.split('_')[1];\n        setSuggestionLimits((prevSuggestionLimits) => ({\n          ...prevSuggestionLimits,\n          [groupName]: (prevSuggestionLimits as any)[groupName] + 10,\n        }));\n      } else {\n        const prefix = text.substring(0, entityBeingEdited.startIndex);\n        const suffix = text.substring(entityBeingEdited.endIndex);\n        setText(prefix + value + ' ' + suffix);\n        setLastSetBySelection(true);\n        setAutocompleteEnabled(false);\n      }\n    },\n    [text, setText, entityBeingEdited, setAutocompleteEnabled],\n  );\n\n  const localStorageInstance = useExperimentViewLocalStore(TOOLTIP_COOKIE_KEY);\n\n  const [showTooltipOnError, setShowTooltipOnError] = useState(() => {\n    const currentTimeSecs = Math.floor(Date.now() / 1000);\n    const storedItem = localStorageInstance.getItem(TOOLTIP_COOKIE_KEY);\n    // Show tooltip again if it was last shown 1 week ago or older\n    return !storedItem || parseInt(storedItem, 10) < currentTimeSecs - WEEK_IN_SECONDS;\n  });\n  const tooltipIcon = React.useRef<HTMLButtonElement>(null);\n\n  const quickRegexpFilter = useMemo(() => {\n    if (useQuickFilter && text.length > 0 && !detectSqlSyntaxInSearchQuery(text)) {\n      return createQuickRegexpSearchFilter(text);\n    }\n    return undefined;\n  }, [text, useQuickFilter]);\n\n  // If requestError has changed and there is an error, pop up the tooltip\n  useEffect(() => {\n    if (requestError && showTooltipOnError) {\n      const currentTimeSecs = Math.floor(Date.now() / 1000);\n      localStorageInstance.setItem(TOOLTIP_COOKIE_KEY, currentTimeSecs);\n      setShowTooltipOnError(false);\n      tooltipIcon.current?.click();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [requestError]);\n\n  const noMatches = filteredOptions.flatMap((o) => o.options).length === 0;\n  const open = autocompleteEnabled && focused && !noMatches;\n\n  // Callback fired when key is pressed on the input\n  const triggerSearch: React.KeyboardEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      // Get the class name for the active item in the dropdown\n      const activeItemClass = getPrefixedClassName('select-item-option-active');\n      const dropdownContainsActiveItem = Boolean(dropdownRef.current?.querySelector(`.${activeItemClass}`));\n\n      if (e.key === 'Enter') {\n        // If the autocomplete dialog is open, close it\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n        // If the autocomplete dialog is closed or user didn't select any item, trigger search\n        if (!open || !dropdownContainsActiveItem) {\n          onSearchFilterChange(text);\n        }\n      }\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n      }\n    },\n    [open, text, onSearchFilterChange, getPrefixedClassName],\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        width: 430,\n        [theme.responsive.mediaQueries.xs]: {\n          width: 'auto',\n        },\n      }}\n      className={className}\n    >\n      <AutoComplete\n        dropdownMatchSelectWidth={560}\n        css={{\n          width: 560,\n          [theme.responsive.mediaQueries.xs]: {\n            width: 'auto',\n          },\n        }}\n        defaultOpen={false}\n        defaultActiveFirstOption={defaultActiveFirstOption && !useQuickFilter}\n        open={open}\n        options={filteredOptions}\n        onSelect={onSelect}\n        value={text}\n        data-testid=\"runs-search-autocomplete\"\n        dropdownRender={(menu) => (\n          <div\n            css={{\n              '.du-bois-light-select-item-option-active:not(.du-bois-light-select-item-option-disabled)': {\n                // TODO: ask the design team about the color existing in the palette\n                backgroundColor: '#e6f1f5',\n              },\n            }}\n            ref={dropdownRef}\n          >\n            {menu}\n          </div>\n        )}\n      >\n        <Input\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_236\"\n          value={text}\n          prefix={\n            <SearchIcon\n              css={{\n                svg: {\n                  width: theme.general.iconFontSize,\n                  height: theme.general.iconFontSize,\n                  color: theme.colors.textSecondary,\n                },\n              }}\n            />\n          }\n          onKeyDown={triggerSearch}\n          onClick={onFocus}\n          onBlur={onBlur}\n          onChange={(e) => setText(e.target.value)}\n          placeholder={placeholder}\n          data-testid=\"search-box\"\n          suffix={\n            <div css={{ display: 'flex', gap: 4, alignItems: 'center' }}>\n              {text && (\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_212\"\n                  onClick={() => {\n                    onClear();\n                    setText('');\n                  }}\n                  type=\"link\"\n                  data-testid=\"clear-button\"\n                >\n                  <CloseIcon />\n                </Button>\n              )}\n              {quickRegexpFilter ? (\n                <Tooltip\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_310\"\n                  content={\n                    <FormattedMessage\n                      defaultMessage=\"Using regular expression quick filter. The following query will be used: {filterSample}\"\n                      description=\"Experiment page > control bar > search filter > a label displayed when user has entered a simple query that will be automatically transformed into RLIKE SQL query before being sent to the API\"\n                      values={{\n                        filterSample: (\n                          <div>\n                            <code>{quickRegexpFilter}</code>\n                          </div>\n                        ),\n                      }}\n                    />\n                  }\n                  delayDuration={0}\n                >\n                  <InfoFillIcon\n                    aria-label={intl.formatMessage(\n                      {\n                        defaultMessage:\n                          'Using regular expression quick filter. The following query will be used: {filterSample}',\n                        description:\n                          'Experiment page > control bar > search filter > a label displayed when user has entered a simple query that will be automatically transformed into RLIKE SQL query before being sent to the API',\n                      },\n                      {\n                        filterSample: quickRegexpFilter,\n                      },\n                    )}\n                    css={{\n                      svg: {\n                        width: theme.general.iconFontSize,\n                        height: theme.general.iconFontSize,\n                        color: theme.colors.actionPrimaryBackgroundDefault,\n                      },\n                    }}\n                  />\n                </Tooltip>\n              ) : (\n                <LegacyTooltip\n                  title={tooltipContent}\n                  placement=\"right\"\n                  dangerouslySetAntdProps={{\n                    overlayInnerStyle: { width: '150%' },\n                    trigger: ['focus', 'click'],\n                  }}\n                >\n                  <Button\n                    size=\"small\"\n                    ref={tooltipIcon}\n                    componentId=\"mlflow.experiment_page.search_filter.tooltip\"\n                    type=\"link\"\n                    css={{ marginLeft: -theme.spacing.xs, marginRight: -theme.spacing.xs }}\n                    icon={\n                      <InfoSmallIcon\n                        css={{\n                          svg: {\n                            width: theme.general.iconFontSize,\n                            height: theme.general.iconFontSize,\n                            color: theme.colors.textSecondary,\n                          },\n                        }}\n                      />\n                    }\n                  />\n                </LegacyTooltip>\n              )}\n            </div>\n          }\n        />\n      </AutoComplete>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\n/**\n * This hook returns a memoized version of persistable store namespaced for the ExperimentView.\n * It can serve as a store for persisting state for a particular experiment - in this case,\n * the experiment id should be provided as a `identifier` parameter. It can also serve as a store for some\n * general purpose - e.g. you can provide \"onboarding\" as a identifier to get a store specific\n * for the onboarding section of the experiment view.\n *\n * @param storeIdentifier a unique identifier of created store - can be an experiment id or a general purpose name\n */\nexport const useExperimentViewLocalStore = (storeIdentifier: string) =>\n  useMemo(() => LocalStorageUtils.getStoreForComponent('ExperimentView', storeIdentifier), [storeIdentifier]);\n","import { MutableRefObject, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function useResizableMaxWidth(minWidth: number) {\n  const ref: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null);\n  const [containerWidth, setContainerWidth] = useState<number | undefined>(undefined);\n\n  const updateWidth = useCallback(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current.clientWidth);\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    updateWidth();\n    window.addEventListener('resize', updateWidth);\n    return () => window.removeEventListener('resize', updateWidth);\n  }, [updateWidth]);\n\n  const refCallback = useCallback(\n    (node: HTMLDivElement) => {\n      ref.current = node;\n      updateWidth();\n    },\n    [updateWidth],\n  );\n\n  const resizableMaxWidth = containerWidth === undefined ? undefined : containerWidth - minWidth;\n  return { resizableMaxWidth, ref: refCallback };\n}\n","import { Button, ChevronLeftIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { Global } from '@emotion/react';\n\nconst RESIZE_BAR_WIDTH = 3;\n\n/**\n * A component wrapping experiment runs table and providing a resizer\n * to adjust its width when displayed in a split view.\n */\nexport const ExperimentViewRunsTableResizer = ({\n  runListHidden,\n  width,\n  onResize,\n  children,\n  onHiddenChange,\n  maxWidth,\n}: React.PropsWithChildren<{\n  runListHidden: boolean;\n  width: number;\n  onResize: React.Dispatch<React.SetStateAction<number>>;\n  onHiddenChange?: (isHidden: boolean) => void;\n  maxWidth: number | undefined;\n}>) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n  const [dragging, setDragging] = useState(false);\n\n  return (\n    <>\n      <ResizableBox\n        css={{ display: 'flex', position: 'relative' }}\n        style={{ flex: `0 0 ${runListHidden ? 0 : width}px` }}\n        width={width}\n        axis=\"x\"\n        resizeHandles={['e']}\n        minConstraints={[250, 0]}\n        maxConstraints={maxWidth === undefined ? undefined : [maxWidth, 0]}\n        handle={\n          <ExperimentViewRunsTableResizerHandle\n            runListHidden={runListHidden}\n            updateRunListHidden={(value) => {\n              if (onHiddenChange) {\n                onHiddenChange(value);\n                return;\n              }\n              updateUIState((state) => ({ ...state, runListHidden: value }));\n            }}\n          />\n        }\n        onResize={(event, { size }) => {\n          if (runListHidden) {\n            return;\n          }\n          onResize(size.width);\n        }}\n        onResizeStart={() => !runListHidden && setDragging(true)}\n        onResizeStop={() => setDragging(false)}\n      >\n        {children}\n      </ResizableBox>\n      {dragging && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ExperimentViewRunsTableResizerHandle = React.forwardRef<\n  HTMLDivElement,\n  {\n    updateRunListHidden: (newValue: boolean) => void;\n    runListHidden: boolean;\n  }\n>(({ updateRunListHidden, runListHidden, ...props }, ref) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      css={{\n        transition: 'opacity 0.2s',\n        width: 0,\n        overflow: 'visible',\n        height: '100%',\n        position: 'relative',\n        zIndex: 10,\n        display: 'flex',\n        opacity: runListHidden ? 1 : 0,\n        '&:hover': {\n          opacity: 1,\n          '.bar': { opacity: 1 },\n          '.button': {\n            border: `2px solid ${theme.colors.actionDefaultBorderHover}`,\n          },\n        },\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          // For the resizing area, use the icon size which is\n          // the same as \"collapse\" button\n          left: -theme.general.iconSize / 2,\n          width: theme.general.iconSize,\n          cursor: runListHidden ? undefined : 'ew-resize',\n          height: '100%',\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <div\n          className=\"button\"\n          css={{\n            top: '50%',\n            transition: 'border-color 0.2s',\n            position: 'absolute',\n            width: theme.general.iconSize,\n            height: theme.general.iconSize,\n            backgroundColor: theme.colors.backgroundPrimary,\n            borderRadius: theme.general.iconSize,\n            overflow: 'hidden',\n            border: `1px solid ${theme.colors.border}`,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 11,\n          }}\n        >\n          <Button\n            componentId=\"mlflow.experiment_page.table_resizer.collapse\"\n            onClick={() => updateRunListHidden(!runListHidden)}\n            icon={runListHidden ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            size=\"small\"\n          />\n        </div>\n      </div>\n      <div\n        className=\"bar\"\n        css={{\n          position: 'absolute',\n          opacity: 0,\n          left: -RESIZE_BAR_WIDTH / 2,\n          width: RESIZE_BAR_WIDTH,\n          height: '100%',\n          top: 0,\n          bottom: 0,\n          backgroundColor: theme.colors.actionPrimaryBackgroundDefault,\n        }}\n      />\n    </div>\n  );\n});\n","import { coerceToEnum } from '@databricks/web-shared/utils';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nexport enum ExperimentLoggedModelListPageMode {\n  TABLE = 'TABLE',\n  CHART = 'CHART',\n}\n\nconst VIEW_MODE_QUERY_PARAM = 'viewMode';\n\nexport const useExperimentLoggedModelListPageMode = () => {\n  const [params, setParams] = useSearchParams();\n  const viewMode = coerceToEnum(\n    ExperimentLoggedModelListPageMode,\n    params.get(VIEW_MODE_QUERY_PARAM),\n    ExperimentLoggedModelListPageMode.TABLE,\n  );\n  const setViewMode = (mode: ExperimentLoggedModelListPageMode) => {\n    setParams({ [VIEW_MODE_QUERY_PARAM]: mode });\n  };\n  return { viewMode, setViewMode } as const;\n};\n","import { FormattedMessage } from 'react-intl';\nimport { EntitySearchAutoComplete } from '../EntitySearchAutoComplete';\nimport { LoggedModelProto } from '../../types';\nimport { useMemo } from 'react';\nimport {\n  EntitySearchAutoCompleteEntityNameGroup,\n  getEntitySearchOptionsFromEntityNames,\n} from '../EntitySearchAutoComplete.utils';\nimport { isUserFacingTag } from '../../../common/utils/TagUtils';\n\nconst getEntityNamesFromLoggedModelsData = (\n  loggedModels: LoggedModelProto[],\n): EntitySearchAutoCompleteEntityNameGroup => {\n  const metricNames = new Set<string>();\n  const paramNames = new Set<string>();\n  const tagNames = new Set<string>();\n\n  for (const loggedModel of loggedModels) {\n    loggedModel.data?.metrics?.forEach((metric) => metric.key && metricNames.add(metric.key));\n    loggedModel.data?.params?.forEach((param) => param.key && paramNames.add(param.key));\n    loggedModel.info?.tags?.forEach((tag) => tag.key && tagNames.add(tag.key));\n  }\n\n  return {\n    metricNames: Array.from(metricNames),\n    paramNames: Array.from(paramNames),\n    tagNames: Array.from(tagNames).filter(isUserFacingTag),\n  };\n};\n\nconst VALID_FILTER_ATTRIBUTES = [\n  'model_id',\n  'model_name',\n  'status',\n  'artifact_uri',\n  'creation_time',\n  'last_updated_time',\n];\n\nexport const ExperimentLoggedModelListPageAutoComplete = ({\n  searchQuery,\n  onChangeSearchQuery,\n  loggedModelsData,\n}: {\n  searchQuery?: string;\n  onChangeSearchQuery: (searchFilter: string) => void;\n  loggedModelsData: LoggedModelProto[];\n}) => {\n  const options = useMemo(() => {\n    const entityNames = getEntityNamesFromLoggedModelsData(loggedModelsData);\n    const validAttributeOptions = VALID_FILTER_ATTRIBUTES.map((attribute) => ({\n      value: `attributes.${attribute}`,\n    }));\n    return getEntitySearchOptionsFromEntityNames(entityNames, validAttributeOptions);\n  }, [loggedModelsData]);\n\n  return (\n    <EntitySearchAutoComplete\n      searchFilter={searchQuery ?? ''}\n      onSearchFilterChange={onChangeSearchQuery}\n      defaultActiveFirstOption={false}\n      baseOptions={options}\n      onClear={() => onChangeSearchQuery('')}\n      placeholder=\"metrics.rmse >= 0.8\"\n      tooltipContent={\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Search logged models using a simplified version of the SQL {whereBold} clause.\"\n            description=\"Tooltip string to explain how to search logged models from the listing page\"\n            values={{ whereBold: <b>WHERE</b> }}\n          />{' '}\n          <br />\n          <FormattedMessage\n            defaultMessage=\"Examples:\"\n            description=\"Text header for examples of logged models search syntax\"\n          />\n          <br />\n          {'• metrics.rmse >= 0.8'}\n          <br />\n          {'• metrics.`f1 score` < 1'}\n          <br />\n          • params.type = 'tree'\n          <br />\n          • tags.my_tag = 'foobar'\n          <br />\n          • attributes.name = 'elasticnet'\n          <br />\n        </div>\n      }\n    />\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxCountBadge,\n  DialogComboboxCustomButtonTriggerWrapper,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  TableIcon,\n  useDesignSystemTheme,\n  XCircleFillIcon,\n} from '@databricks/design-system';\nimport { useMemo, useRef } from 'react';\nimport type { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { useIntl } from 'react-intl';\n\nconst getDatasetHash = (dataset: LoggedModelMetricDataset) =>\n  JSON.stringify([dataset.dataset_name, dataset.dataset_digest]);\n\nexport const ExperimentLoggedModelListPageDatasetDropdown = ({\n  loggedModelsData,\n  selectedFilterDatasets,\n  onToggleDataset,\n  onClearSelectedDatasets,\n}: {\n  loggedModelsData: LoggedModelProto[];\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  onToggleDataset?: (dataset: LoggedModelMetricDataset) => void;\n  onClearSelectedDatasets?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const cachedDatasets = useRef<Map<string, { hash: string } & LoggedModelMetricDataset>>(new Map());\n\n  // Get all datasets with their hashes, also store them in an aggregated map.\n  // The hash is used as a unique key and also being fed to DialogCombobox since it exclusively uses string values.\n  // The map is used to aggregate all datasets encountered in the logged models data during the session.\n  const allDatasets = useMemo(() => {\n    for (const model of loggedModelsData) {\n      for (const metric of model.data?.metrics || []) {\n        if (!metric.dataset_name || !metric.dataset_digest) {\n          continue;\n        }\n        const datasetHash = getDatasetHash(metric);\n        if (!cachedDatasets.current.has(datasetHash)) {\n          // We're purposely using mutable hashmap in the memo hook\n          cachedDatasets.current.set(datasetHash, {\n            hash: datasetHash,\n            dataset_name: metric.dataset_name,\n            dataset_digest: metric.dataset_digest,\n          });\n        }\n      }\n    }\n    return Array.from(cachedDatasets.current.values());\n  }, [loggedModelsData]);\n\n  // Serialize the selected datasets to a string format for the DialogCombobox.\n  const serializedSelectedDatasets = useMemo(\n    () => selectedFilterDatasets?.map(getDatasetHash) || [],\n    [selectedFilterDatasets],\n  );\n\n  return (\n    <DialogCombobox\n      componentId=\"mlflow.logged_model.list_page.datasets_filter\"\n      id=\"mlflow.logged_model.list_page.datasets_filter\"\n      value={serializedSelectedDatasets}\n      label={intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Label for the datasets filter dropdown in the logged model list page',\n      })}\n      stayOpenOnSelection\n    >\n      <DialogComboboxCustomButtonTriggerWrapper>\n        <Button\n          endIcon={<ChevronDownIcon />}\n          componentId=\"mlflow.logged_model.list_page.datasets_filter.toggle\"\n          icon={<TableIcon />}\n        >\n          Datasets\n          {serializedSelectedDatasets.length > 0 ? (\n            <>\n              <DialogComboboxCountBadge css={{ marginLeft: 4 }}>\n                {serializedSelectedDatasets.length}\n              </DialogComboboxCountBadge>\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                role=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  e.preventDefault();\n                  onClearSelectedDatasets?.();\n                }}\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.xs,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n              />\n            </>\n          ) : null}\n        </Button>\n      </DialogComboboxCustomButtonTriggerWrapper>\n      <DialogComboboxContent>\n        <DialogComboboxOptionList>\n          {allDatasets.map(({ hash: serializedDataset, dataset_digest, dataset_name }) => (\n            <DialogComboboxOptionListCheckboxItem\n              value={serializedDataset}\n              checked={serializedSelectedDatasets.includes(serializedDataset)}\n              key={serializedDataset}\n              onChange={() => onToggleDataset?.({ dataset_digest, dataset_name })}\n            >\n              {dataset_name} (#{dataset_digest})\n            </DialogComboboxOptionListCheckboxItem>\n          ))}\n        </DialogComboboxOptionList>\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  Button,\n  DropdownMenu,\n  Input,\n  SearchIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\n\nimport { defineMessage, FormattedMessage, IntlShape, MessageDescriptor, useIntl } from 'react-intl';\nimport { ToggleIconButton } from '../../../common/components/ToggleIconButton';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX,\n  parseLoggedModelMetricOrderByColumnId,\n} from './hooks/useExperimentLoggedModelListPageTableColumns';\n\ninterface BasicColumnDef {\n  colId?: string;\n  groupId?: string;\n  headerName?: string;\n  children?: BasicColumnDef[];\n}\n\nconst getSortableColumnLabel = (colId: string | ExperimentLoggedModelListPageKnownColumns, intl: IntlShape) => {\n  const labels: Partial<Record<ExperimentLoggedModelListPageKnownColumns | string, MessageDescriptor>> = {\n    [ExperimentLoggedModelListPageKnownColumns.CreationTime]: defineMessage({\n      defaultMessage: 'Creation time',\n      description: 'Label for the creation time column in the logged model list page',\n    }),\n  };\n\n  const descriptor = labels[colId];\n\n  if (descriptor) {\n    return intl.formatMessage(descriptor);\n  }\n\n  const parsedColumn = parseLoggedModelMetricOrderByColumnId(colId);\n\n  if (parsedColumn) {\n    return parsedColumn.metricKey;\n  }\n\n  return colId;\n};\n\nexport const ExperimentLoggedModelListPageOrderBySelector = ({\n  orderByColumn,\n  orderByAsc,\n  onChangeOrderBy,\n  columnDefs = [],\n}: {\n  orderByColumn: string;\n  orderByAsc?: boolean;\n  onChangeOrderBy: (orderByColumn: string, orderByAsc: boolean) => void;\n  columnDefs: BasicColumnDef[] | undefined;\n}) => {\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n  const { theme } = useDesignSystemTheme();\n\n  const groupedOrderByOptions = useMemo<BasicColumnDef[]>(() => {\n    const lowerCaseFilter = filter.toLowerCase();\n    const attributeColumnGroup = {\n      groupId: 'attributes',\n      headerName: intl.formatMessage({\n        defaultMessage: 'Attributes',\n        description: 'Label for the attributes column group in the logged model column selector',\n      }),\n      children: [\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.CreationTime,\n          headerName: getSortableColumnLabel(ExperimentLoggedModelListPageKnownColumns.CreationTime, intl),\n        },\n      ].filter(({ headerName }) => headerName?.toLowerCase().includes(lowerCaseFilter)),\n    };\n\n    // Next, get all the dataset-grouped metric column groups\n    const metricColumnGroups = columnDefs\n      .filter((col) => col.groupId?.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX))\n      .map((col) => ({\n        ...col,\n        children: col.children?.filter(({ colId }) => colId?.includes(lowerCaseFilter)),\n        headerName: col.headerName\n          ? `Metrics (${col.headerName})`\n          : intl.formatMessage({\n              defaultMessage: 'Metrics',\n              description: 'Label for the ungrouped metrics column group in the logged model column selector',\n            }),\n      }));\n\n    const sortableColumnGroups = [attributeColumnGroup, ...metricColumnGroups].filter(\n      (col) => col.children && col.children.length > 0,\n    );\n\n    // If the currently used sorting field is not found, this probably means that\n    // user has filtered out results containing this column. Let's add it to the list\n    // of sortable columns so that user won't be confused.\n    if (\n      !sortableColumnGroups.some((group) => group.children && group.children.some((col) => col.colId === orderByColumn))\n    ) {\n      const { metricKey } = parseLoggedModelMetricOrderByColumnId(orderByColumn);\n\n      if (metricKey) {\n        sortableColumnGroups.push({\n          groupId: 'current',\n          headerName: intl.formatMessage({\n            defaultMessage: 'Currently sorted by',\n            description: 'Label for the custom column group in the logged model column selector',\n          }),\n          children: [{ colId: orderByColumn, headerName: metricKey }],\n        });\n      }\n    }\n    return sortableColumnGroups;\n  }, [columnDefs, intl, filter, orderByColumn]);\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"mlflow.logged_model.list.order_by\"\n          icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Sort: {sortBy}\"\n            description=\"Label for the filter button in the logged model list page. sortBy is the name of the column by which the table is currently sorted.\"\n            values={{ sortBy: getSortableColumnLabel(orderByColumn, intl) }}\n          />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content css={{ maxHeight: 300, overflow: 'auto' }}>\n        <div\n          css={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px ${theme.spacing.sm}px`,\n            width: '100%',\n            display: 'flex',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <Input\n            componentId=\"mlflow.logged_model.list.order_by.filter\"\n            prefix={<SearchIcon />}\n            value={filter}\n            type=\"search\"\n            onChange={(e) => setFilter(e.target.value)}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search',\n              description: 'Placeholder for the search input in the logged model list page sort column selector',\n            })}\n            autoFocus\n            allowClear\n          />\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.xs,\n            }}\n          >\n            <ToggleIconButton\n              pressed={!orderByAsc}\n              icon={<ArrowDownIcon />}\n              componentId=\"mlflow.logged_model.list.order_by.button_desc\"\n              onClick={() => onChangeOrderBy(orderByColumn, false)}\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Sort descending',\n                description: 'Label for the sort descending button in the logged model list page',\n              })}\n            />\n            <ToggleIconButton\n              pressed={orderByAsc}\n              icon={<ArrowUpIcon />}\n              componentId=\"mlflow.logged_model.list.order_by.button_asc\"\n              onClick={() => onChangeOrderBy(orderByColumn, true)}\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Sort ascending',\n                description: 'Label for the sort ascending button in the logged model list page',\n              })}\n            />\n          </div>\n        </div>\n\n        {groupedOrderByOptions.map(({ headerName, children, groupId }) => (\n          <DropdownMenu.Group key={groupId} aria-label={headerName}>\n            <DropdownMenu.Label>{headerName}</DropdownMenu.Label>\n            {children?.map(({ headerName: columnHeaderName, colId }) => (\n              <DropdownMenu.CheckboxItem\n                key={colId}\n                componentId=\"mlflow.logged_model.list.order_by.column_toggle\"\n                checked={orderByColumn === colId}\n                onClick={() => {\n                  if (!colId) {\n                    return;\n                  }\n                  onChangeOrderBy(colId, Boolean(orderByAsc));\n                }}\n              >\n                <DropdownMenu.ItemIndicator />\n                {columnHeaderName}\n              </DropdownMenu.CheckboxItem>\n            ))}\n          </DropdownMenu.Group>\n        ))}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { Button, ChevronDownIcon, DropdownMenu, ListBorderIcon } from '@databricks/design-system';\nimport { defineMessage, FormattedMessage, type MessageDescriptor } from 'react-intl';\n\nimport { LoggedModelsTableGroupByMode } from './ExperimentLoggedModelListPageTable.utils';\n\nconst GroupByLabels: Record<LoggedModelsTableGroupByMode, MessageDescriptor> = {\n  [LoggedModelsTableGroupByMode.RUNS]: defineMessage({\n    defaultMessage: 'Source run',\n    description: 'Label for the group by runs option in the logged model list page',\n  }),\n};\n\nexport const ExperimentLoggedModelListPageGroupBySelector = ({\n  groupBy,\n  onChangeGroupBy,\n}: {\n  groupBy: LoggedModelsTableGroupByMode | undefined;\n  onChangeGroupBy?: (groupBy: LoggedModelsTableGroupByMode | undefined) => void;\n}) => {\n  const currentSelectedLabel = groupBy ? GroupByLabels[groupBy] : null;\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button componentId=\"mlflow.logged_model.list.group_by\" icon={<ListBorderIcon />} endIcon={<ChevronDownIcon />}>\n          {currentSelectedLabel ? (\n            <FormattedMessage\n              defaultMessage=\"Group by: {currentModeSelected}\"\n              description=\"Label for the grouping selector button in the logged model list page when groupin mode is selected\"\n              values={{ currentModeSelected: <FormattedMessage {...currentSelectedLabel} /> }}\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"Group by\"\n              description=\"Label for the grouping selector button in the logged model list page when no grouping is selected\"\n            />\n          )}\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content>\n        <DropdownMenu.CheckboxItem\n          checked={!groupBy}\n          componentId=\"mlflow.logged_model.list.group_by.none\"\n          onClick={() => onChangeGroupBy?.(undefined)}\n        >\n          <DropdownMenu.ItemIndicator />\n          <FormattedMessage\n            defaultMessage=\"None\"\n            description=\"Label for the button disabling grouping in the logged model list page\"\n          />\n        </DropdownMenu.CheckboxItem>\n        <DropdownMenu.CheckboxItem\n          checked={groupBy === LoggedModelsTableGroupByMode.RUNS}\n          componentId=\"mlflow.logged_model.list.group_by.runs\"\n          onClick={() => onChangeGroupBy?.(LoggedModelsTableGroupByMode.RUNS)}\n        >\n          <DropdownMenu.ItemIndicator />\n          <FormattedMessage {...GroupByLabels[LoggedModelsTableGroupByMode.RUNS]} />\n        </DropdownMenu.CheckboxItem>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import {\n  Button,\n  ChartLineIcon,\n  Checkbox,\n  ListIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { FormattedMessage } from 'react-intl';\nimport type { ColDef, ColGroupDef } from '@ag-grid-community/core';\nimport { ExperimentLoggedModelListPageColumnSelector } from './ExperimentLoggedModelListPageColumnSelector';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { ExperimentLoggedModelListPageMode } from './hooks/useExperimentLoggedModelListPageMode';\nimport { ExperimentLoggedModelListPageAutoComplete } from './ExperimentLoggedModelListPageAutoComplete';\nimport { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelListPageDatasetDropdown } from './ExperimentLoggedModelListPageDatasetDropdown';\nimport { ExperimentLoggedModelListPageOrderBySelector } from './ExperimentLoggedModelListPageOrderBySelector';\nimport { LoggedModelsTableGroupByMode } from './ExperimentLoggedModelListPageTable.utils';\nimport { ExperimentLoggedModelListPageGroupBySelector } from './ExperimentLoggedModelListPageGroupBySelector';\nimport { shouldEnableLoggedModelsGrouping } from '../../../common/utils/FeatureUtils';\n\nexport const ExperimentLoggedModelListPageControls = ({\n  orderByColumn,\n  orderByAsc,\n  sortingAndFilteringEnabled,\n  onChangeOrderBy,\n  onUpdateColumns,\n  columnDefs,\n  columnVisibility = {},\n  viewMode,\n  setViewMode,\n  searchQuery = '',\n  onChangeSearchQuery,\n  loggedModelsData,\n  selectedFilterDatasets,\n  onToggleDataset,\n  onClearSelectedDatasets,\n  groupBy,\n  onChangeGroupBy,\n}: {\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  groupBy?: LoggedModelsTableGroupByMode;\n  onChangeGroupBy?: (groupBy: LoggedModelsTableGroupByMode | undefined) => void;\n  sortingAndFilteringEnabled?: boolean;\n  onChangeOrderBy: (orderByColumn: string, orderByAsc: boolean) => void;\n  onUpdateColumns: (columnVisibility: Record<string, boolean>) => void;\n  columnDefs?: (ColDef | ColGroupDef)[];\n  columnVisibility?: Record<string, boolean>;\n  viewMode: ExperimentLoggedModelListPageMode;\n  setViewMode: (mode: ExperimentLoggedModelListPageMode) => void;\n  searchQuery?: string;\n  onChangeSearchQuery: (searchFilter: string) => void;\n  loggedModelsData: LoggedModelProto[];\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  onToggleDataset?: (dataset: LoggedModelMetricDataset) => void;\n  onClearSelectedDatasets?: () => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.sm }}>\n      <SegmentedControlGroup\n        componentId=\"mlflow.logged_model.list.view-mode\"\n        name=\"view-mode\"\n        value={viewMode}\n        onChange={(e) => {\n          setViewMode(\n            coerceToEnum(ExperimentLoggedModelListPageMode, e.target.value, ExperimentLoggedModelListPageMode.TABLE),\n          );\n        }}\n      >\n        <SegmentedControlButton value=\"TABLE\">\n          <Tooltip\n            componentId=\"mlflow.logged_model.list.view-mode-table-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Table view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          >\n            <ListIcon />\n          </Tooltip>\n          <span css={visuallyHidden}>\n            {intl.formatMessage({\n              defaultMessage: 'Table view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          </span>\n        </SegmentedControlButton>\n        <SegmentedControlButton value=\"CHART\">\n          <Tooltip\n            componentId=\"mlflow.logged_model.list.view-mode-chart-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Chart view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          >\n            <ChartLineIcon />\n          </Tooltip>\n          <span css={visuallyHidden}>\n            {intl.formatMessage({\n              defaultMessage: 'Chart view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          </span>\n        </SegmentedControlButton>\n      </SegmentedControlGroup>\n      {sortingAndFilteringEnabled ? (\n        <>\n          <ExperimentLoggedModelListPageAutoComplete\n            searchQuery={searchQuery}\n            onChangeSearchQuery={onChangeSearchQuery}\n            loggedModelsData={loggedModelsData}\n          />\n          <ExperimentLoggedModelListPageDatasetDropdown\n            loggedModelsData={loggedModelsData}\n            onToggleDataset={onToggleDataset}\n            onClearSelectedDatasets={onClearSelectedDatasets}\n            selectedFilterDatasets={selectedFilterDatasets}\n          />\n          <ExperimentLoggedModelListPageOrderBySelector\n            orderByColumn={orderByColumn ?? ''}\n            orderByAsc={orderByAsc}\n            onChangeOrderBy={onChangeOrderBy}\n            columnDefs={columnDefs}\n          />\n        </>\n      ) : (\n        <Button\n          componentId=\"mlflow.logged_model.list.sort\"\n          icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n          onClick={() => {\n            orderByColumn && onChangeOrderBy(orderByColumn, !orderByAsc);\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"Sort: Created\"\n            description=\"Label for the sort button in the logged model list page\"\n          />\n        </Button>\n      )}\n      <ExperimentLoggedModelListPageColumnSelector\n        columnDefs={columnDefs}\n        columnVisibility={columnVisibility}\n        onUpdateColumns={onUpdateColumns}\n        disabled={viewMode === ExperimentLoggedModelListPageMode.CHART}\n      />\n      {shouldEnableLoggedModelsGrouping() && (\n        <ExperimentLoggedModelListPageGroupBySelector groupBy={groupBy} onChangeGroupBy={onChangeGroupBy} />\n      )}\n    </div>\n  );\n};\n","import { compact, keyBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { LoggedModelProto } from '../../../types';\nimport { getStableColorForRun } from '../../../utils/RunNameUtils';\nimport type { RunsChartsRunData } from '../../runs-charts/components/RunsCharts.common';\nimport { useExperimentLoggedModelListPageRowVisibilityContext } from './useExperimentLoggedModelListPageRowVisibility';\n\nexport const getMetricByDatasetChartDataKey = (metricKey?: string, datasetName?: string) =>\n  datasetName ? JSON.stringify([datasetName, metricKey]) : metricKey ?? '';\n\n/**\n * Creates chart-consumable data based on logged models, including metrics and parameters.\n * TODO: optimize, add unit tests\n */\nexport const useExperimentLoggedModelsChartsData = (loggedModels: LoggedModelProto[]) => {\n  const { isRowHidden } = useExperimentLoggedModelListPageRowVisibilityContext();\n  return useMemo<RunsChartsRunData[]>(\n    () =>\n      compact(\n        loggedModels.map<RunsChartsRunData | null>((model, index) =>\n          model.info?.model_id\n            ? {\n                displayName: model.info?.name ?? model.info?.model_id ?? 'Unknown',\n                images: {},\n\n                metrics: keyBy(\n                  model.data?.metrics?.map(({ dataset_name, key, value, timestamp, step }) => ({\n                    // Instead of using plain metric key, we will use specific data access key generated based on metric key and dataset\n                    dataKey: getMetricByDatasetChartDataKey(key, dataset_name),\n                    key: key ?? '',\n                    value: value ?? 0,\n                    timestamp: timestamp ?? 0,\n                    step: step ?? 0,\n                  })),\n                  'dataKey',\n                ),\n                params: keyBy(\n                  model.data?.params\n                    ?.map(({ key, value }) => ({ key: key ?? '', value: value ?? '' }))\n                    .filter(({ key }) => key) ?? [],\n                  'key',\n                ),\n                tags: {},\n                uuid: model.info.model_id,\n                hidden: isRowHidden(model.info.model_id, index),\n                color: getStableColorForRun(model.info.model_id),\n              }\n            : null,\n        ),\n      ),\n    [loggedModels, isRowHidden],\n  );\n};\n","import { useCallback, useEffect, useReducer, useState } from 'react';\nimport type { ExperimentRunsChartsUIConfiguration } from '../../experiment-page/models/ExperimentPageUIState';\nimport { ChartSectionConfig } from '../../../types';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartsMetricByDatasetEntry,\n  RunsChartType,\n} from '../../runs-charts/runs-charts.types';\nimport { isEmpty, uniq } from 'lodash';\nimport { RunsChartsUIConfigurationSetter } from '../../runs-charts/hooks/useRunsChartsUIConfiguration';\n\ntype UpdateChartStateAction = { type: 'UPDATE'; stateSetter: RunsChartsUIConfigurationSetter };\ntype InitializeChartStateAction = { type: 'INITIALIZE'; initialConfig?: LoggedModelsChartsUIConfiguration };\ntype NewLoggedModelsStateAction = { type: 'METRICS_UPDATED'; metricsByDatasets: RunsChartsMetricByDatasetEntry[] };\n\ntype ChartsReducerAction = UpdateChartStateAction | NewLoggedModelsStateAction | InitializeChartStateAction;\n\ninterface LoggedModelsChartsUIConfiguration extends ExperimentRunsChartsUIConfiguration {\n  isDirty: boolean;\n}\n\nconst createLocalStorageKey = (storeIdentifier: string, version = 1) =>\n  `experiment-logged-models-charts-ui-state-v${version}-${storeIdentifier}`;\n\n/**\n * Generates a list of chart tiles based on logged models metrics and datasets.\n */\nconst getExperimentLoggedModelsPageChartSetup = (metricsByDatasets: RunsChartsMetricByDatasetEntry[]) => {\n  const compareRunCharts: RunsChartsBarCardConfig[] = metricsByDatasets.map(\n    ({ dataAccessKey, metricKey, datasetName }) => ({\n      deleted: false,\n      type: RunsChartType.BAR,\n      uuid: `autogen-${dataAccessKey}`,\n      metricSectionId: datasetName ? `autogen-${datasetName}` : 'default',\n      isGenerated: true,\n      metricKey,\n      dataAccessKey,\n      datasetName,\n      displayName: datasetName ? `(${datasetName}) ${metricKey}` : undefined,\n    }),\n  );\n\n  const compareRunSections: ChartSectionConfig[] = uniq(metricsByDatasets.map(({ datasetName }) => datasetName)).map(\n    (datasetName) => ({\n      display: true,\n      name: datasetName ?? 'Metrics',\n      uuid: datasetName ? `autogen-${datasetName}` : 'default',\n      isReordered: false,\n    }),\n  );\n\n  if (isEmpty(compareRunSections)) {\n    compareRunSections.push({\n      display: true,\n      name: 'Metrics',\n      uuid: 'default',\n      isReordered: false,\n    });\n  }\n\n  return {\n    compareRunCharts,\n    compareRunSections,\n  };\n};\n\n// Internal utility function  used to merge the current charts state with potentially incoming new charts and sections\nconst reconcileChartsAndSections = (\n  currentState: LoggedModelsChartsUIConfiguration,\n  newCharts: { compareRunCharts: RunsChartsCardConfig[]; compareRunSections: ChartSectionConfig[] },\n) => {\n  // If there are no charts / sections, or if the state is in pristine state, just set the new charts if they're not empty\n  if (!currentState.compareRunCharts || !currentState.compareRunSections || !currentState.isDirty) {\n    if (newCharts.compareRunCharts.length > 0 || newCharts.compareRunSections.length > 0) {\n      return {\n        ...currentState,\n        compareRunCharts: newCharts.compareRunCharts ?? [],\n        compareRunSections: newCharts.compareRunSections ?? [],\n      };\n    }\n  }\n\n  // Otherwise, detect new sections and charts and add them to the list\n  const newChartsToAdd = newCharts.compareRunCharts.filter(\n    (newChart) => !currentState.compareRunCharts?.find((chart) => chart.uuid === newChart.uuid),\n  );\n  const newSectionsToAdd = newCharts.compareRunSections.filter(\n    (newSection) =>\n      newChartsToAdd.find((newChart) => newChart.metricSectionId === newSection.uuid) &&\n      !currentState.compareRunSections?.find((section) => section.uuid === newSection.uuid),\n  );\n\n  if (newSectionsToAdd.length > 0 || newChartsToAdd.length > 0) {\n    return {\n      ...currentState,\n      compareRunCharts: currentState.compareRunCharts\n        ? [...currentState.compareRunCharts, ...newChartsToAdd]\n        : newCharts.compareRunCharts,\n      compareRunSections: currentState.compareRunSections\n        ? [...currentState.compareRunSections, ...newSectionsToAdd]\n        : newCharts.compareRunSections,\n    };\n  }\n  return currentState;\n};\n\nconst chartsUIStateInitializer = (): LoggedModelsChartsUIConfiguration => ({\n  compareRunCharts: undefined,\n  compareRunSections: undefined,\n  autoRefreshEnabled: false,\n  isAccordionReordered: false,\n  chartsSearchFilter: '',\n  globalLineChartConfig: undefined,\n  isDirty: false,\n});\n\n// Reducer to manage the state of the charts UI\nconst chartsUIStateReducer = (state: LoggedModelsChartsUIConfiguration, action: ChartsReducerAction) => {\n  // 'UPDATE' is sent by controls that updates the UI state directly\n  if (action.type === 'UPDATE') {\n    return { ...action.stateSetter(state), isDirty: true };\n  }\n  // 'METRICS_UPDATED' is sent when new logged models data is available and potentially new charts need to be added\n  if (action.type === 'METRICS_UPDATED') {\n    const { compareRunCharts, compareRunSections } = getExperimentLoggedModelsPageChartSetup(action.metricsByDatasets);\n    const newState = reconcileChartsAndSections(state, { compareRunCharts, compareRunSections });\n    return newState;\n  }\n  if (action.type === 'INITIALIZE') {\n    if (action.initialConfig) {\n      return action.initialConfig;\n    }\n  }\n  return state;\n};\n\nconst loadPersistedDataFromStorage = async (storeIdentifier: string) => {\n  // This function is async on purpose to accommodate potential asynchoronous storage mechanisms (e.g. IndexedDB) in the future\n  const serializedData = localStorage.getItem(createLocalStorageKey(storeIdentifier));\n  if (!serializedData) {\n    return undefined;\n  }\n  try {\n    return JSON.parse(serializedData);\n  } catch {\n    return undefined;\n  }\n};\n\nconst saveDataToStorage = async (storeIdentifier: string, dataToPersist: LoggedModelsChartsUIConfiguration) => {\n  localStorage.setItem(createLocalStorageKey(storeIdentifier), JSON.stringify(dataToPersist));\n};\n\nexport const useExperimentLoggedModelsChartsUIState = (\n  metricsByDatasets: RunsChartsMetricByDatasetEntry[],\n  storeIdentifier: string,\n) => {\n  const [chartUIState, dispatchChartUIState] = useReducer(chartsUIStateReducer, undefined, chartsUIStateInitializer);\n  const [loading, setLoading] = useState(true);\n\n  // Attempt to load the persisted data when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    loadPersistedDataFromStorage(storeIdentifier).then((data) => {\n      dispatchChartUIState({ type: 'INITIALIZE', initialConfig: data });\n      setLoading(false);\n    });\n  }, [storeIdentifier]);\n\n  // Attempt to update the charts state when the logged models change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    dispatchChartUIState({ type: 'METRICS_UPDATED', metricsByDatasets });\n  }, [metricsByDatasets, loading]);\n\n  // Attempt persist the data when the state changes\n  useEffect(() => {\n    if (chartUIState.isDirty) {\n      saveDataToStorage(storeIdentifier, chartUIState);\n    }\n  }, [storeIdentifier, chartUIState]);\n\n  // Create an updater function to pass it to chart controls\n  const updateUIState = useCallback(\n    (stateSetter: RunsChartsUIConfigurationSetter) =>\n      dispatchChartUIState({\n        type: 'UPDATE',\n        stateSetter,\n      }),\n    [],\n  );\n\n  return { chartUIState, updateUIState, loading };\n};\n","import { Empty, Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { noop, uniq } from 'lodash';\nimport { memo, ReactNode, useMemo, useCallback, useState } from 'react';\nimport { LoggedModelProto } from '../../types';\nimport { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { RunsChartsTooltipBody } from '../runs-charts/components/RunsChartsTooltipBody';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useRemoveRunsChartFn,\n  useUpdateRunsChartsUIConfiguration,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport { RunsChartsCardConfig, RunsChartsMetricByDatasetEntry, RunsChartType } from '../runs-charts/runs-charts.types';\nimport { useExperimentLoggedModelsChartsData } from './hooks/useExperimentLoggedModelsChartsData';\nimport { useExperimentLoggedModelsChartsUIState } from './hooks/useExperimentLoggedModelsChartsUIState';\nimport { useExperimentLoggedModelAllMetricsByDataset } from './hooks/useExperimentLoggedModelAllMetricsByDataset';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useMemoDeep } from '../../../common/hooks/useMemoDeep';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport Routes from '../../routes';\n\nconst ExperimentLoggedModelListChartsImpl = memo(\n  ({\n    chartData,\n    uiState,\n    metricKeysByDataset,\n    minWidth,\n  }: {\n    chartData: RunsChartsRunData[];\n    uiState: ExperimentRunsChartsUIConfiguration;\n    metricKeysByDataset: RunsChartsMetricByDatasetEntry[];\n    minWidth: number;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    const { formatMessage } = useIntl();\n\n    const availableMetricKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.metrics))), [chartData]);\n    const availableParamKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.params))), [chartData]);\n\n    const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n    const setSearch = useCallback(\n      (search: string) => {\n        updateChartsUIState((state) => ({ ...state, chartsSearchFilter: search }));\n      },\n      [updateChartsUIState],\n    );\n\n    const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n    const addNewChartCard = useCallback(\n      (metricSectionId: string) => (type: RunsChartType) =>\n        setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId)),\n      [],\n    );\n\n    const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n    const removeChart = useRemoveRunsChartFn();\n\n    const [fullScreenChart, setFullScreenChart] = useState<\n      | {\n          config: RunsChartsCardConfig;\n          title: string | ReactNode;\n          subtitle: ReactNode;\n        }\n      | undefined\n    >(undefined);\n\n    const fullscreenTooltipContextValue = useMemo(() => ({ runs: chartData }), [chartData]);\n\n    const tooltipContextValue = useMemo(\n      () => ({ runs: chartData, getDataTraceLink: Routes.getExperimentLoggedModelDetailsPageRoute }),\n      [chartData],\n    );\n\n    const emptyState = (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No models found in experiment or all models are hidden. Select at least one model to view charts.\"\n              description=\"Label displayed in logged models chart view when no models are visible or selected\"\n            />\n          }\n        />\n      </div>\n    );\n\n    return (\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundPrimary,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.md,\n          paddingBottom: theme.spacing.md,\n\n          borderTop: `1px solid ${theme.colors.border}`,\n          borderLeft: `1px solid ${theme.colors.border}`,\n\n          flex: 1,\n          overflow: 'hidden',\n          display: 'flex',\n          minWidth,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n            paddingTop: theme.spacing.sm,\n            overflow: 'hidden',\n            flex: 1,\n          }}\n        >\n          <Input\n            componentId=\"mlflow.logged_model.list.charts.search\"\n            role=\"searchbox\"\n            prefix={<SearchIcon />}\n            value={uiState.chartsSearchFilter ?? ''}\n            allowClear\n            onChange={({ target }) => setSearch(target.value)}\n            placeholder={formatMessage({\n              defaultMessage: 'Search metric charts',\n              description: 'Placeholder for chart search input on the logged model chart view',\n            })}\n          />\n          <div css={{ overflow: 'auto' }}>\n            <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunsChartsTooltipBody}>\n              <RunsChartsDraggableCardsGridContextProvider visibleChartCards={uiState.compareRunCharts}>\n                <RunsChartsSectionAccordion\n                  compareRunSections={uiState.compareRunSections}\n                  compareRunCharts={uiState.compareRunCharts}\n                  reorderCharts={noop}\n                  insertCharts={noop}\n                  chartData={chartData}\n                  startEditChart={setConfiguredCardConfig}\n                  removeChart={removeChart}\n                  addNewChartCard={addNewChartCard}\n                  search={uiState.chartsSearchFilter ?? ''}\n                  groupBy={null}\n                  setFullScreenChart={setFullScreenChart}\n                  autoRefreshEnabled={false}\n                  hideEmptyCharts={false}\n                  globalLineChartConfig={undefined}\n                  supportedChartTypes={[RunsChartType.BAR, RunsChartType.SCATTER]}\n                  noRunsSelectedEmptyState={emptyState}\n                />\n              </RunsChartsDraggableCardsGridContextProvider>\n            </RunsChartsTooltipWrapper>\n            <RunsChartsFullScreenModal\n              fullScreenChart={fullScreenChart}\n              onCancel={() => setFullScreenChart(undefined)}\n              chartData={chartData}\n              groupBy={null}\n              tooltipContextValue={fullscreenTooltipContextValue}\n              tooltipComponent={RunsChartsTooltipBody}\n              autoRefreshEnabled={false}\n              globalLineChartConfig={undefined}\n            />\n            {configuredCardConfig && (\n              <RunsChartsConfigureModal\n                chartRunData={chartData}\n                metricKeyList={availableMetricKeys}\n                metricKeysByDataset={metricKeysByDataset}\n                paramKeyList={availableParamKeys}\n                config={configuredCardConfig}\n                onSubmit={(configuredCardConfig) => {\n                  confirmChartCardConfiguration({ ...configuredCardConfig, displayName: undefined });\n                  setConfiguredCardConfig(null);\n                }}\n                onCancel={() => setConfiguredCardConfig(null)}\n                groupBy={null}\n                supportedChartTypes={[RunsChartType.BAR, RunsChartType.SCATTER]}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport const ExperimentLoggedModelListCharts = memo(\n  ({\n    loggedModels,\n    experimentId,\n    minWidth,\n  }: {\n    loggedModels: LoggedModelProto[];\n    experimentId: string;\n    minWidth: number;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n\n    // Perform deep comparison on the logged models to avoid re-rendering the charts when the logged models change.\n    // Deep comparison should still be cheaper than rerendering all charts.\n    const cachedLoggedModels = useMemoDeep(() => loggedModels, [loggedModels]);\n\n    const metricsByDataset = useExperimentLoggedModelAllMetricsByDataset(cachedLoggedModels);\n\n    const {\n      chartUIState,\n      updateUIState,\n      loading: loadingState,\n    } = useExperimentLoggedModelsChartsUIState(metricsByDataset, experimentId);\n    const chartData = useExperimentLoggedModelsChartsData(cachedLoggedModels);\n\n    if (loadingState) {\n      return (\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundPrimary,\n            paddingTop: theme.spacing.lg,\n            borderTop: `1px solid ${theme.colors.border}`,\n            borderLeft: `1px solid ${theme.colors.border}`,\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            display: 'flex',\n          }}\n        >\n          <Spinner />\n        </div>\n      );\n    }\n    return (\n      <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateUIState}>\n        <ExperimentLoggedModelListChartsImpl\n          chartData={chartData}\n          uiState={chartUIState}\n          metricKeysByDataset={metricsByDataset}\n          minWidth={minWidth}\n        />\n      </RunsChartsUIConfigurationContextProvider>\n    );\n  },\n);\n","import { isEqual } from 'lodash';\nimport { useRef } from 'react';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Dedicated to a few limited use cases where deep comparison is still cheaper than resulting re-renders.\n */\nexport const useMemoDeep = <T>(factory: () => T, deps: unknown[]): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || !isEqual(deps, ref.current.deps)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n","import { orderBy } from 'lodash';\nimport type { LoggedModelProto } from '../../../types';\nimport { useMemo } from 'react';\nimport type { RunsChartsMetricByDatasetEntry } from '../../runs-charts/runs-charts.types';\nimport { getMetricByDatasetChartDataKey } from './useExperimentLoggedModelsChartsData';\n\nexport const useExperimentLoggedModelAllMetricsByDataset = (loggedModels: LoggedModelProto[]) =>\n  useMemo(() => {\n    const metricsByDataset: RunsChartsMetricByDatasetEntry[] = [];\n    loggedModels.forEach((model) => {\n      model.data?.metrics?.forEach(({ key: metricKey, dataset_name: datasetName }) => {\n        if (metricKey && !metricsByDataset.find((e) => e.metricKey === metricKey && e.datasetName === datasetName)) {\n          const dataAccessKey = getMetricByDatasetChartDataKey(metricKey, datasetName);\n          metricsByDataset.push({ metricKey, datasetName, dataAccessKey });\n        }\n      });\n    });\n    return orderBy(metricsByDataset, ({ datasetName }) => !datasetName);\n  }, [loggedModels]);\n","import { Alert, Spacer, useDesignSystemTheme } from '@databricks/design-system';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { ExperimentLoggedModelPageWrapper } from './ExperimentLoggedModelPageWrapper';\n\nimport { isLoggedModelsFilteringAndSortingEnabled } from '../../../common/utils/FeatureUtils';\nimport { useEffect, useState } from 'react';\nimport { ExperimentLoggedModelListPageTable } from '../../components/experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport { useSearchLoggedModelsQuery } from '../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport { ExperimentLoggedModelListPageControls } from '../../components/experiment-logged-models/ExperimentLoggedModelListPageControls';\nimport {\n  parseLoggedModelMetricOrderByColumnId,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { useLoggedModelsListPageState } from '../../components/experiment-logged-models/hooks/useLoggedModelsListPagePageState';\nimport { useRelatedRunsDataForLoggedModels } from '../../hooks/logged-models/useRelatedRunsDataForLoggedModels';\nimport {\n  ExperimentLoggedModelListPageMode,\n  useExperimentLoggedModelListPageMode,\n} from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageMode';\nimport { ExperimentViewRunsTableResizer } from '../../components/experiment-page/components/runs/ExperimentViewRunsTableResizer';\nimport { ExperimentLoggedModelListCharts } from '../../components/experiment-logged-models/ExperimentLoggedModelListCharts';\nimport { ExperimentLoggedModelListPageRowVisibilityContextProvider } from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageRowVisibility';\nimport { RunsChartsSetHighlightContextProvider } from '../../components/runs-charts/hooks/useRunsChartTraceHighlight';\nimport { BadRequestError } from '@databricks/web-shared/errors';\nimport { useResizableMaxWidth } from '@mlflow/mlflow/src/shared/web-shared/hooks/useResizableMaxWidth';\n\nconst INITIAL_RUN_COLUMN_SIZE = 295;\nconst CHARTS_MIN_WIDTH = 350;\n\nconst ExperimentLoggedModelListPageImpl = () => {\n  const { experimentId } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const sortingAndFilteringEnabled = isLoggedModelsFilteringAndSortingEnabled();\n\n  const {\n    state: {\n      orderByColumn,\n      orderByAsc,\n      columnVisibility,\n      rowVisibilityMap,\n      rowVisibilityMode,\n      selectedFilterDatasets,\n      groupBy,\n    },\n    searchQuery,\n    isFilteringActive,\n    setOrderBy,\n    setColumnVisibility,\n    setRowVisibilityMode,\n    toggleRowVisibility,\n    updateSearchQuery,\n    toggleDataset,\n    clearSelectedDatasets,\n    setGroupBy,\n  } = useLoggedModelsListPageState();\n\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const { viewMode, setViewMode } = useExperimentLoggedModelListPageMode();\n\n  // Translate currently sorting column to the format accepted by the API query.\n  // If the column is a metric, we need to parse and pass the dataset name and digest if found.\n  const getOrderByRequestData = () => {\n    if (!orderByColumn) {\n      return { orderByField: undefined };\n    }\n    const parsedMetricOrderByColumn = parseLoggedModelMetricOrderByColumnId(orderByColumn);\n    if (parsedMetricOrderByColumn.datasetDigest && parsedMetricOrderByColumn.datasetName) {\n      return {\n        orderByField: `metrics.${parsedMetricOrderByColumn.metricKey}`,\n        orderByDatasetName: parsedMetricOrderByColumn.datasetName,\n        orderByDatasetDigest: parsedMetricOrderByColumn.datasetDigest,\n      };\n    }\n    return { orderByField: orderByColumn };\n  };\n\n  const {\n    data: loggedModels,\n    isFetching: isFetchingLoggedModels,\n    isLoading: isLoadingLoggedModels,\n    error: loggedModelsError,\n    nextPageToken,\n    loadMoreResults,\n  } = useSearchLoggedModelsQuery({\n    experimentIds: [experimentId],\n    orderByAsc,\n    searchQuery,\n    selectedFilterDatasets,\n    ...getOrderByRequestData(),\n  });\n\n  // Find and extract 400 error from the logged models error\n  const badRequestError = loggedModelsError instanceof BadRequestError ? loggedModelsError : undefined;\n\n  const { data: relatedRunsData } = useRelatedRunsDataForLoggedModels({ loggedModels });\n\n  const { columnDefs, compactColumnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels,\n    columnVisibility,\n    isLoading: isLoadingLoggedModels,\n    orderByColumn,\n    orderByAsc,\n    enableSortingByMetrics: sortingAndFilteringEnabled,\n  });\n\n  const [tableAreaWidth, setTableAreaWidth] = useState<number>(INITIAL_RUN_COLUMN_SIZE);\n  const [tableHidden, setTableHidden] = useState(false);\n\n  const isCompactTableMode = viewMode !== ExperimentLoggedModelListPageMode.TABLE;\n\n  const tableElement =\n    isCompactTableMode && tableHidden ? (\n      <div css={{ width: theme.spacing.md }} />\n    ) : (\n      <ExperimentLoggedModelListPageTable\n        columnDefs={isCompactTableMode ? compactColumnDefs : columnDefs}\n        loggedModels={loggedModels ?? []}\n        isLoading={isLoadingLoggedModels}\n        isLoadingMore={isFetchingLoggedModels}\n        badRequestError={badRequestError}\n        moreResultsAvailable={Boolean(nextPageToken)}\n        onLoadMore={loadMoreResults}\n        onOrderByChange={setOrderBy}\n        orderByAsc={orderByAsc}\n        orderByColumn={orderByColumn}\n        columnVisibility={columnVisibility}\n        relatedRunsData={relatedRunsData}\n        isFilteringActive={isFilteringActive}\n        groupModelsBy={groupBy}\n      />\n    );\n\n  const { resizableMaxWidth, ref } = useResizableMaxWidth(CHARTS_MIN_WIDTH);\n\n  return (\n    <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      <ExperimentLoggedModelListPageRowVisibilityContextProvider\n        visibilityMap={rowVisibilityMap}\n        visibilityMode={rowVisibilityMode}\n        setRowVisibilityMode={setRowVisibilityMode}\n        toggleRowVisibility={toggleRowVisibility}\n      >\n        <ExperimentLoggedModelListPageControls\n          columnDefs={columnDefs}\n          columnVisibility={columnVisibility}\n          onChangeOrderBy={setOrderBy}\n          onUpdateColumns={setColumnVisibility}\n          orderByColumn={orderByColumn}\n          orderByAsc={orderByAsc}\n          viewMode={viewMode}\n          setViewMode={setViewMode}\n          searchQuery={searchQuery}\n          onChangeSearchQuery={updateSearchQuery}\n          loggedModelsData={loggedModels ?? []}\n          sortingAndFilteringEnabled={sortingAndFilteringEnabled}\n          selectedFilterDatasets={selectedFilterDatasets}\n          onToggleDataset={toggleDataset}\n          onClearSelectedDatasets={clearSelectedDatasets}\n          groupBy={groupBy}\n          onChangeGroupBy={setGroupBy}\n        />\n        <Spacer size=\"sm\" shrinks={false} />\n        {/* Display error message, but not if it's 400 - in that case, the error message is displayed in the table */}\n        {loggedModelsError?.message && !badRequestError && (\n          <>\n            <Alert\n              componentId=\"mlflow.logged_models.list.error\"\n              message={loggedModelsError.message}\n              type=\"error\"\n              closable={false}\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        {isCompactTableMode ? (\n          <RunsChartsSetHighlightContextProvider>\n            <div ref={ref} css={{ display: 'flex', flex: 1, overflow: 'hidden', position: 'relative' }}>\n              <ExperimentViewRunsTableResizer\n                onResize={setTableAreaWidth}\n                runListHidden={tableHidden}\n                width={tableAreaWidth}\n                onHiddenChange={setTableHidden}\n                maxWidth={resizableMaxWidth}\n              >\n                {tableElement}\n              </ExperimentViewRunsTableResizer>\n              {viewMode === ExperimentLoggedModelListPageMode.CHART && (\n                <ExperimentLoggedModelListCharts\n                  loggedModels={loggedModels ?? []}\n                  experimentId={experimentId}\n                  minWidth={CHARTS_MIN_WIDTH}\n                />\n              )}\n            </div>\n          </RunsChartsSetHighlightContextProvider>\n        ) : (\n          tableElement\n        )}\n      </ExperimentLoggedModelListPageRowVisibilityContextProvider>\n    </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n  );\n};\n\nconst ExperimentLoggedModelListPage = () => (\n  <ExperimentLoggedModelPageWrapper>\n    <ExperimentLoggedModelListPageImpl />\n  </ExperimentLoggedModelPageWrapper>\n);\n\nexport default ExperimentLoggedModelListPage;\n","import type { LoggedModelProto, RunEntity } from '../../types';\nimport { useEffect, useMemo } from 'react';\nimport { compact, sortBy, uniq } from 'lodash';\nimport { QueryFunctionContext, useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { useArrayMemo } from '../../../common/hooks/useArrayMemo';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS', { runUuid: string }];\n\nconst getQueryKey = (runUuid: string): UseRegisteredModelRelatedRunNamesQueryKey => [\n  'USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS',\n  { runUuid },\n];\n\nconst queryFn = async ({\n  queryKey: [, { runUuid }],\n}: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<RunEntity | null> => {\n  try {\n    const data = await MlflowService.getRun({ run_id: runUuid });\n    return data?.run;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Hook used to fetch necessary run data based on metadata found in logged models\n */\nexport const useRelatedRunsDataForLoggedModels = ({ loggedModels = [] }: { loggedModels?: LoggedModelProto[] }) => {\n  const runUuids = useMemo(() => {\n    // Extract all run ids found in metrics and source run ids\n    const allMetricRunUuids = compact(\n      loggedModels?.flatMap((loggedModel) => loggedModel?.data?.metrics?.map((metric) => metric.run_id)),\n    );\n    const allSourceRunUuids = compact(loggedModels?.map((loggedModel) => loggedModel?.info?.source_run_id));\n    const distinctRunUuids = sortBy(uniq([...allMetricRunUuids, ...allSourceRunUuids]));\n\n    return distinctRunUuids;\n  }, [loggedModels]);\n\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: getQueryKey(runUuid),\n      queryFn,\n      cacheTime: Infinity,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      retry: false,\n    })),\n  });\n\n  const loading = queryResults.some(({ isLoading }) => isLoading);\n  const error = queryResults.find(({ error }) => error)?.error as Error | undefined;\n\n  const memoizedQueryResults = useArrayMemo(queryResults.map(({ data }) => data));\n\n  const data = useMemo(\n    () => memoizedQueryResults.map((data) => data).filter(Boolean) as RunEntity[],\n    [memoizedQueryResults],\n  );\n\n  return {\n    data,\n    loading,\n    error,\n  };\n};\n","import { useRef } from 'react';\n\n/**\n * A custom hook that memoizes an array based on the reference of its elements, not the array itself.\n */\nexport function useArrayMemo<T>(array: T[]) {\n  // This holds reference to previous value\n  const ref = useRef<T[]>();\n  // Check if each element of the old and new array match\n  const areArraysConsideredTheSame =\n    ref.current && array.length === ref.current.length\n      ? array.every((element, i) => {\n          return element === ref.current?.[i];\n        })\n      : // Initially there's no old array defined/stored, so set to false\n        false;\n\n  if (!areArraysConsideredTheSame) {\n    ref.current = array;\n  }\n\n  return areArraysConsideredTheSame && ref.current ? ref.current : array;\n}\n","import { UserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { QueryClient, QueryClientProvider } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\n/**\n * Wrapper for all experiment logged model pages.\n * Provides error boundaries and user action error handling.\n */\nexport const ExperimentLoggedModelPageWrapper = ({\n  children,\n  resetKey,\n}: {\n  children: React.ReactNode;\n  resetKey?: unknown;\n}) => {\n  return (\n    <ErrorBoundary FallbackComponent={PageFallback} resetKeys={[resetKey]}>\n      <UserActionErrorHandler>{children}</UserActionErrorHandler>\n    </ErrorBoundary>\n  );\n};\n","import React from 'react';\nimport { shouldEnableMinMaxMetricsOnExperimentPage } from '../../common/utils/FeatureUtils';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../common/utils/TagUtils';\n\nexport type EntitySearchAutoCompleteOption = {\n  label?: string | React.ReactNode;\n  value: string;\n};\n\nexport type EntitySearchAutoCompleteOptionGroup = {\n  label: string;\n  options: EntitySearchAutoCompleteOption[];\n};\n\nexport type EntitySearchAutoCompleteEntity = {\n  name: string;\n  startIndex: number;\n  endIndex: number;\n};\n\ntype EntitySearchAutoCompleteClause = {\n  clause: string;\n  startIndex: number;\n};\n\nexport type EntitySearchAutoCompleteEntityNameGroup = {\n  metricNames: string[];\n  paramNames: string[];\n  tagNames: string[];\n};\n\n/**\n * Given an input string, returns a list of Clause objects\n * containing the clauses in the input and the indices of their\n * starting positions in the overall string.\n */\nconst getClausesAndStartIndex = (str: string) => {\n  const re = /and[\\s]+/gi;\n  const results: EntitySearchAutoCompleteClause[] = [];\n  let match, position;\n  while (((position = re.lastIndex), (match = re.exec(str)))) {\n    results.push({ clause: str.substring(position, match.index), startIndex: position });\n  }\n  results.push({ clause: str.substring(position), startIndex: position });\n  return results;\n};\n\n/**\n * Filters out internal tag names and wrap names that include control characters in backticks.\n */\nexport const cleanEntitySearchTagNames = (tagNames: string[]) =>\n  tagNames\n    .filter((tag: string) => !tag.startsWith(MLFLOW_INTERNAL_PREFIX))\n    .map((tag: string) => {\n      if (tag.includes('\"') || tag.includes(' ') || tag.includes('.')) {\n        return `\\`${tag}\\``;\n      } else if (tag.includes('`')) {\n        return `\"${tag}\"`;\n      } else return tag;\n    });\n\nexport const getEntitySearchOptionsFromEntityNames = (\n  entityNames: EntitySearchAutoCompleteEntityNameGroup,\n  attributeOptions: EntitySearchAutoCompleteOption[],\n): EntitySearchAutoCompleteOptionGroup[] => [\n  {\n    label: 'Metrics',\n    options: entityNames.metricNames.map((m) => ({ value: `metrics.${m}` })),\n  },\n  {\n    label: 'Parameters',\n    options: entityNames.paramNames.map((p) => ({ value: `params.${p}` })),\n  },\n  {\n    label: 'Tags',\n    options: entityNames.tagNames.map((t) => ({ value: `tags.${t}` })),\n  },\n  {\n    label: 'Attributes',\n    options: attributeOptions,\n  },\n];\n\n// Bolds a specified segment of `wholeText`.\nconst boldedText = (wholeText: string, shouldBeBold: string) => {\n  const textArray = wholeText.split(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n  const match = wholeText.match(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n\n  return (\n    // Autocomplete sets font weight to 600 on full match resulting in double bolding.\n    // Override this here\n    <span css={{ fontWeight: 'normal' }} data-testid={wholeText}>\n      {textArray.map((item, index) => (\n        <React.Fragment key={index}>\n          {item}\n          {index !== textArray.length - 1 && match && <b>{match[index]}</b>}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n};\n\n/**\n * Given an input string, returns a list of Entity objects\n * containing the search entities in the input and their\n * start and end indices in the whole string.\n */\nexport const getEntitySearchEntitiesAndIndices = (str: string) => {\n  const re = />|<|>=|<=|=|!=|like|ilike/gi;\n  const clauses = getClausesAndStartIndex(str);\n  const results: EntitySearchAutoCompleteEntity[] = [];\n  clauses.forEach((clauseObj) => {\n    const clauseText = clauseObj.clause;\n    const entity = clauseText.split(re)[0];\n    const { startIndex } = clauseObj;\n    results.push({\n      name: entity,\n      startIndex: 0 + startIndex,\n      endIndex: entity.length + startIndex,\n    });\n  });\n  return results;\n};\n\nexport const getFilteredOptionsFromEntityName = (\n  baseOptions: EntitySearchAutoCompleteOptionGroup[],\n  entityBeingEdited: EntitySearchAutoCompleteEntity,\n  suggestionLimits: Record<string, number>,\n): EntitySearchAutoCompleteOptionGroup[] => {\n  return baseOptions\n    .map((group) => {\n      const newOptions = group.options\n        .filter((option) => option.value.toLowerCase().includes(entityBeingEdited.name.toLowerCase().trim()))\n        .map((match) => ({\n          value: match.value,\n          label: boldedText(match.value, entityBeingEdited.name.trim()),\n        }));\n      const limitForGroup = suggestionLimits[group.label];\n      const ellipsized = [\n        ...newOptions.slice(0, limitForGroup),\n        ...(newOptions.length > limitForGroup ? [{ label: '...', value: `..._${group.label}` }] : []),\n      ];\n      return {\n        label: group.label,\n        options: ellipsized,\n      };\n    })\n    .filter((group) => group.options.length > 0);\n};\n"],"names":["TOOLTIP_COOKIE_KEY","_ref","name","styles","_ref2","EntitySearchAutoComplete","baseOptions","searchFilter","requestError","onSearchFilterChange","onClear","tooltipContent","placeholder","useQuickFilter","defaultActiveFirstOption","className","theme","getPrefixedClassName","useDesignSystemTheme","dropdownRef","useRef","intl","useIntl","text","setText","useState","autocompleteEnabled","setAutocompleteEnabled","undefined","focused","setFocused","lastSetBySelection","setLastSetBySelection","suggestionLimits","setSuggestionLimits","Metrics","Parameters","Tags","currentEntitiesRef","entityBeingEdited","setEntityBeingEdited","useEffect","previousEntities","current","newEntities","getEntitySearchEntitiesAndIndices","currentEntitiesNames","map","e","previousEntitiesNames","isEqual","length","i","trim","filteredOptions","useMemo","getFilteredOptionsFromEntityName","onSelect","useCallback","value","option","startsWith","groupName","split","prevSuggestionLimits","prefix","substring","startIndex","suffix","endIndex","localStorageInstance","useExperimentViewLocalStore","showTooltipOnError","setShowTooltipOnError","currentTimeSecs","Math","floor","Date","now","storedItem","getItem","parseInt","tooltipIcon","React","quickRegexpFilter","detectSqlSyntaxInSearchQuery","createQuickRegexpSearchFilter","_tooltipIcon$current","setItem","click","noMatches","flatMap","o","options","open","triggerSearch","_dropdownRef$current","activeItemClass","dropdownContainsActiveItem","Boolean","querySelector","key","preventDefault","_jsx","css","_css","display","gap","spacing","sm","width","responsive","mediaQueries","xs","children","AutoComplete","dropdownMatchSelectWidth","defaultOpen","dropdownRender","menu","ref","Input","componentId","SearchIcon","svg","general","iconFontSize","height","color","colors","textSecondary","onKeyDown","onClick","onFocus","onBlur","onChange","target","_jsxs","Button","type","CloseIcon","Tooltip","content","FormattedMessage","id","defaultMessage","values","filterSample","delayDuration","InfoFillIcon","formatMessage","actionPrimaryBackgroundDefault","LegacyTooltip","title","placement","dangerouslySetAntdProps","overlayInnerStyle","trigger","size","marginLeft","marginRight","icon","InfoSmallIcon","storeIdentifier","LocalStorageUtils","getStoreForComponent","useResizableMaxWidth","minWidth","containerWidth","setContainerWidth","updateWidth","clientWidth","useLayoutEffect","window","addEventListener","removeEventListener","resizableMaxWidth","node","ExperimentViewRunsTableResizer","runListHidden","onResize","onHiddenChange","maxWidth","updateUIState","useUpdateExperimentViewUIState","dragging","setDragging","_Fragment","ResizableBox","style","flex","axis","resizeHandles","minConstraints","maxConstraints","handle","ExperimentViewRunsTableResizerHandle","updateRunListHidden","state","event","onResizeStart","onResizeStop","Global","props","transition","overflow","position","zIndex","opacity","border","actionDefaultBorderHover","left","iconSize","cursor","top","bottom","backgroundColor","backgroundPrimary","borderRadius","alignItems","justifyContent","ChevronRightIcon","ChevronLeftIcon","ExperimentLoggedModelListPageMode","VIEW_MODE_QUERY_PARAM","VALID_FILTER_ATTRIBUTES","ExperimentLoggedModelListPageAutoComplete","searchQuery","onChangeSearchQuery","loggedModelsData","entityNames","loggedModels","metricNames","Set","paramNames","tagNames","loggedModel","_loggedModel$data","_loggedModel$data$met","_loggedModel$data2","_loggedModel$data2$pa","_loggedModel$info","_loggedModel$info$tag","data","metrics","forEach","metric","add","params","param","info","tags","tag","Array","from","filter","isUserFacingTag","getEntityNamesFromLoggedModelsData","validAttributeOptions","attribute","getEntitySearchOptionsFromEntityNames","whereBold","getDatasetHash","dataset","JSON","stringify","dataset_name","dataset_digest","ExperimentLoggedModelListPageDatasetDropdown","selectedFilterDatasets","onToggleDataset","onClearSelectedDatasets","cachedDatasets","Map","allDatasets","model","_model$data","datasetHash","has","set","hash","serializedSelectedDatasets","DialogCombobox","label","stayOpenOnSelection","DialogComboboxCustomButtonTriggerWrapper","endIcon","ChevronDownIcon","TableIcon","DialogComboboxCountBadge","XCircleFillIcon","role","stopPropagation","textPlaceholder","fontSize","typography","fontSizeSm","actionTertiaryTextHover","DialogComboboxContent","DialogComboboxOptionList","serializedDataset","DialogComboboxOptionListCheckboxItem","checked","includes","getSortableColumnLabel","colId","descriptor","ExperimentLoggedModelListPageKnownColumns","CreationTime","defineMessage","parsedColumn","parseLoggedModelMetricOrderByColumnId","metricKey","ExperimentLoggedModelListPageOrderBySelector","orderByColumn","orderByAsc","onChangeOrderBy","columnDefs","setFilter","groupedOrderByOptions","lowerCaseFilter","toLowerCase","sortableColumnGroups","groupId","headerName","col","_col$groupId","LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX","_col$children","some","group","push","DropdownMenu","Root","modal","Trigger","asChild","SortAscendingIcon","SortDescendingIcon","sortBy","Content","padding","lg","autoFocus","allowClear","ToggleIconButton","pressed","ArrowDownIcon","ArrowUpIcon","Group","Label","columnHeaderName","CheckboxItem","ItemIndicator","GroupByLabels","LoggedModelsTableGroupByMode","RUNS","ExperimentLoggedModelListPageGroupBySelector","groupBy","onChangeGroupBy","currentSelectedLabel","ListBorderIcon","currentModeSelected","ExperimentLoggedModelListPageControls","sortingAndFilteringEnabled","onUpdateColumns","columnVisibility","viewMode","setViewMode","flexWrap","SegmentedControlGroup","coerceToEnum","TABLE","SegmentedControlButton","ListIcon","visuallyHidden","ChartLineIcon","ExperimentLoggedModelListPageColumnSelector","disabled","CHART","shouldEnableLoggedModelsGrouping","getMetricByDatasetChartDataKey","datasetName","createLocalStorageKey","version","chartsUIStateInitializer","compareRunCharts","compareRunSections","autoRefreshEnabled","isAccordionReordered","chartsSearchFilter","globalLineChartConfig","isDirty","chartsUIStateReducer","action","stateSetter","metricsByDatasets","dataAccessKey","deleted","RunsChartType","BAR","uuid","metricSectionId","isGenerated","displayName","uniq","isReordered","isEmpty","getExperimentLoggedModelsPageChartSetup","reconcileChartsAndSections","currentState","newCharts","_newCharts$compareRun","_newCharts$compareRun2","newChartsToAdd","newChart","_currentState$compare","find","chart","newSectionsToAdd","newSection","_currentState$compare2","section","initialConfig","useExperimentLoggedModelsChartsUIState","chartUIState","dispatchChartUIState","useReducer","loading","setLoading","async","serializedData","localStorage","parse","loadPersistedDataFromStorage","then","dataToPersist","saveDataToStorage","ExperimentLoggedModelListChartsImpl","memo","chartData","uiState","metricKeysByDataset","_uiState$chartsSearch","_uiState$chartsSearch2","availableMetricKeys","run","Object","keys","availableParamKeys","updateChartsUIState","useUpdateRunsChartsUIConfiguration","setSearch","search","configuredCardConfig","setConfiguredCardConfig","addNewChartCard","RunsChartsCardConfig","getEmptyChartCardByType","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","removeChart","useRemoveRunsChartFn","fullScreenChart","setFullScreenChart","fullscreenTooltipContextValue","runs","tooltipContextValue","getDataTraceLink","Routes","getExperimentLoggedModelDetailsPageRoute","emptyState","marginTop","Empty","description","paddingLeft","md","paddingRight","paddingBottom","borderTop","borderLeft","flexDirection","paddingTop","RunsChartsTooltipWrapper","contextData","component","RunsChartsTooltipBody","RunsChartsDraggableCardsGridContextProvider","visibleChartCards","RunsChartsSectionAccordion","reorderCharts","noop","insertCharts","startEditChart","hideEmptyCharts","supportedChartTypes","SCATTER","noRunsSelectedEmptyState","RunsChartsFullScreenModal","onCancel","tooltipComponent","RunsChartsConfigureModal","chartRunData","metricKeyList","paramKeyList","config","onSubmit","ExperimentLoggedModelListCharts","experimentId","cachedLoggedModels","useMemoDeep","factory","deps","metricsByDataset","_model$data$metrics","orderBy","useExperimentLoggedModelAllMetricsByDataset","loadingState","isRowHidden","useExperimentLoggedModelListPageRowVisibilityContext","compact","index","_model$info","_model$info$name","_model$info2","_model$info3","_model$data$params$ma","_model$data2","_model$data2$params","model_id","images","keyBy","timestamp","step","dataKey","hidden","getStableColorForRun","useExperimentLoggedModelsChartsData","Spinner","RunsChartsUIConfigurationContextProvider","ExperimentLoggedModelListPageImpl","useParams","isLoggedModelsFilteringAndSortingEnabled","rowVisibilityMap","rowVisibilityMode","isFilteringActive","setOrderBy","setColumnVisibility","setRowVisibilityMode","toggleRowVisibility","updateSearchQuery","toggleDataset","clearSelectedDatasets","setGroupBy","useLoggedModelsListPageState","invariant","useExperimentLoggedModelListPageMode","setParams","useSearchParams","get","mode","isFetching","isFetchingLoggedModels","isLoading","isLoadingLoggedModels","error","loggedModelsError","nextPageToken","loadMoreResults","useSearchLoggedModelsQuery","experimentIds","getOrderByRequestData","orderByField","parsedMetricOrderByColumn","datasetDigest","orderByDatasetName","orderByDatasetDigest","badRequestError","BadRequestError","relatedRunsData","useRelatedRunsDataForLoggedModels","compactColumnDefs","useExperimentLoggedModelListPageTableColumns","enableSortingByMetrics","tableAreaWidth","setTableAreaWidth","tableHidden","setTableHidden","isCompactTableMode","tableElement","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","onLoadMore","onOrderByChange","groupModelsBy","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageRowVisibilityContextProvider","visibilityMap","visibilityMode","Spacer","shrinks","message","Alert","closable","RunsChartsSetHighlightContextProvider","ExperimentLoggedModelListPage","ExperimentLoggedModelPageWrapper","getQueryKey","runUuid","queryFn","queryKey","MlflowService","getRun","run_id","_queryResults$find","runUuids","allMetricRunUuids","allSourceRunUuids","source_run_id","queryResults","useQueries","queries","cacheTime","Infinity","staleTime","refetchOnWindowFocus","retry","memoizedQueryResults","array","areArraysConsideredTheSame","every","element","_ref$current","useArrayMemo","PageFallback","_error$message","PageWrapper","image","DangerIcon","resetKey","ErrorBoundary","FallbackComponent","resetKeys","UserActionErrorHandler","cleanEntitySearchTagNames","MLFLOW_INTERNAL_PREFIX","attributeOptions","m","p","t","boldedText","wholeText","shouldBeBold","textArray","RegExp","replace","match","item","str","re","clauses","results","lastIndex","exec","clause","getClausesAndStartIndex","clauseObj","entity","newOptions","limitForGroup","ellipsized","slice"],"sourceRoot":""}