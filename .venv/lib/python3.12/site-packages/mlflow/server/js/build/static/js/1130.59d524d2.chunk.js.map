{"version":3,"file":"static/js/1130.59d524d2.chunk.js","mappings":"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","sources":["shared/web-shared/copy/useCopyController.tsx","shared/web-shared/model-trace-explorer/FeatureUtils.ts","shared/web-shared/snippet/theme/databricks-duotone-dark.ts","shared/web-shared/snippet/theme/databricks-light.ts","shared/web-shared/snippet/actions/SnippetActionButton.tsx","shared/web-shared/snippet/actions/SnippetCopyAction.tsx","shared/web-shared/snippet/index.tsx","shared/web-shared/errors/ErrorLogType.ts","shared/web-shared/errors/ErrorName.ts","shared/web-shared/errors/PredefinedErrors.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.utils.tsx","shared/web-shared/model-trace-explorer/ModelTrace.types.ts","shared/web-shared/model-trace-explorer/oss-notebook-renderer/mlflow-fetch-utils.ts","shared/web-shared/model-trace-explorer/oss-notebook-renderer/ModelTraceExplorerOSSNotebookRenderer.tsx","shared/web-shared/hooks/useResizeObserver.tsx"],"sourcesContent":["import type { ReactElement } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useClipboard } from 'use-clipboard-copy';\n\nimport { CheckIcon, CopyIcon } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nexport interface CopyController {\n  actionIcon: ReactElement;\n  tooltipMessage: string;\n  copy: () => void;\n  copied: boolean;\n  ariaLabel: string;\n  tooltipOpen: boolean;\n  handleTooltipOpenChange: (open: boolean) => void;\n}\n\n/**\n * Utility hook that is internal to web-shared, use: `Copyable` or `CopyActionButton`\n *  or if it's a `CodeSnippet`, `SnippetCopyAction`\n */\nexport function useCopyController(text: string, copyTooltip?: string, onCopy?: () => void): CopyController {\n  const intl = useIntl();\n\n  const copyMessage = copyTooltip\n    ? copyTooltip\n    : intl.formatMessage({\n        defaultMessage: 'Copy',\n        description: 'Tooltip message displayed on copy action',\n      });\n\n  const copiedMessage = intl.formatMessage({\n    defaultMessage: 'Copied',\n    description: 'Tooltip message displayed on copy action after it has been clicked',\n  });\n\n  const clipboard = useClipboard();\n  const copiedTimerIdRef = useRef<number>();\n  const [copied, setCopied] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(copiedTimerIdRef.current);\n    };\n  }, []);\n\n  const copy = () => {\n    clipboard.copy(text);\n    window.clearTimeout(copiedTimerIdRef.current);\n    setCopied(true);\n    onCopy?.();\n    copiedTimerIdRef.current = window.setTimeout(() => {\n      setCopied(false);\n    }, 3000);\n  };\n\n  return {\n    actionIcon: copied ? <CheckIcon /> : <CopyIcon />,\n    tooltipMessage: copied ? copiedMessage : copyMessage,\n    copy,\n    copied,\n    ariaLabel: copyMessage,\n    tooltipOpen: open || copied,\n    handleTooltipOpenChange: setOpen,\n  };\n}\n","export const shouldEnableAssessmentEditing = () => {\n  return true;\n};\nexport const shouldEnableSummaryView = () => {\n  return true;\n};\nexport const getIsMlflowTraceUIEnabled = () => {\n  return true;\n};\n","/**\n * Adapted from `duotone-dark`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/duotone-dark.js\n */\n\nconst databricksDuotoneDarkTheme = {\n  'code[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n  },\n  'pre[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n    padding: '1em',\n    margin: '.5em 0',\n    overflow: 'auto',\n  },\n  'pre > code[class*=\"language-\"]': {\n    fontSize: '1em',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    padding: '.1em',\n    borderRadius: '.3em',\n  },\n  comment: {\n    color: '#6c6783',\n  },\n  prolog: {\n    color: '#6c6783',\n  },\n  doctype: {\n    color: '#6c6783',\n  },\n  cdata: {\n    color: '#6c6783',\n  },\n  punctuation: {\n    color: '#6c6783',\n  },\n  namespace: {\n    Opacity: '.7',\n  },\n  tag: {\n    color: '#3AACE2', // D\n  },\n  operator: {\n    color: '#3AACE2', // D\n  },\n  number: {\n    color: '#3AACE2', // D\n  },\n  property: {\n    color: '#5DFAFC', // D\n  },\n  function: {\n    color: '#5DFAFC', // D\n  },\n  'tag-id': {\n    color: '#eeebff',\n  },\n  selector: {\n    color: '#eeebff',\n  },\n  'atrule-id': {\n    color: '#eeebff',\n  },\n  'code.language-javascript': {\n    color: '#c4b9fe',\n  },\n  'attr-name': {\n    color: '#c4b9fe',\n  },\n  'code.language-css': {\n    color: '#ffffff', // D\n  },\n  'code.language-scss': {\n    color: '#ffffff', // D\n  },\n  boolean: {\n    color: '#ffffff', // D\n  },\n  string: {\n    color: '#ffffff', // D\n  },\n  entity: {\n    color: '#ffffff', // D\n    cursor: 'help',\n  },\n  url: {\n    color: '#ffffff', // D\n  },\n  '.language-css .token.string': {\n    color: '#ffffff', // D\n  },\n  '.language-scss .token.string': {\n    color: '#ffffff', // D\n  },\n  '.style .token.string': {\n    color: '#ffffff', // D\n  },\n  'attr-value': {\n    color: '#ffffff', // D\n  },\n  keyword: {\n    color: '#ffffff', // D\n  },\n  control: {\n    color: '#ffffff', // D\n  },\n  directive: {\n    color: '#ffffff', // D\n  },\n  unit: {\n    color: '#ffffff', // D\n  },\n  statement: {\n    color: '#ffffff', // D\n  },\n  regex: {\n    color: '#ffffff', // D\n  },\n  atrule: {\n    color: '#ffffff', // D\n  },\n  placeholder: {\n    color: '#ffffff', // D\n  },\n  variable: {\n    color: '#ffffff', // D\n  },\n  deleted: {\n    textDecoration: 'line-through',\n  },\n  inserted: {\n    borderBottom: '1px dotted #eeebff',\n    textDecoration: 'none',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  important: {\n    fontWeight: 'bold',\n    color: '#c4b9fe',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  'pre > code.highlight': {\n    Outline: '.4em solid #8a75f5',\n    OutlineOffset: '.4em',\n  },\n  '.line-numbers.line-numbers .line-numbers-rows': {\n    borderRightColor: '#2c2937',\n  },\n  '.line-numbers .line-numbers-rows > span:before': {\n    color: '#3c3949',\n  },\n  '.line-highlight.line-highlight': {\n    background: 'linear-gradient(to right, rgba(224, 145, 66, 0.2) 70%, rgba(224, 145, 66, 0))',\n  },\n};\n\nexport default databricksDuotoneDarkTheme;\n","/**\n * Adapted from `material-light`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/material-light.js#L1\n *\n * This theme overwrites colors to be similiar to the `@databricks/editor` theme.\n */\n\nconst databricksLightTheme = {\n  'code[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    overflow: 'auto',\n    position: 'relative',\n    margin: '0.5em 0',\n    padding: '1.25em 1em',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    whiteSpace: 'normal',\n    borderRadius: '0.2em',\n    padding: '0.1em',\n  },\n  '.language-css > code': {\n    color: '#f5871f', // D\n  },\n  '.language-sass > code': {\n    color: '#f5871f', // D\n  },\n  '.language-scss > code': {\n    color: '#f5871f', // D\n  },\n  '[class*=\"language-\"] .namespace': {\n    Opacity: '0.7',\n  },\n  atrule: {\n    color: '#7c4dff',\n  },\n  'attr-name': {\n    color: '#39adb5',\n  },\n  'attr-value': {\n    color: '#f6a434',\n  },\n  attribute: {\n    color: '#f6a434',\n  },\n  boolean: {\n    color: '#7c4dff', // D\n  },\n  builtin: {\n    color: '#39adb5',\n  },\n  cdata: {\n    color: '#39adb5',\n  },\n  char: {\n    color: '#39adb5',\n  },\n  class: {\n    color: '#39adb5',\n  },\n  'class-name': {\n    color: '#6182b8',\n  },\n  comment: {\n    color: '#8e908c', // D\n  },\n  constant: {\n    color: '#7c4dff', // D\n  },\n  deleted: {\n    color: '#e53935',\n  },\n  doctype: {\n    color: '#aabfc9',\n  },\n  entity: {\n    color: '#e53935',\n  },\n  function: {\n    color: '#4271ae', // D\n  },\n  hexcode: {\n    color: '#f5871f', // D\n  },\n  id: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  important: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  inserted: {\n    color: '#39adb5',\n  },\n  keyword: {\n    color: '#8959a8', // D\n  },\n  number: {\n    color: '#f5871f', // D\n  },\n  operator: {\n    color: '#3e999f', // D\n  },\n  prolog: {\n    color: '#aabfc9',\n  },\n  property: {\n    color: '#39adb5',\n  },\n  'pseudo-class': {\n    color: '#f6a434',\n  },\n  'pseudo-element': {\n    color: '#f6a434',\n  },\n  punctuation: {\n    color: 'rgb(77, 77, 76)', // D\n  },\n  regex: {\n    color: '#6182b8',\n  },\n  selector: {\n    color: '#e53935',\n  },\n  string: {\n    color: '#3ba85f', // D\n  },\n  symbol: {\n    color: '#7c4dff',\n  },\n  tag: {\n    color: '#e53935',\n  },\n  unit: {\n    color: '#f5871f', // D\n  },\n  url: {\n    color: '#e53935',\n  },\n  variable: {\n    color: '#c72d4c', // D\n  },\n};\n\nexport default databricksLightTheme;\n","import { css } from '@emotion/react';\nimport type { ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { Button, LegacyTooltip } from '@databricks/design-system';\n\ntype SnippetActionButtonProps = Pick<ButtonProps, 'icon' | 'onClick' | 'href' | 'rel' | 'target'> & {\n  tooltipMessage: NonNullable<ReactNode>;\n};\n\nexport default function SnippetActionButton({ tooltipMessage, ...buttonProps }: SnippetActionButtonProps) {\n  const style = css({\n    zIndex: 1, // required for action buttons to be visible and float\n  });\n  return (\n    <LegacyTooltip title={tooltipMessage}>\n      <Button\n        componentId=\"codegen_web-shared_src_snippet_actions_snippetactionbutton.tsx_33\"\n        {...buttonProps}\n        css={style}\n      />\n    </LegacyTooltip>\n  );\n}\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { useCopyController } from '@databricks/web-shared/copy';\n\nimport SnippetActionButton from './SnippetActionButton';\n\nexport interface SnippetCopyActionProps extends ButtonProps {\n  /**\n   * The text to be copied into clipboard when action button is clicked.\n   */\n  copyText: string;\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nexport function SnippetCopyAction({ copyText, onClick, ...props }: SnippetCopyActionProps) {\n  const { actionIcon, tooltipMessage, copy } = useCopyController(copyText);\n\n  return (\n    <SnippetActionButton\n      tooltipMessage={tooltipMessage}\n      icon={actionIcon}\n      onClick={(e) => {\n        copy();\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport go from 'react-syntax-highlighter/dist/cjs/languages/prism/go';\nimport java from 'react-syntax-highlighter/dist/cjs/languages/prism/java';\nimport javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport yaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/prism/sql';\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nSyntaxHighlighter.registerLanguage('java', java);\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('go', go);\nSyntaxHighlighter.registerLanguage('javascript', javascript);\nSyntaxHighlighter.registerLanguage('yaml', yaml);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'sql' | 'java' | 'python' | 'javascript' | 'go' | 'yaml' | 'text' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Boolean to specify whether to style the <code> block with white-space: pre-wrap or white-space: pre\n   */\n  wrapLongLines?: boolean;\n  /**\n   * Boolean that determines whether or not each line of code should be wrapped in a parent element\n   */\n  wrapLines?: boolean;\n  /**\n   * Props to pass to the line elements\n   */\n  lineProps?: React.HTMLProps<HTMLElement> | undefined;\n  /**\n   * Custom tag to use for the `<pre>` element\n   */\n  PreTag?: keyof JSX.IntrinsicElements | React.ComponentType<any> | undefined;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n  wrapLines,\n  PreTag,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n      wrapLines={wrapLines}\n      PreTag={PreTag}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nexport * from './actions/SnippetCopyAction';\n","export enum ErrorLogType {\n  UserInputError = 'UserInputError',\n  UnexpectedSystemStateError = 'UnexpectedSystemStateError',\n  ServerError = 'ServerError',\n  SessionError = 'SessionError',\n  NetworkError = 'NetworkError',\n  ApplicationError = 'ApplicationError',\n  UnknownError = 'UnknownError',\n}\n","export enum ErrorName {\n  BadRequestError = 'BadRequestError',\n  DatasetRunNotFoundError = 'DatasetRunNotFoundError',\n  FormValidationError = 'FormInputError',\n  GenericNetworkRequestError = 'GenericNetworkRequestError',\n  GraphQLGenericError = 'GraphQLGenericError',\n  InternalServerError = 'InternalServerError',\n  NotFoundError = 'NotFoundError',\n  PermissionError = 'PermissionError',\n  RateLimitedError = 'RateLimitedError',\n  RouteNotFoundError = 'RouteNotFoundError',\n  ServiceUnavailableError = 'ServiceUnavailableError',\n  UnauthorizedError = 'UnauthorizedError',\n  UnknownError = 'UnknownError',\n}\n","import { FormattedMessage } from 'react-intl';\n\n// eslint-disable-next-line no-restricted-imports\nimport type { ServerError } from '@apollo/client';\n\nimport { ErrorLogType } from './ErrorLogType';\nimport { ErrorName } from './ErrorName';\n\nexport type HandleableError = Error | string | Record<string, unknown> | PredefinedError | Response;\n\nexport type CausableError = Error | string | Record<string, unknown>;\n\nexport abstract class PredefinedError extends Error {\n  abstract errorLogType: ErrorLogType;\n  abstract errorName: ErrorName;\n  abstract displayMessage: React.ReactNode;\n  isUserError = false;\n\n  constructor(message?: string, cause?: CausableError) {\n    super(message);\n  }\n}\n\nexport const matchPredefinedError = (error: HandleableError) => {\n  if (error instanceof PredefinedError) {\n    return error;\n  }\n  if (error instanceof Error && ('networkError' in error || 'graphQLErrors' in error)) {\n    return matchPredefinedApolloError(error);\n  }\n\n  if (error instanceof Response) {\n    return matchPredefinedErrorFromResponse(error);\n  }\n\n  return new UnknownError(error);\n};\n\nexport function isServerError(e: unknown): e is ServerError {\n  return e instanceof Error && e.hasOwnProperty('response');\n}\n\nconst matchPredefinedApolloError = (error: Error) => {\n  // Some errors from Apollo mock provider may have `networkError` but are not `ServerError`\n  // only act on ServerError, which do have the response attached\n  if ('networkError' in error && isServerError(error.networkError)) {\n    return matchPredefinedErrorFromResponse(error.networkError.response, error.networkError);\n  }\n\n  return new GraphQLGenericError(error);\n};\n\nconst getNetworkRequestErrorDetailsFromResponse = (response: Response): NetworkRequestErrorDetails => {\n  const status = response.status;\n\n  return { status };\n};\n\nexport const matchPredefinedErrorFromResponse = (response: Response, originalError?: CausableError) => {\n  const errorDetails = NetworkRequestError.getNetworkRequestErrorDetailsFromResponse(response);\n  switch (response.status) {\n    case 400:\n      return new BadRequestError(errorDetails, originalError);\n    case 401:\n      return new UnauthorizedError(errorDetails, originalError);\n    case 403:\n      return new PermissionError(errorDetails, originalError);\n    case 404:\n      return new NotFoundError(errorDetails, originalError);\n    case 429:\n      return new RateLimitedError(errorDetails, originalError);\n    case 500:\n      return new InternalServerError(errorDetails, originalError);\n    case 503:\n      return new ServiceUnavailableError(errorDetails, originalError);\n    default:\n      return new GenericNetworkRequestError(errorDetails, originalError);\n  }\n};\n\ninterface NetworkRequestErrorDetails {\n  status?: number;\n  response?: Response;\n}\n\nexport abstract class NetworkRequestError extends PredefinedError {\n  status?: number;\n  response?: Response;\n\n  constructor(message: string, details: NetworkRequestErrorDetails, cause?: CausableError) {\n    super(message, cause);\n    this.status = details.status;\n    this.response = details.response;\n  }\n\n  static getNetworkRequestErrorDetailsFromResponse = getNetworkRequestErrorDetailsFromResponse;\n}\n\nexport class GenericNetworkRequestError extends NetworkRequestError {\n  errorLogType = ErrorLogType.ServerError;\n  errorName = ErrorName.GenericNetworkRequestError;\n  displayMessage = (\n    <FormattedMessage defaultMessage=\"A network error occurred.\" description=\"Generic message for a network error\" />\n  );\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'A network error occurred.';\n\n    super(message, details, cause);\n  }\n}\n\nexport class GraphQLGenericError extends PredefinedError {\n  errorLogType = ErrorLogType.ApplicationError;\n  errorName = ErrorName.GraphQLGenericError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"A GraphQL error occurred.\"\n      description=\"Generic message for a GraphQL error, typically due to query parsing or validation issues\"\n    />\n  );\n\n  constructor(cause?: CausableError) {\n    const message = 'A GraphQL error occurred.';\n\n    super(message, cause);\n  }\n}\n\nexport class BadRequestError extends NetworkRequestError {\n  errorLogType = ErrorLogType.UserInputError;\n  errorName = ErrorName.BadRequestError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"The request was invalid.\"\n      description=\"Bad request (HTTP STATUS 400) generic error message\"\n    />\n  );\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'The request was invalid.';\n\n    super(message, details, cause);\n  }\n}\n\nexport class InternalServerError extends NetworkRequestError {\n  errorLogType = ErrorLogType.ServerError;\n  errorName = ErrorName.InternalServerError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"Internal server error\"\n      description=\"Request failed due to internal server error (HTTP STATUS 500) generic error message\"\n    />\n  );\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'Internal server error';\n\n    super(message, details, cause);\n  }\n}\n\nexport class NotFoundError extends NetworkRequestError {\n  errorLogType = ErrorLogType.UserInputError;\n  errorName = ErrorName.NotFoundError;\n\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"The requested resource was not found.\"\n      description=\"Resource not found (HTTP STATUS 404) generic error message\"\n    />\n  );\n\n  isUserError = true;\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'The requested resource was not found.';\n\n    super(message, details, cause);\n  }\n}\n\nexport class PermissionError extends NetworkRequestError {\n  errorLogType = ErrorLogType.UnexpectedSystemStateError;\n  errorName = ErrorName.PermissionError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"You do not have permission to access this resource.\"\n      description=\"Generic message for a permission error (HTTP STATUS 403)\"\n    />\n  );\n  isUserError = true;\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'You do not have permission to access this resource.';\n\n    super(message, details, cause);\n  }\n}\n\nexport class RateLimitedError extends NetworkRequestError {\n  errorLogType = ErrorLogType.ServerError;\n  errorName = ErrorName.RateLimitedError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"This request exceeds the maximum queries per second limit. Please wait and try again.\"\n      description=\"Too many requests (HTTP STATUS 429) generic error message\"\n    />\n  );\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'This request exceeds the maximum queries per second limit. Please wait and try again.';\n\n    super(message, details, cause);\n  }\n}\n\nexport class ServiceUnavailableError extends NetworkRequestError {\n  errorLogType = ErrorLogType.ServerError;\n  errorName = ErrorName.InternalServerError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"Service unavailable error\"\n      description=\"Request failed due to service being available (HTTP STATUS 503) generic error message\"\n    />\n  );\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'Internal server error';\n\n    super(message, details, cause);\n  }\n}\n\nexport class UnauthorizedError extends NetworkRequestError {\n  errorLogType = ErrorLogType.SessionError;\n  errorName = ErrorName.UnauthorizedError;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"User is not authorized.\"\n      description=\"Unauthorized (HTTP STATUS 401) generic error message\"\n    />\n  );\n\n  constructor(details: NetworkRequestErrorDetails, cause?: CausableError) {\n    const message = 'This request exceeds the maximum queries per second limit. Please wait and try again.';\n\n    super(message, details, cause);\n  }\n}\n\nexport class UnknownError extends PredefinedError {\n  errorLogType = ErrorLogType.UnknownError;\n  errorName = ErrorName.UnknownError;\n  displayMessage = (\n    <FormattedMessage defaultMessage=\"An unknown error occurred.\" description=\"Generic message for an unknown error\" />\n  );\n\n  constructor(cause?: CausableError) {\n    const message = 'An unknown error occurred.';\n\n    super(message, cause);\n  }\n}\n\nexport class FormValidationError extends PredefinedError {\n  errorLogType = ErrorLogType.UserInputError;\n  errorName = ErrorName.FormValidationError;\n  isUserError = true;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"At least one form field has incorrect value. Please correct and try again.\"\n      description=\"Generic error message for an invalid form input\"\n    />\n  );\n\n  constructor(cause?: CausableError) {\n    const message = 'Incorrect form input.';\n\n    super(message, cause);\n  }\n}\n\n// have to be defined here to avoid circular dependencies\nexport class RouteNotFoundError extends PredefinedError {\n  errorLogType = ErrorLogType.UserInputError;\n  errorName = ErrorName.RouteNotFoundError;\n  isUserError = true;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"Page not found\"\n      description=\"Error message shown to the user when they arrive at a non existent URL\"\n    />\n  );\n  constructor() {\n    super('Page not found');\n  }\n}\n","import {\n  isNil,\n  omitBy,\n  mapValues,\n  isArray,\n  isString,\n  isNumber,\n  isBoolean,\n  escapeRegExp,\n  map,\n  every,\n  has,\n  compact,\n  keyBy,\n} from 'lodash';\n\nimport { ModelSpanType, ModelIconType, MLFLOW_TRACE_SCHEMA_VERSION_KEY } from './ModelTrace.types';\nimport type {\n  SearchMatch,\n  ModelTrace,\n  ModelTraceSpan,\n  ModelTraceSpanNode,\n  ModelTraceChatMessage,\n  ModelTraceChatResponse,\n  ModelTraceChatInput,\n  ModelTraceToolCall,\n  ModelTraceChatTool,\n  ModelTraceChatToolParamProperty,\n  RawModelTraceChatMessage,\n  ModelTraceContentType,\n  SpanFilterState,\n  ModelTraceSpanV3,\n  ModelTraceSpanV2,\n  ModelTraceInfoV3,\n  Assessment,\n  RetrieverDocument,\n  ModelTraceEvent,\n} from './ModelTrace.types';\nimport { ModelTraceExplorerIcon } from './ModelTraceExplorerIcon';\nimport {\n  normalizeAnthropicChatInput,\n  normalizeAnthropicChatOutput,\n  normalizeGeminiChatInput,\n  normalizeGeminiChatOutput,\n  normalizeOpenAIChatInput,\n  normalizeOpenAIChatResponse,\n  normalizeOpenAIResponsesInput,\n  normalizeOpenAIResponsesOutput,\n  normalizeLangchainChatInput,\n  normalizeLangchainChatResult,\n  normalizeLlamaIndexChatResponse,\n  normalizeDspyChatInput,\n  normalizeDspyChatOutput,\n} from './chat-utils';\nimport { normalizeLlamaIndexChatInput } from './chat-utils/llamaindex';\nimport { normalizeOpenAIAgentInput, normalizeOpenAIAgentOutput } from './chat-utils/openai';\nimport { normalizeAutogenChatInput, normalizeAutogenChatOutput } from './chat-utils/autogen';\nimport { normalizeBedrockChatInput, normalizeBedrockChatOutput } from './chat-utils/bedrock';\n\nexport const FETCH_TRACE_INFO_QUERY_KEY = 'model-trace-info-v3';\n\nexport const displayErrorNotification = (errorMessage: string) => {\n  // TODO: display error notification in OSS\n  return;\n};\n\nexport function getIconTypeForSpan(spanType: ModelSpanType | string): ModelIconType {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return ModelIconType.MODELS;\n    case ModelSpanType.CHAIN:\n      return ModelIconType.CHAIN;\n    case ModelSpanType.AGENT:\n      return ModelIconType.AGENT;\n    case ModelSpanType.TOOL:\n      return ModelIconType.WRENCH;\n    case ModelSpanType.CHAT_MODEL:\n      return ModelIconType.MODELS;\n    case ModelSpanType.RETRIEVER:\n      return ModelIconType.SEARCH;\n    case ModelSpanType.PARSER:\n      return ModelIconType.CODE;\n    case ModelSpanType.EMBEDDING:\n      return ModelIconType.NUMBERS;\n    case ModelSpanType.RERANKER:\n      return ModelIconType.SORT;\n    case ModelSpanType.MEMORY:\n      return ModelIconType.SAVE;\n    case ModelSpanType.FUNCTION:\n      return ModelIconType.FUNCTION;\n    case ModelSpanType.UNKNOWN:\n      return ModelIconType.UNKNOWN;\n    default:\n      return ModelIconType.FUNCTION;\n  }\n}\n\nexport function getDisplayNameForSpanType(spanType: ModelSpanType | string): string {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return 'LLM';\n    case ModelSpanType.CHAIN:\n      return 'Chain';\n    case ModelSpanType.AGENT:\n      return 'Agent';\n    case ModelSpanType.TOOL:\n      return 'Tool';\n    case ModelSpanType.CHAT_MODEL:\n      return 'Chat model';\n    case ModelSpanType.RETRIEVER:\n      return 'Retriever';\n    case ModelSpanType.PARSER:\n      return 'Parser';\n    case ModelSpanType.EMBEDDING:\n      return 'Embedding';\n    case ModelSpanType.RERANKER:\n      return 'Reranker';\n    case ModelSpanType.MEMORY:\n      return 'Memory';\n    case ModelSpanType.FUNCTION:\n      return 'Function';\n    case ModelSpanType.UNKNOWN:\n      return 'Unknown';\n    default:\n      return spanType;\n  }\n}\n\nexport function tryDeserializeAttribute(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nexport const getMatchesFromEvent = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  const events = span.events;\n  if (!events) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n  events.forEach((event, index) => {\n    const attributes = event.attributes;\n\n    if (!attributes) {\n      return;\n    }\n\n    Object.keys(attributes).forEach((attribute) => {\n      const isKeyMatch = attribute.toLowerCase().includes(searchFilter);\n      const key = getEventAttributeKey(event.name, index, attribute);\n\n      if (isKeyMatch) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      // event values can be arbitrary JSON\n      const value = JSON.stringify(attributes[attribute]).toLowerCase();\n      const numValueMatches = value.split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n\n  return matches;\n};\n\n/**\n * This function extracts all the matches from a span based on the search filter,\n * and appends some necessary metadata that is necessary for the jump-to-search\n * function.\n */\nexport const getMatchesFromSpan = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  // if search filter is empty, don't generate matches\n  // because there will be nothing to highlight anyway\n  if (!searchFilter) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n\n  const sections = {\n    inputs: span?.inputs,\n    outputs: span?.outputs,\n    attributes: span?.attributes,\n    events: span?.events,\n  };\n\n  map(sections, (section: any, label: 'inputs' | 'outputs' | 'attributes' | 'events') => {\n    if (label === 'events') {\n      matches.push(...getMatchesFromEvent(span, searchFilter));\n      return;\n    }\n\n    const sectionList = createListFromObject(section);\n    sectionList.forEach((item) => {\n      // NOTE: this ignores the fact that there might be multiple matches in a key\n      // for example, if the key is \"aaaaa\", and the search filter is \"a\". However,\n      // implementing support for this case would make the code needlessly complex.\n      // If we receive feedback that this is a problem, we can revisit this.\n      const isKeyMatch = item.key.toLowerCase().includes(searchFilter);\n      if (isKeyMatch) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      const numValueMatches = item.value.toLowerCase().split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n  return matches;\n};\n\nexport function searchTree(\n  rootNode: ModelTraceSpanNode,\n  searchFilter: string,\n  spanFilterState: SpanFilterState,\n): {\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matches: SearchMatch[];\n} {\n  const searchFilterLowercased = searchFilter.toLowerCase().trim();\n  const allSpanTypesSelected = Object.values(spanFilterState.spanTypeDisplayState).every(\n    (shouldDisplay) => shouldDisplay,\n  );\n  // if there is no search filter and all span types\n  // are selected, then we don't have to do any filtering.\n  if (searchFilterLowercased === '' && allSpanTypesSelected) {\n    return {\n      filteredTreeNodes: [rootNode],\n      matches: [],\n    };\n  }\n\n  const children = rootNode.children ?? [];\n  const filteredChildren: ModelTraceSpanNode[] = [];\n  const matches: SearchMatch[] = [];\n  children.forEach((child) => {\n    const { filteredTreeNodes: childNodes, matches: childMatches } = searchTree(\n      child,\n      searchFilterLowercased,\n      spanFilterState,\n    );\n\n    filteredChildren.push(...childNodes);\n    matches.push(...childMatches);\n  });\n\n  const spanName = ((rootNode.title as string) ?? '').toLowerCase();\n  const spanMatches = getMatchesFromSpan(rootNode, searchFilterLowercased);\n\n  // check if the span passes the text and type filters\n  const nodeMatchesSearch = spanMatches.length > 0 || spanName.includes(searchFilterLowercased);\n  const spanTypeIsDisplayed = rootNode.type ? spanFilterState.spanTypeDisplayState[rootNode.type] : true;\n  const nodePassesSpanFilters = nodeMatchesSearch && spanTypeIsDisplayed;\n\n  const hasMatchingChild = filteredChildren.length > 0;\n  const hasException = getSpanExceptionCount(rootNode) > 0;\n\n  const nodeShouldBeDisplayed =\n    nodePassesSpanFilters ||\n    // the `showParents` and `showExceptions` flags override the\n    // search filters, so we always show the node if they pass\n    (spanFilterState.showParents && hasMatchingChild) ||\n    (spanFilterState.showExceptions && hasException);\n\n  if (nodeShouldBeDisplayed) {\n    return {\n      filteredTreeNodes: [{ ...rootNode, children: filteredChildren }],\n      matches: spanMatches.concat(matches),\n    };\n  }\n\n  // otherwise cut the span out of the tree by returning the children directly\n  return {\n    filteredTreeNodes: filteredChildren,\n    matches,\n  };\n}\n\nexport function searchTreeBySpanId(\n  rootNode: ModelTraceSpanNode | null,\n  selectedSpanId?: string,\n): ModelTraceSpanNode | undefined {\n  if (isNil(selectedSpanId) || isNil(rootNode)) {\n    return undefined;\n  }\n\n  if (rootNode.key === selectedSpanId) {\n    return rootNode;\n  }\n\n  const children = rootNode.children ?? [];\n  for (const child of children) {\n    const matchedNode = searchTreeBySpanId(child, selectedSpanId);\n    if (matchedNode) {\n      return matchedNode;\n    }\n  }\n\n  return undefined;\n}\n\nconst getChatMessagesFromSpan = (\n  messagesAttributeValue: any,\n  inputs: any,\n  outputs: any,\n  spanAttributes?: Record<string, any>,\n): ModelTraceChatMessage[] | undefined => {\n  // if the `mlflow.chat.messages` attribute is provided\n  // and in the correct format, return it as-is\n  // we allow content type to be content part list for the `mlflow.chat.messages` attribute\n  if (Array.isArray(messagesAttributeValue) && messagesAttributeValue.every(isRawModelTraceChatMessage)) {\n    return compact(messagesAttributeValue.map(prettyPrintChatMessage));\n  }\n\n  // otherwise, attempt to parse messages from inputs and outputs\n  // this is to support rich rendering for older versions of MLflow\n  // before the `mlflow.chat.messages` attribute was introduced\n  const messagesFromInputs = normalizeConversation(inputs, spanAttributes?.['mlflow.message.format']) ?? [];\n  const messagesFromOutputs = normalizeConversation(outputs, spanAttributes?.['mlflow.message.format']) ?? [];\n\n  // when either input or output is not chat messages, we do not set the chat message fiels.\n  if (messagesFromInputs.length === 0 || messagesFromOutputs.length === 0) {\n    return undefined;\n  }\n\n  return messagesFromInputs.concat(messagesFromOutputs);\n};\n\nconst getChatToolsFromSpan = (toolsAttributeValue: any, inputs: any): ModelTraceChatTool[] | undefined => {\n  // if the `mlflow.chat.tools` attribute is provided\n  // and in the correct format, return it as-is\n  if (Array.isArray(toolsAttributeValue) && toolsAttributeValue.every(isModelTraceChatTool)) {\n    return toolsAttributeValue;\n  }\n\n  // otherwise, attempt to parse tools from inputs\n  // TODO: support langchain format for tool inputs\n  if (Array.isArray(inputs?.tools) && inputs?.tools?.every(isModelTraceChatTool)) {\n    return inputs.tools;\n  }\n\n  return undefined;\n};\n\nexport const normalizeNewSpanData = (\n  span: ModelTraceSpan,\n  rootStartTime: number,\n  rootEndTime: number,\n  children: ModelTraceSpanNode[],\n  assessmentMap: Record<string, Assessment[]>,\n  traceId: string,\n): ModelTraceSpanNode => {\n  const spanType = tryDeserializeAttribute(span.attributes?.['mlflow.spanType']);\n  const inputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanInputs']);\n  const outputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanOutputs']);\n  const parentId = getModelTraceSpanParentId(span);\n  const spanId = getModelTraceSpanId(span);\n\n  const assessments = assessmentMap[spanId] ?? [];\n  if (!parentId) {\n    // assessments that are not associated with a specific\n    // span should be displayed at the root.\n    assessments.push(...(assessmentMap[''] ?? []));\n  }\n\n  // data that powers the \"chat\" tab\n  const messagesAttributeValue = tryDeserializeAttribute(span.attributes?.['mlflow.chat.messages']);\n  const messageFormat = tryDeserializeAttribute(span.attributes?.['mlflow.message.format']);\n  const spanAttributesForChat = messageFormat ? { 'mlflow.message.format': messageFormat } : undefined;\n  const chatMessages = getChatMessagesFromSpan(messagesAttributeValue, inputs, outputs, spanAttributesForChat);\n  const chatTools = getChatToolsFromSpan(tryDeserializeAttribute(span.attributes?.['mlflow.chat.tools']), inputs);\n\n  // remove other private mlflow attributes\n  const attributes = mapValues(\n    omitBy(span.attributes, (_, key) => key.startsWith('mlflow.')),\n    (value) => tryDeserializeAttribute(value),\n  );\n  const events = span.events;\n  const start = (Number(getModelTraceSpanStartTime(span)) - rootStartTime) / 1000;\n  const end = (Number(getModelTraceSpanEndTime(span) ?? rootEndTime) - rootStartTime) / 1000;\n\n  return {\n    title: span.name,\n    icon: (\n      <ModelTraceExplorerIcon\n        type={getIconTypeForSpan(spanType)}\n        hasException={getSpanExceptionCount(span) > 0}\n        isRootSpan={!parentId}\n      />\n    ),\n    type: spanType,\n    key: spanId,\n    start,\n    end,\n    children,\n    inputs,\n    outputs,\n    attributes,\n    events,\n    chatMessages,\n    chatTools,\n    parentId,\n    assessments,\n    traceId,\n  };\n};\n\nconst base64ToHex = (base64: string): string => {\n  const binaryString = atob(base64);\n  const binaryLen = binaryString.length;\n  let hex = '';\n  for (let i = 0; i < binaryLen; i++) {\n    const charCode = binaryString.charCodeAt(i);\n    hex += charCode.toString(16).padStart(2, '0');\n  }\n  return hex;\n};\n\n// mlflow span ids are meant to be interpreted as hex strings\nexport const decodeSpanId = (spanId: string, isV3Span: boolean): string => {\n  if (isV3Span) {\n    // v3 span ids are base64 encoded\n    try {\n      return base64ToHex(spanId);\n    } catch (e) {\n      // if base64 decoding fails, just return the original spanId\n      return spanId;\n    }\n  }\n\n  // old V2 span ids (pre-March 2025) are in hex with a 0x prefix\n  if (spanId.startsWith('0x')) {\n    return spanId.slice(2);\n  }\n\n  // new V2 span ids have the prefix stripped\n  return spanId;\n};\n\nexport function isV3ModelTraceInfo(info: ModelTrace['info']): info is ModelTraceInfoV3 {\n  return 'trace_metadata' in info;\n}\n\nexport function isV3ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV3 {\n  return 'start_time_unix_nano' in span;\n}\n\nexport function isV2ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV2 {\n  return 'parent_id' in span;\n}\n\nexport function getModelTraceSpanId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span) ? decodeSpanId(span.span_id, true) : decodeSpanId(span.context?.span_id ?? '', false);\n}\n\nexport function getModelTraceSpanParentId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span)\n    ? decodeSpanId(span.parent_span_id ?? '', true)\n    : decodeSpanId(span.parent_id ?? '', false);\n}\n\nexport function getModelTraceSpanStartTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.start_time_unix_nano) : Number(span.start_time);\n}\n\nexport function getModelTraceSpanEndTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.end_time_unix_nano) : Number(span.end_time);\n}\n\nexport function getModelTraceId(trace: ModelTrace): string {\n  return isV3ModelTraceInfo(trace.info) ? trace.info.trace_id : trace.info.request_id ?? '';\n}\n\nexport function parseModelTraceToTree(trace: ModelTrace): ModelTraceSpanNode | null {\n  const traceId = getModelTraceId(trace);\n  const spans = trace.trace_data?.spans ?? trace.data.spans;\n  const spanMap: { [span_id: string]: ModelTraceSpan } = {};\n  const relationMap: { [span_id: string]: string[] } = {};\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    spanMap[spanId] = span;\n    relationMap[spanId] = [];\n  });\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    const parentId = getModelTraceSpanParentId(span);\n    if (parentId) {\n      if (!relationMap[parentId]) {\n        throw new Error('Tree structure is malformed!');\n      }\n      relationMap[parentId].push(spanId);\n    }\n  });\n\n  const rootSpan = spans.find((span) => !getModelTraceSpanParentId(span));\n  if (isNil(rootSpan)) {\n    return null;\n  }\n\n  const rootSpanId = getModelTraceSpanId(rootSpan);\n  function getSpanNodeFromData(span_id: string): ModelTraceSpanNode {\n    const span = spanMap[span_id];\n    // above we return if rootSpan is null, but for some\n    // reason typescript thinks it's still nullable here.\n    const rootStart = Number(getModelTraceSpanStartTime(rootSpan as ModelTraceSpan));\n    const rootEnd = Number(getModelTraceSpanEndTime(rootSpan as ModelTraceSpan));\n    const children = relationMap[span_id].map(getSpanNodeFromData);\n    const assessmentMap = getAssessmentMap(trace.info);\n\n    // not using `isV2Span` here because for legacy reasons,\n    // V1 and V2 are rolled into in the same type. \"parent_id\" is\n    // the way we distinguish between the two.\n    if (isV3ModelTraceSpan(span) || 'parent_id' in span) {\n      // reusing the same function for v2 and v3 as the changes are small\n      return normalizeNewSpanData(span, rootStart, rootEnd, children, assessmentMap, traceId);\n    }\n\n    // v1 spans\n    const spanType = span.span_type ?? ModelSpanType.UNKNOWN;\n    return {\n      title: span.name,\n      icon: <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />,\n      type: spanType as ModelSpanType,\n      key: span.context.span_id,\n      start: Number(span.start_time) - rootStart,\n      // default to the end of the root span if the span has no end time.\n      // this can happen if an exception was thrown in the span.\n      end: Number(span.end_time ?? rootEnd) - rootStart,\n      children: children,\n      inputs: span.inputs,\n      outputs: span.outputs,\n      attributes: span.attributes,\n      events: span.events,\n      parentId: span.parent_id ?? span.parent_span_id,\n      assessments: [],\n      traceId,\n    };\n  }\n\n  return getSpanNodeFromData(rootSpanId);\n}\n\n// returns a map of { [span_id: string] : Assessment[] }\nexport const getAssessmentMap = (traceInfo: ModelTrace['info']): Record<string, Assessment[]> => {\n  let assessments: Assessment[] = [];\n  if (isV3ModelTraceInfo(traceInfo)) {\n    assessments = traceInfo.assessments ?? [];\n  } else {\n    assessments = getAssessmentsFromTags(traceInfo.tags);\n  }\n\n  // hydrate the assessments with the overridden assessment objects\n  const assessmentsById = keyBy(assessments, 'assessment_id');\n  Object.values(assessmentsById).forEach((assessment) => {\n    if (assessment.overrides) {\n      const overriddenAssessment = assessmentsById[assessment.overrides];\n      assessment.overriddenAssessment = overriddenAssessment;\n    }\n  });\n\n  assessments = Object.values(assessmentsById);\n\n  // construct the map by reducing over the assessments\n  const assessmentMap = assessments.reduce((acc: Record<string, Assessment[]>, assessment: Assessment) => {\n    const spanId = assessment.span_id ?? '';\n    if (!acc[spanId]) {\n      acc[spanId] = [];\n    }\n    acc[spanId].push(assessment);\n    return acc;\n  }, {});\n\n  // sort the assessments by last_update_time\n  Object.keys(assessmentMap).forEach((spanId) => {\n    assessmentMap[spanId].sort(\n      (a, b) => new Date(b.last_update_time).getTime() - new Date(a.last_update_time).getTime(),\n    );\n  });\n\n  return assessmentMap;\n};\n\n// parses assessments out from the trace tags\nconst getAssessmentsFromTags = (tags: ModelTrace['info']['tags']): Assessment[] => {\n  if (!tags) {\n    return [];\n  }\n\n  const tagList = Array.isArray(tags) ? tags : Object.entries(tags).map(([key, value]) => ({ key, value }));\n\n  return tagList.filter(({ key }) => key.startsWith('mlflow.assessment.')).map(({ value }) => JSON.parse(value));\n};\n\n// this function attempts to extract the trace version from\n// a given source (either request_metadata or tags)\nexport function findTraceVersionByKey(\n  source: { [key: string]: string } | { key: string; value: string }[] | undefined,\n): string | undefined {\n  if (!source) {\n    return undefined;\n  }\n\n  if (isArray(source)) {\n    return source.find((tag) => tag.key === MLFLOW_TRACE_SCHEMA_VERSION_KEY)?.value;\n  }\n\n  return source[MLFLOW_TRACE_SCHEMA_VERSION_KEY];\n}\n\n// this function determines whether an object is a ModelTrace by asserting\n// that the object has the `data` and `info` fields, and that the\n// trace info contains the `mlflow.trace_schema.version` key\nexport const isModelTrace = (trace: any): trace is ModelTrace => {\n  const traceInfo = trace?.info;\n  const traceData = trace?.data;\n  if (!traceInfo || !traceData || !traceData?.spans) {\n    return false;\n  }\n\n  // request_metadata is for V2 traces, trace_metadata is for V3 traces\n  const metadata = traceInfo?.request_metadata ?? traceInfo?.trace_metadata;\n  if (metadata && findTraceVersionByKey(metadata)) {\n    return true;\n  }\n\n  const tags = traceInfo?.tags;\n  if (tags && findTraceVersionByKey(tags)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const createListFromObject = (\n  obj: { [key: string]: any } | string[] | string | boolean | number | undefined,\n) => {\n  if (isNil(obj)) {\n    return [];\n  }\n\n  if (Array.isArray(obj) || isString(obj) || isNumber(obj) || isBoolean(obj)) {\n    return [{ key: '', value: JSON.stringify(obj, null, 2) }];\n  }\n\n  return Object.entries(obj).map(([key, value]) => {\n    return { key, value: JSON.stringify(value, null, 2) };\n  });\n};\n\nexport const getHighlightedSpanComponents = ({\n  searchFilter,\n  data,\n  activeMatchBackgroundColor,\n  inactiveMatchBackgroundColor,\n  containsActiveMatch,\n  activeMatch,\n  scrollToActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatchBackgroundColor: string;\n  inactiveMatchBackgroundColor: string;\n  containsActiveMatch: boolean;\n  activeMatch: SearchMatch;\n  scrollToActiveMatch: (node: HTMLSpanElement) => void;\n}) => {\n  // splitting by regex retains the matches in the array,\n  // which makes it easier to handle stuff like preserving\n  // the original case of the match.\n  const regex = new RegExp(`(${escapeRegExp(searchFilter.trim())})`, 'gi');\n  const parts = data.split(regex);\n  const spans: React.ReactNode[] = [];\n  let matchIndex = 0;\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].toLowerCase().includes(searchFilter.toLowerCase().trim())) {\n      const isActiveMatch = containsActiveMatch && activeMatch.matchIndex === matchIndex;\n      const backgroundColor = isActiveMatch ? activeMatchBackgroundColor : inactiveMatchBackgroundColor;\n      const span = (\n        <span ref={isActiveMatch ? scrollToActiveMatch : null} key={i} css={{ backgroundColor, scrollMarginTop: 50 }}>\n          {parts[i]}\n        </span>\n      );\n      matchIndex++;\n      spans.push(span);\n    } else {\n      spans.push(parts[i]);\n    }\n  }\n\n  return spans;\n};\n\nexport const isRetrieverDocument = (document: any): document is RetrieverDocument => {\n  return has(document, 'page_content');\n};\n\nexport const isRenderableRetrieverSpan = (span: ModelTraceSpanNode): boolean => {\n  return (\n    span.type === ModelSpanType.RETRIEVER &&\n    Array.isArray(span.outputs) &&\n    span.outputs.length > 0 &&\n    every(span.outputs, isRetrieverDocument)\n  );\n};\n\nexport const getEventAttributeKey = (name: string, index: number, attribute: string): string => {\n  return `${name}-${index}-${attribute}`;\n};\n\nexport const getSpanExceptionEvents = (span: ModelTraceSpanNode | ModelTraceSpan): ModelTraceEvent[] => {\n  return (span.events ?? []).filter((event) => event.name === 'exception');\n};\n\nexport const getSpanExceptionCount = (span: ModelTraceSpanNode | ModelTraceSpan): number => {\n  return getSpanExceptionEvents(span).length;\n};\n\nexport const isModelTraceChatToolParamProperty = (obj: any): obj is ModelTraceChatToolParamProperty => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (!isNil(obj.type) && !isString(obj.type)) {\n    return false;\n  }\n\n  if (!isNil(obj.description) && !isString(obj.description)) {\n    return false;\n  }\n\n  if (!isNil(obj.enum) && !Array.isArray(obj.enum)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isModelTraceChatTool = (obj: any): obj is ModelTraceChatTool => {\n  if (isNil(obj) || obj.type !== 'function' || !has(obj, 'function.name')) {\n    return false;\n  }\n\n  // conditional validation for the `parameters` field\n  const parameters = obj.function?.parameters;\n  if (!isNil(parameters)) {\n    // if `required` is present, it must be a list of strings\n    const required = parameters.required;\n    if (!isNil(required) && (!Array.isArray(required) || !required.every(isString))) {\n      return false;\n    }\n\n    const properties = parameters.properties;\n    if (!isNil(properties) && !Object.values(properties).every(isModelTraceChatToolParamProperty)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const isModelTraceToolCall = (obj: any): obj is ModelTraceToolCall => {\n  return obj && isString(obj.id) && isString(obj.function?.arguments) && isString(obj.function?.name);\n};\n\nconst isContentPart = (part: any) => {\n  switch (part.type) {\n    case 'text':\n    case 'input_text':\n    case 'output_text':\n      return isString(part.text);\n    case 'image_url':\n      const { image_url } = part;\n      if (isNil(image_url)) {\n        return false;\n      }\n      return isString(image_url.url) && (isNil(image_url.detail) || ['auto', 'low', 'high'].includes(image_url.detail));\n    case 'input_audio':\n      const { input_audio } = part;\n      if (isNil(input_audio)) {\n        return false;\n      }\n      return isString(input_audio.data) && (isNil(input_audio.format) || ['wav', 'mp3'].includes(input_audio.format));\n    default:\n      return false;\n  }\n};\n\nconst isContentType = (content: any) => {\n  if (isNil(content) || isString(content)) {\n    return true;\n  }\n\n  if (isArray(content)) {\n    return content.every((part) => isContentPart(part));\n  }\n\n  return false;\n};\n\nexport const isModelTraceChatMessage = (message: any): message is ModelTraceChatMessage => {\n  if (!isRawModelTraceChatMessage(message)) {\n    return false;\n  }\n\n  return isNil(message.content) || isString(message.content);\n};\n\nexport const isRawModelTraceChatMessage = (message: any): message is RawModelTraceChatMessage => {\n  if (!message) {\n    return false;\n  }\n\n  if (message.tool_calls) {\n    if (!Array.isArray(message.tool_calls)) {\n      return false;\n    }\n\n    if (!message.tool_calls.every(isModelTraceToolCall)) {\n      return false;\n    }\n  }\n\n  if (message.type === 'reasoning') {\n    return true;\n  }\n\n  // verify if the message content is a valid content type or not\n  if (!isContentType(message.content)) {\n    return false;\n  }\n\n  return (\n    message.role === 'user' || message.role === 'assistant' || message.role === 'system' || message.role === 'tool'\n  );\n};\n\nexport const isModelTraceChatInput = (obj: any): obj is ModelTraceChatInput => {\n  return (\n    obj && Array.isArray(obj.messages) && obj.messages.length > 0 && obj.messages.every(isRawModelTraceChatMessage)\n  );\n};\n\nexport const isModelTraceChoices = (obj: any): obj is ModelTraceChatResponse['choices'] => {\n  return (\n    Array.isArray(obj) &&\n    obj.length > 0 &&\n    obj.every((choice: any) => has(choice, 'message') && isModelTraceChatMessage(choice.message))\n  );\n};\n\nexport const isModelTraceChatResponse = (obj: any): obj is ModelTraceChatResponse => {\n  return obj && isModelTraceChoices(obj.choices);\n};\n\n/**\n * Attempt to normalize a conversation, return null in case the format is unrecognized\n * TODO: move all chat parsing logic to the chat-utils folder to avoid cluttering this\n * utils file.\n *\n * Supported formats:\n *   1. Langchain chat inputs\n *   2. Langchain chat results\n *   3. OpenAI ChatCompletions inputs\n *   4. OpenAI ChatCompletions responses\n *   5. OpenAI Responses inputs\n *   6. OpenAI Responses output\n *   7. LlamaIndex chat responses\n *   8. DSPy chat inputs\n *   8. DSPy chat outputs\n *   9. Gemini inputs\n *  10. Gemini outputs\n *  11. Anthropic inputs\n *  12. Anthropic outputs\n */\nexport const normalizeConversation = (input: any, messageFormat?: string): ModelTraceChatMessage[] | null => {\n  // wrap in try/catch to avoid crashing the UI. we're doing a lot of type coercion\n  // and formatting, and it's possible that we miss some edge cases. in case of an error,\n  // simply return null to signify that the input is not a chat input.\n  try {\n    // if the input is already in the correct format, return it\n    if (Array.isArray(input) && input.length > 0 && input.every(isRawModelTraceChatMessage)) {\n      return compact(input.map(prettyPrintChatMessage));\n    }\n\n    switch (messageFormat) {\n      case 'langchain':\n        const langchainMessages = normalizeLangchainChatInput(input) ?? normalizeLangchainChatResult(input);\n        if (langchainMessages) return langchainMessages;\n        break;\n      case 'llamaindex':\n        const llamaIndexMessages = normalizeLlamaIndexChatInput(input) ?? normalizeLlamaIndexChatResponse(input);\n        if (llamaIndexMessages) return llamaIndexMessages;\n        break;\n      case 'openai':\n        const openAIMessages =\n          normalizeOpenAIChatInput(input) ??\n          normalizeOpenAIChatResponse(input) ??\n          normalizeOpenAIResponsesOutput(input) ??\n          normalizeOpenAIResponsesInput(input);\n        if (openAIMessages) return openAIMessages;\n        break;\n      case 'dspy':\n        const dspyMessages = normalizeDspyChatInput(input) ?? normalizeDspyChatOutput(input);\n        if (dspyMessages) return dspyMessages;\n        break;\n      case 'gemini':\n        const geminiMessages = normalizeGeminiChatInput(input) ?? normalizeGeminiChatOutput(input);\n        if (geminiMessages) return geminiMessages;\n        break;\n      case 'anthropic':\n        const anthropicMessages = normalizeAnthropicChatInput(input) ?? normalizeAnthropicChatOutput(input);\n        if (anthropicMessages) return anthropicMessages;\n        break;\n      case 'openai-agent':\n        const openAIAgentMessages = normalizeOpenAIAgentInput(input) ?? normalizeOpenAIAgentOutput(input);\n        if (openAIAgentMessages) return openAIAgentMessages;\n        break;\n      case 'autogen':\n        const autogenMessages = normalizeAutogenChatInput(input) ?? normalizeAutogenChatOutput(input);\n        if (autogenMessages) return autogenMessages;\n        break;\n      case 'bedrock':\n        const bedrockMessages = normalizeBedrockChatInput(input) ?? normalizeBedrockChatOutput(input);\n        if (bedrockMessages) return bedrockMessages;\n        break;\n      default:\n        // Fallback to OpenAI chat format\n        const chatMessages = normalizeOpenAIChatInput(input) ?? normalizeOpenAIChatResponse(input);\n        if (chatMessages) return chatMessages;\n        break;\n    }\n\n    return null;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const prettyPrintToolCall = (toolCall: ModelTraceToolCall): ModelTraceToolCall => {\n  // add some spacing to the arguments for better readability\n  let args = toolCall.function?.arguments;\n  try {\n    args = JSON.stringify(JSON.parse(args), null, 2);\n  } catch (e) {\n    // use original args\n  }\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: args,\n      name: toolCall.function.name,\n    },\n  };\n};\n\nconst formatChatContent = (content?: ModelTraceContentType | null): string | undefined | null => {\n  if (isNil(content) || isString(content)) {\n    return content;\n  }\n\n  const contentParts = content\n    // eslint-disable-next-line array-callback-return\n    .map((part) => {\n      switch (part.type) {\n        case 'text':\n        case 'input_text':\n        case 'output_text':\n          return part.text;\n        case 'image_url':\n          const url = part?.image_url?.url;\n          return url ? `![](${url})` : '[image]';\n        case 'input_audio':\n          // raw encoded audio content is not displayed in the UI\n          return '[audio]';\n      }\n    })\n    .filter((part) => part !== undefined);\n\n  // Join with double line breaks for better visual separation\n  return contentParts.join('\\n\\n');\n};\n\nexport const prettyPrintChatMessage = (message: RawModelTraceChatMessage): ModelTraceChatMessage | null => {\n  // TODO: support rich rendering of reasoning messages\n  // for now, just return null and compact it away in the caller\n  // this is because we want to still render the rest of the message\n  // outputs.\n  if (message.type === 'reasoning') {\n    return null;\n  }\n\n  return {\n    ...message,\n    content: formatChatContent(message.content),\n    tool_calls: message.tool_calls?.map(prettyPrintToolCall),\n  };\n};\n","import type { TimelineTreeNode } from './timeline-tree';\n\nexport const MLFLOW_TRACE_SCHEMA_VERSION_KEY = 'mlflow.trace_schema.version';\n\n// column name for mlflow trace data in inference tables\nexport const INFERENCE_TABLE_RESPONSE_COLUMN_KEY = 'response';\nexport const INFERENCE_TABLE_TRACE_COLUMN_KEY = 'trace';\n\nexport type ModelTraceExplorerRenderMode = 'default' | 'json';\n\nexport enum ModelSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  FUNCTION = 'FUNCTION',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  MEMORY = 'MEMORY',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport enum ModelIconType {\n  MODELS = 'models',\n  DOCUMENT = 'document',\n  CONNECT = 'connect',\n  SEARCH = 'search',\n  SORT = 'sort',\n  UNKNOWN = 'unknown',\n  FUNCTION = 'function',\n  CODE = 'code',\n  NUMBERS = 'numbers',\n  WRENCH = 'wrench',\n  AGENT = 'agent',\n  CHAIN = 'chain',\n  USER = 'user',\n  SYSTEM = 'system',\n  SAVE = 'save',\n}\n\n/**\n * Represents a single model trace span.\n * Based on https://github.com/mlflow/mlflow/blob/tracing/mlflow/entities/span.py\n *\n * TODO: clean up all deprecated fields after PrPr customers swap over to\n *       the latest version of mlflow tracing\n */\nexport type ModelTraceSpanV2 = {\n  context: {\n    span_id: string;\n    trace_id: string;\n  };\n  name: string;\n  /* deprecated, renamed to `parent_id` */\n  parent_span_id?: string | null;\n  parent_id?: string | null;\n  /* deprecated, contained in attributes['mlflow.spanType'] */\n  span_type?: ModelSpanType | string;\n  /* deprecated, migrated to `status_code` and `status_message` */\n  status?: ModelTraceStatus;\n  status_code?: string;\n  status_message?: string | null;\n  start_time: number;\n  end_time: number;\n  /* deprecated, contained in attributes['mlflow.spanInputs'] */\n  inputs?: any;\n  /* deprecated, contained in attributes['mlflow.spanOutputs'] */\n  outputs?: any;\n  attributes?: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpanV3 = {\n  trace_id: string;\n  span_id: string;\n  // can be empty\n  trace_state: string;\n  // can be empty or null\n  parent_span_id: string | null;\n  name: string;\n  start_time_unix_nano: string;\n  end_time_unix_nano: string;\n  status: {\n    code: ModelSpanStatusCode;\n    message?: string;\n  };\n  attributes: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpan = ModelTraceSpanV2 | ModelTraceSpanV3;\n\nexport type ModelTraceEvent = {\n  name: string;\n  /* deprecated as of v3, migrated to `time_unix_nano` */\n  timestamp?: number;\n  time_unix_nano?: number;\n  attributes?: Record<string, any>;\n};\n\nexport type ModelTraceData = {\n  spans: ModelTraceSpan[];\n};\n\n/**\n * Represents a single model trace object.\n * Based on https://github.com/mlflow/mlflow/blob/8e44d102e9568d09d9dc376136d13a5a5d1ab46f/mlflow/tracing/types/model.py#L11\n */\nexport type ModelTrace = {\n  /* deprecated, renamed to `data` */\n  trace_data?: ModelTraceData;\n  /* deprecated, renamed to `info` */\n  trace_info?: ModelTraceInfo;\n  data: ModelTraceData;\n  info: ModelTraceInfoV3 | ModelTraceInfo | NotebookModelTraceInfo;\n};\n\n/**\n * Represents the trace data saved in an inference table.\n * https://github.com/databricks/universe/blob/fb8a572602161aa6387ac32593aa24a91518cc32/rag/serving/python/databricks/rag/unpacking/schemas.py#L133-L141\n */\nexport type ModelTraceInferenceTableData = {\n  app_version_id: string;\n  start_timestamp: string;\n  end_timestamp: string;\n  is_truncated: boolean;\n  [MLFLOW_TRACE_SCHEMA_VERSION_KEY]: number;\n  spans: (Omit<ModelTraceSpan, 'attributes'> & {\n    attributes: string;\n  })[];\n};\n\nexport type ModelTraceInfo = {\n  request_id?: string;\n  experiment_id?: string;\n  timestamp_ms?: number;\n  execution_time_ms?: number;\n  status?: ModelTraceStatus['description'];\n  attributes?: Record<string, any>;\n  request_metadata?: { key: string; value: string }[];\n  tags?: { key: string; value: string }[];\n};\n\n// tags and request_metadata in the notebook view\n// (i.e. displayed directly from the python client)\n// are stored as an object rather than an array.\nexport type NotebookModelTraceInfo = Omit<ModelTraceInfo, 'tags' | 'request_metadata'> & {\n  tags?: { [key: string]: string };\n  request_metadata?: { [key: string]: string };\n};\n\nexport type ModelTraceLocationMlflowExperiment = {\n  type: 'MLFLOW_EXPERIMENT';\n  mlflow_experiment: {\n    experiment_id: string;\n  };\n};\n\nexport type ModelTraceLocationInferenceTable = {\n  type: 'INFERENCE_TABLE';\n  inference_table: {\n    full_table_name: string;\n  };\n};\n\nexport type ModelTraceLocation = ModelTraceLocationMlflowExperiment | ModelTraceLocationInferenceTable;\n\nexport type ModelTraceInfoV3 = {\n  trace_id: string;\n  client_request_id?: string;\n  trace_location: ModelTraceLocation;\n  request_preview?: string;\n  response_preview?: string;\n  // timestamp in a format like \"2025-02-19T09:52:23.140Z\"\n  request_time: string;\n  // formatted duration string like \"32.4s\"\n  execution_duration: string;\n  state: ModelTraceState;\n  trace_metadata: {\n    [key: string]: string;\n  };\n  assessments: Assessment[];\n  tags: {\n    [key: string]: string;\n  };\n};\n\nexport type ModelTraceState = 'STATE_UNSPECIFIED' | 'OK' | 'ERROR' | 'IN_PROGRESS';\n\nexport type ModelSpanStatusCode = 'STATUS_CODE_UNSET' | 'STATUS_CODE_OK' | 'STATUS_CODE_ERROR';\n\nexport type ModelTraceStatusUnset = {\n  description: 'UNSET';\n  status_code: 0;\n};\n\nexport type ModelTraceStatusOk = {\n  description: 'OK';\n  status_code: 1;\n};\n\nexport type ModelTraceStatusError = {\n  description: 'ERROR';\n  status_code: 2;\n};\n\nexport type ModelTraceStatusInProgress = {\n  description: 'IN_PROGRESS';\n  status_code: 3;\n};\n\nexport enum ModelTraceSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  MEMORY = 'MEMORY',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport type ModelTraceStatus =\n  | ModelTraceStatusUnset\n  | ModelTraceStatusOk\n  | ModelTraceStatusError\n  | ModelTraceStatusInProgress;\n\n/**\n * Represents a single node in the model trace tree.\n */\nexport interface ModelTraceSpanNode extends TimelineTreeNode, Pick<ModelTraceSpan, 'attributes' | 'type' | 'events'> {\n  assessments: Assessment[];\n  inputs?: any;\n  outputs?: any;\n  children?: ModelTraceSpanNode[];\n  chatMessages?: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n  parentId?: string | null;\n  traceId: string;\n}\n\nexport type ModelTraceExplorerTab = 'chat' | 'content' | 'attributes' | 'events';\n\nexport type SearchMatch = {\n  span: ModelTraceSpanNode;\n  section: 'inputs' | 'outputs' | 'attributes' | 'events';\n  key: string;\n  isKeyMatch: boolean;\n  matchIndex: number;\n};\n\nexport type SpanFilterState = {\n  // always show parents regardless of filter state\n  showParents: boolean;\n  // always show exceptions regardless of filter state\n  showExceptions: boolean;\n  // record of span_type: whether to show it\n  spanTypeDisplayState: Record<string, boolean>;\n};\n\nexport interface RetrieverDocument {\n  metadata: {\n    doc_uri: string;\n    chunk_id: string;\n    [key: string]: any;\n  };\n  page_content: string;\n  [key: string]: any;\n}\n\nexport enum CodeSnippetRenderMode {\n  JSON = 'json',\n  TEXT = 'text',\n  MARKDOWN = 'markdown',\n}\n\ntype ModelTraceTextContentPart = {\n  type: 'text' | 'input_text' | 'output_text';\n  text: string;\n};\n\ntype ModelTraceImageUrl = {\n  url: string;\n  detail?: 'auto' | 'low' | 'high';\n};\n\ntype ModelTraceImageContentPart = {\n  type: 'image_url';\n  image_url: ModelTraceImageUrl;\n};\n\ntype ModelTraceInputAudio = {\n  data: string;\n  format: 'wav' | 'mp3';\n};\n\ntype ModelTraceAudioContentPart = {\n  type: 'input_audio';\n  input_audio: ModelTraceInputAudio;\n};\n\nexport type ModelTraceContentParts =\n  | ModelTraceTextContentPart\n  | ModelTraceImageContentPart\n  | ModelTraceAudioContentPart;\n\nexport type ModelTraceContentType = string | ModelTraceContentParts[];\n\n// We treat content as string in the tracing UI.\nexport type ModelTraceChatMessage = {\n  role: 'system' | 'user' | 'assistant' | 'tool' | 'function' | 'developer';\n  name?: string;\n  content?: string | null;\n  tool_calls?: ModelTraceToolCall[];\n  tool_call_id?: string;\n};\n\n// The actual chat message schema of mlflow contains string, null and content part list.\nexport type RawModelTraceChatMessage = Omit<ModelTraceChatMessage, 'content'> & {\n  // there are other types, but we don't support them yet\n  type?: 'message' | 'reasoning';\n  content?: ModelTraceContentType | null;\n};\n\nexport type ModelTraceChatToolParamProperty = {\n  type?: string;\n  description?: string;\n  enum?: string[];\n};\n\nexport type ModelTraceChatTool = {\n  type: 'function';\n  function: {\n    name: string;\n    description?: string;\n    parameters?: {\n      properties: {\n        [key: string]: ModelTraceChatToolParamProperty;\n      };\n      required?: string[];\n    };\n  };\n};\n\nexport type ModelTraceToolCall = {\n  id: string;\n  function: {\n    arguments: string;\n    name: string;\n  };\n};\n\n// aligned to the OpenAI format\nexport type ModelTraceChatResponse = {\n  choices: {\n    message: ModelTraceChatMessage;\n  }[];\n};\n\nexport type ModelTraceChatInput = {\n  messages: RawModelTraceChatMessage[];\n};\n\nexport type AssessmentSourceType = 'SOURCE_TYPE_UNSPECIFIED' | 'HUMAN' | 'LLM_JUDGE' | 'CODE';\n\nexport interface AssessmentSource {\n  source_type: AssessmentSourceType;\n  // Identifier for the source. For example:\n  // - For a human source -> user name\n  // - For an LLM judge -> the judge source (databricks or custom)\n  // - For a code judge -> the function name\n  source_id: string;\n}\n\nexport interface AssessmentError {\n  error_code: string;\n  error_message?: string;\n  stack_trace?: string;\n}\n\nexport type AssessmentValue = string | number | boolean | null | string[];\n\nexport interface Feedback {\n  // can be null / undefined if error is present\n  value?: AssessmentValue;\n  error?: AssessmentError;\n}\n\nexport interface ExpectationValue {\n  value: AssessmentValue;\n}\n\nexport interface ExpectationSerializedValue {\n  serialized_value: {\n    value: string;\n    serialization_format: string;\n  };\n}\n\nexport type Expectation = ExpectationValue | ExpectationSerializedValue;\n\n// should be aligned with `mlflow/api/proto/service.proto`\nexport interface AssessmentBase {\n  assessment_id: string;\n  assessment_name: string;\n  trace_id: string;\n  source: AssessmentSource;\n  span_id?: string;\n\n  // the time fields are in the form of a string timestamp\n  // e.g. \"2025-04-18T04:01:20.159Z\"\n  create_time: string;\n  last_update_time: string;\n\n  rationale?: string;\n  metadata?: Record<string, string>;\n\n  // if false, the assessment is not valid and should not be displayed\n  // undefined and true should be considered valid.\n  valid?: boolean;\n\n  // the assessment_id of the assessment that this assessment overrides\n  overrides?: string;\n\n  // UI only field to store the overridden assessment object for easier display\n  overriddenAssessment?: Assessment;\n}\n\nexport interface FeedbackAssessment extends AssessmentBase {\n  feedback: Feedback;\n}\n\nexport interface ExpectationAssessment extends AssessmentBase {\n  expectation: Expectation;\n}\n\nexport type Assessment = FeedbackAssessment | ExpectationAssessment;\n","import type { ModelTrace, ModelTraceData } from '@databricks/web-shared/model-trace-explorer';\n\n// returns ModelTrace if the request is successful, otherwise returns an error message\nexport async function getTraceArtifact(requestId: string): Promise<ModelTrace | string> {\n  try {\n    // eslint-disable-next-line no-restricted-globals -- See go/spog-fetch\n    const result = await fetch(`/ajax-api/2.0/mlflow/get-trace-artifact?request_id=${requestId}`);\n    const text = await result.text();\n\n    const jsonData = JSON.parse(text);\n    // successful request containing span data\n    if (jsonData.spans) {\n      return {\n        info: {\n          request_id: requestId,\n        },\n        data: jsonData as ModelTraceData,\n      };\n    }\n\n    if (jsonData.error_code) {\n      return jsonData.message;\n    }\n\n    return 'Unknown error occurred';\n  } catch (e) {\n    if (e instanceof Error) {\n      return e.message;\n    }\n\n    if (typeof e === 'string') {\n      return e;\n    }\n\n    return 'Unknown error occurred';\n  }\n}\n","import { useState, useEffect, useMemo } from 'react';\n\nimport {\n  useDesignSystemTheme,\n  Typography,\n  Pagination,\n  Empty,\n  DangerIcon,\n  InfoTooltip,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { ModelTraceExplorer, getTraceArtifact } from '@databricks/web-shared/model-trace-explorer';\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\n\nconst MLFLOW_DOCS_URI = 'https://mlflow.org/docs/latest/llms/tracing/index.html?ref=jupyter-notebook-widget';\n\nconst getMlflowUILinkForTrace = (traceId: string, experimentId: string) => {\n  const queryParams = new URLSearchParams();\n  queryParams.append('selectedTraceId', traceId);\n  queryParams.append('compareRunsMode', 'TRACES');\n  return `/#/experiments/${experimentId}?${queryParams.toString()}`;\n};\n\nexport const ModelTraceExplorerOSSNotebookRenderer = () => {\n  const traceIds = useMemo(() => new URLSearchParams(window.location.search).getAll('trace_id'), []);\n  const experimentIds = useMemo(() => new URLSearchParams(window.location.search).getAll('experiment_id'), []);\n\n  const [activeTraceIndex, setActiveTraceIndex] = useState(traceIds.length > 0 ? 0 : null);\n  const [traceData, setTraceData] = useState<ModelTrace | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { theme } = useDesignSystemTheme();\n\n  useEffect(() => {\n    const fetchTraceData = async () => {\n      if (activeTraceIndex === null) {\n        return;\n      }\n\n      setIsLoading(true);\n      const activeTraceId = traceIds[activeTraceIndex];\n      const data = await getTraceArtifact(activeTraceId);\n\n      if (typeof data === 'string') {\n        setError(data);\n      } else {\n        setTraceData(data);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchTraceData();\n  }, [activeTraceIndex, traceIds]);\n\n  if (traceIds.length === 0 || activeTraceIndex === null) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div css={{ width: 'calc(100% - 2px)' }}>\n        <Typography.Text color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Fetching trace data...\"\n            description=\"MLflow trace notebook output > loading state\"\n          />\n        </Typography.Text>\n      </div>\n    );\n  }\n\n  // some error occured\n  if (!traceData) {\n    return (\n      <div css={{ paddingTop: theme.spacing.md, width: 'calc(100% - 2px)' }}>\n        <Empty\n          image={<DangerIcon />}\n          description={\n            <>\n              <Typography.Paragraph>\n                <FormattedMessage\n                  defaultMessage=\"An error occurred while attempting to fetch trace data (ID: {traceId}). Please ensure that the MLflow tracking server is running, and that the trace data exists. Error details:\"\n                  description=\"An error message explaining that an error occured while fetching trace data\"\n                  values={{ traceId: traceIds[activeTraceIndex] }}\n                />\n              </Typography.Paragraph>\n              {error && <Typography.Paragraph>{error}</Typography.Paragraph>}\n            </>\n          }\n          title={\n            <FormattedMessage defaultMessage=\"Error\" description=\"MLflow trace notebook output > error state title\" />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        border: `1px solid ${theme.colors.border}`,\n        // -2px to prevent bottom border from being cut off\n        height: 'calc(100% - 2px)',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: theme.spacing.sm,\n          }}\n        >\n          <Typography.Title level={4} withoutMargins>\n            MLflow Trace UI\n          </Typography.Title>\n          <InfoTooltip\n            componentId=\"mlflow.notebook.trace-ui-info\"\n            iconTitle=\"More information\"\n            maxWidth={400}\n            content={\n              <FormattedMessage\n                defaultMessage=\"To disable or enable this display, call {disableFunction} or {enableFunction} and re-run the cell\"\n                description=\"Content in an info popover that instructs the user on how to disable the display. The disable and enable functions are code snippets with the real function names\"\n                values={{\n                  disableFunction: <code>mlflow.tracing.disable_notebook_display()</code>,\n                  enableFunction: <code>mlflow.tracing.enable_notebook_display()</code>,\n                }}\n              />\n            }\n          />\n          <Typography.Link\n            componentId=\"mlflow.notebook.trace-ui-learn-more-link\"\n            href={MLFLOW_DOCS_URI}\n            openInNewTab\n            title=\"Learn More\"\n          >\n            <FormattedMessage\n              defaultMessage=\"Learn More\"\n              description=\"Link to MLflow documentation for more information on MLflow tracing\"\n            />\n          </Typography.Link>\n        </div>\n        <Typography.Link\n          componentId=\"mlflow.notebook.trace-ui-see-in-mlflow-link\"\n          href={getMlflowUILinkForTrace(traceIds[activeTraceIndex], experimentIds[activeTraceIndex])}\n          openInNewTab\n          title=\"View in MLflow UI\"\n        >\n          <FormattedMessage\n            defaultMessage=\"View in MLflow UI\"\n            description=\"Link to the MLflow UI for an alternate view of the current trace\"\n          />\n        </Typography.Link>\n      </div>\n      {traceIds.length > 1 && (\n        <Pagination\n          componentId=\"mlflow.notebook.pagination\"\n          currentPageIndex={activeTraceIndex + 1}\n          dangerouslySetAntdProps={{\n            showQuickJumper: true,\n          }}\n          numTotal={traceIds.length}\n          onChange={(index) => setActiveTraceIndex(index - 1)}\n          pageSize={1}\n          style={{ marginBottom: theme.spacing.sm, paddingLeft: theme.spacing.sm, paddingRight: theme.spacing.sm }}\n        />\n      )}\n      <div css={{ flex: 1, overflow: 'hidden' }}>\n        <ModelTraceExplorer modelTrace={traceData} initialActiveView=\"detail\" />\n      </div>\n    </div>\n  );\n};\n","import { type RefObject, useRef, useCallback, useEffect, useState } from 'react';\n\ntype ResizeObserverOptions<ElementType extends Element> = {\n  /**\n   * The element to watch for size changes. Can either pass a ref object or a function that when called will return the element to be watched\n   */\n  ref: RefObject<ElementType | null> | (() => ElementType | null);\n  /**\n   * Optionally debounces state updates, to prevent rerendering on every single resize\n   */\n  debounceTimeMs?: number;\n};\n\nexport function useResizeObserver<ElementType extends Element>({\n  ref: rootRef,\n  debounceTimeMs,\n}: ResizeObserverOptions<ElementType>): { width: number; height: number } | null {\n  const prevSize = useRef<{ width: number; height: number }>({ width: -1, height: -1 });\n  const debounceRef = useRef<ReturnType<typeof setTimeout>>();\n  const [size, setSize] = useState<{ width: number; height: number } | null>(null);\n\n  const onResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries.length === 0) {\n        return;\n      }\n\n      const rect = entries[0].contentRect;\n      if (prevSize.current.width === -1) {\n        // First update, just set size immediately\n        prevSize.current = { width: rect.width, height: rect.height };\n        setSize(prevSize.current);\n        return;\n      }\n\n      if (rect.width !== prevSize.current.width || rect.height !== prevSize.current.height) {\n        prevSize.current.width = rect.width;\n        prevSize.current.height = rect.height;\n\n        if (!debounceTimeMs) {\n          setSize({ ...prevSize.current });\n          return;\n        }\n        clearTimeout(debounceRef.current);\n        debounceRef.current = setTimeout(() => {\n          setSize({ ...prevSize.current });\n        }, debounceTimeMs);\n      }\n    },\n    [debounceTimeMs],\n  );\n\n  const observerRef = useRef<ResizeObserver>();\n  if (!observerRef.current) {\n    observerRef.current = new ResizeObserver(onResize);\n  }\n\n  useEffect(() => {\n    const rootElement = typeof rootRef === 'function' ? rootRef() : rootRef.current;\n    if (rootElement) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n      const observer = observerRef.current!;\n      observer.observe(rootElement);\n      return () => observer.unobserve(rootElement);\n    }\n    return;\n  });\n\n  return size;\n}\n"],"names":["useCopyController","text","copyTooltip","onCopy","intl","useIntl","copyMessage","formatMessage","id","defaultMessage","copiedMessage","clipboard","useClipboard","copiedTimerIdRef","useRef","copied","setCopied","useState","open","setOpen","useEffect","window","clearTimeout","current","actionIcon","_jsx","CheckIcon","CopyIcon","tooltipMessage","copy","setTimeout","ariaLabel","tooltipOpen","handleTooltipOpenChange","shouldEnableAssessmentEditing","shouldEnableSummaryView","getIsMlflowTraceUIEnabled","fontFamily","fontSize","lineHeight","direction","textAlign","whiteSpace","wordSpacing","wordBreak","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","background","color","padding","margin","overflow","textShadow","borderRadius","comment","prolog","doctype","cdata","punctuation","namespace","Opacity","tag","operator","number","property","function","selector","boolean","string","entity","cursor","url","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable","deleted","textDecoration","inserted","borderBottom","italic","fontStyle","important","fontWeight","bold","Outline","OutlineOffset","borderRightColor","wordWrap","position","attribute","builtin","char","class","constant","hexcode","symbol","_ref","name","styles","SnippetActionButton","buttonProps","style","LegacyTooltip","title","children","Button","componentId","css","SnippetCopyAction","copyText","onClick","props","icon","e","SyntaxHighlighter","registerLanguage","sql","java","python","go","javascript","yaml","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","CodeSnippet","theme","language","actions","showLineNumbers","lineNumberStyle","wrapLongLines","wrapLines","PreTag","customStyle","border","codeTagProps","pick","ErrorLogType","ErrorName","PredefinedError","Error","constructor","message","cause","super","errorLogType","errorName","displayMessage","isUserError","matchPredefinedError","error","matchPredefinedApolloError","Response","matchPredefinedErrorFromResponse","UnknownError","networkError","hasOwnProperty","response","GraphQLGenericError","originalError","errorDetails","NetworkRequestError","getNetworkRequestErrorDetailsFromResponse","status","BadRequestError","UnauthorizedError","PermissionError","NotFoundError","RateLimitedError","InternalServerError","ServiceUnavailableError","GenericNetworkRequestError","details","this","ServerError","FormattedMessage","ApplicationError","UserInputError","UnexpectedSystemStateError","SessionError","FETCH_TRACE_INFO_QUERY_KEY","displayErrorNotification","errorMessage","getIconTypeForSpan","spanType","ModelSpanType","LLM","ModelIconType","MODELS","CHAIN","AGENT","TOOL","WRENCH","CHAT_MODEL","RETRIEVER","SEARCH","PARSER","CODE","EMBEDDING","NUMBERS","RERANKER","SORT","MEMORY","SAVE","FUNCTION","UNKNOWN","getDisplayNameForSpanType","tryDeserializeAttribute","value","JSON","parse","getMatchesFromSpan","span","searchFilter","matches","sections","inputs","outputs","attributes","events","map","section","label","push","getMatchesFromEvent","forEach","event","index","Object","keys","isKeyMatch","toLowerCase","includes","key","getEventAttributeKey","matchIndex","numValueMatches","stringify","split","length","i","createListFromObject","item","searchTree","rootNode","spanFilterState","_rootNode$children","searchFilterLowercased","trim","allSpanTypesSelected","values","spanTypeDisplayState","every","shouldDisplay","filteredTreeNodes","filteredChildren","child","childNodes","childMatches","spanName","spanMatches","nodeMatchesSearch","spanTypeIsDisplayed","type","nodePassesSpanFilters","hasMatchingChild","hasException","getSpanExceptionCount","showParents","showExceptions","concat","searchTreeBySpanId","selectedSpanId","_rootNode$children2","isNil","matchedNode","normalizeNewSpanData","rootStartTime","rootEndTime","assessmentMap","traceId","_span$attributes","_span$attributes2","_span$attributes3","_assessmentMap$spanId","_span$attributes4","_span$attributes5","_span$attributes6","_getModelTraceSpanEnd","parentId","getModelTraceSpanParentId","spanId","getModelTraceSpanId","assessments","_assessmentMap$","messagesAttributeValue","messageFormat","chatMessages","getChatMessagesFromSpan","spanAttributes","_normalizeConversatio","_normalizeConversatio2","Array","isArray","isRawModelTraceChatMessage","compact","prettyPrintChatMessage","messagesFromInputs","normalizeConversation","messagesFromOutputs","undefined","chatTools","getChatToolsFromSpan","toolsAttributeValue","_inputs$tools","isModelTraceChatTool","tools","mapValues","omitBy","_","startsWith","start","Number","getModelTraceSpanStartTime","end","getModelTraceSpanEndTime","ModelTraceExplorerIcon","isRootSpan","decodeSpanId","isV3Span","base64","binaryString","atob","binaryLen","hex","charCodeAt","toString","padStart","base64ToHex","slice","isV3ModelTraceInfo","info","isV3ModelTraceSpan","_span$context$span_id","_span$context","span_id","context","_span$parent_span_id","_span$parent_id","parent_span_id","parent_id","start_time_unix_nano","start_time","end_time_unix_nano","end_time","getModelTraceId","trace","_trace$info$request_i","trace_id","request_id","parseModelTraceToTree","_trace$trace_data$spa","_trace$trace_data","spans","trace_data","data","spanMap","relationMap","rootSpan","find","getSpanNodeFromData","_span$span_type","_span$end_time","_span$parent_id2","rootStart","rootEnd","getAssessmentMap","span_type","traceInfo","_traceInfo$assessment","getAssessmentsFromTags","tags","assessmentsById","keyBy","assessment","overrides","overriddenAssessment","reduce","acc","_assessment$span_id","sort","a","b","Date","last_update_time","getTime","entries","filter","findTraceVersionByKey","source","_source$find","MLFLOW_TRACE_SCHEMA_VERSION_KEY","isModelTrace","_traceInfo$request_me","traceData","metadata","request_metadata","trace_metadata","obj","isString","isNumber","isBoolean","getHighlightedSpanComponents","activeMatchBackgroundColor","inactiveMatchBackgroundColor","containsActiveMatch","activeMatch","scrollToActiveMatch","RegExp","escapeRegExp","parts","isActiveMatch","backgroundColor","ref","_css","scrollMarginTop","isRetrieverDocument","document","has","isRenderableRetrieverSpan","getSpanExceptionEvents","_span$events","isModelTraceChatToolParamProperty","description","enum","_obj$function","parameters","required","properties","isModelTraceToolCall","_obj$function2","_obj$function3","arguments","isContentType","content","part","image_url","detail","input_audio","format","isContentPart","tool_calls","role","isModelTraceChoices","choice","isModelTraceChatResponse","choices","input","_normalizeLangchainCh","_normalizeLlamaIndexC","_ref2","_ref3","_normalizeOpenAIChatI","_normalizeDspyChatInp","_normalizeGeminiChatI","_normalizeAnthropicCh","_normalizeOpenAIAgent","_normalizeAutogenChat","_normalizeBedrockChat","_normalizeOpenAIChatI2","langchainMessages","normalizeLangchainChatInput","normalizeLangchainChatResult","llamaIndexMessages","normalizeLlamaIndexChatInput","normalizeLlamaIndexChatResponse","openAIMessages","normalizeOpenAIChatInput","normalizeOpenAIChatResponse","normalizeOpenAIResponsesOutput","normalizeOpenAIResponsesInput","dspyMessages","normalizeDspyChatInput","normalizeDspyChatOutput","geminiMessages","normalizeGeminiChatInput","normalizeGeminiChatOutput","anthropicMessages","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","openAIAgentMessages","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","autogenMessages","normalizeAutogenChatInput","normalizeAutogenChatOutput","bedrockMessages","normalizeBedrockChatInput","normalizeBedrockChatOutput","prettyPrintToolCall","toolCall","_toolCall$function","args","formatChatContent","_part$image_url","join","_message$tool_calls","INFERENCE_TABLE_RESPONSE_COLUMN_KEY","INFERENCE_TABLE_TRACE_COLUMN_KEY","ModelTraceSpanType","CodeSnippetRenderMode","async","getTraceArtifact","requestId","result","fetch","jsonData","error_code","getMlflowUILinkForTrace","experimentId","queryParams","URLSearchParams","append","ModelTraceExplorerOSSNotebookRenderer","traceIds","useMemo","location","search","getAll","experimentIds","activeTraceIndex","setActiveTraceIndex","setTraceData","isLoading","setIsLoading","setError","useDesignSystemTheme","activeTraceId","fetchTraceData","Typography","Text","_jsxs","display","flexDirection","colors","height","alignItems","justifyContent","spacing","xs","md","gap","sm","Title","level","withoutMargins","InfoTooltip","iconTitle","maxWidth","disableFunction","enableFunction","Link","href","openInNewTab","Pagination","currentPageIndex","dangerouslySetAntdProps","showQuickJumper","numTotal","onChange","pageSize","marginBottom","paddingLeft","paddingRight","ModelTraceExplorer","modelTrace","initialActiveView","paddingTop","width","Empty","image","DangerIcon","_Fragment","Paragraph","useResizeObserver","rootRef","debounceTimeMs","prevSize","debounceRef","size","setSize","onResize","useCallback","rect","contentRect","observerRef","ResizeObserver","rootElement","observer","observe","unobserve"],"sourceRoot":""}