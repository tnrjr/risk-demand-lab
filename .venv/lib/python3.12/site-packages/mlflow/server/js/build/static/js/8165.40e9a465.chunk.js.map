{"version":3,"file":"static/js/8165.40e9a465.chunk.js","mappings":"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","sources":["shared/building_blocks/PreviewBadge.tsx","common/components/PageContainer.tsx","experiment-tracking/components/NotFoundPage.tsx","shared/building_blocks/PageHeader.tsx","experiment-tracking/components/MetricView.tsx","experiment-tracking/components/MetricPage.tsx"],"sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: 'calc(100% - 60px)', // 60px comes from header height\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-testid={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-testid=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../common/utils/Utils';\nimport './MetricView.css';\nimport { getExperiment, getRunInfo } from '../reducers/Reducers';\nimport MetricsPlotPanel from './MetricsPlotPanel';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport type { Location } from '../../common/utils/RoutingUtils';\nimport { PageHeader } from '../../shared/building_blocks/PageHeader';\nimport Routes from '../routes';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\n\ntype MetricViewImplProps = {\n  experiments: any[]; // TODO: PropTypes.instanceOf(Experiment)\n  experimentIds: string[];\n  comparedExperimentIds?: string[];\n  hasComparedExperimentsBefore?: boolean;\n  runUuids: string[];\n  runNames: string[];\n  metricKey: string;\n  location: Location;\n};\n\nexport class MetricViewImpl extends Component<MetricViewImplProps> {\n  getCompareRunsPageText(numRuns: any, numExperiments: any) {\n    return numExperiments > 1 ? (\n      <FormattedMessage\n        defaultMessage=\"Comparing {numRuns} Runs from {numExperiments} Experiments\"\n        // eslint-disable-next-line max-len\n        description=\"Breadcrumb title for compare runs page with multiple experiments\"\n        values={{ numRuns, numExperiments }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage=\"Comparing {numRuns} Runs from 1 Experiment\"\n        description=\"Breadcrumb title for compare runs page with single experiment\"\n        values={{ numRuns }}\n      />\n    );\n  }\n\n  hasMultipleExperiments() {\n    return this.props.experimentIds.length > 1;\n  }\n\n  getRunPageLink() {\n    const { experimentIds, runUuids, runNames } = this.props;\n\n    if (!runUuids || runUuids.length === 0) {\n      return null;\n    }\n\n    if (runUuids.length === 1) {\n      return <Link to={Routes.getRunPageRoute(experimentIds[0], runUuids[0])}>{runNames[0]}</Link>;\n    }\n\n    const text = this.getCompareRunsPageText(runUuids.length, experimentIds.length);\n    return <Link to={Routes.getCompareRunPageRoute(runUuids, experimentIds)}>{text}</Link>;\n  }\n\n  getCompareExperimentsPageLinkText(numExperiments: any) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n        // eslint-disable-next-line max-len\n        description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n        values={{ numExperiments }}\n      />\n    );\n  }\n\n  getExperimentPageLink() {\n    const { comparedExperimentIds, hasComparedExperimentsBefore, experimentIds, experiments } = this.props;\n\n    if (hasComparedExperimentsBefore && comparedExperimentIds) {\n      const text = this.getCompareExperimentsPageLinkText(comparedExperimentIds.length);\n      return <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>{text}</Link>;\n    }\n\n    if (this.hasMultipleExperiments()) {\n      const text = this.getCompareExperimentsPageLinkText(experimentIds.length);\n      return <Link to={Routes.getCompareExperimentsPageRoute(experimentIds)}>{text}</Link>;\n    }\n\n    return <Link to={Routes.getExperimentPageRoute(experimentIds[0])}>{experiments[0].name}</Link>;\n  }\n\n  render() {\n    const { experimentIds, runUuids, metricKey, location } = this.props;\n    const { selectedMetricKeys } = Utils.getMetricPlotStateFromUrl(location.search);\n    const title =\n      selectedMetricKeys.length > 1 ? (\n        <FormattedMessage defaultMessage=\"Metrics\" description=\"Title for metrics page\" />\n      ) : (\n        selectedMetricKeys[0]\n      );\n    const breadcrumbs = [this.getExperimentPageLink(), this.getRunPageLink()];\n    return (\n      <div>\n        <PageHeader title={title} breadcrumbs={breadcrumbs} hideSpacer />\n        <MetricsPlotPanel {...{ experimentIds, runUuids, metricKey }} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { comparedExperimentIds, hasComparedExperimentsBefore } = state.compareExperiments;\n  const { experimentIds, runUuids } = ownProps;\n  const experiments =\n    experimentIds !== null ? experimentIds.map((experimentId: any) => getExperiment(experimentId, state)) : null;\n  const runNames = runUuids.map((runUuid: any) => {\n    const runInfo = getRunInfo(runUuid, state);\n    return Utils.getRunDisplayName(runInfo, runUuid);\n  });\n  return { experiments, runNames, comparedExperimentIds, hasComparedExperimentsBefore };\n};\n\nexport const MetricView = withRouterNext(connect(mapStateToProps)(MetricViewImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport qs from 'qs';\nimport { getExperimentApi, getRunApi } from '../actions';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport NotFoundPage from './NotFoundPage';\nimport { MetricView } from './MetricView';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport Utils from '../../common/utils/Utils';\nimport { FormattedMessage, injectIntl, type IntlShape } from 'react-intl';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { DangerIcon, Empty } from '@databricks/design-system';\n\ntype MetricPageImplProps = {\n  runUuids: string[];\n  metricKey: string;\n  experimentIds?: string[];\n  dispatch: (...args: any[]) => any;\n  loadError?: unknown;\n  intl: IntlShape;\n};\n\nexport class MetricPageImpl extends Component<MetricPageImplProps> {\n  requestIds: any;\n\n  constructor(props: MetricPageImplProps) {\n    super(props);\n    this.requestIds = [];\n  }\n\n  fetchExperiments() {\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    return this.props.experimentIds.map((experimentId) => {\n      const experimentRequestId = getUUID();\n      this.props.dispatch(getExperimentApi(experimentId, experimentRequestId)).catch((e: Error | ErrorWrapper) => {\n        if (e instanceof ErrorWrapper) {\n          // Async API errors are handled by the RequestStateWrapper\n          return;\n        }\n        throw e;\n      });\n      return experimentRequestId;\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.loadError instanceof Error) {\n      const message = this.props.intl.formatMessage({\n        defaultMessage: 'Error during metric page load: invalid URL',\n        description: 'Error message when loading metric page fails',\n      });\n      throw new Error(message);\n    }\n    if (this.props.experimentIds !== null) {\n      const getExperimentsRequestIds = this.fetchExperiments();\n      this.requestIds.push(...getExperimentsRequestIds);\n    }\n    this.props.runUuids.forEach((runUuid) => {\n      // Fetch tags for each run. TODO: it'd be nice if we could just fetch the tags directly\n      const getRunRequestId = getUUID();\n      this.requestIds.push(getRunRequestId);\n      this.props.dispatch(getRunApi(runUuid, getRunRequestId)).catch((e: Error | ErrorWrapper) => {\n        if (e instanceof ErrorWrapper) {\n          // Async API errors are handled by the RequestStateWrapper\n          return;\n        }\n        throw e;\n      });\n    });\n  }\n\n  renderPageContent() {\n    const { runUuids } = this.props;\n    return runUuids.length >= 1 ? (\n      <MetricView\n        runUuids={this.props.runUuids}\n        metricKey={this.props.metricKey}\n        experimentIds={this.props.experimentIds}\n      />\n    ) : (\n      <NotFoundPage />\n    );\n  }\n\n  render() {\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.requestIds}\n          // eslint-disable-next-line no-trailing-spaces\n          customRequestErrorHandlerFn={(failedRequests) => {\n            const firstFoundError = failedRequests.find((request) => request.error)?.error;\n            if (firstFoundError instanceof ErrorWrapper) {\n              // Extract and throw actual Error based on the ErrorWrapper\n              throw firstFoundError.translateToErrorInstance();\n            }\n            if (firstFoundError) {\n              throw firstFoundError;\n            }\n          }}\n        >\n          {this.renderPageContent()}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: WithRouterNextProps<{ metricKey: string }>) => {\n  const { location } = ownProps;\n  const searchValues = qs.parse(location.search);\n  try {\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    const runUuids = JSON.parse(searchValues['?runs']);\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    const metricKey = JSON.parse(searchValues['metric']);\n    let experimentIds = null;\n    if (searchValues.hasOwnProperty('experiments')) {\n      // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n      experimentIds = JSON.parse(searchValues['experiments']);\n    }\n\n    return {\n      runUuids,\n      metricKey,\n      experimentIds,\n    };\n  } catch (e) {\n    return {\n      runUuids: [],\n      metricKey: '',\n      experimentIds: [],\n      loadError: e,\n    };\n  }\n};\n\nconst MetricPageWithRouter = withRouterNext(connect(mapStateToProps)(injectIntl(MetricPageImpl)));\n\nconst MetricPageErrorPage = ({ error }: { error: Error }) => (\n  <div css={{ height: '100%', alignItems: 'center', justifyContent: 'center', display: 'flex' }}>\n    <Empty\n      title={\n        <FormattedMessage\n          defaultMessage=\"Error while loading metric page\"\n          description=\"Title of the error state on the metric page\"\n        />\n      }\n      description={error.message}\n      image={<DangerIcon />}\n    />\n  </div>\n);\n\nexport const MetricPage = withErrorBoundary(\n  ErrorUtils.mlflowServices.EXPERIMENTS,\n  MetricPageWithRouter,\n  undefined,\n  MetricPageErrorPage,\n);\n\nexport default MetricPage;\n"],"names":["PreviewBadge","className","theme","useDesignSystemTheme","_jsx","Tag","componentId","css","_css","marginLeft","spacing","xs","color","children","FormattedMessage","id","defaultMessage","PageContainer","props","usesFullHeight","restProps","_jsxs","PageWrapper","styles","useFullHeightLayout","wrapper","Spacer","fixedSpacer","container","defaultProps","height","display","flexDirection","flexGrow","flex","flexShrink","width","paddingBottom","NotFoundPage","Component","render","OverflowMenu","menu","overflowMenu","Menu","map","itemName","onClick","href","otherProps","Item","length","Dropdown","overlay","trigger","placement","arrow","Button","icon","OverflowIcon","_ref","name","PageHeader","title","breadcrumbs","titleAddOns","preview","spacerSize","hideSpacer","dangerouslyAppendEmotionCSS","useIntl","_Fragment","Header","Breadcrumb","includeTrailingCaret","b","i","buttons","size","MetricViewImpl","getCompareRunsPageText","numRuns","numExperiments","values","hasMultipleExperiments","this","experimentIds","getRunPageLink","runUuids","runNames","Link","to","Routes","getRunPageRoute","text","getCompareRunPageRoute","getCompareExperimentsPageLinkText","getExperimentPageLink","comparedExperimentIds","hasComparedExperimentsBefore","experiments","getCompareExperimentsPageRoute","getExperimentPageRoute","metricKey","location","selectedMetricKeys","Utils","getMetricPlotStateFromUrl","search","MetricsPlotPanel","MetricView","withRouterNext","connect","mapStateToProps","state","ownProps","compareExperiments","experimentId","getExperiment","runUuid","runInfo","getRunInfo","getRunDisplayName","MetricPageImpl","constructor","super","requestIds","fetchExperiments","experimentRequestId","getUUID","dispatch","getExperimentApi","catch","e","ErrorWrapper","componentDidMount","loadError","Error","message","intl","formatMessage","getExperimentsRequestIds","push","forEach","getRunRequestId","getRunApi","renderPageContent","RequestStateWrapper","customRequestErrorHandlerFn","failedRequests","_failedRequests$find","firstFoundError","find","request","error","translateToErrorInstance","MetricPageWithRouter","searchValues","qs","JSON","parse","hasOwnProperty","injectIntl","MetricPage","withErrorBoundary","ErrorUtils","mlflowServices","EXPERIMENTS","undefined","MetricPageErrorPage","Empty","description","image","DangerIcon"],"sourceRoot":""}