{"version":3,"file":"static/js/939.e6c5459d.chunk.js","mappings":"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","sources":["experiment-tracking/components/evaluations/hooks/useDeleteTraces.tsx","shared/web-shared/genai-traces-table/enum.ts","shared/web-shared/genai-traces-table/utils/EvaluationDataParseUtils.ts","shared/web-shared/genai-traces-table/components/GenAiEvaluationTracesReview.utils.tsx","shared/web-shared/genai-traces-table/utils/Colors.ts","shared/web-shared/genai-traces-table/utils/RoutingUtils.tsx","shared/web-shared/genai-traces-table/hooks/useAssessmentFilters.tsx","shared/web-shared/genai-traces-table/hooks/useTableSort.tsx","shared/web-shared/genai-traces-table/GenAITracesTableContext.tsx","shared/web-shared/genai-traces-table/components/GenAiDeleteTraceModal.tsx","shared/web-shared/genai-traces-table/utils/FeatureUtils.ts","shared/web-shared/genai-traces-table/types.ts","shared/web-shared/genai-traces-table/hooks/useTableColumns.tsx","shared/web-shared/genai-traces-table/utils/TraceUtils.ts","shared/web-shared/genai-traces-table/GenAITracesTableActions.tsx","shared/web-shared/genai-traces-table/GenAiTracesTable.utils.ts","shared/web-shared/genai-traces-table/cellRenderers/ErrorCell.tsx","shared/web-shared/genai-traces-table/cellRenderers/NullCell.tsx","shared/web-shared/genai-traces-table/cellRenderers/StackedComponents.tsx","shared/web-shared/genai-traces-table/utils/FetchUtils.ts","shared/web-shared/genai-traces-table/utils/MlflowUtils.tsx","shared/web-shared/genai-traces-table/cellRenderers/LoggedModelCell.tsx","shared/web-shared/genai-traces-table/cellRenderers/RunName.tsx","shared/web-shared/genai-traces-table/cellRenderers/Source/ExperimentSourceTypeIcon.tsx","shared/web-shared/genai-traces-table/cellRenderers/Source/SourceRenderer.tsx","shared/web-shared/genai-traces-table/cellRenderers/StatusRenderer.tsx","shared/web-shared/genai-traces-table/cellRenderers/Tags/KeyValueTagFullViewModal.tsx","shared/web-shared/genai-traces-table/cellRenderers/Tags/KeyValueTag.tsx","shared/web-shared/genai-traces-table/cellRenderers/Tags/TagsCellRenderer.tsx","shared/web-shared/genai-traces-table/cellRenderers/TokensCell.tsx","shared/web-shared/genai-traces-table/utils/AggregationUtils.ts","shared/web-shared/genai-traces-table/utils/DisplayUtils.tsx","shared/web-shared/genai-traces-table/utils/MarkdownUtils.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessmentTag.tsx","shared/web-shared/genai-traces-table/components/RunColorCircle.tsx","shared/web-shared/genai-traces-table/cellRenderers/rendererFunctions.tsx","shared/web-shared/genai-traces-table/GenAiTracesTableBody.utils.tsx","shared/web-shared/genai-traces-table/GenAiTracesTableBodyRows.tsx","shared/web-shared/genai-traces-table/components/EvaluationsRcaStats.tsx","shared/web-shared/genai-traces-table/components/EvaluationsAssessmentHoverCard.tsx","shared/web-shared/genai-traces-table/components/charts/CategoricalAggregateChart.tsx","shared/web-shared/genai-traces-table/components/charts/NumericAggregateChart.tsx","shared/web-shared/genai-traces-table/components/charts/AssessmentColumnSummary.tsx","shared/web-shared/genai-traces-table/GenAiTracesTableHeader.tsx","shared/web-shared/genai-traces-table/cellRenderers/HeaderCellRenderer.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessmentDetailedHistory.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessmentTooltip.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessmentUpsertForm.tsx","shared/web-shared/genai-traces-table/hooks/useEditAssessmentFormState.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessments.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessmentsConfirmButton.tsx","shared/web-shared/genai-traces-table/components/VerticalBar.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewAssessmentsSection.tsx","shared/web-shared/genai-traces-table/components/EvaluationTraceDataDrawer.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewHeaderSection.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewCopyButton.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewExpandableCell.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewTextBox.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewInputSection.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewResponseSection.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewListItemIndicator.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewRetrievalSection.tsx","shared/web-shared/genai-traces-table/components/EvaluationsReviewDetails.tsx","shared/web-shared/genai-traces-table/hooks/usePendingAssessmentEntries.ts","shared/web-shared/genai-traces-table/components/GenAiEvaluationTracesReview.tsx","shared/web-shared/genai-traces-table/hooks/useGenAITracesTableConfig.tsx","shared/web-shared/genai-traces-table/hooks/useGetTrace.tsx","shared/web-shared/genai-traces-table/components/GenAiEvaluationTracesReviewModal.tsx","shared/web-shared/genai-traces-table/GenAiTracesTableBody.tsx","shared/web-shared/genai-traces-table/GenAiTracesTableSearchInput.tsx","shared/web-shared/genai-traces-table/utils/EvaluationLogging.ts","shared/web-shared/genai-traces-table/components/EvaluationsOverviewColumnSelector.tsx","shared/web-shared/genai-traces-table/components/EvaluationsOverviewSortDropdown.tsx","shared/web-shared/genai-traces-table/components/GenAiEvaluationBadge.tsx","shared/web-shared/genai-traces-table/hooks/useActiveEvaluation.tsx","shared/web-shared/genai-traces-table/hooks/useEvaluationsSearchQuery.tsx","shared/web-shared/genai-traces-table/utils/EvaluationsFilterUtils.ts","shared/web-shared/genai-traces-table/GenAITracesTable.tsx","shared/web-shared/genai-traces-table/hooks/useGenAiExperimentRunsForComparison.tsx","shared/web-shared/genai-traces-table/hooks/useGenAiTraceEvaluationArtifacts.tsx","shared/web-shared/genai-traces-table/hooks/useMlflowTraces.tsx","shared/web-shared/genai-traces-table/components/filters/TableFilterItemTypeahead.tsx","shared/web-shared/genai-traces-table/components/filters/TableFilterItemValueInput.tsx","shared/web-shared/genai-traces-table/hooks/useExperimentVersionsQuery.tsx","shared/web-shared/genai-traces-table/components/filters/TableFilterItem.tsx","shared/web-shared/genai-traces-table/GenAiTracesTableFilter.tsx","shared/web-shared/genai-traces-table/components/EvaluationsOverviewColumnSelectorGrouped.tsx","shared/web-shared/genai-traces-table/GenAITracesTableToolbar.tsx","shared/web-shared/genai-traces-table/GenAITracesTableBodyContainer.tsx","shared/web-shared/genai-traces-table/hooks/useFilters.tsx","shared/web-shared/genai-traces-table/hooks/useGenAITracesUIState.tsx"],"sourcesContent":["import { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { invalidateMlflowSearchTracesCache } from '@databricks/web-shared/genai-traces-table';\n\nexport const useDeleteTracesMutation = () => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation<{ traces_deleted: number }, Error, { experimentId: string; traceRequestIds: string[] }>({\n    mutationFn: async ({ experimentId, traceRequestIds }) => {\n      // Chunk the trace IDs into groups of 100\n      const chunks = [];\n      for (let i = 0; i < traceRequestIds.length; i += 100) {\n        chunks.push(traceRequestIds.slice(i, i + 100));\n      }\n\n      // Make parallel calls for each chunk\n      const deletePromises = chunks.map((chunk) => MlflowService.deleteTracesV3(experimentId, chunk));\n\n      const results = await Promise.all(deletePromises);\n\n      // Sum up the total traces deleted\n      const totalDeleted = results.reduce((sum, result) => sum + result.traces_deleted, 0);\n\n      return { traces_deleted: totalDeleted };\n    },\n    onSuccess: () => invalidateMlflowSearchTracesCache({ queryClient }),\n  });\n\n  return mutation;\n};\n","export enum GenAiTraceEvaluationArtifactFile {\n  Evaluations = '_evaluations.json',\n  Assessments = '_assessments.json',\n  Metrics = '_metrics.json',\n}\n\nexport enum KnownEvaluationResultAssessmentMetadataFields {\n  IS_OVERALL_ASSESSMENT = 'is_overall_assessment',\n  CHUNK_INDEX = 'chunk_index',\n  IS_COPIED_FROM_AI = 'is_copied_from_ai',\n}\n\nexport enum KnownEvaluationResultAssessmentName {\n  OVERALL_ASSESSMENT = 'overall_assessment',\n  SAFETY = 'safety',\n  GROUNDEDNESS = 'groundedness',\n  CORRECTNESS = 'correctness',\n  RELEVANCE_TO_QUERY = 'relevance_to_query',\n  CHUNK_RELEVANCE = 'chunk_relevance',\n  CONTEXT_SUFFICIENCY = 'context_sufficiency',\n  GUIDELINE_ADHERENCE = 'guideline_adherence',\n  GLOBAL_GUIDELINE_ADHERENCE = 'global_guideline_adherence',\n  TOTAL_TOKEN_COUNT = 'agent/total_token_count',\n  TOTAL_INPUT_TOKEN_COUNT = 'agent/total_input_token_count',\n  TOTAL_OUTPUT_TOKEN_COUNT = 'agent/total_output_token_count',\n  DOCUMENT_RECALL = 'retrieval/ground_truth/document_recall',\n  DOCUMENT_RATINGS = 'retrieval/ground_truth/document_ratings',\n}\n","import { difference, groupBy, isNil, isNumber, isPlainObject, orderBy, zipObject } from 'lodash';\n\nimport { KnownEvaluationResultAssessmentMetadataFields, KnownEvaluationResultAssessmentName } from '../enum';\nimport type {\n  EvaluationArtifactTableEntryAssessment,\n  EvaluationArtifactTableEntryEvaluation,\n  EvaluationArtifactTableEntryMetric,\n  RawGenaiEvaluationArtifactResponse,\n  RunEvaluationResultAssessment,\n  RunEvaluationResultMetric,\n  RunEvaluationTracesDataEntry,\n  RunEvaluationTracesRetrievalChunk,\n} from '../types';\n\nexport const isEvaluationResultOverallAssessment = (assessmentEntry: RunEvaluationResultAssessment) =>\n  assessmentEntry.metadata?.[KnownEvaluationResultAssessmentMetadataFields.IS_OVERALL_ASSESSMENT] === true;\n\nexport const isEvaluationResultPerRetrievalChunkAssessment = (assessmentEntry: RunEvaluationResultAssessment) =>\n  isNumber(assessmentEntry.metadata?.[KnownEvaluationResultAssessmentMetadataFields.CHUNK_INDEX]);\n\n/**\n * Checks if the given value is a retrieved context.\n * A retrieved context is a list of objects with a `doc_uri` and `content` field.\n */\nexport const isRetrievedContext = (value: any): boolean => {\n  return Array.isArray(value) && value.every((v) => isPlainObject(v) && 'doc_uri' in v && 'content' in v);\n};\n\n/**\n * Extracts the first retrieved context value from the given record.\n * Returns undefined if no retrieved context is found.\n */\nconst getFirstRetrievedContextValue = (\n  record?: Record<string, any>,\n): { doc_uri: string; content: string }[] | undefined => {\n  return Object.values(record || {}).find(isRetrievedContext) as { doc_uri: string; content: string }[];\n};\n\n/**\n * Extracts the retrieval chunks from the given outputs, targets and per-chunk assessments.\n */\nexport const extractRetrievalChunks = (\n  outputs?: Record<string, any>,\n  targets?: Record<string, any>,\n  perChunkAssessments?: RunEvaluationResultAssessment[],\n): RunEvaluationTracesRetrievalChunk[] => {\n  // Only support one retrieved context for now, first one is used\n  const retrievedContext = getFirstRetrievedContextValue(outputs) || [];\n  const expectedRetrievedContext = getFirstRetrievedContextValue(targets);\n\n  return retrievedContext.map((retrievedContext, index) => {\n    const target = expectedRetrievedContext?.[index];\n    const assessments = (perChunkAssessments || []).filter(\n      (assessment) => (assessment.metadata || {})[KnownEvaluationResultAssessmentMetadataFields.CHUNK_INDEX] === index,\n    );\n    // Group detailed assessments by name\n    const retrievalAssessmentsByName = groupBy(assessments, 'name');\n    // Ensure each group is sorted by timestamp in descending order\n    Object.keys(retrievalAssessmentsByName).forEach((key) => {\n      retrievalAssessmentsByName[key] = orderBy(retrievalAssessmentsByName[key], 'timestamp', 'desc');\n    });\n\n    return {\n      docUrl: retrievedContext.doc_uri,\n      content: retrievedContext.content,\n      retrievalAssessmentsByName: retrievalAssessmentsByName,\n      target: target?.content,\n    };\n  });\n};\n\nexport function parseRawTableArtifact<T>(artifactData?: RawGenaiEvaluationArtifactResponse): T | undefined {\n  if (!artifactData) {\n    return undefined;\n  }\n  const { columns, data, filename } = artifactData;\n\n  if (!columns || !Array.isArray(columns)) {\n    throw new SyntaxError(`Artifact ${filename} is malformed, it does not contain \"columns\" array`);\n  }\n  if (!data || !Array.isArray(data)) {\n    throw new SyntaxError(`Artifact ${filename} is malformed, it does not contain \"data\" array`);\n  }\n\n  const normalizedColumns = columns.map((column, index) => column ?? `column_${index}`);\n\n  return data.map((row) => zipObject(normalizedColumns, row)) as T;\n}\n\nexport function mergeMetricsAndAssessmentsWithEvaluations(\n  evaluations: EvaluationArtifactTableEntryEvaluation[],\n  metrics?: EvaluationArtifactTableEntryMetric[],\n  assessments?: EvaluationArtifactTableEntryAssessment[],\n): RunEvaluationTracesDataEntry[] {\n  // Group metrics by evaluation_id.\n  const metricsByEvaluation = (metrics || []).reduce<Record<string, Record<string, RunEvaluationResultMetric>>>(\n    (acc, entry: any) => {\n      if (!acc[entry.evaluation_id]) {\n        acc[entry.evaluation_id] = {};\n      }\n      const { key, value, timestamp } = entry;\n      acc[entry.evaluation_id][key] = { key, value, timestamp };\n      return acc;\n    },\n    {},\n  );\n\n  // Group assessments by evaluation_id.\n  const assessmentsByEvaluation = (assessments || []).reduce<Record<string, RunEvaluationResultAssessment[]>>(\n    (acc, entry: EvaluationArtifactTableEntryAssessment) => {\n      if (!acc[entry.evaluation_id]) {\n        acc[entry.evaluation_id] = [];\n      }\n      acc[entry.evaluation_id].push({\n        booleanValue: !isNil(entry.boolean_value) ? Boolean(entry.boolean_value) : entry.boolean_value,\n        numericValue: !isNil(entry.numeric_value) ? Number(entry.numeric_value) : entry.numeric_value,\n        stringValue: !isNil(entry.string_value) ? String(entry.string_value) : entry.string_value,\n        metadata: entry.metadata || {},\n        ...(entry.error_code && { errorCode: entry.error_code }),\n        ...(entry.error_message && { errorMessage: entry.error_message }),\n        name: entry.name,\n        rationale: entry.rationale || null,\n        source: {\n          metadata: entry.source?.metadata ?? {},\n          sourceId: entry.source?.source_id,\n          sourceType: entry.source?.source_type,\n        },\n        timestamp: entry.timestamp,\n      });\n      return acc;\n    },\n    {},\n  );\n\n  return evaluations.map((entry: any) => {\n    // Get all assessments for the evaluation and group them by name\n    const allAssessmentsSorted = orderBy(assessmentsByEvaluation[entry.evaluation_id] || [], 'timestamp', 'desc');\n    const overallAssessments: RunEvaluationResultAssessment[] = allAssessmentsSorted\n      .filter(isEvaluationResultOverallAssessment)\n      .map((assessment) => {\n        // Find the \"[assessment_name]\" prefix and convert it to the rootCauseAssessment, removing it from the prefix.\n        // The format is: \"[assessment_name] rationale **Suggested Actions**: suggestedActions\"\n        const match = assessment.rationale?.match(/^\\[(.*?)\\](.*?)(?:\\*\\*Suggested Actions\\*\\*:(.*))?$/s);\n\n        const assessmentName = match ? match[1]?.trim() : undefined;\n        const newRationale = match ? match[2]?.trim() : undefined;\n        const suggestedActions = match ? match[3]?.trim() : undefined;\n\n        assessment.rationale = newRationale || assessment.rationale;\n        const result: RunEvaluationResultAssessment = {\n          ...assessment,\n          rootCauseAssessment: !isNil(assessmentName) ? { assessmentName, suggestedActions } : undefined,\n        };\n        return result;\n      });\n    if (overallAssessments.length === 0) {\n      // In the special case where there is no overall assessment, we create a null here so the UI can render it.\n      overallAssessments.push({\n        name: KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT,\n        rationale: null,\n        source: {\n          sourceType: 'AI_JUDGE',\n          sourceId: 'UNKNOWN',\n          metadata: {},\n        },\n        metadata: {},\n        numericValue: null,\n        booleanValue: null,\n        stringValue: null,\n        timestamp: null,\n      });\n    }\n    // TODO(nsthorat): perRetrievalChunkAsessments should be treated differently than other methods, and removed from the overall metrics.\n    const perRetrievalChunkAssessments = allAssessmentsSorted.filter(isEvaluationResultPerRetrievalChunkAssessment);\n\n    // All assessments that are not overall or per retrieval chunk are response assessments\n    const responseAssessments = difference(allAssessmentsSorted, overallAssessments, perRetrievalChunkAssessments);\n\n    // Group response assessments by name\n    const responseAssessmentsByName = groupBy(responseAssessments, 'name');\n    // Ensure each group is sorted by timestamp in descending order\n    Object.keys(responseAssessmentsByName).forEach((key) => {\n      responseAssessmentsByName[key] = orderBy(responseAssessmentsByName[key], 'timestamp', 'desc');\n    });\n\n    return {\n      evaluationId: entry.evaluation_id,\n      requestId: entry.request_id,\n      inputs: entry.inputs,\n      inputsId: entry.inputs_id,\n      outputs: entry.outputs ?? {},\n      targets: entry.targets ?? {},\n      ...(entry.error_code && { errorCode: entry.error_code }),\n      ...(entry.error_message && { errorMessage: entry.error_message }),\n      overallAssessments,\n      responseAssessmentsByName,\n      metrics: metricsByEvaluation[entry.evaluation_id] || {},\n      retrievalChunks: extractRetrievalChunks(entry.outputs, entry.targets, perRetrievalChunkAssessments),\n    };\n  });\n}\n","import { isNil, isNumber, isPlainObject, orderBy } from 'lodash';\n\nimport type { ThemeType } from '@databricks/design-system';\nimport { CheckCircleIcon, WarningIcon, XCircleIcon } from '@databricks/design-system';\nimport { defineMessage } from '@databricks/i18n';\nimport type { MessageDescriptor, IntlShape } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport type {\n  AssessmentInfo,\n  AssessmentValueType,\n  RunEvaluationResultAssessment,\n  RunEvaluationResultAssessmentDraft,\n  RunEvaluationTracesDataEntry,\n} from '../types';\nimport { getEvaluationResultAssessmentBackgroundColor, getEvaluationResultIconColor } from '../utils/Colors';\n\nexport const INPUT_REQUEST_KEY = 'request';\nconst INPUT_MESSAGES_KEY = 'messages';\n\nexport enum KnownEvaluationResultAssessmentName {\n  OVERALL_ASSESSMENT = 'overall_assessment',\n  SAFETY = 'safety',\n  GROUNDEDNESS = 'groundedness',\n  RETRIEVAL_GROUNDEDNESS = 'retrieval_groundedness', // Updated name for groundedness\n  CORRECTNESS = 'correctness',\n  RELEVANCE_TO_QUERY = 'relevance_to_query',\n  CHUNK_RELEVANCE = 'chunk_relevance',\n  RETRIEVAL_RELEVANCE = 'retrieval_relevance', // Updated name for chunk relevance\n  CONTEXT_SUFFICIENCY = 'context_sufficiency',\n  RETRIEVAL_SUFFICIENCY = 'retrieval_sufficiency', // Updated name for context sufficiency\n  GUIDELINE_ADHERENCE = 'guideline_adherence',\n  GUIDELINES = 'guidelines', // Updated name for guideline adherence\n  GLOBAL_GUIDELINE_ADHERENCE = 'global_guideline_adherence',\n}\n\nexport const DEFAULT_ASSESSMENTS_SORT_ORDER: string[] = [\n  KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT,\n  // Correctness runs with GT, relevancy to query runs without it.\n  KnownEvaluationResultAssessmentName.CORRECTNESS,\n  KnownEvaluationResultAssessmentName.GLOBAL_GUIDELINE_ADHERENCE,\n  KnownEvaluationResultAssessmentName.GUIDELINE_ADHERENCE,\n  KnownEvaluationResultAssessmentName.GUIDELINES,\n  KnownEvaluationResultAssessmentName.RELEVANCE_TO_QUERY,\n  KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY,\n  KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY,\n  KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE,\n  KnownEvaluationResultAssessmentName.RETRIEVAL_RELEVANCE,\n  KnownEvaluationResultAssessmentName.GROUNDEDNESS,\n  KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS, // Updated name for groundedness\n  KnownEvaluationResultAssessmentName.SAFETY,\n];\n\nexport const getJudgeMetricsLink = (asessmentDocLink?: AssessmentLearnMoreLink) => {\n  // return OSS docs link\n  return 'https://mlflow.org/docs/latest/genai/eval-monitor';\n};\n\nexport interface AssessmentLearnMoreLink {\n  basePath: string;\n  hash?: string;\n}\n\n/**\n * These will be converted to the links per-cloud:\n * https://learn.microsoft.com/en-us/azure/databricks/generative-ai/agent-evaluation/${hash}`\n * https://docs.databricks.com/en/generative-ai/agent-evaluation/${page}.html#${hash}\n */\nexport const ASSESSMENTS_DOC_LINKS: Record<string, AssessmentLearnMoreLink> = {\n  [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]: {\n    // TODO(nsthorat): Update this link to the overall deep link once it's available.\n    basePath: '/generative-ai/agent-evaluation/llm-judge-metrics',\n    hash: 'how-quality-is-assessed-by-llm-judges',\n  },\n  [KnownEvaluationResultAssessmentName.CORRECTNESS]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'correctness',\n  },\n  [KnownEvaluationResultAssessmentName.GROUNDEDNESS]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'groundedness',\n  },\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'groundedness',\n  },\n  [KnownEvaluationResultAssessmentName.RELEVANCE_TO_QUERY]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'answer-relevance',\n  },\n  [KnownEvaluationResultAssessmentName.SAFETY]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'safety',\n  },\n  [KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'chunk-relevance-precision',\n  },\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_RELEVANCE]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'chunk-relevance-precision',\n  },\n  [KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'context-sufficiency',\n  },\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'context-sufficiency',\n  },\n  [KnownEvaluationResultAssessmentName.GUIDELINE_ADHERENCE]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'guideline-adherence',\n  },\n  [KnownEvaluationResultAssessmentName.GUIDELINES]: {\n    basePath: '/generative-ai/agent-evaluation/llm-judge-reference',\n    hash: 'guideline-adherence',\n  },\n};\n\nexport enum KnownEvaluationResultAssessmentStringValue {\n  YES = 'yes',\n  NO = 'no',\n  UNKNOWN = 'unknown',\n}\n\nexport function getAssessmentValueLabel(\n  intl: IntlShape,\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  value: AssessmentValueType,\n): { content: string; icon?: JSX.Element } {\n  if (assessmentInfo.dtype === 'pass-fail') {\n    if (value === KnownEvaluationResultAssessmentStringValue.YES) {\n      return {\n        content: intl.formatMessage({\n          defaultMessage: 'Pass',\n          description: 'Passing assessment label',\n        }),\n        icon: (\n          <span\n            css={{\n              color: `${getEvaluationResultIconColor(theme, assessmentInfo, {\n                stringValue: KnownEvaluationResultAssessmentStringValue.YES,\n              })} !important`,\n              svg: {\n                width: '12px',\n                height: '12px',\n              },\n            }}\n          >\n            <CheckCircleIcon\n              css={{\n                backgroundColor: getEvaluationResultAssessmentBackgroundColor(theme, assessmentInfo, {\n                  stringValue: KnownEvaluationResultAssessmentStringValue.YES,\n                }),\n                borderRadius: '50%',\n              }}\n            />\n          </span>\n        ),\n      };\n    } else if (value === KnownEvaluationResultAssessmentStringValue.NO) {\n      return {\n        content: intl.formatMessage({\n          defaultMessage: 'Fail',\n          description: 'Failing assessment label',\n        }),\n        icon: (\n          <span\n            css={{\n              color: `${getEvaluationResultIconColor(theme, assessmentInfo, {\n                stringValue: KnownEvaluationResultAssessmentStringValue.NO,\n              })} !important`,\n              svg: {\n                width: '12px',\n                height: '12px',\n              },\n            }}\n          >\n            <XCircleIcon\n              css={{\n                backgroundColor: getEvaluationResultAssessmentBackgroundColor(theme, assessmentInfo, {\n                  stringValue: KnownEvaluationResultAssessmentStringValue.NO,\n                }),\n                borderRadius: '50%',\n              }}\n            />\n          </span>\n        ),\n      };\n    } else {\n      return {\n        content: intl.formatMessage({\n          defaultMessage: 'Missing',\n          description: 'Missing assessment label',\n        }),\n        icon: (\n          <span\n            css={{\n              color: `${getEvaluationResultIconColor(theme, assessmentInfo, {\n                stringValue: KnownEvaluationResultAssessmentStringValue.UNKNOWN,\n              })} !important`,\n              svg: {\n                width: '12px',\n                height: '12px',\n              },\n            }}\n          >\n            <WarningIcon\n              css={{\n                backgroundColor: getEvaluationResultAssessmentBackgroundColor(theme, assessmentInfo, {\n                  stringValue: KnownEvaluationResultAssessmentStringValue.UNKNOWN,\n                }),\n                borderRadius: '50%',\n              }}\n            />\n          </span>\n        ),\n      };\n    }\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (value === true) {\n      return {\n        content: intl.formatMessage({\n          defaultMessage: 'True',\n          description: 'True assessment label',\n        }),\n      };\n    } else if (value === false) {\n      return {\n        content: intl.formatMessage({\n          defaultMessage: 'False',\n          description: 'False assessment label',\n        }),\n      };\n    } else {\n      return {\n        content: intl.formatMessage({\n          defaultMessage: 'null',\n          description: 'null assessment label',\n        }),\n      };\n    }\n  }\n  return {\n    content: `${value}`,\n  };\n}\n\nexport enum KnownEvaluationResultAssessmentMetadataFields {\n  IS_OVERALL_ASSESSMENT = 'is_overall_assessment',\n  CHUNK_INDEX = 'chunk_index',\n  IS_COPIED_FROM_AI = 'is_copied_from_ai',\n}\n\nexport const KnownEvaluationResultAssessmentOutputLabel: Record<string, MessageDescriptor> = {\n  response: defineMessage({\n    defaultMessage: 'Model output',\n    description: 'Evaluation review > Response section > model output > title',\n  }),\n};\n\nexport const EXPECTED_FACTS_FIELD_NAME = 'expected_facts';\n\nexport const KnownEvaluationResultAssessmentTargetLabel: Record<string, MessageDescriptor> = {\n  expected_response: defineMessage({\n    defaultMessage: 'Expected output',\n    description: 'Evaluation review > Response section > expected output > title',\n  }),\n  [EXPECTED_FACTS_FIELD_NAME]: defineMessage({\n    defaultMessage: 'Expected facts',\n    description: 'Evaluation review > Response section > expected facts > title',\n  }),\n};\n\nexport const KnownEvaluationResultAssessmentValueLabel: Record<string, MessageDescriptor> = {\n  [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]: defineMessage({\n    defaultMessage: 'Overall',\n    description: 'Evaluation results > known type of evaluation result assessment > overall assessment.',\n  }),\n  [KnownEvaluationResultAssessmentName.CORRECTNESS]: defineMessage({\n    defaultMessage: 'Correctness',\n    description:\n      'Evaluation results > known type of evaluation result assessment > correctness assessment. Used to indicate if the result is correct in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Correctness: mostly yes, have gaps\"',\n  }),\n  [KnownEvaluationResultAssessmentName.GROUNDEDNESS]: defineMessage({\n    defaultMessage: 'Groundedness',\n    description:\n      'Evaluation results > known type of evaluation result assessment > groundedness assessment. Used to indicate if the result is grounded in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Groundedness: moderately grounded\"',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS]: defineMessage({\n    defaultMessage: 'Retrieval groundedness',\n    description:\n      'Evaluation results > known type of evaluation result assessment > retrieval groundedness assessment. Used to indicate if the result is grounded in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Retrieval groundedness: moderately grounded\"',\n  }),\n  [KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY]: defineMessage({\n    defaultMessage: 'Context sufficiency',\n    description:\n      'Evaluation results > known type of evaluation result assessment > context sufficiency assessment. Used to indicate if the retrieved context is sufficient to generate the expected response. Label displayed if user provided custom value, e.g. \"Context Sufficiency: mostly sufficient\"',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY]: defineMessage({\n    defaultMessage: 'Retrieval sufficiency',\n    description:\n      'Evaluation results > known type of evaluation result assessment > retrieval sufficiency assessment. Used to indicate if the retrieved context is sufficient to generate the expected response. Label displayed if user provided custom value, e.g. \"Retrieval sufficiency: mostly sufficient\"',\n  }),\n  [KnownEvaluationResultAssessmentName.RELEVANCE_TO_QUERY]: defineMessage({\n    defaultMessage: 'Relevance',\n    description:\n      'Evaluation results > known type of evaluation result assessment > relevance assessment. Used to indicate if the result is relevant to query in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Relevance: moderate\"',\n  }),\n  [KnownEvaluationResultAssessmentName.SAFETY]: defineMessage({\n    defaultMessage: 'Safety',\n    description:\n      'Evaluation results > known type of evaluation result assessment > safety assessment. Used to indicate if the result is safe in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Safety: moderate\"',\n  }),\n  [KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE]: defineMessage({\n    defaultMessage: 'Chunk relevance',\n    description:\n      'Evaluation results > known type of evaluation result assessment > chunk relevance assessment. Used to indicate if the result is relevant to source data chunk in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Chunk relevance: moderate\"',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_RELEVANCE]: defineMessage({\n    defaultMessage: 'Retrieval relevance',\n    description:\n      'Evaluation results > known type of evaluation result assessment > retrieval relevance assessment. Used to indicate if the result is relevant to source data chunk in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Retrieval relevance: moderate\"',\n  }),\n  [KnownEvaluationResultAssessmentName.GUIDELINE_ADHERENCE]: defineMessage({\n    defaultMessage: 'Guideline adherence',\n    description:\n      'Evaluation results > known type of evaluation result assessment > guideline adherence assessment. Used to indicate if the result adheres to the guidelines in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Guideline adherence: moderate\"',\n  }),\n  [KnownEvaluationResultAssessmentName.GUIDELINES]: defineMessage({\n    defaultMessage: 'Guidelines',\n    description:\n      'Evaluation results > known type of evaluation result assessment > guidelines assessment. Used to indicate if the result adheres to the guidelines in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Guidelines: moderate\"',\n  }),\n  [KnownEvaluationResultAssessmentName.GLOBAL_GUIDELINE_ADHERENCE]: defineMessage({\n    defaultMessage: 'Global guideline adherence',\n    description:\n      'Evaluation results > known type of evaluation result assessment > global guideline adherence assessment. Used to indicate if the result adheres to the global guidelines in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Global guideline adherence: moderate\"',\n  }),\n};\n\nexport const KnownEvaluationResultAssessmentValueMissingTooltip: Record<string, MessageDescriptor> = {\n  [KnownEvaluationResultAssessmentName.CORRECTNESS]: defineMessage({\n    defaultMessage:\n      'Correctness assessment is missing. This is likely because you have not provided an expected response (ground truth) or grading notes.',\n    description:\n      'Evaluation results > known type of evaluation result assessment > correctness assessment. Used to indicate if the result is correct in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Correctness: mostly yes, have gaps\"',\n  }),\n  [KnownEvaluationResultAssessmentName.GROUNDEDNESS]: defineMessage({\n    defaultMessage:\n      'Groundedness assessment is missing. This is likely because your agent is not returning retrieved_context.',\n    description:\n      'Evaluation results > known type of evaluation result assessment > groundedness assessment. Used to indicate if the result is grounded in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Groundedness: moderately grounded\"',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS]: defineMessage({\n    defaultMessage:\n      'Retrieval Groundedness assessment is missing. This is likely because your agent is not returning retrieved_context.',\n    description:\n      'Evaluation results > known type of evaluation result assessment > retrieval groundedness assessment. Used to indicate if the result is grounded in context of LLMs evaluation. Label displayed if user provided custom value, e.g. \"Retrieval Groundedness: moderately grounded\"',\n  }),\n  [KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY]: defineMessage({\n    defaultMessage:\n      'Context sufficiency assessment is missing. This is likely because your agent is not returning retrieved_context.',\n    description:\n      'Evaluation results > known type of evaluation result assessment > context sufficiency assessment. Used to indicate if the retrieved context is sufficient to generate the expected response. Label displayed if user provided custom value, e.g. \"Context Sufficiency: mostly sufficient\"',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY]: defineMessage({\n    defaultMessage:\n      'Retrieval sufficiency assessment is missing. This is likely because your agent is not returning retrieved_context.',\n    description:\n      'Evaluation results > known type of evaluation result assessment > retrieval sufficiency assessment. Used to indicate if the retrieved context is sufficient to generate the expected response. Label displayed if user provided custom value, e.g. \"Retrieval sufficiency: mostly sufficient\"',\n  }),\n};\n\nexport const KnownEvaluationResultAssessmentValueDescription: Record<string, MessageDescriptor> = {\n  [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]: defineMessage({\n    defaultMessage: 'The overall assessment passes when all of the judges pass.',\n    description:\n      'Evaluation results > known type of evaluation result assessment > overall assessment > description of overall assessment',\n  }),\n  [KnownEvaluationResultAssessmentName.CORRECTNESS]: defineMessage({\n    defaultMessage:\n      \"The correctness LLM judge gives a binary evaluation and written rationale on whether the agent's generated response is factually accurate and semantically similar to the provided ground-truth response or grading notes.\",\n    description:\n      'Evaluation results > known type of evaluation result assessment > description of correctness assessment.',\n  }),\n  [KnownEvaluationResultAssessmentName.GROUNDEDNESS]: defineMessage({\n    defaultMessage:\n      \"The groundedness LLM judge returns a binary evaluation and written rationale on whether the generated response is factually consistent with the agent's retrieved context.\",\n    description: 'Evaluation results > known type of evaluation result assessment > description of groundedness judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS]: defineMessage({\n    defaultMessage:\n      \"The retrieval groundedness LLM judge returns a binary evaluation and written rationale on whether the generated response is factually consistent with the agent's retrieved context.\",\n    description:\n      'Evaluation results > known type of evaluation result assessment > description of retrieval groundedness judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.RELEVANCE_TO_QUERY]: defineMessage({\n    defaultMessage:\n      'The relevance_to_query LLM judge determines whether the response is relevant to the input request.',\n    description: 'Evaluation results > known type of evaluation result assessment > description of relevance judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.SAFETY]: defineMessage({\n    defaultMessage:\n      'The safety LLM judge returns a binary rating and a written rationale on whether the generated response has harmful or toxic content.',\n    description: 'Evaluation results > known type of evaluation result assessment > description of safety judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE]: defineMessage({\n    defaultMessage:\n      'The chunk-relevance-precision LLM judge determines whether the chunks returned by the retriever are relevant to the input request. Precision is calculated as the number of relevant chunks returned divided by the total number of chunks returned. For example, if the retriever returns four chunks, and the LLM judge determines that three of the four returned documents are relevant to the request, then llm_judged/chunk_relevance/precision is 0.75.',\n    description: 'Evaluation results > known type of evaluation result assessment > chunk relevance judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_RELEVANCE]: defineMessage({\n    defaultMessage:\n      'The retrieval-relevance LLM judge determines whether the chunks returned by the retriever are relevant to the input request. Precision is calculated as the number of relevant chunks returned divided by the total number of chunks returned. For example, if the retriever returns four chunks, and the LLM judge determines that three of the four returned documents are relevant to the request, then llm_judged/chunk_relevance/precision is 0.75.',\n    description: 'Evaluation results > known type of evaluation result assessment > retrieval relevance judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY]: defineMessage({\n    defaultMessage:\n      'The context sufficiency LLM judge determines whether the retrieved context is sufficient to generate the expected response.',\n    description: 'Evaluation results > known type of evaluation result assessment > context sufficiency judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY]: defineMessage({\n    defaultMessage:\n      'The retrieval sufficiency LLM judge determines whether the retrieved context is sufficient to generate the expected response.',\n    description: 'Evaluation results > known type of evaluation result assessment > retrieval sufficiency judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.GUIDELINE_ADHERENCE]: defineMessage({\n    defaultMessage:\n      'The guideline adherence LLM judge determines whether the response adheres to the guidelines provided.',\n    description: 'Evaluation results > known type of evaluation result assessment > guideline adherence judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.GUIDELINES]: defineMessage({\n    defaultMessage:\n      'The guidelines LLM judge determines whether the response adheres to the guidelines provided. All responses must adhere to guidelines.',\n    description: 'Evaluation results > known type of evaluation result assessment > guidelines judge.',\n  }),\n  [KnownEvaluationResultAssessmentName.GLOBAL_GUIDELINE_ADHERENCE]: defineMessage({\n    defaultMessage:\n      'The global guideline adherence LLM judge determines whether the response adheres to the global guidelines provided. All responses must adhere to global guidelines.',\n    description: 'Evaluation results > known type of evaluation result assessment > global guideline adherence judge.',\n  }),\n};\n\nexport const KnownEvaluationResultAssessmentValueMapping: Record<string, Record<string, MessageDescriptor>> = {\n  [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Pass',\n      description:\n        'Evaluation results > overall assessment > pass value label. Displayed if evaluation result is overall considered as approved by LLM judge or human.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Fail',\n      description:\n        'Evaluation results > overall assessment > fail value label. Displayed if evaluation result is overall considered as disapproved by LLM judge or human.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Relevant',\n      description:\n        'Evaluation results > chunk relevancy assessment > positive value label. Displayed if evaluation result is considered as relevant to the query.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Irrelevant',\n      description:\n        'Evaluation results > chunk relevancy assessment > negative value label. Displayed if evaluation result is considered as irrelevant to the query.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_RELEVANCE]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Relevant',\n      description:\n        'Evaluation results > retrieval relevancy assessment > positive value label. Displayed if evaluation result is considered as relevant to the query.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Irrelevant',\n      description:\n        'Evaluation results > retrieval relevancy assessment > negative value label. Displayed if evaluation result is considered as irrelevant to the query.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Context sufficient',\n      description:\n        'Evaluation results > context sufficiency assessment > positive value label. Displayed if retrieved context is sufficient to generate the expected response.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Context insufficient',\n      description:\n        'Evaluation results > context sufficiency assessment > negative value label. Displayed if retrieved context is insufficient to generate the expected response.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Sufficient',\n      description:\n        'Evaluation results > retrieval sufficiency assessment > positive value label. Displayed if retrieved context is sufficient to generate the expected response.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Insufficient',\n      description:\n        'Evaluation results > retrieval sufficiency assessment > negative value label. Displayed if retrieved context is insufficient to generate the expected response.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.RELEVANCE_TO_QUERY]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Relevant',\n      description:\n        'Evaluation results > relevancy assessment > positive value label. Displayed if evaluation result is considered as irrelevant to the query.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Irrelevant',\n      description:\n        'Evaluation results > relevancy assessment > negative value label. Displayed if evaluation result is considered as irrelevant to the query.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.GROUNDEDNESS]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Grounded',\n      description:\n        'Evaluation results > grounded assessment > positive value label. Displayed if evaluation result is considered as grounded.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Not grounded',\n      description:\n        'Evaluation results > grounded assessment > negative value label. Displayed if evaluation result is considered as not grounded.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Grounded',\n      description:\n        'Evaluation results > retrieval grounded assessment > positive value label. Displayed if evaluation result is considered as grounded.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Not grounded',\n      description:\n        'Evaluation results > retrieval grounded assessment > negative value label. Displayed if evaluation result is considered as not grounded.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.CORRECTNESS]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Correct',\n      description:\n        'Evaluation results > correctness assessment > positive value label. Displayed if evaluation result is considered as correct.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Incorrect',\n      description:\n        'Evaluation results > correctness assessment > negative value label. Displayed if evaluation result is considered as incorrect.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.SAFETY]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Safe',\n      description:\n        'Evaluation results > safety assessment > positive value label. Displayed if evaluation result is considered as safe.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Unsafe',\n      description:\n        'Evaluation results > safety assessment > negative value label. Displayed if evaluation result is considered as unsafe.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.GUIDELINE_ADHERENCE]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Adheres to guidelines',\n      description:\n        'Evaluation results > guideline adherence assessment > positive value label. Displayed if evaluation result adheres to the guidelines.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Violates guidelines',\n      description:\n        'Evaluation results > guideline adherence assessment > negative value label. Displayed if evaluation result does not adhere to the guidelines.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.GUIDELINES]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Adheres to guidelines',\n      description:\n        'Evaluation results > guidelines assessment > positive value label. Displayed if evaluation result adheres to the guidelines.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Violates guidelines',\n      description:\n        'Evaluation results > guidelines assessment > negative value label. Displayed if evaluation result does not adhere to the guidelines.',\n    }),\n  },\n  [KnownEvaluationResultAssessmentName.GLOBAL_GUIDELINE_ADHERENCE]: {\n    [KnownEvaluationResultAssessmentStringValue.YES]: defineMessage({\n      defaultMessage: 'Adheres to global guidelines',\n      description:\n        'Evaluation results > global guideline adherence assessment > positive value label. Displayed if evaluation result adheres to the global guidelines.',\n    }),\n    [KnownEvaluationResultAssessmentStringValue.NO]: defineMessage({\n      defaultMessage: 'Violates global guidelines',\n      description:\n        'Evaluation results > global guideline adherence assessment > negative value label. Displayed if evaluation result does not adhere to the global guidelines.',\n    }),\n  },\n};\n\nconst isAssessmentAiGenerated = (assessment: RunEvaluationResultAssessment) => {\n  return assessment?.source?.sourceType === 'AI_JUDGE';\n};\n\n/**\n * Returns the title for the given evaluation result.\n * If the evaluation has an input request, it will be used as the title. Otherwise, the evaluation ID will be used.\n * Stringifies the value if it's an object or an array.\n */\nexport const getEvaluationResultTitle = (evaluation: RunEvaluationTracesDataEntry): string => {\n  // Use the request as the title if defined.\n  let title = getEvaluationResultInputTitle(evaluation, INPUT_REQUEST_KEY);\n\n  if (isNil(title)) {\n    title = getEvaluationResultInputTitle(evaluation, INPUT_MESSAGES_KEY);\n  }\n\n  // If the title is still undefined, JSON-serialize the inputs.\n  if (isNil(title) && !isNil(evaluation.inputs) && Object.keys(evaluation.inputs).length > 0) {\n    title = stringifyValue(evaluation.inputs);\n  }\n\n  return title ?? evaluation.evaluationId;\n};\n\n/**\n * Returns the title for the given evaluation result and input key.\n * This is different than getEvaluationResultTitle in that it computes a title per input key. getEvaluationResultTitle returns a title for the\n * whole row (used in the header of an evaluation modal).\n */\nexport const getEvaluationResultInputTitle = (\n  evaluation: RunEvaluationTracesDataEntry,\n  inputKey: string,\n): string | undefined => {\n  if (!isNil(evaluation.inputsTitle)) {\n    return typeof evaluation.inputsTitle === 'string' ? evaluation.inputsTitle : JSON.stringify(evaluation.inputsTitle);\n  }\n  // Use the request as the title if defined.\n  let title: string | undefined = undefined;\n  // Use the last message content as the title if defined.\n  const input = evaluation.inputs[inputKey];\n  if (\n    isPlainObject(input) &&\n    !isNil(input[INPUT_MESSAGES_KEY]) &&\n    Array.isArray(input[INPUT_MESSAGES_KEY]) &&\n    !isNil(input[INPUT_MESSAGES_KEY][0]?.content)\n  ) {\n    title = input[INPUT_MESSAGES_KEY][input[INPUT_MESSAGES_KEY].length - 1]?.content;\n  } else if (!isNil(input) && Array.isArray(input) && !isNil(input[0]?.content)) {\n    // Try to parse OpenAI messages.\n    title = input[input.length - 1]?.content;\n  } else {\n    title = input ? stringifyValue(input) : undefined;\n  }\n\n  return title;\n};\n\nexport const isEvaluationResultOverallAssessment = (assessmentEntry: RunEvaluationResultAssessment) =>\n  assessmentEntry.metadata?.[KnownEvaluationResultAssessmentMetadataFields.IS_OVERALL_ASSESSMENT] === true;\n\nexport const isEvaluationResultPerRetrievalChunkAssessment = (assessmentEntry: RunEvaluationResultAssessment) =>\n  isNumber(assessmentEntry.metadata?.[KnownEvaluationResultAssessmentMetadataFields.CHUNK_INDEX]);\n\nexport const getEvaluationResultAssessmentValue = (\n  assessment: RunEvaluationResultAssessment,\n): AssessmentValueType | undefined => {\n  const value = assessment.stringValue ?? assessment.numericValue ?? assessment.booleanValue;\n  if (isNil(value)) {\n    return undefined;\n  }\n  return value;\n};\n\n/**\n * Add alpha channel to the given hex color.\n */\nexport function withAlpha(hexColor: string, opacity: number): string {\n  let color = hexColor;\n  const startsWithHash = color.startsWith('#');\n  if (startsWithHash) {\n    color = hexColor.slice(1);\n  }\n  const alpha = Math.round(Math.min(Math.max(opacity, 0), 1) * 255);\n  const hexAlpha = alpha.toString(16).toUpperCase();\n  return `${startsWithHash ? '#' : ''}${color}${hexAlpha}`;\n}\n\n/**\n * A list of known response assessment names, used to populate suggestions\n */\nexport const KnownEvaluationResponseAssessmentNames = [\n  KnownEvaluationResultAssessmentName.GUIDELINE_ADHERENCE,\n  KnownEvaluationResultAssessmentName.GUIDELINES,\n  KnownEvaluationResultAssessmentName.GLOBAL_GUIDELINE_ADHERENCE,\n  KnownEvaluationResultAssessmentName.RELEVANCE_TO_QUERY,\n  KnownEvaluationResultAssessmentName.CONTEXT_SUFFICIENCY,\n  KnownEvaluationResultAssessmentName.RETRIEVAL_SUFFICIENCY,\n  KnownEvaluationResultAssessmentName.CORRECTNESS,\n  KnownEvaluationResultAssessmentName.GROUNDEDNESS,\n  KnownEvaluationResultAssessmentName.RETRIEVAL_GROUNDEDNESS,\n  KnownEvaluationResultAssessmentName.SAFETY,\n];\n\n/**\n * A list of known retrieval assessment names, used to populate suggestions\n */\nexport const KnownEvaluationRetrievalAssessmentNames = [KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE];\n\n/**\n * Creates a draft assessment object with the given values.\n */\nexport const createDraftEvaluationResultAssessmentObject = ({\n  name,\n  isOverallAssessment,\n  value,\n  rationale,\n  metadata = {},\n}: {\n  isOverallAssessment: boolean;\n  name: string;\n  value: string | boolean;\n  rationale?: string;\n  metadata?: RunEvaluationResultAssessment['metadata'];\n}): RunEvaluationResultAssessmentDraft => {\n  // Use current user's email to set as source ID\n  const sourceId = getUser() ?? '';\n\n  const resultMetadata = isOverallAssessment\n    ? { ...metadata, [KnownEvaluationResultAssessmentMetadataFields.IS_OVERALL_ASSESSMENT]: true }\n    : metadata;\n\n  const booleanValue = typeof value === 'boolean' ? value : null;\n  const stringValue = typeof value !== 'boolean' ? value : null;\n\n  return {\n    booleanValue: booleanValue,\n    numericValue: null,\n    stringValue: stringValue,\n    name,\n    metadata: resultMetadata,\n    rationale: rationale ?? null,\n    source: {\n      sourceId,\n      sourceType: 'HUMAN',\n      metadata: {},\n    },\n    timestamp: Date.now(),\n    isDraft: true,\n  };\n};\n\nexport const shouldRepeatExistingOriginalOverallAiAssessment = (\n  sourceEvaluationResult: RunEvaluationTracesDataEntry,\n  pendingAssessmentEntries: RunEvaluationResultAssessmentDraft[],\n) =>\n  sourceEvaluationResult.overallAssessments.length > 0 &&\n  sourceEvaluationResult.overallAssessments.every(isAssessmentAiGenerated) &&\n  !pendingAssessmentEntries.some(isEvaluationResultOverallAssessment);\n\nexport const copyAiOverallAssessmentAsHumanAssessment = (\n  sourceEvaluationResult: RunEvaluationTracesDataEntry,\n): RunEvaluationResultAssessmentDraft | null => {\n  const firstAiOverallAssessment = sourceEvaluationResult.overallAssessments.find(isAssessmentAiGenerated);\n\n  if (!firstAiOverallAssessment) {\n    return null;\n  }\n\n  const sourceId = getUser() ?? '';\n\n  return {\n    ...firstAiOverallAssessment,\n    timestamp: Date.now(),\n    isDraft: true,\n    source: {\n      sourceType: 'HUMAN',\n      sourceId,\n      metadata: {},\n    },\n    metadata: {\n      ...firstAiOverallAssessment.metadata,\n      // Explicitly marking it as reviewed to indicate this assessment is copied from AI\n      [KnownEvaluationResultAssessmentMetadataFields.IS_COPIED_FROM_AI]: true,\n    },\n  };\n};\n\nexport const isDraftAssessment = (\n  assessment: RunEvaluationResultAssessment | RunEvaluationResultAssessmentDraft,\n): assessment is RunEvaluationResultAssessmentDraft => 'isDraft' in assessment && assessment.isDraft;\n\n/**\n * Returns a list of detailed assessments.\n *\n * For well-known assessments, the list is sorted based on the known stable order;\n * for other assessments, the list is sorted based on the timestamp of the first appearance\n * of the assessment (last item in the group).\n */\nexport const getOrderedAssessments = (assessmentsByName: Record<string, RunEvaluationResultAssessment[]>) =>\n  orderBy(Object.entries(assessmentsByName), ([key, assessments], index) => {\n    // If we're dealing with a known detailed assessment, we want to sort it based on its index in the known names list\n    // so its position is stable\n    const indexInKnownNames = DEFAULT_ASSESSMENTS_SORT_ORDER.indexOf(key as KnownEvaluationResultAssessmentName);\n\n    if (indexInKnownNames !== -1) {\n      // If it's a known detailed assessment, sort by its index in the known names list\n      return indexInKnownNames;\n    } else {\n      // Otherwise, sort by the timestamp of the last item in the group\n      return assessments[assessments.length - 1]?.timestamp ?? index;\n    }\n  });\n\nexport const isEvaluationResultReviewedAlready = (evaluationResult: RunEvaluationTracesDataEntry) =>\n  evaluationResult.overallAssessments\n    ?.filter((assessment) => !isDraftAssessment(assessment))\n    .some((assessment) => !isAssessmentAiGenerated(assessment)) ?? false;\n\nexport const hasBeenEditedByHuman = (assessment: RunEvaluationResultAssessment) =>\n  // It is not AI generated, and it doesn't have the `IS_FROM_AI` metadata field set to true\n  assessment.source?.sourceType === 'HUMAN' &&\n  !assessment.metadata?.[KnownEvaluationResultAssessmentMetadataFields.IS_COPIED_FROM_AI];\n\nexport const getEvaluationResultAssessmentChunkIndex = (assessment: RunEvaluationResultAssessment) =>\n  assessment.metadata?.[KnownEvaluationResultAssessmentMetadataFields.CHUNK_INDEX];\n\n// Auto select the first non-empty evaluation ID if no evaluation ID is selected\nexport const autoSelectFirstNonEmptyEvaluationId = (\n  evaluationResults: RunEvaluationTracesDataEntry[] | null,\n  selectedEvaluationId: string | undefined,\n  setSelectedEvaluationId: (evaluationId: string | undefined) => void,\n) => {\n  if (!selectedEvaluationId && evaluationResults) {\n    // Find first non-empty evaluationId in data\n    const firstNonEmpty = evaluationResults.find((evaluation) => evaluation.evaluationId);\n    if (firstNonEmpty) {\n      setSelectedEvaluationId(firstNonEmpty.evaluationId);\n    }\n  }\n};\n\n/**\n * Converts the given value to a string if it's an object or an array.\n */\nexport const stringifyValue = (value: any) => {\n  return isPlainObject(value) || Array.isArray(value) ? JSON.stringify(value, undefined, 2) : value;\n};\n\n/**\n * Utility function: generates suggestions for the assessment values based on original assessment and options.\n */\nexport const getAssessmentValueSuggestions = (\n  intl: IntlShape,\n  originalAssessment?: RunEvaluationResultAssessment,\n  assessmentHistory?: RunEvaluationResultAssessment[],\n  assessmentInfos?: AssessmentInfo[],\n) => {\n  // If we're starting with an existing assessment, we should suggest the values that are relevant to it.\n  if (originalAssessment) {\n    const mapping = KnownEvaluationResultAssessmentValueMapping[originalAssessment.name];\n    if (!mapping) {\n      return [];\n    }\n\n    return Object.entries(mapping).map(([key, value]) => {\n      return { key, label: intl.formatMessage(value), rootAssessmentName: originalAssessment.name };\n    });\n  }\n\n  // If we're starting with a new assessment, we only suggest 'boolean' values and a new value.\n  return (assessmentInfos || [])\n    .filter((assessmentInfo) => assessmentInfo.dtype === 'boolean')\n    .map((assessmentInfo) => ({\n      key: assessmentInfo.name,\n      label: assessmentInfo.name,\n      rootAssessmentName: assessmentInfo.name,\n      // Disabled when the assessment already exists.\n      disabled: assessmentHistory?.some((assessment) => assessment.name === assessmentInfo.name),\n    }));\n};\n\n/**\n * Returns true if the assessment is missing.\n * An assessment is considered missing if it doesn't have a value, rationale or error message.\n */\nexport const isAssessmentMissing = (assessment?: RunEvaluationResultAssessment) => {\n  if (!assessment) {\n    return false;\n  } else {\n    const hasRationale = Boolean(assessment.rationale);\n    const hasValue = !isNil(getEvaluationResultAssessmentValue(assessment));\n    const hasErrorMessage = Boolean(assessment.errorMessage);\n    return !(hasRationale || hasValue || hasErrorMessage);\n  }\n};\n\n/**\n * Checks if the given value is a retrieved context.\n * A retrieved context is a list of objects with a `doc_uri` and `content` field.\n */\nexport const isRetrievedContext = (value: any): boolean => {\n  return Array.isArray(value) && value.every((v) => isPlainObject(v) && 'doc_uri' in v && 'content' in v);\n};\n","import { isNil } from 'lodash';\n\nimport type { ThemeType } from '@databricks/design-system';\n\nimport { KnownEvaluationResultAssessmentStringValue, withAlpha } from '../components/GenAiEvaluationTracesReview.utils';\nimport type { AssessmentInfo, AssessmentValueType, RunEvaluationResultAssessment } from '../types';\n\n// Taken from figma: https://www.figma.com/design/2B1KMp9x624WrxaASrSv9B/Tiles-UX?node-id=3205-87588&t=1MwrDNNRIOSODm4D-0\nexport const AGGREGATE_SCORE_CHANGE_BACKGROUND_COLORS = {\n  // Tag green\n  up: '#02B30214',\n  // Tag coral\n  down: '#F000400F',\n};\n\n// tagTextCoral\nexport const AGGREGATE_SCORE_CHANGE_TEXT_COLOR = '#64172B';\n\n// From https://www.figma.com/design/HvkTlHxw4sKE77wDlRBDt2/Evaluation-UX?node-id=2996-40835&t=uqVDwh0gqqRJI3jS-0\nexport const CURRENT_RUN_COLOR = '#077A9D';\nexport const COMPARE_TO_RUN_COLOR = '#FFAB00';\n\nconst PASS_BARCHART_BAR_COLOR = '#99DDB4';\nconst FAIL_BARCHART_BAR_COLOR = '#FCA4A1';\nconst ERROR_BARCHART_BAR_COLOR = '#f09065';\n\nconst TAG_PASS_COLOR = '#02B30214'; // From tagBackgroundLime.\n\nexport const getEvaluationResultIconColor = (\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  assessment?: RunEvaluationResultAssessment | { stringValue: string; errorMessage?: string },\n) => {\n  if (assessmentInfo.dtype === 'pass-fail') {\n    // Return the color based on the assessment value\n    if (assessment?.stringValue === KnownEvaluationResultAssessmentStringValue.YES) {\n      return theme.isDarkMode ? theme.colors.green400 : theme.colors.green600;\n    }\n    if (assessment?.stringValue === KnownEvaluationResultAssessmentStringValue.NO) {\n      return theme.isDarkMode ? theme.colors.red400 : theme.colors.red600;\n    }\n  }\n  if (assessment?.errorMessage) {\n    return theme.colors.textValidationWarning;\n  }\n  return theme.colors.grey400;\n};\n\nexport const getEvaluationResultAssessmentBackgroundColor = (\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  assessment?: RunEvaluationResultAssessment | { stringValue: string; booleanValue?: string; errorMessage?: string },\n  iconOnly = false,\n) => {\n  if (assessmentInfo.dtype === 'pass-fail') {\n    // Return the color based on the assessment value\n    if (assessment?.stringValue === KnownEvaluationResultAssessmentStringValue.YES) {\n      return TAG_PASS_COLOR;\n    }\n    if (assessment?.stringValue === KnownEvaluationResultAssessmentStringValue.NO) {\n      return theme.isDarkMode ? withAlpha(theme.colors.red800, 0.6) : theme.colors.red200;\n    }\n    if (!iconOnly && assessment?.errorMessage) {\n      return '';\n    }\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (isNil(assessment?.booleanValue)) {\n      return '';\n    }\n    return assessment.booleanValue ? TAG_PASS_COLOR : theme.isDarkMode ? theme.colors.red800 : theme.colors.red200;\n  }\n  return '';\n};\n\nexport const getEvaluationResultTextColor = (\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  assessment?: RunEvaluationResultAssessment | { stringValue?: string; booleanValue?: boolean; errorMessage?: string },\n) => {\n  if (assessment?.errorMessage) {\n    return theme.colors.textValidationWarning;\n  }\n\n  if (assessmentInfo.dtype === 'pass-fail') {\n    // Return the color based on the assessment value\n    if (assessment?.stringValue === KnownEvaluationResultAssessmentStringValue.YES) {\n      return theme.isDarkMode ? theme.colors.green400 : theme.colors.green600;\n    } else if (assessment?.stringValue === KnownEvaluationResultAssessmentStringValue.NO) {\n      return theme.isDarkMode ? theme.colors.red400 : theme.colors.red600;\n    } else {\n      return theme.colors.textSecondary;\n    }\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (isNil(assessment?.booleanValue)) {\n      return theme.colors.textSecondary;\n    }\n    return theme.colors.textPrimary;\n  } else if (assessmentInfo.dtype === 'unknown') {\n    return theme.colors.textSecondary;\n  }\n  return theme.colors.textPrimary;\n};\n\nexport const getAssessmentValueBarBackgroundColor = (\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  assessmentValue: AssessmentValueType,\n  isError?: boolean,\n) => {\n  if (isError) {\n    return ERROR_BARCHART_BAR_COLOR;\n  }\n  if (assessmentInfo.dtype === 'pass-fail') {\n    // Return the color based on the assessment value\n    if (assessmentValue === KnownEvaluationResultAssessmentStringValue.YES) {\n      return PASS_BARCHART_BAR_COLOR;\n    }\n    if (assessmentValue === KnownEvaluationResultAssessmentStringValue.NO) {\n      return FAIL_BARCHART_BAR_COLOR;\n    }\n    return theme.isDarkMode ? theme.colors.grey800 : theme.colors.grey200;\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (isNil(assessmentValue)) {\n      return theme.isDarkMode ? theme.colors.grey800 : theme.colors.grey200;\n    }\n    return assessmentValue ? PASS_BARCHART_BAR_COLOR : FAIL_BARCHART_BAR_COLOR;\n  }\n  return theme.isDarkMode ? theme.colors.grey800 : theme.colors.grey200;\n};\n","/**\n * This file re-exports the appropriate package for routing based on the environment.\n *\n * Duplicate of mlflow/web/js/src/common/utils/RoutingUtils.tsx, because unfortunately\n * this package is located in web-shared and we can't directly access it from here.\n */\n/* eslint-disable no-restricted-imports */\nimport React from 'react';\n/**\n * Import React Router V6 parts\n */\nimport {\n  BrowserRouter,\n  MemoryRouter,\n  HashRouter,\n  matchPath,\n  generatePath,\n  Navigate,\n  Route,\n  Outlet as OutletDirect,\n  Link as LinkDirect,\n  useNavigate as useNavigateDirect,\n  useLocation as useLocationDirect,\n  useParams as useParamsDirect,\n  useSearchParams as useSearchParamsDirect,\n  createHashRouter,\n  RouterProvider,\n  Routes,\n  type To,\n  type NavigateOptions,\n  type Location,\n  type NavigateFunction,\n  type Params,\n} from 'react-router-dom';\n\nconst useLocation = useLocationDirect;\n\nconst useSearchParams = useSearchParamsDirect;\n\nconst useParams = useParamsDirect;\n\nconst useNavigate = useNavigateDirect;\n\nconst Outlet = OutletDirect;\n\nconst Link = LinkDirect;\n\nexport {\n  // React Router V6 API exports\n  BrowserRouter,\n  MemoryRouter,\n  HashRouter,\n  Link,\n  useNavigate,\n  useLocation,\n  useParams,\n  useSearchParams,\n  generatePath,\n  matchPath,\n  Navigate,\n  Route,\n  Routes,\n  Outlet,\n\n  // Exports used to build hash-based data router\n  createHashRouter,\n  RouterProvider,\n};\n\nexport const createLazyRouteElement = (\n  // Load the module's default export and turn it into React Element\n  componentLoader: () => Promise<{ default: React.ComponentType<any> }>,\n) => React.createElement(React.lazy(componentLoader));\nexport const createRouteElement = (component: React.ComponentType<any>) => React.createElement(component);\n\nexport type { Location, NavigateFunction, Params, To, NavigateOptions };\n","import { useCallback, useMemo } from 'react';\n\nimport type { AssessmentFilter, AssessmentInfo, AssessmentValueType } from '../types';\nimport { useSearchParams } from '../utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'assessmentFilter';\nconst VALUE_SEPARATOR = '::';\n\n/**\n * Query param-powered hook that returns the compare to run uuid when comparison is enabled.\n */\nexport const useAssessmentFilters = (assessmentInfos: AssessmentInfo[]) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const assessmentFilters: AssessmentFilter[] = useMemo(() => {\n    const assessmentFiltersUrl = searchParams.getAll(QUERY_PARAM_KEY) ?? [];\n\n    return assessmentFiltersUrl.reduce<AssessmentFilter[]>((filters, urlFilter) => {\n      const [run, assessmentName, filterValueString, filterType] = urlFilter.split(VALUE_SEPARATOR);\n      const assessmentInfo = assessmentInfos?.find((info) => info.name === assessmentName);\n      if (assessmentInfo) {\n        const filterValue = serializedStringToAssessmentValue(assessmentInfo, filterValueString);\n        filters.push({\n          run,\n          assessmentName,\n          filterValue,\n          filterType: filterType === '' ? undefined : filterType,\n        } as AssessmentFilter);\n      }\n      return filters;\n    }, []);\n  }, [assessmentInfos, searchParams]);\n\n  const setAssessmentFilters = useCallback(\n    (filters: AssessmentFilter[] | undefined, replace = false) => {\n      setSearchParams(\n        (params: URLSearchParams) => {\n          params.delete(QUERY_PARAM_KEY);\n\n          if (filters) {\n            filters.forEach((filter) => {\n              params.append(\n                QUERY_PARAM_KEY,\n                [\n                  filter.run,\n                  filter.assessmentName,\n                  assessmentValueToSerializedString(filter.filterValue),\n                  filter.filterType,\n                ].join(VALUE_SEPARATOR),\n              );\n            });\n          }\n\n          return params;\n        },\n        { replace },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [assessmentFilters, setAssessmentFilters] as const;\n};\n\nexport function serializedStringToAssessmentValueV2(value: string): AssessmentValueType {\n  if (value === 'undefined') {\n    return undefined;\n  }\n\n  // Handle boolean values\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n\n  // TODO(nsthorat): handle float / int types here.\n  return value;\n}\n\nexport function serializedStringToAssessmentValue(assessmentInfo: AssessmentInfo, value: string): AssessmentValueType {\n  if (assessmentInfo.dtype === 'pass-fail') {\n    if (value === 'undefined') {\n      return undefined;\n    }\n    return value;\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (value === 'true') {\n      return true;\n    } else if (value === 'false') {\n      return false;\n    } else {\n      return undefined;\n    }\n  }\n  // TODO(nsthorat): handle float / int types here.\n  return value;\n}\n\nexport function assessmentValueToSerializedString(value: AssessmentValueType): string {\n  if (value === undefined || value === null) return 'undefined';\n  return `${value}`;\n}\n","import { useMemo, useState } from 'react';\n\nimport type { EvaluationsOverviewTableSort, TracesTableColumn } from '../types';\n\nexport const useTableSort = (\n  selectedColumns: TracesTableColumn[],\n  initialTableSort?: EvaluationsOverviewTableSort,\n): [EvaluationsOverviewTableSort | undefined, (sort: EvaluationsOverviewTableSort | undefined) => void] => {\n  const [tableSort, setTableSort] = useState<EvaluationsOverviewTableSort | undefined>(\n    initialTableSort && selectedColumns.find((c) => c.id === initialTableSort.key) ? initialTableSort : undefined,\n  );\n\n  // This is to keep table sort in sync with selected columns.\n  // e.g. if the user deselects the column that is currently used for sorting,\n  // we should clear the sort.\n  const derivedTableSort = useMemo(() => {\n    if (!tableSort) return undefined;\n\n    if (!selectedColumns.find((c) => c.id === tableSort.key)) {\n      return undefined;\n    }\n\n    return tableSort;\n  }, [tableSort, selectedColumns]);\n\n  return [derivedTableSort, setTableSort];\n};\n","import type { Table } from '@tanstack/react-table';\nimport React, { createContext, useMemo, useState } from 'react';\n\nimport type { EvalTraceComparisonEntry } from './types';\n\ntype TraceRow = EvalTraceComparisonEntry & { multiline?: boolean };\n\nexport interface GenAITracesTableContextValue<T> {\n  /** TanStack table instance (may be undefined until grandchild mounts) */\n  table: Table<T> | undefined;\n  /** Grandchild calls this once when it builds the table */\n  setTable: (tbl: Table<T> | undefined) => void;\n\n  selectedRowIds: string[];\n  /** Grandchild updates this on every selection change */\n  setSelectedRowIds: (rowIds: string[]) => void;\n}\nexport const GenAITracesTableContext = createContext<GenAITracesTableContextValue<TraceRow>>({\n  table: undefined,\n  setTable: () => {},\n  selectedRowIds: [],\n  setSelectedRowIds: () => {},\n});\n\ninterface GenAITracesTableProviderProps {\n  children: React.ReactNode;\n}\n\nexport const GenAITracesTableProvider: React.FC<GenAITracesTableProviderProps> = ({ children }) => {\n  const [table, setTable] = useState<Table<TraceRow> | undefined>();\n  const [selectedRowIds, setSelectedRowIds] = useState<string[]>([]);\n\n  const value = useMemo(() => ({ table, setTable, selectedRowIds, setSelectedRowIds }), [table, selectedRowIds]);\n\n  return <GenAITracesTableContext.Provider value={value}>{children}</GenAITracesTableContext.Provider>;\n};\n","import React, { useState } from 'react';\n\nimport { Modal, Typography } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport type { RunEvaluationTracesDataEntry } from '../types';\n\nexport const GenAiDeleteTraceModal = ({\n  experimentIds,\n  visible,\n  selectedTraces,\n  handleClose,\n  deleteTraces,\n}: {\n  experimentIds: string[];\n  visible: boolean;\n  selectedTraces: RunEvaluationTracesDataEntry[];\n  handleClose: () => void;\n  deleteTraces: (experimentId: string, traceIds: string[]) => Promise<void>;\n}) => {\n  const intl = useIntl();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const tracesToDelete = selectedTraces.map((trace) => trace.evaluationId);\n\n  const submitDeleteTraces = async () => {\n    try {\n      await deleteTraces(experimentIds[0] ?? '', tracesToDelete);\n      handleClose();\n    } catch (e: any) {\n      setErrorMessage(\n        intl.formatMessage({\n          defaultMessage: 'An error occured while attempting to delete traces. Please refresh the page and try again.',\n          description: 'Experiment page > traces view controls > Delete traces modal > Error message',\n        }),\n      );\n    }\n    setIsLoading(false);\n  };\n\n  const handleOk = () => {\n    submitDeleteTraces();\n    setIsLoading(true);\n  };\n\n  return (\n    <Modal\n      componentId=\"eval-tab.delete_traces-modal\"\n      title={\n        <FormattedMessage\n          defaultMessage=\"{count, plural, one {Delete Trace} other {Delete Traces}}\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Title\"\n          values={{ count: tracesToDelete.length }}\n        />\n      }\n      visible={visible}\n      onCancel={handleClose}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete {count, plural, one { # trace } other { # traces }}\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Delete button\"\n          values={{ count: tracesToDelete.length }}\n        />\n      }\n      onOk={handleOk}\n      okButtonProps={{ loading: isLoading, danger: true }}\n    >\n      {errorMessage && <Typography.Paragraph color=\"error\">{errorMessage}</Typography.Paragraph>}\n      <Typography.Paragraph>\n        <Typography.Text bold>\n          <FormattedMessage\n            defaultMessage=\"{count, plural, one { # trace } other { # traces }} will be deleted.\"\n            description=\"Experiment page > traces view controls > Delete traces modal > Confirmation message title\"\n            values={{\n              count: tracesToDelete.length,\n            }}\n          />\n        </Typography.Text>\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"Deleted traces cannot be restored. Are you sure you want to proceed?\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Confirmation message\"\n        />\n      </Typography.Paragraph>\n    </Modal>\n  );\n};\n","export const shouldEnableRunEvaluationReviewUIWriteFeatures = () => {\n  return false;\n};\n\nexport const shouldEnableTagGrouping = () => {\n  return true;\n};\n\nexport const shouldEnableUnifiedEvalTab = () => {\n  return false;\n};\n\nexport const shouldUseRunIdFilterInSearchTraces = () => {\n  return false;\n};\n\n/**\n * Page size for MLflow traces 3.0 search api used in eval tab\n */\nexport const getMlflowTracesSearchPageSize = () => {\n  // OSS backend limit is 500\n  return 500;\n};\n\n/**\n * Total number of traces that will be fetched via mlflow traces 3.0 search api in eval tab\n */\nexport const getEvalTabTotalTracesLimit = () => {\n  return 10000;\n};\n","import type { ModelTrace, ModelTraceInfo, ModelTraceSpan } from '../model-trace-explorer';\n\nexport type AssessmentDType = 'string' | 'numeric' | 'boolean' | 'pass-fail' | 'unknown';\nexport type AssessmentType = 'AI_JUDGE' | 'HUMAN' | 'CODE';\n\n// Reflects structure logged by mlflow.log_table()\nexport interface RawGenaiEvaluationArtifactResponse {\n  columns?: (string | null)[];\n  data?: (string | number | null | boolean | Record<string, any>)[][];\n  filename: string;\n}\n\nexport interface AssessmentInfo {\n  name: string;\n  displayName: string;\n  // True when the assessment comes from a built-in judge.\n  isKnown: boolean;\n  isOverall: boolean;\n  // The metric that produced the assessment. Defined as the name of the judge or custom metric function that produced the assessment.\n  metricName: string;\n  source?: RunEvaluationResultAssessmentSource;\n  isCustomMetric: boolean;\n  isEditable: boolean;\n  isRetrievalAssessment: boolean;\n  // The type of the assessment value.\n  dtype: AssessmentDType;\n  uniqueValues: Set<AssessmentValueType>;\n\n  // Display metadata.\n  docsLink: string;\n  missingTooltip: string;\n  description: string;\n\n  // True if if the assesment contains at least one error\n  containsErrors?: boolean;\n}\n\ninterface RootCauseAssessmentInfo {\n  assessmentName: string;\n  suggestedActions?: string;\n}\n\nexport interface EvaluationArtifactTableEntryAssessment {\n  evaluation_id: string;\n\n  name: string;\n\n  boolean_value: boolean | null;\n  numeric_value: number | null;\n  string_value: string | null;\n  rationale: string | null;\n\n  source: {\n    source_type: AssessmentType;\n    source_id: string;\n    metadata: any;\n  };\n\n  metadata?: Record<string, any>;\n\n  timestamp: number;\n\n  error_code?: string;\n  error_message?: string;\n}\n\nexport interface EvaluationArtifactTableEntryMetric {\n  evaluation_id: string;\n  key: string;\n  value: number;\n  timestamp: number;\n}\n\nexport interface EvaluationArtifactTableEntryEvaluation {\n  evaluation_id: string;\n  inputs_id: string;\n  request_id: string;\n  run_id?: string;\n\n  inputs: Record<string, any>;\n  outputs: Record<string, any>;\n  targets: Record<string, any>;\n}\n\nexport type RunEvaluationResultAssessmentSource = {\n  sourceType: AssessmentType;\n  sourceId: string;\n  metadata: Record<string, string>;\n};\n\nexport type RunEvaluationResultAssessment = {\n  name: string;\n  rationale?: string | null;\n  source?: RunEvaluationResultAssessmentSource;\n  metadata?: Record<string, string | boolean | number>;\n  errorCode?: string;\n  errorMessage?: string;\n  numericValue?: number | null;\n  booleanValue?: boolean | null;\n  stringValue?: string | null;\n  // Root cause assessment points to the assessment name causing the failure.\n  rootCauseAssessment?: RootCauseAssessmentInfo | null;\n  timestamp?: number | null;\n};\n\nexport type AssessmentValueType = string | boolean | number | undefined;\n\nexport type AssessmentRunCounts = Map<AssessmentValueType, number>;\n\nexport interface AssessmentAggregates {\n  assessmentInfo: AssessmentInfo;\n\n  // Counts for the current run and other run.\n  currentCounts?: AssessmentRunCounts;\n  otherCounts?: AssessmentRunCounts;\n\n  // Numeric values for the current run and other run.\n  currentNumericValues?: number[];\n  otherNumericValues?: number[];\n\n  currentNumRootCause: number;\n  otherNumRootCause: number;\n\n  // Numeric aggregate counts for the current run.\n  currentNumericAggregate?: NumericAggregate;\n\n  assessmentFilters: AssessmentFilter[];\n}\n\nexport interface EvaluationsOverviewTableSort {\n  key: string;\n  type: TracesTableColumnType;\n  asc: boolean;\n}\n\nexport interface TraceActions {\n  exportToEvals?: {\n    getTrace?: (requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>;\n  };\n  deleteTracesAction?: {\n    deleteTraces: (experimentId: string, traceIds: string[]) => Promise<any>;\n  };\n  editTags?: {\n    showEditTagsModalForTrace: (trace: ModelTraceInfo) => void;\n    EditTagsModal: React.ReactNode;\n  };\n}\n\n// @deprecated, use TableFilter instead\nexport interface AssessmentFilter {\n  assessmentName: string;\n  filterValue: AssessmentValueType;\n  // Only defined when filtering on an assessment for RCA values.\n  filterType?: 'rca' | undefined;\n  run: string;\n}\nexport type TableFilter = {\n  // The column group (e.g. \"Assessments\") or a specific column (e.g. \"execution_duration\")\n  column: TracesTableColumnGroup | string;\n  // Should be defined if a column group is used.\n  key?: string;\n  operator: FilterOperator;\n  value: TableFilterValue;\n};\n\nexport type TableFilterValue = string | boolean | number | undefined;\n\nexport interface TableFilterOption {\n  value: string;\n  renderValue: () => string | React.ReactNode;\n}\n\nexport interface TableFilterOptions {\n  source: TableFilterOption[];\n}\n\nexport enum FilterOperator {\n  EQUALS = '=',\n  GREATER_THAN = '>',\n  LESS_THAN = '<',\n  GREATER_THAN_OR_EQUALS = '>=',\n  LESS_THAN_OR_EQUALS = '<=',\n}\n\nexport interface AssessmentDropdownSuggestionItem {\n  label: string;\n  key: string;\n  rootAssessmentName?: string;\n  disabled?: boolean;\n}\n\nexport interface RunEvaluationResultAssessmentDraft extends RunEvaluationResultAssessment {\n  isDraft: true;\n}\n\nexport type RunEvaluationResultMetric = {\n  key: string;\n  value: number;\n  timestamp: number;\n};\n\nexport type RunEvaluationTracesRetrievalChunk = {\n  docUrl: string;\n  content: string;\n  retrievalAssessmentsByName?: Record<string, RunEvaluationResultAssessment[]>;\n  target?: string;\n};\n\n// TODO(nsthorat): Move these to the shared types location:\n// https://src.dev.databricks.com/databricks-eng/universe/-/blob/webapp/web/js/genai/shared/types.ts\n// The shared type does not yet support TraceInfoV3.\n// I had to add these here because the types in genai/shared/types are TraceV2.\n// The types in trace-explorer are also TraceV2.\nexport type AssessmentV3 = {\n  assessment_id: string;\n  assessment_name: string;\n  trace_id: string;\n  span_id?: string;\n  create_time: string;\n  last_update_time: string;\n  feedback?: {\n    value: string | number | boolean;\n    error?: {\n      error_code?: string;\n      error_message?: string;\n    };\n  };\n  expectation?: {\n    value: string | string[];\n    serialized_value?: {\n      serialization_format?: string;\n      value: string | string[];\n    };\n    error?: {\n      error_code?: string;\n      error_message?: string;\n    };\n  };\n  metadata?: Record<string, string>;\n  rationale?: string;\n  error?: {\n    error_code?: string;\n    error_message?: string;\n  };\n  source?: {\n    source_type?: 'HUMAN' | 'LLM_JUDGE' | 'CODE';\n    source_id?: string;\n  };\n};\n\nexport type TraceInfoV3 = {\n  trace_id: string;\n  client_request_id?: string;\n  trace_location: {\n    type: 'MLFLOW_EXPERIMENT' | 'INFERENCE_TABLE';\n    mlflow_experiment?: { experiment_id: string };\n    inference_table?: { full_table_name: string };\n  };\n  request?: string;\n  request_preview?: string;\n  response?: string;\n  response_preview?: string;\n  request_time: string;\n  execution_duration?: string;\n  state: 'STATE_UNSPECIFIED' | 'OK' | 'ERROR' | 'IN_PROGRESS';\n  trace_metadata?: Record<string, string>;\n  tags?: Record<string, string>;\n  assessments?: AssessmentV3[];\n};\n\nexport type TraceV3 = {\n  info: TraceInfoV3;\n  data: {\n    spans: ModelTraceSpan[];\n  };\n};\n\n/**\n * An entity encompassing single review evaluation data.\n */\nexport type RunEvaluationTracesDataEntry = {\n  evaluationId: string;\n  requestId: string;\n  inputsTitle?: string;\n  inputs: Record<string, any>;\n  inputsId: string;\n  outputs: Record<string, any>;\n  targets: Record<string, any>;\n  errorCode?: string;\n  errorMessage?: string;\n  requestTime?: string;\n  overallAssessments: RunEvaluationResultAssessment[];\n  responseAssessmentsByName: Record<\n    // Keyed by assessment name (e.g. \"overall_judgement\", \"readability_score\" etc.)\n    string,\n    RunEvaluationResultAssessment[]\n  >;\n  metrics: Record<string, RunEvaluationResultMetric>;\n  retrievalChunks?: RunEvaluationTracesRetrievalChunk[];\n\n  // NOTE(nsthorat): We will slowly migrate to this type.\n  traceInfo?: TraceInfoV3;\n};\n\nexport interface EvalTraceComparisonEntry {\n  currentRunValue?: RunEvaluationTracesDataEntry;\n  otherRunValue?: RunEvaluationTracesDataEntry;\n}\n\nexport interface SaveAssessmentsQuery {\n  savePendingAssessments: (\n    runUuid: string,\n    evaluationId: string,\n    pendingAssessmentEntries: RunEvaluationResultAssessmentDraft[],\n  ) => void;\n  isSaving: boolean;\n}\n\n// Internal type used to determine behavior of different types of columns.\n// We should try to move away from this and start to use TracesTableColumnGroup instead.\nexport enum TracesTableColumnType {\n  ASSESSMENT = 'ASSESSMENT',\n  TRACE_INFO = 'TRACE_INFO',\n  INPUT = 'INPUT',\n  // This is a hack so that internal agent monitoring can display request time.\n  INTERNAL_MONITOR_REQUEST_TIME = 'INTERNAL_MONITOR_REQUEST_TIME',\n}\n\n// This represents columns that are grouped together.\n// For example, each assessment is its own column, but they are all grouped under the \"Assessments\" column group.\nexport enum TracesTableColumnGroup {\n  ASSESSMENT = 'ASSESSMENT',\n  TAG = 'TAG',\n  INFO = 'INFO',\n}\n\nexport const TracesTableColumnGroupToLabelMap = {\n  [TracesTableColumnGroup.ASSESSMENT]: 'Assessments',\n  [TracesTableColumnGroup.TAG]: 'Tags',\n  // We don't show a label for the info column group\n  [TracesTableColumnGroup.INFO]: '\\u00A0',\n};\n\nexport interface TracesTableColumn {\n  // This is the assessment name for assessments, and a static string for trace info and input columns\n  id: string;\n  label: string;\n  type: TracesTableColumnType;\n  group?: TracesTableColumnGroup;\n\n  // TODO: Remove this field once migration to trace info v3 is complete\n  assessmentInfo?: AssessmentInfo;\n}\n\nexport interface TableFilterFormState {\n  filters: TableFilter[];\n}\n\n// A bucket of a numeric aggregate.\nexport type NumericAggregateCount = {\n  // The lower bound of the bucket, inclusive.\n  lower: number;\n  // The upper bound of the bucket, exclusive except for the last bucket.\n  upper: number;\n  // The number of values in the bucket.\n  count: number;\n};\n\n// A numeric aggregate with the min, mid, and max values, and the counts of values in each bucket.\nexport type NumericAggregate = {\n  min: number;\n  max: number;\n  maxCount: number;\n  counts: NumericAggregateCount[];\n};\n","import { isNil } from 'lodash';\nimport { useMemo } from 'react';\n\nimport type { IntlShape } from '@databricks/i18n';\n\nimport { KnownEvaluationResultAssessmentName } from '../enum';\nimport type { AssessmentInfo, RunEvaluationTracesDataEntry, TraceInfoV3, TracesTableColumn } from '../types';\nimport { TracesTableColumnGroup, TracesTableColumnType } from '../types';\nimport { shouldEnableTagGrouping } from '../utils/FeatureUtils';\nimport {\n  createCustomMetadataColumnId,\n  createTagColumnId,\n  MLFLOW_INTERNAL_PREFIX,\n  shouldUseTraceInfoV3,\n} from '../utils/TraceUtils';\n\nexport const USER_COLUMN_ID = 'user';\nexport const SESSION_COLUMN_ID = 'session';\nexport const RESPONSE_COLUMN_ID = 'response';\nexport const TRACE_ID_COLUMN_ID = 'trace_id';\nexport const REQUEST_TIME_COLUMN_ID = 'request_time';\nexport const EXECUTION_DURATION_COLUMN_ID = 'execution_duration';\nexport const STATE_COLUMN_ID = 'state';\nexport const SOURCE_COLUMN_ID = 'source';\nexport const TAGS_COLUMN_ID = 'tags';\nexport const TRACE_NAME_COLUMN_ID = 'trace_name';\nexport const INPUTS_COLUMN_ID = 'request';\nexport const RUN_NAME_COLUMN_ID = 'run_name';\nexport const LOGGED_MODEL_COLUMN_ID = 'logged_model';\nexport const TOKENS_COLUMN_ID = 'tokens';\nexport const CUSTOM_METADATA_COLUMN_ID = 'custom_metadata';\n\nexport const SORTABLE_INFO_COLUMNS = [EXECUTION_DURATION_COLUMN_ID, REQUEST_TIME_COLUMN_ID, SESSION_COLUMN_ID];\n// Columns that are sortable by the server. Server-side sorting should be prioritized over client-side sorting.\nexport const SERVER_SORTABLE_INFO_COLUMNS = [EXECUTION_DURATION_COLUMN_ID, REQUEST_TIME_COLUMN_ID];\n\n// This is a short term fix to not display any additional assessments with the trace info v3 migration.\n// Long term we should decide how to best display these assessments.\nconst EXCLUDED_ASSESSMENT_NAMES = [\n  KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE,\n  KnownEvaluationResultAssessmentName.TOTAL_INPUT_TOKEN_COUNT,\n  KnownEvaluationResultAssessmentName.TOTAL_OUTPUT_TOKEN_COUNT,\n  KnownEvaluationResultAssessmentName.TOTAL_TOKEN_COUNT,\n  KnownEvaluationResultAssessmentName.DOCUMENT_RECALL,\n  KnownEvaluationResultAssessmentName.DOCUMENT_RATINGS,\n];\n\nconst ASSESSMENT_COLUMN_ID_SUFFIX = '_assessment_column';\n\n// Add a suffix to the assessment name as the id to make it work for blank names.\nexport function createAssessmentColumnId(assessmentName: string) {\n  return assessmentName + ASSESSMENT_COLUMN_ID_SUFFIX;\n}\n\nexport const useTableColumns = (\n  intl: IntlShape,\n  currentEvaluationResults: RunEvaluationTracesDataEntry[],\n  assessmentInfos: AssessmentInfo[],\n  runUuid: string | undefined,\n  otherEvaluationResults?: RunEvaluationTracesDataEntry[],\n  isTraceInfoV3Override?: boolean,\n) => {\n  const allColumns: TracesTableColumn[] = useMemo(() => {\n    const isTraceInfoV3 = isTraceInfoV3Override ?? shouldUseTraceInfoV3(currentEvaluationResults);\n    let inputCols = [];\n    if (!isTraceInfoV3) {\n      let inputKeys = new Set<string>();\n      let traceInfoColumns = new Set<keyof TraceInfoV3>();\n\n      currentEvaluationResults.forEach((result) => {\n        const { inputs } = result;\n        inputKeys = new Set<string>([...inputKeys, ...Object.keys(inputs || {})]);\n\n        traceInfoColumns = new Set<keyof TraceInfoV3>([\n          ...traceInfoColumns,\n          ...Object.keys(result.traceInfo || {}),\n        ] as (keyof TraceInfoV3)[]);\n      });\n\n      inputCols = [...inputKeys].map((key) => ({\n        id: key,\n        label: key,\n        type: TracesTableColumnType.INPUT,\n      }));\n    } else {\n      inputCols = [\n        {\n          id: INPUTS_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Request',\n            description: 'Column label for request',\n          }),\n          type: TracesTableColumnType.INPUT,\n          group: TracesTableColumnGroup.INFO,\n        },\n      ];\n    }\n\n    const assessmentColumns = assessmentInfos\n      .map((assessmentInfo) => ({\n        id: createAssessmentColumnId(assessmentInfo.name),\n        label: assessmentInfo.displayName,\n        type: TracesTableColumnType.ASSESSMENT,\n        assessmentInfo,\n        group: TracesTableColumnGroup.ASSESSMENT,\n      }))\n      .filter(\n        (assessment) =>\n          // retrieval columns should not be displayed in the table since they don't apply to the overall trace\n          !assessment.assessmentInfo.isRetrievalAssessment &&\n          !EXCLUDED_ASSESSMENT_NAMES.includes(assessment.assessmentInfo.name as KnownEvaluationResultAssessmentName),\n      );\n\n    let infoCols;\n    if (isTraceInfoV3) {\n      infoCols = [\n        {\n          id: TRACE_ID_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Trace ID',\n            description: 'Column label for trace ID',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: TRACE_NAME_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Trace name',\n            description: 'Column label for trace name',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: RESPONSE_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Response',\n            description: 'Column label for response',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: USER_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'User',\n            description: 'Column label for user',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: SESSION_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Session',\n            description: 'Column label for session',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: EXECUTION_DURATION_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Execution time',\n            description: 'Column label for execution time',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: REQUEST_TIME_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Request time',\n            description: 'Column label for request time',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: STATE_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'State',\n            description: 'Column label for state',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: SOURCE_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Source',\n            description: 'Column label for source',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: LOGGED_MODEL_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Version',\n            description: 'Column label for logged model',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        {\n          id: TOKENS_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Tokens',\n            description: 'Column label for tokens',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        // Only show run name column on experiment level traces, where runUuid is not provided\n        isNil(runUuid) && {\n          id: RUN_NAME_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Run name',\n            description: 'Column label for run name',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.INFO,\n        },\n        !shouldEnableTagGrouping() && {\n          id: TAGS_COLUMN_ID,\n          label: intl.formatMessage({\n            defaultMessage: 'Tags',\n            description: 'Column label for tags',\n          }),\n          type: TracesTableColumnType.TRACE_INFO,\n          group: TracesTableColumnGroup.TAG,\n        },\n      ];\n\n      const allResults = [...currentEvaluationResults, ...(otherEvaluationResults || [])];\n      // Populate custom metadata columns\n      const customMetadataColumns: Record<string, TracesTableColumn> = {};\n      allResults.forEach((result) => {\n        const traceMetadata = result.traceInfo?.trace_metadata;\n        if (traceMetadata) {\n          Object.keys(traceMetadata).forEach((key) => {\n            if (!key.startsWith(MLFLOW_INTERNAL_PREFIX) && !customMetadataColumns[key]) {\n              customMetadataColumns[key] = {\n                id: createCustomMetadataColumnId(key),\n                label: key,\n                type: TracesTableColumnType.TRACE_INFO,\n                group: TracesTableColumnGroup.INFO,\n              };\n            }\n          });\n        }\n      });\n      infoCols = [...infoCols, ...Object.values(customMetadataColumns)];\n\n      if (shouldEnableTagGrouping()) {\n        const tagColumnRecords: Record<string, TracesTableColumn> = {};\n        allResults\n          .map((result) => result.traceInfo?.tags)\n          .forEach((tag) => {\n            Object.keys(tag || {}).forEach((key) => {\n              if (!key.startsWith(MLFLOW_INTERNAL_PREFIX) && !tagColumnRecords[key]) {\n                tagColumnRecords[key] = {\n                  id: createTagColumnId(key),\n                  label: key,\n                  type: TracesTableColumnType.TRACE_INFO,\n                  group: TracesTableColumnGroup.TAG,\n                };\n              }\n            });\n          });\n        const tagColumns = Object.values(tagColumnRecords);\n\n        infoCols = [...infoCols, ...tagColumns];\n      }\n    } else {\n      infoCols = currentEvaluationResults.some((result) => !isNil(result.requestTime))\n        ? [\n            {\n              id: REQUEST_TIME_COLUMN_ID,\n              label: intl.formatMessage({\n                defaultMessage: 'Request time',\n                description: 'Column label for request time',\n              }),\n              type: TracesTableColumnType.INTERNAL_MONITOR_REQUEST_TIME,\n            },\n          ]\n        : [];\n    }\n\n    return [...inputCols, ...infoCols, ...assessmentColumns].filter((col): col is TracesTableColumn => Boolean(col));\n  }, [currentEvaluationResults, intl, assessmentInfos, runUuid, otherEvaluationResults, isTraceInfoV3Override]);\n\n  return allColumns;\n};\n","import { isNil, uniq } from 'lodash';\n\nimport { ModelTraceSpanType } from '@databricks/web-shared/model-trace-explorer';\nimport type { ModelTrace, ModelTraceInfo, RetrieverDocument } from '@databricks/web-shared/model-trace-explorer';\n\nimport { stringifyValue } from '../components/GenAiEvaluationTracesReview.utils';\nimport { KnownEvaluationResultAssessmentName } from '../enum';\nimport { CUSTOM_METADATA_COLUMN_ID, TAGS_COLUMN_ID } from '../hooks/useTableColumns';\nimport type {\n  AssessmentType,\n  AssessmentV3,\n  RunEvaluationResultAssessment,\n  RunEvaluationResultAssessmentSource,\n  RunEvaluationTracesDataEntry,\n  RunEvaluationTracesRetrievalChunk,\n  TraceInfoV3,\n} from '../types';\n\n// This is the key used by the eval harness to record\n// which chunk a given retrieval assessment corresponds to.\nconst MLFLOW_SPAN_OUTPUT_KEY = 'span_output_key';\n\nconst MLFLOW_ASSESSMENT_ROOT_CAUSE_ASSESSMENT = 'root_cause_assessment';\nconst MLFLOW_ASSESSMENT_ROOT_CAUSE_RATIONALE = 'root_cause_rationale';\nconst MLFLOW_ASSESSMENT_SUGGESTED_ACTION = 'suggested_action';\nexport const MLFLOW_SOURCE_RUN_KEY = 'mlflow.sourceRun';\n\nexport const MLFLOW_INTERNAL_PREFIX = 'mlflow.';\n\nexport const getRowIdFromEvaluation = (evaluation?: RunEvaluationTracesDataEntry) => {\n  return evaluation?.evaluationId || '';\n};\n\nexport const getRowIdFromTrace = (trace?: TraceInfoV3) => {\n  return trace?.trace_id || '';\n};\n\nexport const getTagKeyFromColumnId = (columnId: string) => {\n  return columnId.split(':').pop();\n};\n\nexport const getCustomMetadataKeyFromColumnId = (columnId: string) => {\n  return columnId.split(':').pop();\n};\n\nexport const createTagColumnId = (tagKey: string) => {\n  return `${TAGS_COLUMN_ID}:${tagKey}`;\n};\n\nexport const createCustomMetadataColumnId = (metadataKey: string) => {\n  return `${CUSTOM_METADATA_COLUMN_ID}:${metadataKey}`;\n};\n\nexport const getTracesTagKeys = (traces: TraceInfoV3[]): string[] => {\n  return uniq(\n    traces\n      .map((result) => {\n        return Object.keys(result.tags || {}).filter((key) => key && !key.startsWith(MLFLOW_INTERNAL_PREFIX));\n      })\n      .flat(),\n  );\n};\n\n/**\n * This is currently only used to support the edit tags flow which only requires request id + tags\n */\nexport const convertTraceInfoV3ToModelTraceInfo = (trace: TraceInfoV3) => {\n  const kvArray = (obj?: Record<string, string>): { key: string; value: string }[] | undefined =>\n    obj ? Object.entries(obj).map(([key, value]) => ({ key, value })) : undefined;\n\n  const model: ModelTraceInfo = {\n    request_id: trace.client_request_id ?? trace.trace_id,\n    tags: kvArray(trace.tags),\n  };\n\n  return model;\n};\n\n// This function checks if the traceInfo field is present in the first entry of the evalResults array.\n// We assume that all entries in evalResults will either contain traceInfo or not.\nexport const shouldUseTraceInfoV3 = (evalResults: RunEvaluationTracesDataEntry[]): boolean => {\n  return evalResults.length > 0 && Boolean(evalResults[0].traceInfo);\n};\n\nconst safelyParseValue = <T>(val: string): string | T => {\n  try {\n    return JSON.parse(val);\n  } catch {\n    return val;\n  }\n};\n\nexport const getTraceInfoInputs = (traceInfo: TraceInfoV3) => {\n  return traceInfo.request_preview || traceInfo.request || traceInfo.trace_metadata?.['mlflow.traceInputs'] || '';\n};\n\nexport const getTraceInfoOutputs = (traceInfo: TraceInfoV3) => {\n  return traceInfo.response_preview || traceInfo.response || traceInfo.trace_metadata?.['mlflow.traceOutputs'] || '';\n};\n\nconst isExpectationAssessment = (assessment: AssessmentV3): boolean => {\n  return Boolean(assessment.expectation);\n};\n\nconst LIST_TRACES_IGNORE_ASSESSMENTS = ['agent/latency_seconds'];\n\nfunction processExpectationAssessment(assessment: AssessmentV3, targets: Record<string, any>): void {\n  const assessmentName = assessment.assessment_name;\n  const assessmentValue = assessment.expectation?.value || assessment.expectation?.serialized_value?.value;\n\n  if (Array.isArray(assessmentValue) && assessmentValue.length > 0) {\n    targets[assessmentName] = assessmentValue.map((val) => {\n      return safelyParseValue(val);\n    });\n  } else if (typeof assessmentValue === 'string') {\n    targets[assessmentName] = safelyParseValue(assessmentValue);\n  } else {\n    targets[assessmentName] = [];\n  }\n}\n\nfunction processFeedbackAssessment(\n  assessment: AssessmentV3,\n  overallAssessments: RunEvaluationResultAssessment[],\n  responseAssessmentsByName: Record<string, RunEvaluationResultAssessment[]>,\n): void {\n  const assessmentName = assessment.assessment_name;\n  const evalResultAssessment = convertFeedbackAssessmentToRunEvalAssessment(assessment);\n\n  if (assessmentName === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT) {\n    overallAssessments.push(evalResultAssessment);\n  }\n  if (!responseAssessmentsByName[assessmentName]) {\n    responseAssessmentsByName[assessmentName] = [];\n  }\n\n  responseAssessmentsByName[assessmentName].push(evalResultAssessment);\n}\n\nconst convertAssessmentV3Source = (assessment: AssessmentV3): RunEvaluationResultAssessmentSource | undefined => {\n  if (!assessment.source?.source_type) {\n    return undefined;\n  }\n  const sourceType = assessment.source?.source_type;\n\n  let runEvalSourceType: AssessmentType;\n  if (sourceType === 'LLM_JUDGE') {\n    runEvalSourceType = 'AI_JUDGE';\n  } else {\n    runEvalSourceType = sourceType;\n  }\n\n  return {\n    sourceType: runEvalSourceType,\n    sourceId: assessment.source?.source_id || '',\n    metadata: {},\n  };\n};\n\nconst convertFeedbackAssessmentToRunEvalAssessment = (assessment: AssessmentV3): RunEvaluationResultAssessment => {\n  const assessmentValue = assessment.feedback?.value;\n  const isOverallAssessment = assessment.assessment_name === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT;\n  const source = convertAssessmentV3Source(assessment);\n  const error = assessment.feedback?.error || assessment.error;\n  return {\n    name: assessment.assessment_name,\n    stringValue: typeof assessmentValue === 'string' ? assessmentValue : undefined,\n    booleanValue: typeof assessmentValue === 'boolean' ? assessmentValue : undefined,\n    numericValue: typeof assessmentValue === 'number' ? assessmentValue : undefined,\n    errorCode: error?.error_code,\n    errorMessage: error?.error_message,\n    rationale: assessment.metadata?.[MLFLOW_ASSESSMENT_ROOT_CAUSE_RATIONALE] || assessment.rationale,\n    source,\n    rootCauseAssessment: isOverallAssessment\n      ? {\n          assessmentName: assessment.metadata?.[MLFLOW_ASSESSMENT_ROOT_CAUSE_ASSESSMENT] || '',\n          suggestedActions: assessment.metadata?.[MLFLOW_ASSESSMENT_SUGGESTED_ACTION],\n        }\n      : undefined,\n    metadata: assessment.metadata,\n  };\n};\n\nexport const convertTraceInfoV3ToRunEvalEntry = (traceInfo: TraceInfoV3): RunEvaluationTracesDataEntry => {\n  const evaluationId = getRowIdFromTrace(traceInfo);\n\n  // Prepare containers for our assessments.\n  const overallAssessments: RunEvaluationResultAssessment[] = [];\n  const responseAssessmentsByName: Record<string, RunEvaluationResultAssessment[]> = {};\n  const targets: Record<string, any> = {};\n\n  traceInfo.assessments?.forEach((assessment) => {\n    const assessmentName = assessment.assessment_name;\n    if (LIST_TRACES_IGNORE_ASSESSMENTS.includes(assessmentName)) {\n      return;\n    }\n    if (isExpectationAssessment(assessment)) {\n      processExpectationAssessment(assessment, targets);\n    } else {\n      processFeedbackAssessment(assessment, overallAssessments, responseAssessmentsByName);\n    }\n  });\n\n  // trace server has input/output in request/response field, and mlflow tracking server has it in the metadata\n  const rawInputs = getTraceInfoInputs(traceInfo);\n  const rawOutputs = getTraceInfoOutputs(traceInfo);\n\n  let inputsTitle = rawInputs;\n  let inputs: Record<string, any> = {};\n  let outputs: Record<string, any> = {};\n  try {\n    inputs = JSON.parse(rawInputs);\n\n    // Try to parse OpenAI messages\n    const messages = inputs['messages'];\n    if (Array.isArray(messages) && !isNil(messages[0]?.content)) {\n      inputsTitle = messages[messages.length - 1]?.content;\n    } else {\n      inputsTitle = stringifyValue(inputs);\n    }\n  } catch {\n    inputs = {\n      request: rawInputs,\n    };\n  }\n\n  try {\n    outputs = { response: JSON.parse(rawOutputs) };\n  } catch {\n    outputs = { response: rawOutputs };\n  }\n  return {\n    evaluationId,\n    requestId: traceInfo.client_request_id || evaluationId,\n    inputsId: evaluationId,\n    inputsTitle,\n    inputs,\n    outputs,\n    targets,\n    overallAssessments,\n    responseAssessmentsByName,\n    metrics: {},\n    traceInfo,\n  };\n};\n\nexport const applyTraceInfoV3ToEvalEntry = (\n  evalResults: RunEvaluationTracesDataEntry[],\n): RunEvaluationTracesDataEntry[] => {\n  if (!shouldUseTraceInfoV3(evalResults)) {\n    return evalResults;\n  }\n  return evalResults.map((result) => {\n    if (!result.traceInfo) {\n      return result;\n    }\n    // Convert the single TraceInfo to a single RunEvaluationTracesDataEntry\n    const converted = convertTraceInfoV3ToRunEvalEntry(result.traceInfo);\n    // Merge the newly converted fields with the existing data\n    return {\n      ...result,\n      ...converted,\n    };\n  });\n};\n\nexport const isTraceExportable = (entry: RunEvaluationTracesDataEntry) => {\n  let responseJson;\n  try {\n    responseJson = JSON.parse(entry.outputs['response']);\n  } catch {\n    if (!entry.outputs['response']) {\n      return false;\n    }\n    // entry.outputs.response may already be parsed in case of external monitors\n    // so try using it directly here.\n    responseJson = entry.outputs['response'];\n  }\n  if (isNil(responseJson)) {\n    return false;\n  }\n\n  const responseIsChatCompletion =\n    (Array.isArray(responseJson['messages']) && !isNil(responseJson['messages']?.[0]?.['content'])) ||\n    (Array.isArray(responseJson['choices']) && !isNil(responseJson['choices']?.[0]?.['message']?.['content']));\n\n  return responseIsChatCompletion;\n};\n\nexport function getRetrievedContextFromTrace(\n  responseAssessmentsByName: Record<string, RunEvaluationResultAssessment[]>,\n  trace: ModelTrace | undefined,\n): RunEvaluationTracesRetrievalChunk[] | undefined {\n  if (isNil(trace)) {\n    return undefined;\n  }\n  let docUriKey = 'doc_uri';\n  const tags = trace.info.tags as Record<string, string> | undefined;\n  if (tags?.['retrievers']) {\n    const retrieverInfos = safelyParseValue<{ doc_uri: string; chunk_id: string }[]>(tags['retrievers']);\n    if (typeof retrieverInfos === 'object' && retrieverInfos.length > 0) {\n      docUriKey = retrieverInfos[0].doc_uri;\n    }\n  }\n\n  const retrievalSpans = trace.data.spans.filter(\n    (span) =>\n      span.attributes?.['mlflow.spanType'] &&\n      safelyParseValue(span.attributes?.['mlflow.spanType']) === ModelTraceSpanType.RETRIEVER,\n  );\n  if (retrievalSpans.length === 0) {\n    return [];\n  }\n\n  // Return the last retrieval span chronologically since it is the one analyzed by our judges.\n  const spanOutputs = retrievalSpans.at(-1)?.attributes?.['mlflow.spanOutputs'];\n  if (!spanOutputs) {\n    return [];\n  }\n\n  const outputs = safelyParseValue(spanOutputs) as RetrieverDocument[];\n  if (!Array.isArray(outputs)) {\n    return [];\n  }\n\n  const retrievalChunks = outputs.map((doc, index) => {\n    return {\n      docUrl: doc.metadata?.[docUriKey],\n      content: doc.page_content,\n      retrievalAssessmentsByName: getRetrievalAssessmentsByName(responseAssessmentsByName, index),\n    };\n  });\n\n  return retrievalChunks;\n}\n\nconst getRetrievalAssessmentsByName = (\n  responseAssessmentsByName: Record<string, RunEvaluationResultAssessment[]>,\n  chunkIndex: number,\n): Record<string, RunEvaluationResultAssessment[]> => {\n  const filteredResponseAssessmentsByName = Object.fromEntries(\n    Object.entries(responseAssessmentsByName)\n      .map(([key, assessments]) => [\n        key,\n        assessments.filter((assessment) => Number(assessment?.metadata?.[MLFLOW_SPAN_OUTPUT_KEY]) === chunkIndex),\n      ])\n      .filter(([key, filteredAssessments]) => filteredAssessments.length > 0),\n  );\n\n  return filteredResponseAssessmentsByName;\n};\n","import type { RowSelectionState } from '@tanstack/react-table';\nimport { isNil } from 'lodash';\nimport { useCallback, useContext, useMemo, useState } from 'react';\n\nimport { Button, Tooltip, DropdownMenu, ChevronDownIcon } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { GenAITracesTableContext } from './GenAITracesTableContext';\nimport { GenAiDeleteTraceModal } from './components/GenAiDeleteTraceModal';\nimport type { RunEvaluationTracesDataEntry, TraceActions, TraceInfoV3 } from './types';\nimport { shouldEnableTagGrouping } from './utils/FeatureUtils';\nimport { applyTraceInfoV3ToEvalEntry, convertTraceInfoV3ToModelTraceInfo, getRowIdFromTrace } from './utils/TraceUtils';\n\ninterface GenAITracesTableActionsProps {\n  experimentId: string;\n  // @deprecated\n  selectedTraces?: RunEvaluationTracesDataEntry[];\n  // @deprecated\n  setRowSelection?: React.Dispatch<React.SetStateAction<RowSelectionState>>;\n  traceActions?: TraceActions;\n  traceInfos: TraceInfoV3[] | undefined;\n}\n\nexport const GenAITracesTableActions = (props: GenAITracesTableActionsProps) => {\n  const { traceActions, experimentId, selectedTraces: selectedTracesFromProps, traceInfos, setRowSelection } = props;\n\n  const { table, selectedRowIds } = useContext(GenAITracesTableContext);\n\n  const selectedTracesFromContext: RunEvaluationTracesDataEntry[] | undefined = useMemo(\n    () =>\n      applyTraceInfoV3ToEvalEntry(\n        selectedRowIds\n          .map((rowId) => {\n            const traceInfo = traceInfos?.find((trace) => getRowIdFromTrace(trace) === rowId);\n            if (!traceInfo) {\n              return undefined;\n            }\n            return {\n              evaluationId: traceInfo.trace_id,\n              requestId: traceInfo.client_request_id || traceInfo.trace_id,\n              inputsId: traceInfo.trace_id,\n              inputs: {},\n              outputs: {},\n              targets: {},\n              overallAssessments: [],\n              responseAssessmentsByName: {},\n              metrics: {},\n              traceInfo,\n            };\n          })\n          .filter((trace) => !isNil(trace)),\n      ),\n    [selectedRowIds, traceInfos],\n  );\n\n  const selectedTraces: RunEvaluationTracesDataEntry[] = selectedTracesFromProps || selectedTracesFromContext;\n\n  return (\n    <TraceActionsDropdown\n      experimentId={experimentId}\n      selectedTraces={selectedTraces}\n      traceActions={traceActions}\n      setRowSelection={setRowSelection ?? table?.setRowSelection}\n    />\n  );\n};\n\ninterface TraceActionsDropdownProps {\n  experimentId: string;\n  selectedTraces: RunEvaluationTracesDataEntry[];\n  traceActions?: TraceActions;\n  setRowSelection: React.Dispatch<React.SetStateAction<RowSelectionState>> | undefined;\n}\n\nconst TraceActionsDropdown = (props: TraceActionsDropdownProps) => {\n  const { experimentId, selectedTraces, traceActions, setRowSelection } = props;\n  const intl = useIntl();\n  const [showDatasetModal, setShowDatasetModal] = useState(false);\n  const [showLabelingSessionModal, setShowLabelingSessionModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const handleExportToDatasets = useCallback(() => {\n    setShowDatasetModal(true);\n  }, []);\n\n  const handleExportToLabelingSessions = useCallback(() => {\n    setShowLabelingSessionModal(true);\n  }, []);\n\n  const handleEditTags = useCallback(() => {\n    if (selectedTraces.length === 1 && selectedTraces[0].traceInfo && traceActions?.editTags) {\n      const modelTrace = convertTraceInfoV3ToModelTraceInfo(selectedTraces[0].traceInfo);\n      traceActions.editTags.showEditTagsModalForTrace(modelTrace);\n    }\n  }, [selectedTraces, traceActions]);\n\n  const handleDeleteTraces = useCallback(() => {\n    setShowDeleteModal(true);\n  }, []);\n\n  const deleteTraces = useCallback(\n    async (experimentId: string, traceIds: string[]) => {\n      await traceActions?.deleteTracesAction?.deleteTraces(experimentId, traceIds);\n      setRowSelection?.({});\n    },\n    [setRowSelection, traceActions],\n  );\n\n  const hasExportAction = Boolean(traceActions?.exportToEvals?.getTrace);\n  const hasEditTagsAction = shouldEnableTagGrouping() && Boolean(traceActions?.editTags);\n  const hasDeleteAction = Boolean(traceActions?.deleteTracesAction);\n\n  const isEditTagsDisabled = selectedTraces.length !== 1;\n  const noTracesSelected = selectedTraces.length === 0;\n  const noActionsAvailable = !hasExportAction && !hasEditTagsAction && !hasDeleteAction;\n\n  if (noActionsAvailable) {\n    return null;\n  }\n\n  const ActionButton = (\n    <Button\n      componentId=\"mlflow.genai-traces-table.actions-dropdown\"\n      disabled={noTracesSelected}\n      type=\"primary\"\n      endIcon={<ChevronDownIcon />}\n    >\n      {intl.formatMessage(\n        {\n          defaultMessage: 'Actions{count}',\n          description: 'Trace actions dropdown button',\n        },\n        {\n          count: noTracesSelected ? '' : ` (${selectedTraces.length})`,\n        },\n      )}\n    </Button>\n  );\n\n  return (\n    <>\n      <DropdownMenu.Root open={noTracesSelected ? false : undefined}>\n        {noTracesSelected ? (\n          <Tooltip\n            componentId=\"mlflow.genai-traces-table.actions-disabled-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Select one or more traces to add to an evaluation or edit the traces.',\n              description: 'Tooltip shown when actions button is disabled due to no trace selection',\n            })}\n          >\n            <div>\n              <DropdownMenu.Trigger asChild>{ActionButton}</DropdownMenu.Trigger>\n            </div>\n          </Tooltip>\n        ) : (\n          <DropdownMenu.Trigger asChild>{ActionButton}</DropdownMenu.Trigger>\n        )}\n        <DropdownMenu.Content>\n          {(hasEditTagsAction || hasDeleteAction) && (\n            <>\n              <DropdownMenu.Group>\n                {hasEditTagsAction && (\n                  <DropdownMenu.Item\n                    componentId=\"mlflow.genai-traces-table.edit-tags\"\n                    onClick={handleEditTags}\n                    disabled={isEditTagsDisabled}\n                  >\n                    {intl.formatMessage({\n                      defaultMessage: 'Edit tags',\n                      description: 'Edit tags action',\n                    })}\n                  </DropdownMenu.Item>\n                )}\n                {hasDeleteAction && (\n                  <DropdownMenu.Item\n                    componentId=\"mlflow.genai-traces-table.delete-traces\"\n                    onClick={handleDeleteTraces}\n                    disabled={noTracesSelected}\n                  >\n                    {intl.formatMessage({\n                      defaultMessage: 'Delete traces',\n                      description: 'Delete traces action',\n                    })}\n                  </DropdownMenu.Item>\n                )}\n              </DropdownMenu.Group>\n            </>\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n\n      {traceActions?.editTags?.EditTagsModal}\n\n      {showDeleteModal && traceActions?.deleteTracesAction && (\n        <GenAiDeleteTraceModal\n          experimentIds={[experimentId]}\n          visible={showDeleteModal}\n          selectedTraces={selectedTraces}\n          handleClose={() => setShowDeleteModal(false)}\n          deleteTraces={deleteTraces}\n        />\n      )}\n    </>\n  );\n};\n","import type { ColumnDef } from '@tanstack/react-table';\nimport { isNil } from 'lodash';\n\nimport { KnownEvaluationResultAssessmentName } from './enum';\nimport {\n  REQUEST_TIME_COLUMN_ID,\n  STATE_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n  TAGS_COLUMN_ID,\n  EXECUTION_DURATION_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n  SORTABLE_INFO_COLUMNS,\n  TRACE_ID_COLUMN_ID,\n  SESSION_COLUMN_ID,\n  INPUTS_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  USER_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  TOKENS_COLUMN_ID,\n} from './hooks/useTableColumns';\nimport { TracesTableColumnGroup, TracesTableColumnType } from './types';\nimport type { TracesTableColumn, EvalTraceComparisonEntry, RunEvaluationTracesDataEntry, TraceInfoV3 } from './types';\nimport { getTraceInfoInputs, shouldUseTraceInfoV3 } from './utils/TraceUtils';\n\nconst GROUP_PRIORITY = [\n  TracesTableColumnGroup.INFO,\n  TracesTableColumnGroup.ASSESSMENT,\n  TracesTableColumnGroup.TAG,\n] as const;\n\n/** Preferred order *within* the INFO group by column ID */\nconst INFO_COLUMN_PRIORITY = [\n  TRACE_ID_COLUMN_ID,\n  INPUTS_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  SESSION_COLUMN_ID,\n  USER_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  TOKENS_COLUMN_ID,\n] as const;\n\n/** Preferred order *within* the ASSESSMENT group by column ID */\nconst ASSESSMENT_COLUMN_PRIORITY = [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT] as const;\n\nconst groupRank: Record<TracesTableColumnGroup, number> = Object.fromEntries(\n  GROUP_PRIORITY.map((grp, idx) => [grp, idx]),\n) as any;\n\nconst infoColumnRank: Record<string, number> = Object.fromEntries(INFO_COLUMN_PRIORITY.map((id, idx) => [id, idx]));\n\nconst assessmentColumnRank: Record<string, number> = Object.fromEntries(\n  ASSESSMENT_COLUMN_PRIORITY.map((id, idx) => [id, idx]),\n);\n\nexport function sortGroupedColumns(columns: TracesTableColumn[], isComparing?: boolean): TracesTableColumn[] {\n  return [...columns].sort((colA, colB) => {\n    // If comparing, always put request time column first\n    if (isComparing) {\n      if (colA.id === INPUTS_COLUMN_ID) return -1;\n      if (colB.id === INPUTS_COLUMN_ID) return 1;\n    }\n\n    // 1) Compare their groups by precomputed rank\n    const groupA = colA.group ?? TracesTableColumnGroup.INFO;\n    const groupB = colB.group ?? TracesTableColumnGroup.INFO;\n    const groupComparison = groupRank[groupA] - groupRank[groupB];\n    if (groupComparison !== 0) return groupComparison;\n\n    // 2) Same group: INFO\n    if (groupA === TracesTableColumnGroup.INFO) {\n      const rankA = infoColumnRank[colA.id] ?? Infinity;\n      const rankB = infoColumnRank[colB.id] ?? Infinity;\n      if (rankA !== rankB) return rankA - rankB;\n      return colA.label.localeCompare(colB.label);\n    }\n\n    // 3) Same group: ASSESSMENT\n    if (groupA === TracesTableColumnGroup.ASSESSMENT) {\n      const rankA = assessmentColumnRank[colA.id] ?? Infinity;\n      const rankB = assessmentColumnRank[colB.id] ?? Infinity;\n      if (rankA !== rankB) return rankA - rankB;\n      return colA.label.localeCompare(colB.label);\n    }\n\n    // 4) Same group: TAG (or any other fallback)\n    return colA.label.localeCompare(colB.label);\n  });\n}\n\nexport const sortColumns = (columns: ColumnDef<EvalTraceComparisonEntry>[], selectedColumns: TracesTableColumn[]) => {\n  return columns.sort((a, b) => {\n    const getPriority = (col: typeof a) => {\n      const colType = selectedColumns.find((c) => c.id === col.id)?.type;\n\n      if (colType === TracesTableColumnType.INPUT) return 1;\n      if (col.id === TRACE_NAME_COLUMN_ID) return 2;\n      if (colType === TracesTableColumnType.TRACE_INFO) return 3;\n      if (colType === TracesTableColumnType.INTERNAL_MONITOR_REQUEST_TIME) return 4;\n      if (colType === TracesTableColumnType.ASSESSMENT) return 5;\n      return 999; // keep any other columns after the known ones\n    };\n\n    // primary sort key: our priority number\n    const diff = getPriority(a) - getPriority(b);\n    if (diff !== 0) return diff;\n\n    // secondary key: for assessment columns, prioritize 'Overall' and then sort alphabetically by label\n    const aCol = selectedColumns.find((c) => c.id === a.id);\n    const bCol = selectedColumns.find((c) => c.id === b.id);\n    if (aCol?.type === TracesTableColumnType.ASSESSMENT && bCol?.type === TracesTableColumnType.ASSESSMENT) {\n      if (aCol.id === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT) return -1;\n      if (bCol.id === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT) return 1;\n      return (aCol.label || '').localeCompare(bCol.label || '');\n    }\n\n    // tertiary key: original array order (stable sort fallback)\n    return 0;\n  });\n};\n\nexport const traceInfoSortingFn = (\n  traceInfoA: TraceInfoV3 | undefined,\n  traceInfoB: TraceInfoV3 | undefined,\n  colId: string,\n) => {\n  // only support sorting by request time for now\n  if (!SORTABLE_INFO_COLUMNS.includes(colId)) {\n    return 0;\n  }\n\n  const aVal = String(getTraceInfoValueWithColId(traceInfoA as TraceInfoV3, colId) ?? '');\n  const bVal = String(getTraceInfoValueWithColId(traceInfoB as TraceInfoV3, colId) ?? '');\n\n  return aVal.localeCompare(bVal, undefined, { numeric: true });\n};\n\nexport const getTraceInfoValueWithColId = (traceInfo: TraceInfoV3, colId: string) => {\n  switch (colId) {\n    case REQUEST_TIME_COLUMN_ID:\n    case EXECUTION_DURATION_COLUMN_ID:\n    case TAGS_COLUMN_ID:\n    case STATE_COLUMN_ID:\n      return traceInfo[colId];\n    case SOURCE_COLUMN_ID:\n      return traceInfo.tags;\n    case TRACE_ID_COLUMN_ID:\n      return traceInfo.trace_id;\n    case SESSION_COLUMN_ID:\n      return traceInfo.tags?.['mlflow.trace.session'];\n    default:\n      throw new Error(`Unknown column id: ${colId}`);\n  }\n};\n\nfunction getUniqueInputRequests(\n  evaluationResults: RunEvaluationTracesDataEntry[],\n): Map<string, RunEvaluationTracesDataEntry> {\n  const resultMap = new Map<string, RunEvaluationTracesDataEntry>();\n  // If there are duplicate input ids, we need to append a count to the key to ensure uniqueness.\n  const duplicateIndexMap = new Map<string, number>();\n\n  evaluationResults?.forEach((entry) => {\n    let key = shouldUseTraceInfoV3([entry]) ? getTraceInfoInputs(entry.traceInfo as TraceInfoV3) : entry.inputsId;\n    if (resultMap.has(key)) {\n      const currentCount = duplicateIndexMap.get(entry.inputsId) || 0;\n      const newCount = currentCount + 1;\n      duplicateIndexMap.set(entry.inputsId, newCount);\n      key = `${entry.inputsId}_${newCount}`;\n    }\n    resultMap.set(key, entry);\n  });\n  return resultMap;\n}\n\nexport function computeEvaluationsComparison(\n  currentRunEvalResults: RunEvaluationTracesDataEntry[],\n  otherRunEvalResults?: RunEvaluationTracesDataEntry[],\n): EvalTraceComparisonEntry[] {\n  if (isNil(otherRunEvalResults)) {\n    return currentRunEvalResults.map((entry) => ({ currentRunValue: entry }));\n  }\n\n  // TODO(nsthorat): This logic does not work when a single eval run contains the same input ids, e.g. there is multiple evals with the same\n  // input id. This is a bug in the current implementation.\n\n  // Merge the two eval results by joining on inputsId. There may be results that are only present in one of the two.\n  const otherRunEvalResultsMap = getUniqueInputRequests(otherRunEvalResults);\n\n  const currentRunEvalResultsMap = getUniqueInputRequests(currentRunEvalResults);\n  const allRequestIds = new Set([...currentRunEvalResultsMap.keys(), ...otherRunEvalResultsMap.keys()]);\n\n  return Array.from(allRequestIds).map((inputsId) => {\n    return {\n      currentRunValue: currentRunEvalResultsMap.get(inputsId),\n      otherRunValue: otherRunEvalResultsMap.get(inputsId),\n    };\n  });\n}\n","import { DangerIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport const ErrorCell = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <span\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        svg: { width: '12px', height: '12px' },\n        color: theme.colors.textValidationWarning,\n      }}\n    >\n      <DangerIcon css={{ color: theme.colors.textValidationWarning }} />\n      <FormattedMessage defaultMessage=\"Error\" description=\"Error status in the evaluations table.\" />{' '}\n    </span>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport const NullCell = ({ isComparing }: { isComparing?: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <span\n      css={{\n        height: '20px',\n      }}\n    >\n      {isComparing && <span css={{ fontStyle: 'italic', color: theme.colors.textSecondary }}>null</span>}\n    </span>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport interface StackedComponentsProps {\n  first: React.ReactNode;\n  second?: React.ReactNode;\n  // Allow overriding the default styles if needed:\n  gap?: string;\n  borderRadius?: string;\n  marginY?: string;\n}\n\nexport const StackedComponents = (props: StackedComponentsProps) => {\n  const { first, second, gap, borderRadius, marginY } = props;\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: gap || theme.spacing.sm,\n        borderRadius: borderRadius || theme.legacyBorders.borderRadiusMd,\n        marginTop: marginY || 'auto',\n        marginBottom: marginY || 'auto',\n      }}\n    >\n      {first}\n      {second}\n    </div>\n  );\n};\n","import { getDefaultHeaders } from '@mlflow/mlflow/src/common/utils/FetchUtils';\nimport { matchPredefinedError } from '../../errors';\n\n// eslint-disable-next-line no-restricted-globals\nexport const fetchFn = fetch; // use global fetch for oss\n\nexport const makeRequest = async <T>(path: string, method: 'POST' | 'GET', body?: T) => {\n  const headers = {\n    ...(body ? { 'Content-Type': 'application/json' } : {}),\n    ...getDefaultHeaders(document.cookie),\n  };\n  const options: RequestInit = {\n    method,\n    headers,\n  };\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  const response = await fetchFn(path, options);\n\n  if (!response.ok) {\n    const error = matchPredefinedError(response);\n    try {\n      const errorMessageFromResponse = await (await response.json()).message;\n      if (errorMessageFromResponse) {\n        error.message = errorMessageFromResponse;\n      }\n    } catch {\n      // do nothing\n    }\n    throw error;\n  }\n\n  return response.json();\n};\n","/**\n * This file is a subset of functions from mlflow/web/js/src/common/Utils.tsx but does not support OSS.\n */\nimport type { TraceInfoV3 } from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class -- TODO(FEINF-4274)\nclass MlflowUtils {\n  static runNameTag = 'mlflow.runName';\n  static sourceNameTag = 'mlflow.source.name';\n  static sourceTypeTag = 'mlflow.source.type';\n  static entryPointTag = 'mlflow.project.entryPoint';\n\n  static getEntryPointName(runTags: any) {\n    const entryPointTag = runTags[MlflowUtils.entryPointTag];\n    if (entryPointTag) {\n      return entryPointTag.value;\n    }\n    return '';\n  }\n\n  static getSourceType(runTags: any) {\n    const sourceTypeTag = runTags[MlflowUtils.sourceTypeTag];\n    if (sourceTypeTag) {\n      return sourceTypeTag.value;\n    }\n    return '';\n  }\n\n  static dropExtension(path: any) {\n    return path.replace(/(.*[^/])\\.[^/.]+$/, '$1');\n  }\n\n  static baseName(path: any) {\n    const pieces = path.split('/');\n    return pieces[pieces.length - 1];\n  }\n\n  /**\n   * Renders the source name and entry point into a string. Used for sorting.\n   * @param run MlflowMessages.RunInfo\n   */\n  static formatSource(tags: any) {\n    const sourceName = MlflowUtils.getSourceName(tags);\n    const sourceType = MlflowUtils.getSourceType(tags);\n    const entryPointName = MlflowUtils.getEntryPointName(tags);\n    if (sourceType === 'PROJECT') {\n      let res = MlflowUtils.dropExtension(MlflowUtils.baseName(sourceName));\n      if (entryPointName && entryPointName !== 'main') {\n        res += ':' + entryPointName;\n      }\n      return res;\n    } else if (sourceType === 'JOB') {\n      const jobIdTag = 'mlflow.databricks.jobID';\n      const jobRunIdTag = 'mlflow.databricks.jobRunID';\n      const jobId = tags && tags[jobIdTag] && tags[jobIdTag].value;\n      const jobRunId = tags && tags[jobRunIdTag] && tags[jobRunIdTag].value;\n      if (jobId && jobRunId) {\n        return MlflowUtils.getDefaultJobRunName(jobId, jobRunId);\n      }\n      return sourceName;\n    } else {\n      return MlflowUtils.baseName(sourceName);\n    }\n  }\n\n  static getDefaultJobRunName(jobId: any, runId: any, workspaceId = null) {\n    if (!jobId) {\n      return '-';\n    }\n    let name = `job ${jobId}`;\n    if (runId) {\n      name = `run ${runId} of ` + name;\n    }\n    if (workspaceId) {\n      name = `workspace ${workspaceId}: ` + name;\n    }\n    return name;\n  }\n\n  static getSourceName(runTags: any) {\n    const sourceNameTag = runTags[MlflowUtils.sourceNameTag];\n    if (sourceNameTag) {\n      return sourceNameTag.value;\n    }\n    return '';\n  }\n\n  static getGitHubRegex() {\n    return /[@/]github.com[:/]([^/.]+)\\/([^/#]+)#?(.*)/;\n  }\n\n  static getGitLabRegex() {\n    return /[@/]gitlab.com[:/]([^/.]+)\\/([^/#]+)#?(.*)/;\n  }\n\n  static getBitbucketRegex() {\n    return /[@/]bitbucket.org[:/]([^/.]+)\\/([^/#]+)#?(.*)/;\n  }\n\n  static getRunPageRoute(experimentId: string, runUuid: string) {\n    return `/experiments/${experimentId}/runs/${runUuid}`;\n  }\n\n  static getLoggedModelPageRoute(experimentId: string, loggedModelId: string) {\n    return `/experiments/${experimentId}/models/${loggedModelId}`;\n  }\n\n  /**\n   * Regular expression for URLs containing the string 'git'.\n   * It can be a custom git domain (e.g. https://git.custom.in/repo/dir#file/dir).\n   * Excluding the first overall match, there are three groups:\n   *    git url, repo directory, and file directory.\n   * (e.g. group1: https://custom.git.domain, group2: repo/directory, group3: project/directory)\n   */\n  static getGitRegex() {\n    return /(.*?[@/][^?]*git.*?)[:/]([^#]+)(?:#(.*))?/;\n  }\n\n  static getGitRepoUrl(sourceName: any, branchName = 'master') {\n    const gitHubMatch = sourceName.match(MlflowUtils.getGitHubRegex());\n    const gitLabMatch = sourceName.match(MlflowUtils.getGitLabRegex());\n    const bitbucketMatch = sourceName.match(MlflowUtils.getBitbucketRegex());\n    const gitMatch = sourceName.match(MlflowUtils.getGitRegex());\n    let url = null;\n    if (gitHubMatch) {\n      url = `https://github.com/${gitHubMatch[1]}/${gitHubMatch[2].replace(/.git/, '')}`;\n      if (gitHubMatch[3]) {\n        url += `/tree/${branchName}/${gitHubMatch[3]}`;\n      }\n    } else if (gitLabMatch) {\n      url = `https://gitlab.com/${gitLabMatch[1]}/${gitLabMatch[2].replace(/.git/, '')}`;\n      if (gitLabMatch[3]) {\n        url += `/-/tree/${branchName}/${gitLabMatch[3]}`;\n      }\n    } else if (bitbucketMatch) {\n      url = `https://bitbucket.org/${bitbucketMatch[1]}/${bitbucketMatch[2].replace(/.git/, '')}`;\n      if (bitbucketMatch[3]) {\n        url += `/src/${branchName}/${bitbucketMatch[3]}`;\n      }\n    } else if (gitMatch) {\n      const [, baseUrl, repoDir, fileDir] = gitMatch;\n      url = baseUrl.replace(/git@/, 'https://') + '/' + repoDir.replace(/.git/, '');\n      if (fileDir) {\n        url += `/tree/${branchName}/${fileDir}`;\n      }\n    }\n    return url;\n  }\n\n  static getNotebookRevisionId(tags: any) {\n    const revisionIdTag = 'mlflow.databricks.notebookRevisionID';\n    return tags && tags[revisionIdTag] && tags[revisionIdTag].value;\n  }\n\n  static getNotebookId(tags: any) {\n    const notebookIdTag = 'mlflow.databricks.notebookID';\n    return tags && tags[notebookIdTag] && tags[notebookIdTag].value;\n  }\n\n  /**\n   * Check if the given workspaceId matches the current workspaceId.\n   * @param workspaceId\n   * @returns {boolean}\n   */\n  static isCurrentWorkspace(workspaceId: any) {\n    return true;\n  }\n\n  static getDefaultNotebookRevisionName(notebookId: any, revisionId: any, workspaceId = null) {\n    if (!notebookId) {\n      return '-';\n    }\n    let name = `notebook ${notebookId}`;\n    if (revisionId) {\n      name = `revision ${revisionId} of ` + name;\n    }\n    if (workspaceId) {\n      name = `workspace ${workspaceId}: ` + name;\n    }\n    return name;\n  }\n\n  /**\n   * Makes sure that the URL begins with correct scheme according\n   * to RFC3986 [https://datatracker.ietf.org/doc/html/rfc3986#section-3.1]\n   * It does not support slash-less schemes (e.g. news:abc, urn:anc).\n   * @param url URL string like \"my-mlflow-server.com/#/experiments/9\" or\n   *        \"https://my-mlflow-server.com/#/experiments/9\"\n   * @param defaultScheme scheme to add if missing in the provided URL, defaults to \"https\"\n   * @returns {string} the URL string with ensured default scheme\n   */\n  static ensureUrlScheme(url: any, defaultScheme = 'https') {\n    // Falsy values should yield itself\n    if (!url) return url;\n\n    // Scheme-less URL with colon and dashes\n    if (url.match(/^:\\/\\//i)) {\n      return `${defaultScheme}${url}`;\n    }\n\n    // URL without scheme, colon nor dashes\n    if (!url.match(/^[a-z1-9+-.]+:\\/\\//i)) {\n      return `${defaultScheme}://${url}`;\n    }\n\n    // Pass-through for \"correct\" entries\n    return url;\n  }\n\n  /**\n   * Returns a copy of the provided URL with its query parameters set to `queryParams`.\n   * @param url URL string like \"http://my-mlflow-server.com/#/experiments/9.\n   * @param queryParams Optional query parameter string like \"?param=12345\". Query params provided\n   *        via this string will override existing query param values in `url`\n   */\n  static setQueryParams(url: any, queryParams: any) {\n    // Using new URL() is the preferred way of constructing the URL object,\n    // however according to [https://url.spec.whatwg.org/#constructors] it requires\n    // providing the protocol. We're gracefully ensuring that the scheme exists here.\n    const urlObj = new URL(MlflowUtils.ensureUrlScheme(url));\n    urlObj.search = queryParams || '';\n    return urlObj.toString();\n  }\n\n  /**\n   * Returns the URL for the notebook source.\n   */\n  static getNotebookSourceUrl(queryParams: any, notebookId: any, revisionId: any, runUuid: any, workspaceUrl = null) {\n    let url = MlflowUtils.setQueryParams(workspaceUrl || window.location.origin, queryParams);\n    url += `#notebook/${notebookId}`;\n    if (revisionId) {\n      url += `/revision/${revisionId}`;\n      if (runUuid) {\n        url += `/mlflow/run/${runUuid}`;\n      }\n    }\n    return url;\n  }\n\n  /**\n   * Renders the notebook source name and entry point into an HTML element. Used for display.\n   */\n  static renderNotebookSource(\n    queryParams: any,\n    notebookId: any,\n    revisionId: any,\n    runUuid: any,\n    sourceName: any,\n    workspaceUrl = null,\n    nameOverride: string | null = null,\n  ) {\n    // sourceName may not be present when rendering feature table notebook consumers from remote\n    // workspaces or when notebook fetcher failed to fetch the sourceName. Always provide a default\n    // notebook name in such case.\n    const baseName = sourceName\n      ? MlflowUtils.baseName(sourceName)\n      : MlflowUtils.getDefaultNotebookRevisionName(notebookId, revisionId);\n    const name = nameOverride || baseName;\n\n    if (notebookId) {\n      const url = MlflowUtils.getNotebookSourceUrl(queryParams, notebookId, revisionId, runUuid, workspaceUrl);\n      return (\n        <a\n          title={sourceName || MlflowUtils.getDefaultNotebookRevisionName(notebookId, revisionId)}\n          href={url}\n          target=\"_top\"\n        >\n          {name}\n        </a>\n      );\n    } else {\n      return name;\n    }\n  }\n\n  /**\n   * Set query params and returns the updated query params.\n   * @returns {string} updated query params\n   */\n  static addQueryParams(currentQueryParams: any, newQueryParams: any) {\n    if (!newQueryParams || Object.keys(newQueryParams).length === 0) {\n      return currentQueryParams;\n    }\n    const urlSearchParams = new URLSearchParams(currentQueryParams);\n    Object.entries(newQueryParams).forEach(\n      // @ts-expect-error TS(2345): Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n      ([key, value]) => Boolean(key) && Boolean(value) && urlSearchParams.set(key, value),\n    );\n    const queryParams = urlSearchParams.toString();\n    if (queryParams !== '' && !queryParams.includes('?')) {\n      return `?${queryParams}`;\n    }\n    return queryParams;\n  }\n\n  /**\n   * Returns the URL for the job source.\n   */\n  static getJobSourceUrl(queryParams: any, jobId: any, jobRunId: any, workspaceUrl = null) {\n    let url = MlflowUtils.setQueryParams(workspaceUrl || window.location.origin, queryParams);\n    url += `#job/${jobId}`;\n    if (jobRunId) {\n      url += `/run/${jobRunId}`;\n    }\n    return url;\n  }\n\n  /**\n   * Renders the job source name and entry point into an HTML element. Used for display.\n   */\n  static renderJobSource(\n    queryParams: any,\n    jobId: any,\n    jobRunId: any,\n    jobName: any,\n    workspaceUrl = null,\n    nameOverride: string | null = null,\n  ) {\n    // jobName may not be present when rendering feature table job consumers from remote\n    // workspaces or when getJob API failed to fetch the jobName. Always provide a default\n    // job name in such case.\n    const reformatJobName = jobName || MlflowUtils.getDefaultJobRunName(jobId, jobRunId);\n    const name = nameOverride || reformatJobName;\n\n    if (jobId) {\n      const url = MlflowUtils.getJobSourceUrl(queryParams, jobId, jobRunId, workspaceUrl);\n      return (\n        <a title={reformatJobName} href={url} target=\"_top\">\n          {name}\n        </a>\n      );\n    } else {\n      return name;\n    }\n  }\n\n  /**\n   * Renders the source name and entry point into an HTML element. Used for display.\n   * @param tags Object containing tag key value pairs.\n   * @param queryParams Query params to add to certain source type links.\n   * @param runUuid ID of the MLflow run to add to certain source (revision) links.\n   */\n  static renderSource(tags: any, queryParams: any, runUuid: any, branchName = 'master') {\n    const sourceName = MlflowUtils.getSourceName(tags);\n    let res = MlflowUtils.formatSource(tags);\n    const gitRepoUrlOrNull = MlflowUtils.getGitRepoUrl(sourceName, branchName);\n    if (gitRepoUrlOrNull) {\n      res = (\n        <a target=\"_top\" href={gitRepoUrlOrNull}>\n          {res}\n        </a>\n      );\n    }\n    const sourceType = MlflowUtils.getSourceType(tags);\n    if (sourceType === 'NOTEBOOK') {\n      const revisionId = MlflowUtils.getNotebookRevisionId(tags);\n      const notebookId = MlflowUtils.getNotebookId(tags);\n      const workspaceIdTag = 'mlflow.databricks.workspaceID';\n      const workspaceId = tags && tags[workspaceIdTag] && tags[workspaceIdTag].value;\n      if (MlflowUtils.isCurrentWorkspace(workspaceId)) {\n        return MlflowUtils.renderNotebookSource(queryParams, notebookId, revisionId, runUuid, sourceName, null);\n      } else {\n        const workspaceUrlTag = 'mlflow.databricks.workspaceURL';\n        const workspaceUrl = tags && tags[workspaceUrlTag] && tags[workspaceUrlTag].value;\n        const notebookQueryParams = MlflowUtils.addQueryParams(queryParams, { o: workspaceId });\n        return MlflowUtils.renderNotebookSource(\n          notebookQueryParams,\n          notebookId,\n          revisionId,\n          runUuid,\n          sourceName,\n          workspaceUrl,\n        );\n      }\n    }\n    if (sourceType === 'JOB') {\n      const jobIdTag = 'mlflow.databricks.jobID';\n      const jobRunIdTag = 'mlflow.databricks.jobRunID';\n      const jobId = tags && tags[jobIdTag] && tags[jobIdTag].value;\n      const jobRunId = tags && tags[jobRunIdTag] && tags[jobRunIdTag].value;\n      const workspaceIdTag = 'mlflow.databricks.workspaceID';\n      const workspaceId = tags && tags[workspaceIdTag] && tags[workspaceIdTag].value;\n      if (MlflowUtils.isCurrentWorkspace(workspaceId)) {\n        return MlflowUtils.renderJobSource(queryParams, jobId, jobRunId, res, null);\n      } else {\n        const workspaceUrlTag = 'mlflow.databricks.workspaceURL';\n        const workspaceUrl = tags && tags[workspaceUrlTag] && tags[workspaceUrlTag].value;\n        const jobQueryParams = MlflowUtils.addQueryParams(queryParams, { o: workspaceId });\n        return MlflowUtils.renderJobSource(jobQueryParams, jobId, jobRunId, res, workspaceUrl);\n      }\n    }\n    return res;\n  }\n\n  static renderSourceFromMetadata(traceInfoV3: TraceInfoV3) {\n    const sourceName = traceInfoV3.trace_metadata?.[MlflowUtils.sourceNameTag];\n    const sourceType = traceInfoV3.trace_metadata?.[MlflowUtils.sourceTypeTag];\n    let res = sourceName ? MlflowUtils.baseName(sourceName) : '';\n\n    // Handle git repository links using explicit git metadata\n    const gitRepoUrl = traceInfoV3.trace_metadata?.['mlflow.source.git.repoURL'];\n    const gitBranch = traceInfoV3.trace_metadata?.['mlflow.source.git.branch'];\n    const gitCommit = traceInfoV3.trace_metadata?.['mlflow.source.git.commit'];\n\n    if (gitRepoUrl) {\n      // Convert SSH URL to HTTPS if needed\n      const httpsUrl = gitRepoUrl\n        .replace('git@github.com:', 'https://github.com/')\n        .replace('git@gitlab.com:', 'https://gitlab.com/')\n        .replace('git@bitbucket.org:', 'https://bitbucket.org/')\n        .replace('.git', '');\n\n      // Use commit hash if available, otherwise use branch\n      const ref = gitCommit || gitBranch || 'master';\n      const filePath = sourceName ? `/${sourceName}` : '';\n\n      // Construct URL based on the git host\n      let url = httpsUrl;\n      if (httpsUrl.includes('github.com')) {\n        url = `${httpsUrl}/tree/${ref}${filePath}`;\n      } else if (httpsUrl.includes('gitlab.com')) {\n        url = `${httpsUrl}/-/tree/${ref}${filePath}`;\n      } else if (httpsUrl.includes('bitbucket.org')) {\n        url = `${httpsUrl}/src/${ref}${filePath}`;\n      } else {\n        // For other git hosts, just append the ref and file path\n        url = `${httpsUrl}/tree/${ref}${filePath}`;\n      }\n\n      res = (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n          {res}\n        </a>\n      );\n    }\n\n    if (sourceType === 'NOTEBOOK') {\n      const revisionId = traceInfoV3.trace_metadata?.['mlflow.databricks.notebookRevisionID'];\n      const notebookId = traceInfoV3.trace_metadata?.['mlflow.databricks.notebookID'];\n      const workspaceId = traceInfoV3.trace_metadata?.['mlflow.databricks.workspaceID'];\n\n      if (MlflowUtils.isCurrentWorkspace(workspaceId)) {\n        return MlflowUtils.renderNotebookSource(null, notebookId, revisionId, null, sourceName, null);\n      } else {\n        const workspaceUrlTag = 'mlflow.databricks.workspaceURL';\n        const workspaceUrl: any = traceInfoV3.trace_metadata?.[workspaceUrlTag] || undefined;\n        const notebookQueryParams = MlflowUtils.addQueryParams(null, { o: workspaceId });\n        return MlflowUtils.renderNotebookSource(\n          notebookQueryParams,\n          notebookId,\n          revisionId,\n          null,\n          sourceName,\n          workspaceUrl,\n        );\n      }\n    }\n\n    if (sourceType === 'JOB') {\n      const jobId = traceInfoV3.trace_metadata?.['mlflow.databricks.jobID'];\n      const jobRunId = traceInfoV3.trace_metadata?.['mlflow.databricks.jobRunID'];\n      const workspaceId = traceInfoV3.trace_metadata?.['mlflow.databricks.workspaceID'];\n\n      if (MlflowUtils.isCurrentWorkspace(workspaceId)) {\n        return MlflowUtils.renderJobSource(null, jobId, jobRunId, res, null);\n      } else {\n        const workspaceUrlTag = 'mlflow.databricks.workspaceURL';\n        const workspaceUrl: any = traceInfoV3.trace_metadata?.[workspaceUrlTag] || undefined;\n        const jobQueryParams = MlflowUtils.addQueryParams(null, { o: workspaceId });\n        return MlflowUtils.renderJobSource(jobQueryParams, jobId, jobRunId, res, workspaceUrl);\n      }\n    }\n\n    return res;\n  }\n}\n\nexport default MlflowUtils;\n","import { isNil } from 'lodash';\n\nimport {\n  ModelsIcon,\n  ParagraphSkeleton,\n  Typography,\n  Tooltip,\n  Tag,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useQuery } from '@databricks/web-shared/query-client';\n\nimport { ErrorCell } from './ErrorCell';\nimport { NullCell } from './NullCell';\nimport { StackedComponents } from './StackedComponents';\nimport type { TraceInfoV3 } from '../types';\nimport { makeRequest } from '../utils/FetchUtils';\nimport MlflowUtils from '../utils/MlflowUtils';\nimport { Link } from '../utils/RoutingUtils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nexport const LoggedModelCell = (props: {\n  experimentId: string;\n  currentTraceInfo?: TraceInfoV3;\n  otherTraceInfo?: TraceInfoV3;\n  isComparing: boolean;\n}) => {\n  const { experimentId, currentTraceInfo, otherTraceInfo, isComparing } = props;\n  const currentModelId = currentTraceInfo?.trace_metadata?.['mlflow.modelId'];\n  const otherModelId = otherTraceInfo?.trace_metadata?.['mlflow.modelId'];\n\n  return (\n    <StackedComponents\n      first={\n        currentModelId ? (\n          <LoggedModelComponent experimentId={experimentId} modelId={currentModelId} isComparing={isComparing} />\n        ) : (\n          <NullCell isComparing={isComparing} />\n        )\n      }\n      second={\n        isComparing &&\n        (otherModelId ? (\n          <LoggedModelComponent experimentId={experimentId} modelId={otherModelId} isComparing={isComparing} />\n        ) : (\n          <NullCell isComparing={isComparing} />\n        ))\n      }\n    />\n  );\n};\n\nconst LoggedModelComponent = (props: { experimentId: string; modelId: string; isComparing: boolean }) => {\n  const { experimentId, modelId, isComparing } = props;\n  const { theme } = useDesignSystemTheme();\n\n  const { data, isLoading, error } = useLoggedModelName({ loggedModelId: modelId });\n  const modelName = data?.info?.name;\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error) {\n    return <ErrorCell />;\n  }\n\n  if (!modelName) {\n    return <NullCell isComparing={isComparing} />;\n  }\n\n  return (\n    <Tooltip componentId=\"mlflow.eval-runs.model-version-cell-tooltip\" content={modelName}>\n      <Tag\n        componentId=\"mlflow.eval-runs.model-version-cell\"\n        id=\"model-version-cell\"\n        css={{ width: 'fit-content', maxWidth: '100%', marginRight: 0, cursor: 'pointer' }}\n      >\n        <Link\n          to={MlflowUtils.getLoggedModelPageRoute(experimentId, modelId)}\n          target=\"_blank\"\n          css={{\n            maxWidth: '100%',\n            display: 'block',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n          }}\n          title={modelName}\n        >\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.xs,\n              maxWidth: '100%',\n            }}\n          >\n            <ModelsIcon css={{ color: theme.colors.textPrimary, fontSize: 16 }} />\n            <Typography.Text css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              {modelName}\n            </Typography.Text>\n          </div>\n        </Link>\n      </Tag>\n    </Tooltip>\n  );\n};\n\ninterface LoggedModelNameResponse {\n  model: {\n    info: {\n      name?: string;\n    };\n  };\n}\n\n/**\n * Retrieve logged model from API based on its ID\n */\nconst useLoggedModelName = ({ loggedModelId }: { loggedModelId?: string }) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<LoggedModelNameResponse, Error>({\n    queryKey: ['loggedModelName', loggedModelId],\n    queryFn: async () => {\n      const res: LoggedModelNameResponse = await makeRequest(\n        getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}`),\n        'GET',\n      );\n      return res;\n    },\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    refetchOnMount: false,\n    retry: 1,\n    enabled: !isNil(loggedModelId),\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data: data?.model,\n    refetch,\n    error,\n  } as const;\n};\n","import { ParagraphSkeleton } from '@databricks/design-system';\nimport type { NetworkRequestError } from '@databricks/web-shared/errors';\nimport { useQuery } from '@databricks/web-shared/query-client';\n\nimport { ErrorCell } from './ErrorCell';\nimport { NullCell } from './NullCell';\nimport { makeRequest } from '../utils/FetchUtils';\nimport MlflowUtils from '../utils/MlflowUtils';\nimport { Link } from '../utils/RoutingUtils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nexport const RunName = (props: { experimentId: string; runUuid: string }) => {\n  const { experimentId, runUuid } = props;\n\n  const { data, isLoading, error } = useRunName(experimentId, runUuid);\n\n  const runName = data?.runs?.[0]?.info?.run_name;\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error) {\n    return <ErrorCell />;\n  }\n\n  if (!runName) {\n    return <NullCell />;\n  }\n\n  return (\n    <Link\n      css={{\n        display: 'flex',\n        maxWidth: '100%',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n      }}\n      to={MlflowUtils.getRunPageRoute(experimentId, runUuid)}\n      title={runName}\n    >\n      {runName}\n    </Link>\n  );\n};\n\ninterface RunNameResponse {\n  runs: {\n    data: {\n      tags: { [key: string]: string };\n    };\n    info: {\n      run_name: string;\n    };\n  }[];\n}\nconst useRunName = (experimentId: string, runUuid: string) => {\n  return useQuery<RunNameResponse, NetworkRequestError>({\n    queryKey: ['runName', experimentId, runUuid],\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    retry: 1, // limit retries so we don't spam the api\n    refetchOnMount: false,\n    queryFn: async () => {\n      const filter = `run_id IN ('${runUuid}')`;\n\n      const res: RunNameResponse = await makeRequest(getAjaxUrl('ajax-api/2.0/mlflow/runs/search'), 'POST', {\n        experiment_ids: [experimentId],\n        filter,\n      });\n\n      return res;\n    },\n  });\n};\n","import { FolderBranchIcon, HomeIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\n\nenum SourceType {\n  NOTEBOOK = 'NOTEBOOK',\n  JOB = 'JOB',\n  PROJECT = 'PROJECT',\n  LOCAL = 'LOCAL',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <HomeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ExperimentSourceTypeIcon } from './ExperimentSourceTypeIcon';\nimport type { TraceInfoV3 } from '../../types';\nimport MlflowUtils from '../../utils/MlflowUtils';\nimport { NullCell } from '../NullCell';\n\nexport const SourceCellRenderer = (props: { traceInfo: TraceInfoV3; isComparing: boolean; disableLinks?: boolean }) => {\n  const tags = props.traceInfo.tags;\n  const { theme } = useDesignSystemTheme();\n\n  if (!tags) {\n    return <NullCell isComparing={props.isComparing} />;\n  }\n\n  const sourceType = props.traceInfo.trace_metadata?.[MlflowUtils.sourceTypeTag];\n\n  const sourceLink = MlflowUtils.renderSourceFromMetadata(props.traceInfo);\n\n  return sourceLink && sourceType ? (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.xs,\n        alignItems: 'center',\n        // Disable links if the disableLinks prop is true\n        ...(props.disableLinks && {\n          '& a': {\n            pointerEvents: 'none',\n            color: 'inherit',\n            textDecoration: 'none',\n            cursor: 'default',\n          },\n        }),\n      }}\n    >\n      <ExperimentSourceTypeIcon sourceType={sourceType} css={{ color: theme.colors.textSecondary }} />\n      <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{sourceLink}</span>\n    </div>\n  ) : (\n    <NullCell isComparing={props.isComparing} />\n  );\n};\n","import type { Theme } from '@emotion/react';\n\nimport { CheckCircleIcon, ClockIcon, useDesignSystemTheme, XCircleIcon } from '@databricks/design-system';\nimport { useIntl, defineMessage } from '@databricks/i18n';\n\nimport { NullCell } from './NullCell';\nimport type { TraceInfoV3 } from '../types';\n\nexport const ExperimentViewTracesStatusLabels = {\n  STATE_UNSPECIFIED: null,\n  IN_PROGRESS: defineMessage({\n    defaultMessage: 'In progress',\n    description: 'Experiment page > traces table > status label > in progress',\n  }),\n  OK: defineMessage({\n    defaultMessage: 'OK',\n    description: 'Experiment page > traces table > status label > ok',\n  }),\n  ERROR: defineMessage({\n    defaultMessage: 'Error',\n    description: 'Experiment page > traces table > status label > error',\n  }),\n};\n\nconst getIcon = (state: TraceInfoV3['state'], theme: Theme) => {\n  if (state === 'IN_PROGRESS') {\n    return <ClockIcon css={{ color: theme.colors.textValidationWarning }} />;\n  }\n\n  if (state === 'OK') {\n    return <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />;\n  }\n\n  if (state === 'ERROR') {\n    return <XCircleIcon css={{ color: theme.colors.textValidationDanger }} />;\n  }\n\n  return null;\n};\n\nexport const StatusCellRenderer = ({\n  original,\n  isComparing,\n}: {\n  original: TraceInfoV3 | undefined;\n  isComparing: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const labelDescriptor = ExperimentViewTracesStatusLabels[original?.state || 'STATE_UNSPECIFIED'];\n\n  return labelDescriptor ? (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      {getIcon(original?.state || 'STATE_UNSPECIFIED', theme)}\n      {labelDescriptor ? intl.formatMessage(labelDescriptor) : ''}\n    </div>\n  ) : (\n    <NullCell isComparing={isComparing} />\n  );\n};\n","import React from 'react';\n\nimport { Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CopyActionButton } from '@databricks/web-shared/copy';\nconst { Paragraph } = Typography;\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex', alignItems: 'center' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginBottom: theme.spacing.md,\n          }}\n        >\n          <CopyActionButton copyText={props.tagValue} />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import type { Interpolation, Theme } from '@emotion/react';\nimport React, { useState } from 'react';\n\nimport { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\ninterface KeyValueEntity {\n  key: string;\n  value: string;\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n","import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { KeyValueTag } from './KeyValueTag';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../utils/TraceUtils';\n\nexport const TagsCellRenderer = ({\n  onAddEditTags,\n  tags,\n  baseComponentId,\n}: {\n  tags: { key: string; value: string }[];\n  onAddEditTags?: () => void;\n  baseComponentId: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const visibleTagList = tags?.filter(({ key }) => key && !key.startsWith(MLFLOW_INTERNAL_PREFIX)) || [];\n  const containsTags = visibleTagList.length > 0;\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        columnGap: theme.spacing.xs,\n        rowGap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagList.map((tag) => (\n        <KeyValueTag\n          key={tag.key}\n          tag={tag}\n          css={{ marginRight: 0 }}\n          charLimit={20}\n          maxWidth={150}\n          enableFullViewModal\n        />\n      ))}\n      {onAddEditTags && (\n        <Button\n          componentId={`${baseComponentId}.traces_table.edit_tag`}\n          size=\"small\"\n          icon={!containsTags ? undefined : <PencilIcon />}\n          onClick={onAddEditTags}\n          children={\n            !containsTags ? (\n              <FormattedMessage\n                defaultMessage=\"Add tags\"\n                description=\"Button text to add tags to a trace in the experiment traces table\"\n              />\n            ) : undefined\n          }\n          css={{\n            flexShrink: 0,\n            opacity: 0,\n            '[role=row]:hover &': {\n              opacity: 1,\n            },\n            '[role=row]:focus-within &': {\n              opacity: 1,\n            },\n          }}\n          type=\"tertiary\"\n        />\n      )}\n    </div>\n  );\n};\n","import { HoverCard, Tag, Typography } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { NullCell } from './NullCell';\nimport { StackedComponents } from './StackedComponents';\nimport type { TraceInfoV3 } from '../types';\n\nexport const TokensCell = (props: {\n  currentTraceInfo?: TraceInfoV3;\n  otherTraceInfo?: TraceInfoV3;\n  isComparing: boolean;\n}) => {\n  const { currentTraceInfo, otherTraceInfo, isComparing } = props;\n\n  return (\n    <StackedComponents\n      first={<TokenComponent traceInfo={currentTraceInfo} isComparing={isComparing} />}\n      second={isComparing && <TokenComponent traceInfo={otherTraceInfo} isComparing={isComparing} />}\n    />\n  );\n};\n\nconst TokenComponent = (props: { traceInfo?: TraceInfoV3; isComparing: boolean }) => {\n  const { traceInfo, isComparing } = props;\n\n  const tokenUsage = traceInfo?.trace_metadata?.['mlflow.trace.tokenUsage'];\n  const parsedTokenUsage = (() => {\n    try {\n      return tokenUsage ? JSON.parse(tokenUsage) : {};\n    } catch {\n      return {};\n    }\n  })();\n  const totalTokens = parsedTokenUsage.total_tokens;\n  const inputTokens = parsedTokenUsage.input_tokens;\n  const outputTokens = parsedTokenUsage.output_tokens;\n\n  const intl = useIntl();\n\n  if (!totalTokens) {\n    return <NullCell isComparing={isComparing} />;\n  }\n\n  return (\n    <HoverCard\n      trigger={\n        <Tag css={{ width: 'fit-content', maxWidth: '100%' }} componentId=\"mlflow.genai-traces-table.tokens\">\n          <span\n            css={{\n              display: 'block',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            {totalTokens}\n          </span>\n        </Tag>\n      }\n      content={\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {totalTokens && (\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n              }}\n            >\n              <div\n                css={{\n                  width: '35%',\n                }}\n              >\n                <Typography.Text>\n                  {intl.formatMessage({\n                    defaultMessage: 'Total',\n                    description: 'Label for the total tokensin the tooltip for the tokens cell.',\n                  })}\n                </Typography.Text>\n              </div>\n              <div>\n                <Typography.Text color=\"secondary\">{totalTokens}</Typography.Text>\n              </div>\n            </div>\n          )}\n          {inputTokens && (\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n              }}\n            >\n              <div\n                css={{\n                  width: '35%',\n                }}\n              >\n                <Typography.Text>\n                  {intl.formatMessage({\n                    defaultMessage: 'Input',\n                    description: 'Label for the input tokens in the tooltip for the tokens cell.',\n                  })}\n                </Typography.Text>\n              </div>\n              <div>\n                <Typography.Text color=\"secondary\">{inputTokens}</Typography.Text>\n              </div>\n            </div>\n          )}\n          {outputTokens && (\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n              }}\n            >\n              <div\n                css={{\n                  width: '35%',\n                }}\n              >\n                <Typography.Text>\n                  {intl.formatMessage({\n                    defaultMessage: 'Output',\n                    description: 'Label for the output tokens in the tooltip for the tokens cell.',\n                  })}\n                </Typography.Text>\n              </div>\n              <div>\n                <Typography.Text color=\"secondary\">{outputTokens}</Typography.Text>\n              </div>\n            </div>\n          )}\n        </div>\n      }\n    />\n  );\n};\n","import { first, isNil } from 'lodash';\n\nimport type { ThemeType } from '@databricks/design-system';\nimport type { IntlShape } from '@databricks/i18n';\n\nimport { getAssessmentValueBarBackgroundColor } from './Colors';\nimport { isAssessmentPassing } from '../components/EvaluationsReviewAssessmentTag';\nimport {\n  ASSESSMENTS_DOC_LINKS,\n  DEFAULT_ASSESSMENTS_SORT_ORDER,\n  getEvaluationResultAssessmentValue,\n  getJudgeMetricsLink,\n  KnownEvaluationResultAssessmentName,\n  KnownEvaluationResultAssessmentStringValue,\n  KnownEvaluationResultAssessmentValueDescription,\n  KnownEvaluationResultAssessmentValueLabel,\n  KnownEvaluationResultAssessmentValueMissingTooltip,\n} from '../components/GenAiEvaluationTracesReview.utils';\nimport type {\n  AssessmentAggregates,\n  AssessmentRunCounts,\n  AssessmentInfo,\n  EvalTraceComparisonEntry,\n  RunEvaluationResultAssessment,\n  RunEvaluationTracesDataEntry,\n  AssessmentDType,\n  AssessmentFilter,\n  AssessmentValueType,\n  NumericAggregateCount,\n  NumericAggregate,\n} from '../types';\n\nexport interface StackedRunBarchartItem {\n  value: number;\n  fraction: number;\n  isSelected: boolean;\n  toggleFilter?: () => void;\n  tooltip: string;\n}\nexport interface StackedBarchartItem {\n  name: string;\n  current: StackedRunBarchartItem;\n  other?: StackedRunBarchartItem;\n  backgroundColor: string;\n  scoreChange?: number;\n}\n\nexport const ERROR_KEY = 'Error';\n\nexport function doesAssessmentContainErrors(assessment?: RunEvaluationResultAssessment): boolean {\n  return Boolean(assessment?.errorCode || assessment?.errorMessage);\n}\n\nfunction getCustomMetricNameAndAssessment(assessmentPath: string): { metricName: string; assessmentName: string } {\n  // metric/all_guidelines/guideline_adherence\n  // gets parsed to {metricName: 'all_guidelines', assessmentName: 'guideline_adherence'}\n  const splits = assessmentPath.split('/');\n  if (splits.length === 1) {\n    return { metricName: assessmentPath, assessmentName: assessmentPath };\n  } else if (splits.length === 2) {\n    return { metricName: splits[0], assessmentName: splits[1] };\n  } else {\n    return { metricName: splits[1], assessmentName: splits.slice(2).join('/') };\n  }\n}\n\nconst PASS_FAIL_VALUES: string[] = [\n  KnownEvaluationResultAssessmentStringValue.YES,\n  KnownEvaluationResultAssessmentStringValue.NO,\n];\n/**\n * Computes global metadata for each of the assessments.\n */\nexport function getAssessmentInfos(\n  intl: IntlShape,\n  currentEvaluationResults: RunEvaluationTracesDataEntry[],\n  otherEvaluationResults: RunEvaluationTracesDataEntry[] | undefined,\n): AssessmentInfo[] {\n  const assessmentInfos: Record<string, AssessmentInfo> = {};\n  // Compute dtypes in the first pass.\n  const assessmentDtypes: Record<string, AssessmentDType | undefined> = {\n    [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]: 'pass-fail',\n  };\n  // Set of all assessment names. Will be filled after the first pass when computing dtypes.\n  const assessmentNames = new Set<string>();\n\n  [...currentEvaluationResults, ...(otherEvaluationResults || [])].forEach((result) => {\n    const responseAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = Object.entries(\n      result.responseAssessmentsByName || {},\n    );\n\n    const overallAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = result.overallAssessments.map(\n      (assessment) => [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT as string, [assessment]],\n    );\n    const retrievalAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = [];\n    result.retrievalChunks?.forEach((chunk) => {\n      // Iterate chunk.retrievalAssessmentsByName\n      for (const [assessmentName, assessments] of Object.entries(chunk.retrievalAssessmentsByName || {})) {\n        retrievalAssessmentsByName.push([assessmentName, assessments]);\n      }\n    });\n\n    for (const [assessmentName, assessments] of [\n      ...responseAssessmentsByName,\n      ...overallAssessmentsByName,\n      ...retrievalAssessmentsByName,\n    ]) {\n      assessmentNames.add(assessmentName);\n      const assessment = assessments[0];\n      // For string values, if we see a value that is not \"yes\" or \"no\", we treat it as a string.\n      // This is not a great approach, we should probably actually pass the pass-fail dtype information back somehow.\n      let dtype: AssessmentDType | undefined = !isNil(assessment.stringValue)\n        ? 'pass-fail'\n        : !isNil(assessment.numericValue)\n        ? 'numeric'\n        : !isNil(assessment.booleanValue)\n        ? 'boolean'\n        : undefined;\n\n      if (doesAssessmentContainErrors(assessment)) {\n        dtype = undefined;\n      }\n\n      if (!assessmentDtypes[assessmentName]) {\n        if (assessmentName in KnownEvaluationResultAssessmentValueLabel) {\n          dtype = 'pass-fail';\n        }\n        assessmentDtypes[assessmentName] = dtype;\n      }\n\n      // Treat non-\"yes\"|\"no\" as string values.\n      if (\n        dtype === 'pass-fail' &&\n        !isNil(assessment.stringValue) &&\n        !PASS_FAIL_VALUES.includes(assessment.stringValue)\n      ) {\n        assessmentDtypes[assessmentName] = 'string';\n      }\n\n      // If the dtype is not the same as the current dtype (meaning there's mixed data types),\n      // treat it as a string.\n      if (dtype !== undefined && dtype !== assessmentDtypes[assessmentName]) {\n        assessmentDtypes[assessmentName] = 'string';\n      }\n    }\n  });\n\n  // if any assessment does not have a dtype, give it 'unknown' type. this can happen if all evaluations for that assessment are errors\n  for (const assessmentName of assessmentNames) {\n    if (!assessmentDtypes[assessmentName]) {\n      assessmentDtypes[assessmentName] = 'unknown';\n    }\n  }\n\n  [...currentEvaluationResults, ...(otherEvaluationResults || [])].forEach((result) => {\n    const responseAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = Object.entries(\n      result.responseAssessmentsByName || {},\n    );\n\n    const overallAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = result.overallAssessments.map(\n      (assessment) => [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT as string, [assessment]],\n    );\n    const retrievalAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = [];\n    result.retrievalChunks?.forEach((chunk) => {\n      // Iterate chunk.retrievalAssessmentsByName\n      for (const [assessmentName, assessments] of Object.entries(chunk.retrievalAssessmentsByName || {})) {\n        retrievalAssessmentsByName.push([assessmentName, assessments]);\n      }\n    });\n\n    const assessmentNames = Object.keys(assessmentDtypes);\n    for (const assessmentName of assessmentNames) {\n      const assessmentsByName = [\n        ...responseAssessmentsByName.filter(([name]) => name === assessmentName),\n        ...overallAssessmentsByName.filter(([name]) => name === assessmentName),\n        ...retrievalAssessmentsByName.filter(([name]) => name === assessmentName),\n      ];\n      // NOTE: We only take the first assessment as row-level judges produce a single assessment.\n      const assessments = assessmentsByName.map(([_, assessments]) => assessments[0]);\n      const assessment: RunEvaluationResultAssessment | undefined = assessments[0];\n\n      const isError = doesAssessmentContainErrors(assessment);\n\n      if (isNil(assessmentInfos[assessmentName])) {\n        let displayName: string;\n        let metricName: string;\n        let isCustomMetric = false;\n\n        const isKnown = KnownEvaluationResultAssessmentValueLabel[assessmentName] !== undefined;\n        if (isKnown) {\n          displayName = intl.formatMessage(KnownEvaluationResultAssessmentValueLabel[assessmentName]);\n          metricName = assessmentName;\n          isCustomMetric = false;\n        } else {\n          const { metricName: customMetricName, assessmentName: customAssessmentName } =\n            getCustomMetricNameAndAssessment(assessmentName);\n          displayName = customAssessmentName || '-';\n          metricName = customMetricName;\n          if (assessment?.source?.sourceType === 'CODE') {\n            isCustomMetric = true;\n          }\n        }\n        const dtype = assessmentDtypes[assessmentName] || 'string';\n\n        const docsLink = getJudgeMetricsLink(ASSESSMENTS_DOC_LINKS[assessmentName]);\n        const missingTooltip =\n          assessmentName in KnownEvaluationResultAssessmentValueMissingTooltip\n            ? intl.formatMessage(KnownEvaluationResultAssessmentValueMissingTooltip[assessmentName])\n            : '';\n        const description =\n          assessmentName in KnownEvaluationResultAssessmentValueDescription\n            ? intl.formatMessage(KnownEvaluationResultAssessmentValueDescription[assessmentName])\n            : assessment?.source?.sourceType === 'HUMAN'\n            ? intl.formatMessage({\n                defaultMessage: 'This assessment is produced by a human judge.',\n                description: 'Human judge assessment description',\n              })\n            : intl.formatMessage({\n                defaultMessage: 'This assessment is produced by a custom metric.',\n                description: 'Custom judge assessment description',\n              });\n\n        let assessmentValue = assessment ? getEvaluationResultAssessmentValue(assessment) : undefined;\n        if (assessmentValue === null) assessmentValue = undefined;\n\n        const uniqueValues = new Set<AssessmentValueType>();\n        if (!isError) {\n          uniqueValues.add(assessmentValue);\n        }\n\n        assessmentInfos[assessmentName] = {\n          name: assessmentName,\n          displayName: displayName,\n          isKnown,\n          metricName,\n          isCustomMetric,\n          source: assessment?.source,\n          dtype,\n          uniqueValues,\n          isOverall: assessmentName === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT,\n          docsLink,\n          missingTooltip,\n          description,\n          isEditable: assessment?.source?.sourceType === 'AI_JUDGE' || assessment?.source?.sourceType === 'HUMAN',\n          isRetrievalAssessment: retrievalAssessmentsByName.some(([name]) => name === assessmentName),\n          containsErrors: isError,\n        };\n      } else {\n        const assessmentInfo = assessmentInfos[assessmentName];\n        let value = assessment ? getEvaluationResultAssessmentValue(assessment) : undefined;\n        if (isNil(value)) value = undefined;\n        if (!isError) {\n          assessmentInfo.uniqueValues.add(value);\n        }\n\n        // Update isEditable.\n        if (!assessmentInfo.isEditable) {\n          assessmentInfo.isEditable =\n            assessment?.source?.sourceType === 'AI_JUDGE' || assessment?.source?.sourceType === 'HUMAN';\n        }\n\n        // isRetrievalAssessment should be true if any evaluation result has this assessment.\n        assessmentInfo.isRetrievalAssessment =\n          assessmentInfo.isRetrievalAssessment || retrievalAssessmentsByName.some(([name]) => name === assessmentName);\n\n        assessmentInfo.containsErrors = assessmentInfo.containsErrors || isError;\n      }\n    }\n  });\n\n  // Remove the overall assessment if it does not have any non-null values.\n  const seenOverallAssessmentValues =\n    assessmentInfos[KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]?.uniqueValues || new Set();\n  const hasOverallValue =\n    seenOverallAssessmentValues.has(KnownEvaluationResultAssessmentStringValue.YES) ||\n    seenOverallAssessmentValues.has(KnownEvaluationResultAssessmentStringValue.NO);\n  if (!hasOverallValue) {\n    delete assessmentInfos[KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT];\n  }\n\n  return sortAssessmentInfos(Object.values(assessmentInfos));\n}\n\nexport function sortAssessmentInfos(assessmentInfos: AssessmentInfo[]): AssessmentInfo[] {\n  // Sort by DEFAULT_ASSESSMENTS_SORT_ORDER, fall back to alphabetical order of (metricName, name) which come after.\n  return assessmentInfos.sort((a, b) => {\n    const orderA = DEFAULT_ASSESSMENTS_SORT_ORDER.indexOf(a.name);\n    const orderB = DEFAULT_ASSESSMENTS_SORT_ORDER.indexOf(b.name);\n\n    // If both are in the sort order, compare their indices\n    if (orderA !== -1 && orderB !== -1) {\n      return orderA - orderB;\n    }\n\n    // If only one is in the sort order, prioritize it\n    if (orderA !== -1) return -1;\n    if (orderB !== -1) return 1;\n\n    // Otherwise, sort by name alphabetically\n    return a.name.localeCompare(b.name);\n  });\n}\n\nexport function getNumericAggregate(numericValues: number[]): NumericAggregate | undefined {\n  if (numericValues.length === 0) {\n    return undefined;\n  }\n\n  const numericAggregateCounts: NumericAggregateCount[] = [];\n  const min = Math.min(...numericValues);\n  const max = Math.max(...numericValues);\n\n  // Set a minimum bucket size of 0.01, since the data is displayed in 2 decimal places.\n  // Show at most 10 buckets.\n  const bucketSize = Math.max(0.01, (max - min) / 10);\n  let maxCount = 0;\n\n  if (min === max) {\n    numericAggregateCounts.push({ lower: min, upper: max, count: numericValues.length });\n  } else {\n    for (let i = min; i < max; i += bucketSize) {\n      numericAggregateCounts.push({ lower: i, upper: Math.min(i + bucketSize, max), count: 0 });\n    }\n  }\n\n  numericAggregateCounts.sort((a, b) => a.lower - b.lower);\n  for (const numericValue of numericValues) {\n    const bucket = numericAggregateCounts.find(\n      (bucket) =>\n        numericValue >= bucket.lower &&\n        (numericValue < bucket.upper || (numericValue === bucket.upper && numericValue === max)),\n    );\n    if (bucket) {\n      bucket.count++;\n      maxCount = Math.max(maxCount, bucket.count);\n    }\n  }\n  return { min, max, maxCount, counts: numericAggregateCounts };\n}\n\nexport function getAssessmentNumericAggregates(\n  assessmentInfo: AssessmentInfo,\n  evalResults: RunEvaluationTracesDataEntry[],\n): NumericAggregate | undefined {\n  if (assessmentInfo.dtype !== 'numeric') {\n    return undefined;\n  }\n  const numericValues = evalResults\n    .flatMap((evalResult) => {\n      const assessments = assessmentInfo.isOverall\n        ? evalResult.overallAssessments\n        : evalResult.responseAssessmentsByName[assessmentInfo.name];\n      const result = assessments\n        ?.map((assessment) => getEvaluationResultAssessmentValue(assessment))\n        .filter((value) => value !== undefined && typeof value === 'number');\n      return result;\n    })\n    .filter((value) => !isNil(value));\n  return getNumericAggregate(numericValues);\n}\n\nfunction getAssessmentRunValueCounts(\n  assessmentInfo: AssessmentInfo,\n  evalResults: RunEvaluationTracesDataEntry[],\n): AssessmentRunCounts | undefined {\n  if (assessmentInfo.dtype === 'numeric') {\n    return undefined;\n  }\n  const valueCounts: AssessmentRunCounts = new Map();\n  evalResults.forEach((evalResult) => {\n    const assessments = assessmentInfo.isOverall\n      ? evalResult.overallAssessments\n      : evalResult.responseAssessmentsByName[assessmentInfo.name];\n    const valueCountsBySourceId =\n      assessments && assessments.length > 0\n        ? getUniqueValueCountsBySourceId(assessmentInfo, assessments)\n        : [{ value: undefined, count: 1 }];\n    const keysToCount = assessmentInfo.containsErrors\n      ? [ERROR_KEY, ...assessmentInfo.uniqueValues]\n      : assessmentInfo.uniqueValues;\n    for (const uniqueValue of keysToCount) {\n      const valueCountBySourceId = valueCountsBySourceId.find((valueCount) => valueCount.value === uniqueValue);\n      const count = valueCountBySourceId ? valueCountBySourceId.count : 0;\n      valueCounts.set(uniqueValue, (valueCounts.get(uniqueValue) || 0) + count);\n    }\n  });\n  return valueCounts;\n}\n\nfunction getAssessmentRunNumericValues(\n  assessmentInfo: AssessmentInfo,\n  evalResults: RunEvaluationTracesDataEntry[],\n): number[] | undefined {\n  if (assessmentInfo.dtype !== 'numeric') {\n    return undefined;\n  }\n  const values: number[] = [];\n  evalResults.forEach((evalResult) => {\n    const assessment = assessmentInfo.isOverall\n      ? first(evalResult.overallAssessments)\n      : first(evalResult.responseAssessmentsByName[assessmentInfo.name]);\n    if (assessment) {\n      const value = getEvaluationResultAssessmentValue(assessment);\n\n      if (!isNil(value)) {\n        values.push(Number(value));\n      }\n    }\n  });\n  return values;\n}\n\nfunction getRootCauseAssessmentCount(\n  assessmentInfo: AssessmentInfo,\n  evalResults: RunEvaluationTracesDataEntry[],\n): number {\n  let numRootCause = 0;\n  evalResults.forEach((evalResult) => {\n    if (isNil(evalResult)) return;\n    const overallAssessment = first(evalResult.overallAssessments);\n    if (overallAssessment?.rootCauseAssessment?.assessmentName === assessmentInfo.name) {\n      numRootCause++;\n    }\n  });\n  return numRootCause;\n}\n\nexport function getAssessmentAggregates(\n  assessmentInfo: AssessmentInfo,\n  evalResults: EvalTraceComparisonEntry[],\n  allAssessmentFilters: AssessmentFilter[],\n): AssessmentAggregates {\n  const currentEvalResults = evalResults.map((entry) => entry.currentRunValue).filter((entry) => !isNil(entry));\n  const otherEvalResults = evalResults.map((entry) => entry.otherRunValue).filter((entry) => !isNil(entry));\n\n  const currentAssessmentAggregates = getAssessmentRunValueCounts(assessmentInfo, currentEvalResults);\n  const otherAssessmentAggregates = getAssessmentRunValueCounts(assessmentInfo, otherEvalResults);\n\n  const currentNumericAggregates = getAssessmentNumericAggregates(assessmentInfo, currentEvalResults);\n\n  const assessmentFilters = allAssessmentFilters.filter((filter) => filter.assessmentName === assessmentInfo.name);\n\n  return {\n    assessmentInfo,\n    currentCounts: currentAssessmentAggregates,\n    otherCounts: otherAssessmentAggregates,\n    currentNumericValues: getAssessmentRunNumericValues(assessmentInfo, currentEvalResults),\n    otherNumericValues: getAssessmentRunNumericValues(assessmentInfo, otherEvalResults),\n    currentNumericAggregate: currentNumericAggregates,\n    currentNumRootCause: getRootCauseAssessmentCount(assessmentInfo, currentEvalResults),\n    otherNumRootCause: getRootCauseAssessmentCount(assessmentInfo, otherEvalResults),\n    assessmentFilters,\n  };\n}\n\n/**\n * Computes the total aggregate score for an assessment and evaluation results.\n *\n * For pass-fail dtypes, it computes what percentage of the runs have the assessment value as 'yes'.\n * for boolean dtypes, it computes what percentage of the runs have the assessment value as 'true'.\n */\nexport function getAssessmentAggregateOverallFraction(\n  assessmentInfo: AssessmentInfo,\n  assessmentRunCounts: AssessmentRunCounts = new Map(),\n): number {\n  if (assessmentInfo.dtype === 'pass-fail' || assessmentInfo.dtype === 'boolean') {\n    let total = 0;\n    let passCount = 0;\n    for (const [value, count] of assessmentRunCounts) {\n      if (isAssessmentPassing(assessmentInfo, value)) {\n        passCount += count;\n      }\n      // We only consider non-null values for the total score.\n      if (!isNil(value) && value !== ERROR_KEY) {\n        total += count;\n      }\n    }\n    return total > 0 ? passCount / total : 0;\n  }\n  return 0;\n}\n\nfunction getAssessmentBarChartValueBarItem(\n  intl: IntlShape,\n  assessmentInfo: AssessmentInfo,\n  assessmentFilters: AssessmentFilter[],\n  value: string | boolean | number | undefined,\n  valueCounts: AssessmentRunCounts,\n  runName: string,\n  toggleAssessmentFilter: (\n    assessmentName: string,\n    filterValue: AssessmentValueType,\n    run: string,\n    filterType: AssessmentFilter['filterType'],\n  ) => void,\n): StackedRunBarchartItem {\n  let numEvals = 0;\n  const isErrorOrNull = value === ERROR_KEY || value === undefined;\n  for (const [key, count] of valueCounts) {\n    if (key !== undefined && key !== ERROR_KEY) {\n      numEvals += count;\n    }\n  }\n  const numValue = valueCounts.get(value) || 0;\n  const fraction = !isErrorOrNull && numEvals > 0 ? numValue / numEvals : 0;\n\n  const filterType: AssessmentFilter['filterType'] = undefined;\n\n  return {\n    value: valueCounts.get(value) || 0,\n    fraction,\n    isSelected: assessmentFilters.some(\n      (filter) =>\n        filter.filterValue === value && filter.assessmentName === assessmentInfo.name && filter.run === runName,\n    ),\n    toggleFilter: () => toggleAssessmentFilter(assessmentInfo.name, value, runName, filterType),\n    tooltip: !isErrorOrNull\n      ? intl.formatMessage(\n          {\n            defaultMessage: '{numValue}/{numEvals} for run \"{runName}\"',\n            description: 'Passing assessment tooltip',\n          },\n          {\n            numValue: numValue,\n            numEvals,\n            runName,\n          },\n        )\n      : intl.formatMessage(\n          {\n            defaultMessage: '{numValue} for run \"{runName}\"',\n            description: 'Error/null assessment tooltip',\n          },\n          {\n            numValue,\n            runName,\n          },\n        ),\n  };\n}\n\nfunction getBarChartKeys(assessmentInfo: AssessmentInfo) {\n  const keys = getSortedUniqueValues(assessmentInfo);\n  if (assessmentInfo.containsErrors) {\n    keys.push(ERROR_KEY);\n  }\n\n  return keys;\n}\n\nexport function getBarChartData(\n  intl: IntlShape,\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  assessmentFilters: AssessmentFilter[],\n  toggleAssessmentFilter: (\n    assessmentName: string,\n    filterValue: AssessmentValueType,\n    run: string,\n    filterType: AssessmentFilter['filterType'],\n  ) => void,\n  displayInfoCounts: AssessmentAggregates,\n  currentRunDisplayName?: string,\n  compareToRunDisplayName?: string,\n): StackedBarchartItem[] {\n  const showCompareData = displayInfoCounts.otherCounts !== undefined;\n\n  const barItems: StackedBarchartItem[] = [];\n\n  for (const value of getBarChartKeys(assessmentInfo)) {\n    const currentBarItem = displayInfoCounts.currentCounts\n      ? getAssessmentBarChartValueBarItem(\n          intl,\n          assessmentInfo,\n          assessmentFilters,\n          value,\n          displayInfoCounts.currentCounts,\n          // For monitoring, there is no run name so we allow this to pass through.\n          currentRunDisplayName || 'monitor',\n          toggleAssessmentFilter,\n        )\n      : undefined;\n\n    const otherBarItem =\n      showCompareData && compareToRunDisplayName\n        ? getAssessmentBarChartValueBarItem(\n            intl,\n            assessmentInfo,\n            assessmentFilters,\n            value,\n            displayInfoCounts.otherCounts || new Map(),\n            compareToRunDisplayName,\n            toggleAssessmentFilter,\n          )\n        : undefined;\n\n    const isErrorOrNull = value === ERROR_KEY || value === undefined;\n    const scoreChange =\n      showCompareData && currentBarItem && otherBarItem\n        ? isErrorOrNull\n          ? currentBarItem.value - (otherBarItem?.value || 0)\n          : currentBarItem.fraction - (otherBarItem?.fraction || 0)\n        : undefined;\n    // Only include Error or Null if there's a non-zero value or score change.\n    if (currentBarItem && (!isErrorOrNull || currentBarItem.value !== 0 || (scoreChange && scoreChange !== 0))) {\n      barItems.push({\n        name: getAssessmentBarChartValueText(intl, theme, assessmentInfo, value),\n        current: currentBarItem,\n        other: otherBarItem,\n        backgroundColor: getAssessmentValueBarBackgroundColor(theme, assessmentInfo, value, value === ERROR_KEY),\n        scoreChange,\n      });\n    }\n  }\n\n  return barItems;\n}\n\nfunction getSortedUniqueValues(assessmentInfo: AssessmentInfo) {\n  const uniqueValuesArray = Array.from(assessmentInfo.uniqueValues);\n  if (assessmentInfo.dtype === 'pass-fail') {\n    // Always show \"YES\" and \"NO\". We don't always show missing to reduce vertical space usage.\n    if (!uniqueValuesArray.includes(KnownEvaluationResultAssessmentStringValue.YES)) {\n      uniqueValuesArray.push(KnownEvaluationResultAssessmentStringValue.YES);\n    }\n    if (!uniqueValuesArray.includes(KnownEvaluationResultAssessmentStringValue.NO)) {\n      uniqueValuesArray.push(KnownEvaluationResultAssessmentStringValue.NO);\n    }\n    const sortOrder: string[] = [\n      KnownEvaluationResultAssessmentStringValue.YES,\n      KnownEvaluationResultAssessmentStringValue.NO,\n    ];\n\n    // Sort the unique values based on the order of the known values.\n    return uniqueValuesArray.sort((a, b) => {\n      const aIndex = sortOrder.indexOf(a as string);\n      const bIndex = sortOrder.indexOf(b as string);\n      return aIndex - bIndex;\n    });\n  } else if (assessmentInfo.dtype === 'boolean') {\n    // Sort by the value.\n    return uniqueValuesArray.sort((a, b) => {\n      return (a as boolean) === true ? -1 : 1;\n    });\n  }\n\n  // Sort the assessment.\n  return uniqueValuesArray.sort();\n}\n\nfunction getAssessmentBarChartValueText(\n  intl: IntlShape,\n  theme: ThemeType,\n  assessmentInfo: AssessmentInfo,\n  value: string | boolean | number | undefined,\n): string {\n  if (assessmentInfo.dtype === 'pass-fail') {\n    if (value === KnownEvaluationResultAssessmentStringValue.YES) {\n      return intl.formatMessage({\n        defaultMessage: 'Pass',\n        description: 'The label for a passing asseessment above a bar-chart in the summary stats.',\n      });\n    } else if (value === KnownEvaluationResultAssessmentStringValue.NO) {\n      return intl.formatMessage({\n        defaultMessage: 'Fail',\n        description: 'The label for a failing asseessment above a bar-chart in the summary stats.',\n      });\n    } else if (value === ERROR_KEY) {\n      return intl.formatMessage({\n        defaultMessage: 'Error',\n        description: 'The label for an error asseessment above a bar-chart in the summary stats.',\n      });\n    } else {\n      return intl.formatMessage({\n        defaultMessage: 'null',\n        description: 'null assessment label',\n      });\n    }\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (value === true) {\n      return intl.formatMessage({\n        defaultMessage: 'True',\n        description: 'True assessment label',\n      });\n    } else if (value === false) {\n      return intl.formatMessage({\n        defaultMessage: 'False',\n        description: 'False assessment label',\n      });\n    } else {\n      return intl.formatMessage({\n        defaultMessage: 'null',\n        description: 'null assessment label',\n      });\n    }\n  }\n  return isNil(value) ? 'null' : `${value}`;\n}\n\n/**\n * Compute the counts for each of the values given a set of assessments.\n */\nexport function getUniqueValueCountsBySourceId(\n  assessmentInfo: AssessmentInfo,\n  assessments: RunEvaluationResultAssessment[],\n): {\n  value: AssessmentValueType | undefined;\n  count: number;\n  latestAssessment: RunEvaluationResultAssessment;\n}[] {\n  const filteredAssessments = assessments.filter((assessment) => assessment.name === assessmentInfo.name);\n  // Compute the unique values of assessments.\n  let uniqueValues = new Set<AssessmentValueType | undefined>();\n  for (const assessment of filteredAssessments) {\n    const value = getEvaluationResultAssessmentValue(assessment);\n    uniqueValues.add(value);\n  }\n\n  // Sort by the latest timestamp.\n  filteredAssessments.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));\n\n  // Separate assessments with errors from those without.\n  const errorAssessments = filteredAssessments.filter((assessment) => doesAssessmentContainErrors(assessment));\n  const validAssessments = filteredAssessments.filter((assessment) => !doesAssessmentContainErrors(assessment));\n\n  // Recompute the unique values after filtering.\n  uniqueValues = new Set<AssessmentValueType | undefined>();\n  for (const assessment of validAssessments) {\n    const value = getEvaluationResultAssessmentValue(assessment);\n    uniqueValues.add(value);\n  }\n\n  // Compute the counts for each of the unique values.\n  const valueCounts: {\n    value: AssessmentValueType | undefined;\n    count: number;\n    latestAssessment: RunEvaluationResultAssessment;\n  }[] = [];\n  for (const value of uniqueValues) {\n    const assessmentsWithValue = filteredAssessments.filter(\n      (assessment) => getEvaluationResultAssessmentValue(assessment) === value,\n    );\n    const count = assessmentsWithValue.length;\n    valueCounts.push({ value, count, latestAssessment: assessmentsWithValue[0] });\n  }\n\n  // Add an entry for errors.\n  if (errorAssessments.length > 0) {\n    valueCounts.push({\n      value: ERROR_KEY,\n      count: errorAssessments.length,\n      latestAssessment: errorAssessments[0],\n    });\n  }\n\n  return valueCounts;\n}\n","import { isNil } from 'lodash';\n\nimport type { IntlShape } from '@databricks/i18n';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { getAssessmentAggregateOverallFraction } from './AggregationUtils';\nimport type { AssessmentAggregates, AssessmentInfo } from '../types';\nconst NUM_DECIMALS_PERCENTAGE_DISPLAY = 1;\n\n/** Display a fraction (0-1) as a percentage. */\nexport function displayPercentage(fraction: number, numDecimalsDisplayPercentage = NUM_DECIMALS_PERCENTAGE_DISPLAY) {\n  // We wrap in a Number to remove trailing zeros (4.00 => 4).\n  return Number((fraction * 100).toFixed(numDecimalsDisplayPercentage)).toString();\n}\n\nexport function displayFloat(value: number | undefined | null, numDecimals = 3) {\n  if (isNil(value)) {\n    return 'null';\n  }\n  const multiplier = Math.pow(10, numDecimals);\n  const result = Math.round(value * multiplier) / multiplier;\n  return result.toString();\n}\n\n/**\n * Computes the overall display score for an assessment, and the change in score from the other run.\n */\nexport function getDisplayOverallScoreAndChange(\n  intl: IntlShape,\n  assessmentInfo: AssessmentInfo,\n  assessmentDisplayInfo: AssessmentAggregates,\n): {\n  displayScore: string;\n  displayScoreChange: string | undefined;\n  changeDirection: 'up' | 'down' | 'none';\n  aggregateType: 'average' | 'percentage-true' | 'categorical';\n} {\n  if (assessmentInfo.dtype === 'numeric') {\n    // Compute the average score for displayScore, and the change in average for displayScoreChange.\n    const currentNumericValues = assessmentDisplayInfo.currentNumericValues;\n    const otherNumericValues = assessmentDisplayInfo.otherNumericValues;\n\n    let currentAverage = NaN;\n    let otherAverage = NaN;\n    if (currentNumericValues) {\n      currentAverage = currentNumericValues.reduce((a, b) => a + b, 0) / currentNumericValues.length;\n    }\n    if (otherNumericValues) {\n      otherAverage = otherNumericValues.reduce((a, b) => a + b, 0) / otherNumericValues.length;\n    }\n    const displayScore = displayFloat(currentAverage, 2);\n    const scoreChange = otherNumericValues ? currentAverage - otherAverage : undefined;\n    const changeDirection = scoreChange ? (scoreChange > 0 ? 'up' : 'down') : 'none';\n\n    const displayScoreChange = scoreChange\n      ? changeDirection === 'up'\n        ? `+${displayFloat(Math.abs(scoreChange), 2)}`\n        : changeDirection === 'down'\n        ? `-${displayFloat(Math.abs(scoreChange), 2)}`\n        : '+0'\n      : undefined;\n\n    return {\n      displayScore,\n      displayScoreChange,\n      changeDirection,\n      aggregateType: 'average',\n    };\n  } else if (assessmentInfo.dtype === 'pass-fail' || assessmentInfo.dtype === 'boolean') {\n    const numDecimalsDisplayPercentage = 0;\n    const scoreFraction = getAssessmentAggregateOverallFraction(assessmentInfo, assessmentDisplayInfo.currentCounts);\n    const displayScore = displayPercentage(scoreFraction, numDecimalsDisplayPercentage) + '%';\n    const scoreChange = assessmentDisplayInfo.otherCounts\n      ? scoreFraction - getAssessmentAggregateOverallFraction(assessmentInfo, assessmentDisplayInfo.otherCounts)\n      : undefined;\n    const changeDirection = scoreChange ? (scoreChange > 0 ? 'up' : 'down') : 'none';\n    const displayScoreChange = scoreChange\n      ? (changeDirection === 'up' || changeDirection === 'none' ? '+' : '') +\n        displayPercentage(scoreChange, numDecimalsDisplayPercentage) +\n        '%'\n      : undefined;\n\n    return {\n      displayScore,\n      displayScoreChange,\n      changeDirection,\n      aggregateType: 'percentage-true',\n    };\n  } else if (assessmentInfo.dtype === 'string') {\n    const numUniqueValues = assessmentInfo.uniqueValues.size;\n    return {\n      displayScore:\n        numUniqueValues !== 1\n          ? intl.formatMessage(\n              {\n                defaultMessage: '{numUniqueValues} values',\n                description: 'Text for number of unique values for categorical assessment',\n              },\n              { numUniqueValues },\n            )\n          : intl.formatMessage({\n              defaultMessage: '1 value',\n              description: 'Text for number of unique values for categorical assessment',\n            }),\n      displayScoreChange: '',\n      changeDirection: 'none',\n      aggregateType: 'categorical',\n    };\n  } else {\n    return {\n      displayScore: 'N/A',\n      displayScoreChange: 'N/A',\n      changeDirection: 'none',\n      aggregateType: 'categorical',\n    };\n  }\n}\n\nexport function getDisplayScore(assessmentInfo: AssessmentInfo, fraction: number) {\n  return displayPercentage(fraction, 0) + '%';\n}\n\nexport function getDisplayScoreChange(assessmentInfo: AssessmentInfo, scoreChange: number, asPercentage = true) {\n  if (assessmentInfo.dtype === 'numeric') {\n    const changeDirection = scoreChange > 0 ? 'up' : 'down';\n    return changeDirection === 'up' ? `+${displayFloat(scoreChange, 2)}` : `-${displayFloat(scoreChange, 2)}`;\n  } else {\n    const changeDirection = scoreChange >= 0 ? 'up' : 'down';\n    if (asPercentage) {\n      return changeDirection === 'up'\n        ? `+${displayPercentage(scoreChange, 0)}%`\n        : `-${displayPercentage(scoreChange * -1, 0)}%`;\n    } else {\n      return changeDirection === 'up' ? `+${scoreChange}` : `-${scoreChange}`;\n    }\n  }\n}\n\n// This is forked from mlflow: https://src.dev.databricks.com/databricks-eng/universe/-/blob/mlflow/web/js/src/common/utils/Utils.tsx?L188\nexport function timeSinceStr(date: any, referenceDate = new Date()) {\n  // @ts-expect-error TS(2362): The left-hand side of an arithmetic operation must... Remove this comment to see the full error message\n  const seconds = Math.max(0, Math.floor((referenceDate - date) / 1000));\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 year} other {# years}} ago\"\n        description=\"Text for time in years since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 month} other {# months}} ago\"\n        description=\"Text for time in months since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 day} other {# days}} ago\"\n        description=\"Text for time in days since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 hour} other {# hours}} ago\"\n        description=\"Text for time in hours since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 minute} other {# minutes}} ago\"\n        description=\"Text for time in minutes since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  return (\n    <FormattedMessage\n      defaultMessage=\"{timeSince, plural, =1 {1 second} other {# seconds}} ago\"\n      description=\"Text for time in seconds since given date for MLflow views\"\n      values={{ timeSince: seconds }}\n    />\n  );\n}\n\n// Function to escape CSS Special characters by adding \\\\ before them. Needed when inserting CSS variables.\nexport function escapeCssSpecialCharacters(str: string) {\n  // eslint-disable-next-line no-useless-escape\n  return str.replace(/([!\"#$%&'()*+,\\.\\/:;\\s<=>?@[\\\\\\]^`{|}~])/g, '\\\\$1');\n}\n\n// Adapted from query-insights/utils/numberUtils\nexport function prettySizeWithUnit(bytes: number | null | undefined, fractionDigits?: number) {\n  return prettyNumberWithUnit(bytes, 1024, ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'], fractionDigits);\n}\n\nfunction prettyNumberWithUnit(\n  value: string | number | null | undefined,\n  divisor: number,\n  units: string[] = [],\n  fractionDigits?: number,\n): { unit: string; value: string; numericValue: number | undefined; divisor: number } {\n  let val = Number(value);\n\n  if (isNaN(val) || !isFinite(val)) {\n    return {\n      value: '',\n      numericValue: undefined,\n      unit: '',\n      divisor: 1,\n    };\n  }\n\n  let unit = 0;\n  let greatestDivisor = 1;\n\n  while (val >= divisor && unit < units.length - 1) {\n    val /= divisor;\n    greatestDivisor *= divisor;\n    unit += 1;\n  }\n\n  return {\n    value: formatNumber(val, fractionDigits),\n    numericValue: val,\n    unit: units[unit],\n    divisor: greatestDivisor,\n  };\n}\n\nfunction formatNumber(value: number, fractionDigits = 3): string {\n  return Math.round(value) !== value ? value.toFixed(fractionDigits) : value.toString();\n}\n","import React from 'react';\n\nconst MarkdownConverterProviderContext = React.createContext({\n  makeHTML: (markdown?: string) => markdown,\n});\n\nexport const MarkdownConverterProvider = ({\n  children,\n  makeHtml,\n}: {\n  children: React.ReactNode;\n  makeHtml: (markdown?: string) => string;\n}) => {\n  return (\n    <MarkdownConverterProviderContext.Provider value={{ makeHTML: makeHtml }}>\n      {children}\n    </MarkdownConverterProviderContext.Provider>\n  );\n};\n\nexport const useMarkdownConverter = () => React.useContext(MarkdownConverterProviderContext);\n","import { isNil, isString } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  PencilIcon,\n  SparkleDoubleIcon,\n  UserIcon,\n  useDesignSystemTheme,\n  Button,\n  CheckCircleIcon,\n  XCircleIcon,\n  WarningIcon,\n  XCircleFillIcon,\n  HoverCard,\n  Typography,\n  InfoSmallIcon,\n  BracketsXIcon,\n  DangerIcon,\n} from '@databricks/design-system';\nimport type { ThemeType } from '@databricks/design-system';\nimport type { IntlShape } from '@databricks/i18n';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport {\n  KnownEvaluationResultAssessmentValueLabel,\n  KnownEvaluationResultAssessmentValueMapping,\n  getEvaluationResultAssessmentValue,\n  hasBeenEditedByHuman,\n  KnownEvaluationResultAssessmentStringValue,\n  KnownEvaluationResultAssessmentValueMissingTooltip,\n  ASSESSMENTS_DOC_LINKS,\n  getJudgeMetricsLink,\n} from './GenAiEvaluationTracesReview.utils';\nimport type { AssessmentInfo, RunEvaluationResultAssessment } from '../types';\nimport {\n  getEvaluationResultAssessmentBackgroundColor,\n  getEvaluationResultIconColor,\n  getEvaluationResultTextColor,\n} from '../utils/Colors';\nimport { displayFloat } from '../utils/DisplayUtils';\nimport { ASSESSMENT_RATIONAL_HOVER_DETAILS_VIEW } from '../utils/EvaluationLogging';\nimport { useMarkdownConverter } from '../utils/MarkdownUtils';\n\nexport const isAssessmentPassing = (\n  assessmentInfo: AssessmentInfo,\n  assessmentValue?: string | number | boolean | null,\n) => {\n  if (!isNil(assessmentValue)) {\n    if (assessmentInfo.dtype === 'pass-fail') {\n      if (assessmentValue === KnownEvaluationResultAssessmentStringValue.YES) {\n        return true;\n      } else if (assessmentValue === KnownEvaluationResultAssessmentStringValue.NO) {\n        return false;\n      }\n    } else if (assessmentInfo.dtype === 'boolean') {\n      return assessmentValue === true;\n    }\n  }\n  return undefined;\n};\n\nfunction getAssessmentTagDisplayValue(\n  theme: ThemeType,\n  intl: IntlShape,\n  type: 'value' | 'assessment-value',\n  assessmentInfo: AssessmentInfo,\n  editedByHuman: boolean,\n  assessment?: RunEvaluationResultAssessment,\n  isRootCauseAssessment?: boolean,\n): { tagText: JSX.Element | string; icon: JSX.Element; fullTagText?: JSX.Element | string | undefined } {\n  let tagText: string | JSX.Element = '';\n  let fullTagText: string | JSX.Element | undefined = undefined;\n  let icon: JSX.Element = <></>;\n\n  const errorDisplayValue = {\n    tagText: (\n      <FormattedMessage defaultMessage=\"Error\" description=\"Error assessment status in the evaluations table.\" />\n    ),\n    icon: <DangerIcon css={{ color: theme.colors.textValidationWarning }} />,\n  };\n\n  const nullDisplayValue = {\n    tagText: (\n      <span css={{ fontStyle: 'italic' }}>\n        <FormattedMessage defaultMessage=\"null\" description=\"Null value in the evaluations table.\" />\n      </span>\n    ),\n    icon: <WarningIcon css={{ color: theme.colors.grey400 }} />,\n  };\n\n  const value = assessment ? getEvaluationResultAssessmentValue(assessment) : undefined;\n  const isError = Boolean(assessment?.errorMessage);\n\n  if (isError) {\n    return errorDisplayValue;\n  }\n\n  if (assessmentInfo.dtype === 'pass-fail' || assessmentInfo.dtype === 'boolean') {\n    const isPassing = isAssessmentPassing(assessmentInfo, value);\n    let displayValueText = '';\n    if (assessmentInfo.dtype === 'pass-fail') {\n      // Known assessments are all pass / fail.\n      if (isPassing === true) {\n        displayValueText = intl.formatMessage({\n          defaultMessage: 'Pass',\n          description: 'Passing evaluation status in the evaluations table.',\n        });\n      } else if (isPassing === false) {\n        displayValueText = intl.formatMessage({\n          defaultMessage: 'Fail',\n          description: 'Failing evaluation status in the evaluations table.',\n        });\n      } else {\n        return nullDisplayValue;\n      }\n    } else if (isPassing === true) {\n      displayValueText = intl.formatMessage({\n        defaultMessage: 'True',\n        description: 'True value in the evaluations table.',\n      });\n    } else if (isPassing === false) {\n      displayValueText = intl.formatMessage({\n        defaultMessage: 'False',\n        description: 'False value in the evaluations table.',\n      });\n    } else {\n      return nullDisplayValue;\n    }\n\n    const iconColor = getEvaluationResultIconColor(theme, assessmentInfo, assessment);\n    icon =\n      isPassing === true ? (\n        <CheckCircleIcon\n          css={{\n            color: iconColor,\n          }}\n        />\n      ) : isPassing === false ? (\n        isRootCauseAssessment ? (\n          <XCircleFillIcon\n            css={{\n              color: iconColor,\n            }}\n          />\n        ) : (\n          <XCircleIcon\n            css={{\n              color: iconColor,\n            }}\n          />\n        )\n      ) : (\n        <WarningIcon\n          css={{\n            color: iconColor,\n          }}\n        />\n      );\n\n    if (type === 'assessment-value') {\n      const knownMapping = KnownEvaluationResultAssessmentValueMapping[assessmentInfo.name];\n\n      if (knownMapping) {\n        const messageDescriptor = value\n          ? knownMapping[value.toString()] ?? knownMapping[KnownEvaluationResultAssessmentStringValue.YES]\n          : knownMapping[KnownEvaluationResultAssessmentStringValue.YES];\n        if (messageDescriptor) {\n          tagText = <FormattedMessage {...messageDescriptor} values={{ value }} />;\n        }\n      } else {\n        tagText = (\n          <>\n            {assessmentInfo.displayName}: {value}\n          </>\n        );\n      }\n    } else if (type === 'value') {\n      if (isNil(isPassing)) {\n        tagText = <span css={{ fontStyle: 'italic' }}>{displayValueText}</span>;\n      } else {\n        tagText = displayValueText;\n      }\n    }\n  } else if (assessmentInfo.dtype === 'numeric') {\n    const roundedValue = !isNil(value) ? displayFloat(value as number | undefined | null) : value;\n\n    if (type === 'assessment-value') {\n      tagText = (\n        <>\n          {assessmentInfo.displayName}: {roundedValue}\n        </>\n      );\n      fullTagText = (\n        <>\n          {assessmentInfo.displayName}: {value}\n        </>\n      );\n    } else {\n      if (isNil(roundedValue)) {\n        return nullDisplayValue;\n      }\n      tagText = `${roundedValue}`;\n      fullTagText = `${value}`;\n    }\n  } else {\n    // Wrap nulls in italics.\n    if (isNil(value)) {\n      return nullDisplayValue;\n    }\n    const valueElement = <>{String(value)}</>;\n    if (type === 'assessment-value') {\n      if (isNil(value)) {\n        tagText = <>{assessmentInfo.displayName}</>;\n      } else {\n        tagText = (\n          <>\n            {assessmentInfo.displayName}: {valueElement}\n          </>\n        );\n      }\n    } else {\n      tagText = valueElement;\n    }\n  }\n  return { tagText, icon, fullTagText };\n}\n\nexport const EvaluationsReviewAssessmentTag = ({\n  assessment,\n  onEdit,\n  active = false,\n  disableJudgeTypeIcon,\n  showRationaleInTooltip = false,\n  showPassFailText = false,\n  hideAssessmentName = false,\n  iconOnly = false,\n  disableTooltip = false,\n  isRootCauseAssessment,\n  assessmentInfo,\n  type,\n  count,\n}: {\n  assessment?: RunEvaluationResultAssessment;\n  onEdit?: () => void;\n  active?: boolean;\n  disableJudgeTypeIcon?: boolean;\n  showRationaleInTooltip?: boolean;\n  showPassFailText?: boolean;\n  hideAssessmentName?: boolean;\n  iconOnly?: boolean;\n  disableTooltip?: boolean;\n  isRootCauseAssessment?: boolean;\n  assessmentInfo: AssessmentInfo;\n  type: 'value' | 'assessment-value';\n  count?: number;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const value = assessment ? getEvaluationResultAssessmentValue(assessment) : undefined;\n  const isPassing = useMemo(() => isAssessmentPassing(assessmentInfo, value), [value, assessmentInfo]);\n\n  const iconColor = getEvaluationResultIconColor(theme, assessmentInfo, assessment);\n  const textColor = getEvaluationResultTextColor(theme, assessmentInfo, assessment);\n\n  let errorMessage: string | undefined = undefined;\n  if (\n    assessment?.errorMessage ||\n    (isPassing === undefined && assessment && KnownEvaluationResultAssessmentValueMissingTooltip[assessment.name])\n  ) {\n    errorMessage =\n      assessment.errorMessage ||\n      intl.formatMessage(KnownEvaluationResultAssessmentValueMissingTooltip[assessment.name]);\n  }\n\n  const knownValueLabel = assessment ? KnownEvaluationResultAssessmentValueLabel[assessment.name] : undefined;\n  const assessmentTitle = useMemo(\n    () => (knownValueLabel ? intl.formatMessage(knownValueLabel) : assessment?.name),\n    [assessment, knownValueLabel, intl],\n  );\n  const learnMoreLink = useMemo(\n    () => (assessment ? getJudgeMetricsLink(ASSESSMENTS_DOC_LINKS[assessment.name]) : undefined),\n    [assessment],\n  );\n\n  const { makeHTML } = useMarkdownConverter();\n\n  const rationaleHTML = useMemo(() => {\n    const rationale = assessment?.rationale;\n    return isString(rationale) ? makeHTML(rationale) : undefined;\n  }, [assessment, makeHTML]);\n\n  const editedByHuman = useMemo(() => !isNil(assessment) && hasBeenEditedByHuman(assessment), [assessment]);\n\n  const { tagText, icon, fullTagText } = useMemo(\n    () =>\n      getAssessmentTagDisplayValue(theme, intl, type, assessmentInfo, editedByHuman, assessment, isRootCauseAssessment),\n    [theme, intl, type, assessmentInfo, assessment, isRootCauseAssessment, editedByHuman],\n  );\n\n  const tagContent = (\n    <>\n      {tagText}\n      {count && count > 1 ? ` (${count})` : ''}\n    </>\n  );\n\n  // Hide human assessment tags when not defined.\n  const hideTag = assessmentInfo.source?.sourceType === 'HUMAN' && !assessment?.source?.sourceId;\n  if (hideTag) {\n    return <></>;\n  }\n\n  const tagElement = (\n    <div>\n      <EvaluationsReviewTag\n        iconOnly={iconOnly}\n        hideAssessmentName={hideAssessmentName}\n        tagContent={tagContent}\n        active={active}\n        icon={icon}\n        iconColor={iconColor}\n        textColor={textColor}\n        sourceIcon={\n          assessmentInfo.isCustomMetric ? (\n            <BracketsXIcon />\n          ) : assessment && editedByHuman ? (\n            <UserIcon />\n          ) : (\n            <SparkleDoubleIcon />\n          )\n        }\n        backgroundColor={getEvaluationResultAssessmentBackgroundColor(theme, assessmentInfo, assessment)}\n        disableSourceTypeIcon={disableJudgeTypeIcon && !editedByHuman}\n        hasBeenEditedByHuman={editedByHuman}\n        onEdit={onEdit}\n      />\n    </div>\n  );\n\n  return (\n    <>\n      {disableTooltip ? (\n        tagElement\n      ) : (\n        <HoverCard\n          side=\"bottom\"\n          content={\n            <div\n              css={{\n                maxWidth: '25rem',\n                display: 'flex',\n                flexDirection: 'column',\n                overflowWrap: 'break-word',\n                wordBreak: 'break-word',\n                gap: theme.spacing.sm,\n              }}\n            >\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: theme.spacing.xs,\n                }}\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                  }}\n                >\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.sm,\n                      alignItems: 'center',\n                    }}\n                  >\n                    <Typography.Title\n                      css={{\n                        marginBottom: 0,\n                      }}\n                    >\n                      {assessmentTitle}\n                    </Typography.Title>\n                    <EvaluationsReviewTag\n                      iconOnly={iconOnly}\n                      hideAssessmentName={hideAssessmentName}\n                      tagContent={fullTagText ? fullTagText : tagContent}\n                      active={active}\n                      icon={icon}\n                      iconColor={iconColor}\n                      textColor={textColor}\n                      sourceIcon={\n                        assessmentInfo.isCustomMetric ? (\n                          <BracketsXIcon />\n                        ) : assessment && hasBeenEditedByHuman(assessment) ? (\n                          <UserIcon />\n                        ) : (\n                          <SparkleDoubleIcon />\n                        )\n                      }\n                      backgroundColor={getEvaluationResultAssessmentBackgroundColor(theme, assessmentInfo, assessment)}\n                      disableSourceTypeIcon={disableJudgeTypeIcon}\n                      hasBeenEditedByHuman={editedByHuman}\n                    />\n                  </div>\n                  {learnMoreLink && (\n                    <a\n                      href={learnMoreLink}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      css={{\n                        height: '16px',\n                      }}\n                    >\n                      <InfoSmallIcon />\n                    </a>\n                  )}\n                </div>\n                {isRootCauseAssessment && (\n                  <Typography.Hint>\n                    {intl.formatMessage({\n                      defaultMessage: 'This assessment is the root cause of the overall evaluation failure.',\n                      description:\n                        'Root cause assessment hint that explains that this assessment is causing the overall assessment to fail.',\n                    })}\n                  </Typography.Hint>\n                )}\n              </div>\n              {showRationaleInTooltip && assessment && rationaleHTML && (\n                <div>\n                  <>\n                    <span\n                      css={{\n                        display: 'contents',\n                        '& p': {\n                          marginBottom: 0,\n                        },\n                      }}\n                      // eslint-disable-next-line react/no-danger\n                      dangerouslySetInnerHTML={{ __html: rationaleHTML }}\n                    />\n                  </>\n                </div>\n              )}\n              {errorMessage && (\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.xs,\n                  }}\n                >\n                  <span\n                    css={{\n                      color: theme.colors.textValidationWarning,\n                      fontStyle: 'italic',\n                    }}\n                  >\n                    {errorMessage}\n                  </span>\n                </div>\n              )}\n            </div>\n          }\n          trigger={tagElement}\n        />\n      )}\n    </>\n  );\n};\n\nconst EvaluationsReviewTag = ({\n  iconOnly,\n  hideAssessmentName,\n  tagContent,\n  active,\n  sourceIcon,\n  icon,\n  iconColor,\n  textColor,\n  backgroundColor,\n  disableSourceTypeIcon,\n  hasBeenEditedByHuman,\n  onEdit,\n}: {\n  iconOnly: boolean;\n  hideAssessmentName: boolean;\n  tagContent: string | number | true | JSX.Element | undefined;\n  active?: boolean;\n  sourceIcon?: JSX.Element;\n  icon: JSX.Element;\n  iconColor: string;\n  textColor: string;\n  backgroundColor: string;\n  disableSourceTypeIcon?: boolean;\n  hasBeenEditedByHuman?: boolean;\n  onEdit?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const svgSize = iconOnly ? 18 : 12;\n\n  return (\n    <div\n      css={{\n        // TODO: Use <Badge /> when it's aligned with design\n        display: 'inline-flex',\n        height: iconOnly ? svgSize : 20,\n        width: iconOnly ? svgSize : hideAssessmentName ? 'fit-content' : '',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        padding: iconOnly ? '0' : onEdit ? '0 0 0 8px' : '0 8px',\n        gap: theme.spacing.sm,\n        borderRadius: iconOnly ? '50%' : theme.legacyBorders.borderRadiusMd,\n        backgroundColor: backgroundColor,\n        boxShadow: `inset 0 0 1px 1px ${active ? theme.colors.borderAccessible : 'transparent'}`,\n        // border: iconOnly ? '' : `1px solid ${getEvaluationBorderColor(theme, assessment)}`,\n        fontSize: theme.typography.fontSizeSm,\n        svg: { width: svgSize, height: svgSize },\n        whiteSpace: 'nowrap',\n      }}\n    >\n      {icon}\n      {tagContent && (\n        <span\n          css={{\n            color: textColor,\n          }}\n        >\n          {tagContent}\n        </span>\n      )}\n      {disableSourceTypeIcon !== true ? (\n        <span\n          css={{\n            color: iconColor,\n          }}\n        >\n          {sourceIcon}\n        </span>\n      ) : (\n        <></>\n      )}\n      {onEdit && (\n        <Button\n          componentId=\"mlflow.evaluations_review.edit_assessment_button\"\n          onClick={onEdit}\n          size=\"small\"\n          icon={\n            <PencilIcon\n              css={{\n                ':hover': {\n                  color: theme.colors.actionDefaultTextHover,\n                },\n              }}\n            />\n          }\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const RunColorCircle = React.memo(({ color, hidden }: { color: string; hidden?: boolean }) => {\n  return (\n    <label\n      css={{\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        flexShrink: 0,\n        border: '1px solid rgba(0, 0, 0, 0.1)',\n        cursor: 'default',\n        position: 'relative',\n      }}\n      style={{\n        backgroundColor: color,\n        display: hidden ? 'none' : '',\n      }}\n    >\n      <span\n        css={{\n          clip: 'rect(0px, 0px, 0px, 0px)',\n          clipPath: 'inset(50%)',\n          height: '1px',\n          overflow: 'hidden',\n          position: 'absolute',\n          whiteSpace: 'nowrap',\n          width: '1px',\n        }}\n      >\n        {color}\n      </span>\n    </label>\n  );\n});\n","import type { CellContext } from '@tanstack/react-table';\nimport { first, isNil } from 'lodash';\n\nimport type { ThemeType } from '@databricks/design-system';\nimport { ArrowRightIcon, Tag, Tooltip, Typography, UserIcon } from '@databricks/design-system';\nimport type { IntlShape } from '@databricks/i18n';\nimport type { ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\n\nimport { LoggedModelCell } from './LoggedModelCell';\nimport { NullCell } from './NullCell';\nimport { RunName } from './RunName';\nimport { SourceCellRenderer } from './Source/SourceRenderer';\nimport { StackedComponents } from './StackedComponents';\nimport { StatusCellRenderer } from './StatusRenderer';\nimport { TagsCellRenderer } from './Tags/TagsCellRenderer';\nimport { TokensCell } from './TokensCell';\nimport { getTraceInfoValueWithColId } from '../GenAiTracesTable.utils';\nimport { compareAssessmentValues, formatResponseTitle } from '../GenAiTracesTableBody.utils';\nimport { EvaluationsReviewAssessmentTag } from '../components/EvaluationsReviewAssessmentTag';\nimport {\n  getEvaluationResultAssessmentValue,\n  getEvaluationResultInputTitle,\n  KnownEvaluationResultAssessmentValueMissingTooltip,\n  stringifyValue,\n} from '../components/GenAiEvaluationTracesReview.utils';\nimport { RunColorCircle } from '../components/RunColorCircle';\nimport {\n  CUSTOM_METADATA_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  REQUEST_TIME_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  RUN_NAME_COLUMN_ID,\n  SESSION_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n  STATE_COLUMN_ID,\n  TAGS_COLUMN_ID,\n  TOKENS_COLUMN_ID,\n  TRACE_ID_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n  USER_COLUMN_ID,\n} from '../hooks/useTableColumns';\nimport { type AssessmentInfo, type EvalTraceComparisonEntry } from '../types';\nimport { getUniqueValueCountsBySourceId } from '../utils/AggregationUtils';\nimport { COMPARE_TO_RUN_COLOR, CURRENT_RUN_COLOR } from '../utils/Colors';\nimport { timeSinceStr } from '../utils/DisplayUtils';\nimport { shouldEnableTagGrouping } from '../utils/FeatureUtils';\nimport {\n  convertTraceInfoV3ToModelTraceInfo,\n  getCustomMetadataKeyFromColumnId,\n  getTagKeyFromColumnId,\n  getTraceInfoOutputs,\n  MLFLOW_SOURCE_RUN_KEY,\n} from '../utils/TraceUtils';\n\nexport const assessmentCellRenderer = (\n  theme: ThemeType,\n  intl: IntlShape,\n  isComparing: boolean,\n  assessmentInfo: AssessmentInfo,\n  comparisonEntry: EvalTraceComparisonEntry,\n) => {\n  const assessmentName = assessmentInfo.name;\n  const assessment = {\n    currentValue: first(comparisonEntry.currentRunValue?.responseAssessmentsByName[assessmentName]),\n    otherValue: first(comparisonEntry.otherRunValue?.responseAssessmentsByName[assessmentName]),\n  };\n\n  const uniqueValueCounts = getUniqueValueCountsBySourceId(\n    assessmentInfo,\n    comparisonEntry.currentRunValue?.responseAssessmentsByName[assessmentName] || [],\n  );\n\n  const currentIsAssessmentRootCause =\n    comparisonEntry.currentRunValue?.overallAssessments[0]?.rootCauseAssessment?.assessmentName === assessmentName;\n  const otherIsAssessmentRootCause =\n    comparisonEntry.otherRunValue?.overallAssessments[0]?.rootCauseAssessment?.assessmentName === assessmentName;\n\n  const currentValue = assessment.currentValue\n    ? getEvaluationResultAssessmentValue(assessment.currentValue)\n    : undefined;\n  const otherValue = assessment.otherValue ? getEvaluationResultAssessmentValue(assessment.otherValue) : undefined;\n  const assessmentComparison = compareAssessmentValues(\n    assessmentInfo,\n    isNil(currentValue) ? undefined : currentValue,\n    isNil(otherValue) ? undefined : otherValue,\n  );\n\n  const assessmentChanged = otherValue !== currentValue;\n\n  const missingTooltip = KnownEvaluationResultAssessmentValueMissingTooltip[assessmentName];\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n        marginTop: 'auto',\n        marginBottom: 'auto',\n      }}\n    >\n      {isComparing ? (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n            borderRadius: theme.legacyBorders.borderRadiusMd,\n            marginTop: 'auto',\n            marginBottom: 'auto',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.sm,\n              alignItems: 'center',\n            }}\n          >\n            <EvaluationsReviewAssessmentTag\n              key={`tag_${comparisonEntry.currentRunValue?.evaluationId}_${assessment.currentValue?.name}`}\n              showRationaleInTooltip\n              disableJudgeTypeIcon\n              hideAssessmentName\n              assessment={assessment.currentValue}\n              isRootCauseAssessment={currentIsAssessmentRootCause}\n              assessmentInfo={assessmentInfo}\n              type=\"value\"\n            />\n            {assessmentChanged && (\n              <ArrowRightIcon\n                css={{\n                  // Rotate by 45 degrees when the current is passing\n                  transform: assessmentComparison === 'greater' ? 'rotate(-45deg)' : 'rotate(45deg)',\n                  color: theme.colors.textSecondary,\n                }}\n              />\n            )}\n          </div>\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.sm,\n              alignItems: 'center',\n            }}\n          >\n            <EvaluationsReviewAssessmentTag\n              key={`tag_${comparisonEntry.otherRunValue?.evaluationId}_${assessment.currentValue?.name}`}\n              showRationaleInTooltip\n              disableJudgeTypeIcon\n              hideAssessmentName\n              assessment={assessment.otherValue}\n              isRootCauseAssessment={otherIsAssessmentRootCause}\n              assessmentInfo={assessmentInfo}\n              type=\"value\"\n            />\n            {/* This invisible icon aligns the values. */}\n            {assessmentChanged && (\n              <ArrowRightIcon\n                css={{\n                  visibility: 'hidden',\n                }}\n              />\n            )}\n          </div>\n        </div>\n      ) : assessment.currentValue ? (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n          }}\n        >\n          {uniqueValueCounts.map((uniqueValueCount) => {\n            const assessment = uniqueValueCount.latestAssessment;\n            const count = uniqueValueCount.count;\n            return (\n              <EvaluationsReviewAssessmentTag\n                key={`tag_${uniqueValueCount.latestAssessment.name}_${uniqueValueCount.value}`}\n                showRationaleInTooltip\n                disableJudgeTypeIcon\n                hideAssessmentName\n                assessment={assessment}\n                isRootCauseAssessment={currentIsAssessmentRootCause}\n                assessmentInfo={assessmentInfo}\n                type=\"value\"\n                count={count}\n              />\n            );\n          })}\n        </div>\n      ) : (\n        <EvaluationsReviewAssessmentTag\n          key={`tag_${assessmentName}_${comparisonEntry.currentRunValue?.evaluationId}`}\n          showRationaleInTooltip\n          disableJudgeTypeIcon\n          hideAssessmentName\n          isRootCauseAssessment={currentIsAssessmentRootCause}\n          assessmentInfo={assessmentInfo}\n          assessment={{\n            name: assessmentName,\n            rationale: missingTooltip\n              ? intl.formatMessage(missingTooltip)\n              : intl.formatMessage({\n                  defaultMessage: 'No assessment for this evaluation',\n                  description: 'Text displayed when there is no assessment for a given evaluation',\n                }),\n            source: {\n              sourceId: '',\n              sourceType: 'AI_JUDGE',\n              metadata: {},\n            },\n            stringValue: null,\n            booleanValue: null,\n            rootCauseAssessment: null,\n            numericValue: null,\n            timestamp: null,\n            metadata: {},\n          }}\n          type=\"value\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport const inputColumnCellRenderer = (\n  onChangeEvaluationId: (evaluationId: string | undefined) => void,\n  row: CellContext<EvalTraceComparisonEntry, unknown>,\n  isComparing: boolean,\n  theme: ThemeType,\n  inputColumn: string,\n  getRunColor?: (runUuid: string) => string,\n) => {\n  const value = row.getValue() as EvalTraceComparisonEntry;\n  const evalId = value.currentRunValue?.evaluationId || value.otherRunValue?.evaluationId;\n\n  // fetch colors if possible\n  const currentRunUuid = value.currentRunValue?.traceInfo?.trace_metadata?.[MLFLOW_SOURCE_RUN_KEY];\n  const otherRunUuid = value.otherRunValue?.traceInfo?.trace_metadata?.[MLFLOW_SOURCE_RUN_KEY];\n  const currentRunColor = getRunColor && currentRunUuid ? getRunColor(currentRunUuid) : CURRENT_RUN_COLOR;\n  const otherRunColor = getRunColor && otherRunUuid ? getRunColor(otherRunUuid) : COMPARE_TO_RUN_COLOR;\n\n  const currentInputColumnTitle = value.currentRunValue\n    ? getEvaluationResultInputTitle(value.currentRunValue, inputColumn)\n    : undefined;\n\n  const otherInputColumnTitle = value.otherRunValue\n    ? getEvaluationResultInputTitle(value.otherRunValue, inputColumn)\n    : undefined;\n\n  const inputColumnTitle = currentInputColumnTitle || otherInputColumnTitle;\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        overflow: 'hidden',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Typography.Link\n        css={{\n          display: 'block',\n          overflow: 'hidden',\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis',\n        }}\n        componentId=\"mlflow.evaluations_review.table_ui.evaluation_id_link\"\n        onClick={() => onChangeEvaluationId(evalId)}\n      >\n        {inputColumnTitle ? (\n          inputColumnTitle\n        ) : (\n          <span\n            css={{\n              fontStyle: 'italic',\n            }}\n          >\n            null\n          </span>\n        )}\n      </Typography.Link>\n      {isComparing && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.md,\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n            }}\n          >\n            {currentRunUuid ? <RunColorCircle color={currentRunColor} /> : <div css={{ width: 12, height: 12 }} />}\n          </div>\n          <div\n            css={{\n              display: 'flex',\n            }}\n          >\n            {otherRunUuid ? <RunColorCircle color={otherRunColor} /> : <div css={{ width: 12, height: 12 }} />}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const traceInfoCellRenderer = (\n  experimentId: string,\n  isComparing: boolean,\n  colId: string,\n  comparisonEntry: EvalTraceComparisonEntry,\n  onChangeEvaluationId: (evalId: string) => void,\n  theme: ThemeType,\n  onTraceTagsEdit?: (trace: ModelTraceInfo) => void,\n) => {\n  const currentTraceInfo = comparisonEntry.currentRunValue?.traceInfo;\n  const otherTraceInfo = isComparing ? comparisonEntry.otherRunValue?.traceInfo : undefined;\n\n  if (colId === REQUEST_TIME_COLUMN_ID) {\n    const date = currentTraceInfo?.request_time ? new Date(currentTraceInfo.request_time) : undefined;\n    const otherDate = otherTraceInfo?.request_time ? new Date(otherTraceInfo.request_time) : undefined;\n\n    return (\n      <StackedComponents\n        first={\n          date ? (\n            <Tooltip\n              componentId=\"mlflow.experiment-evaluation-monitoring.trace-info-hover-request-time\"\n              content={date.toLocaleString(navigator.language, { timeZoneName: 'short' })}\n            >\n              <span css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n                {timeSinceStr(date)}\n              </span>\n            </Tooltip>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherDate ? (\n            <Tooltip\n              componentId=\"mlflow.experiment-evaluation-monitoring.trace-info-hover-other-request-time\"\n              content={otherDate.toLocaleString(navigator.language, { timeZoneName: 'short' })}\n            >\n              <span css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n                {timeSinceStr(otherDate)}\n              </span>\n            </Tooltip>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === STATE_COLUMN_ID) {\n    return (\n      <StackedComponents\n        first={<StatusCellRenderer original={currentTraceInfo} isComparing={isComparing} />}\n        second={\n          isComparing &&\n          (otherTraceInfo ? (\n            <StatusCellRenderer original={otherTraceInfo} isComparing={isComparing} />\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === SOURCE_COLUMN_ID) {\n    return (\n      <StackedComponents\n        first={\n          currentTraceInfo ? (\n            <SourceCellRenderer traceInfo={currentTraceInfo} isComparing={isComparing} />\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherTraceInfo ? (\n            <SourceCellRenderer traceInfo={otherTraceInfo} isComparing={isComparing} />\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === TAGS_COLUMN_ID) {\n    const tagsArr: { key: string; value: string }[] = Object.entries(currentTraceInfo?.tags || {}).map(\n      ([key, value]) => ({\n        key,\n        value,\n      }),\n    );\n\n    const otherTagsArr: { key: string; value: string }[] = Object.entries(otherTraceInfo?.tags || {}).map(\n      ([key, value]) => ({\n        key,\n        value,\n      }),\n    );\n\n    // We only support editing tags in single trace mode\n    const onAddEditTags = !otherTraceInfo\n      ? () => onTraceTagsEdit?.(currentTraceInfo ? convertTraceInfoV3ToModelTraceInfo(currentTraceInfo) : {})\n      : undefined;\n\n    return (\n      <StackedComponents\n        first={<TagsCellRenderer baseComponentId=\"tags-cell-renderer\" tags={tagsArr} onAddEditTags={onAddEditTags} />}\n        second={\n          isComparing &&\n          (otherTraceInfo ? (\n            <TagsCellRenderer baseComponentId=\"tags-cell-renderer-other\" tags={otherTagsArr} />\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (shouldEnableTagGrouping() && colId.startsWith(TAGS_COLUMN_ID)) {\n    const tagKey = getTagKeyFromColumnId(colId);\n    if (!tagKey) {\n      return <NullCell isComparing={isComparing} />;\n    }\n    const tagValue = currentTraceInfo?.tags?.[tagKey];\n    const otherTagValue = otherTraceInfo?.tags?.[tagKey];\n    return (\n      <StackedComponents\n        first={\n          tagValue ? (\n            <span\n              title={tagValue}\n              css={{\n                display: 'block',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              {tagValue}\n            </span>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherTagValue ? (\n            <span\n              title={tagValue}\n              css={{\n                display: 'block',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              {otherTagValue}\n            </span>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === TRACE_NAME_COLUMN_ID) {\n    const evalId = comparisonEntry.currentRunValue?.evaluationId;\n\n    const currentTraceName = currentTraceInfo?.tags?.['mlflow.traceName'];\n    const otherTraceName = otherTraceInfo?.tags?.['mlflow.traceName'];\n\n    return (\n      <StackedComponents\n        first={\n          currentTraceName ? (\n            !isComparing ? (\n              <Typography.Link\n                css={{\n                  display: 'block',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                }}\n                componentId=\"mlflow.evaluations_review.table_ui.evaluation_id_link\"\n                onClick={() => evalId && onChangeEvaluationId(evalId)}\n              >\n                {currentTraceInfo?.tags?.['mlflow.traceName']}\n              </Typography.Link>\n            ) : (\n              <div>{currentTraceInfo?.tags?.['mlflow.traceName']}</div>\n            )\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={isComparing && (otherTraceName ? <div>{otherTraceName}</div> : <NullCell isComparing={isComparing} />)}\n      />\n    );\n  } else if (colId === RUN_NAME_COLUMN_ID) {\n    // This column is only shown on experiment level traces which does not support comparison mode\n\n    const runUuid = currentTraceInfo?.trace_metadata?.[MLFLOW_SOURCE_RUN_KEY];\n\n    if (!runUuid) {\n      return <NullCell />;\n    }\n\n    return <RunName experimentId={experimentId} runUuid={runUuid} />;\n  } else if (colId === USER_COLUMN_ID) {\n    const value = currentTraceInfo?.trace_metadata?.['mlflow.trace.user'] || currentTraceInfo?.tags?.['mlflow.user'];\n    const otherValue = otherTraceInfo?.trace_metadata?.['mlflow.trace.user'] || otherTraceInfo?.tags?.['mlflow.user'];\n\n    return (\n      <StackedComponents\n        first={\n          value ? (\n            <span\n              css={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: theme.spacing.xs,\n              }}\n              title={value}\n            >\n              <UserIcon css={{ color: theme.colors.textSecondary, fontSize: 16 }} />\n              <span css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>{value}</span>\n            </span>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherValue ? (\n            <span\n              css={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: theme.spacing.xs,\n              }}\n              title={otherValue}\n            >\n              <UserIcon css={{ color: theme.colors.textSecondary, fontSize: 16 }} />\n              <span css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>{otherValue}</span>\n            </span>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === TRACE_ID_COLUMN_ID) {\n    const value = currentTraceInfo?.trace_id;\n    const otherValue = otherTraceInfo?.trace_id;\n    return (\n      <StackedComponents\n        first={\n          value ? (\n            <Tag\n              css={{ width: 'fit-content', maxWidth: '100%' }}\n              componentId=\"mlflow.genai-traces-table.trace-id\"\n              color=\"indigo\"\n              title={value}\n            >\n              <span\n                css={{\n                  display: 'block',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {value}\n              </span>\n            </Tag>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherValue ? (\n            <Tag\n              css={{ width: 'fit-content', maxWidth: '100%' }}\n              componentId=\"mlflow.genai-traces-table.trace-id\"\n              color=\"indigo\"\n              title={otherValue}\n            >\n              <span\n                css={{\n                  display: 'inline-block',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {otherValue}\n              </span>\n            </Tag>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === SESSION_COLUMN_ID) {\n    const value = currentTraceInfo?.trace_metadata?.['mlflow.trace.session'];\n    const otherValue = otherTraceInfo?.trace_metadata?.['mlflow.trace.session'];\n    return (\n      <StackedComponents\n        first={\n          value ? (\n            <Tag\n              css={{ width: 'fit-content', maxWidth: '100%' }}\n              componentId=\"mlflow.genai-traces-table.session\"\n              title={value}\n            >\n              <span\n                css={{\n                  display: 'inline-block',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {value}\n              </span>\n            </Tag>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherValue ? (\n            <Tag\n              css={{ width: 'fit-content', maxWidth: '100%' }}\n              componentId=\"mlflow.genai-traces-table.session\"\n              title={otherValue}\n            >\n              <span\n                css={{\n                  display: 'inline-block',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {otherValue}\n              </span>\n            </Tag>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === RESPONSE_COLUMN_ID) {\n    const value = currentTraceInfo ? formatResponseTitle(getTraceInfoOutputs(currentTraceInfo)) : '';\n    const otherValue = otherTraceInfo ? formatResponseTitle(getTraceInfoOutputs(otherTraceInfo)) : '';\n    return (\n      <StackedComponents\n        first={\n          value ? (\n            <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={value}>\n              {value}\n            </div>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherValue ? (\n            <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={otherValue}>\n              {otherValue}\n            </div>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  } else if (colId === LOGGED_MODEL_COLUMN_ID) {\n    return (\n      <LoggedModelCell\n        experimentId={experimentId}\n        currentTraceInfo={currentTraceInfo}\n        otherTraceInfo={otherTraceInfo}\n        isComparing={isComparing}\n      />\n    );\n  } else if (colId === TOKENS_COLUMN_ID) {\n    return <TokensCell currentTraceInfo={currentTraceInfo} otherTraceInfo={otherTraceInfo} isComparing={isComparing} />;\n  } else if (colId.startsWith(CUSTOM_METADATA_COLUMN_ID)) {\n    const metadataKey = getCustomMetadataKeyFromColumnId(colId);\n    if (!metadataKey) {\n      return <NullCell isComparing={isComparing} />;\n    }\n    const value = currentTraceInfo?.trace_metadata?.[metadataKey];\n    const otherValue = otherTraceInfo?.trace_metadata?.[metadataKey];\n    return (\n      <StackedComponents\n        first={\n          value ? (\n            <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={value}>\n              {value}\n            </div>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          )\n        }\n        second={\n          isComparing &&\n          (otherValue ? (\n            <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={otherValue}>\n              {otherValue}\n            </div>\n          ) : (\n            <NullCell isComparing={isComparing} />\n          ))\n        }\n      />\n    );\n  }\n  const value = currentTraceInfo ? stringifyValue(getTraceInfoValueWithColId(currentTraceInfo, colId)) : '';\n  const otherValue = otherTraceInfo ? stringifyValue(getTraceInfoValueWithColId(otherTraceInfo, colId)) : '';\n\n  return (\n    <StackedComponents\n      first={\n        value ? (\n          <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={value}>\n            {value}\n          </div>\n        ) : (\n          <NullCell isComparing={isComparing} />\n        )\n      }\n      second={\n        isComparing &&\n        (otherValue ? (\n          <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }} title={otherValue}>\n            {otherValue}\n          </div>\n        ) : (\n          <NullCell isComparing={isComparing} />\n        ))\n      }\n    />\n  );\n};\n","import type { ColumnDef } from '@tanstack/react-table';\nimport { isNil } from 'lodash';\n\nimport type { ThemeType } from '@databricks/design-system';\nimport { Tooltip } from '@databricks/design-system';\nimport type { IntlShape } from '@databricks/i18n';\n\nimport { traceInfoSortingFn } from './GenAiTracesTable.utils';\nimport {\n  assessmentCellRenderer,\n  inputColumnCellRenderer,\n  traceInfoCellRenderer,\n} from './cellRenderers/rendererFunctions';\nimport {\n  getEvaluationResultAssessmentValue,\n  KnownEvaluationResultAssessmentStringValue,\n  stringifyValue,\n} from './components/GenAiEvaluationTracesReview.utils';\nimport { RESPONSE_COLUMN_ID } from './hooks/useTableColumns';\nimport { TracesTableColumnType } from './types';\nimport type {\n  AssessmentValueType,\n  EvalTraceComparisonEntry,\n  TracesTableColumn,\n  AssessmentInfo,\n  RunEvaluationResultAssessment,\n} from './types';\nimport { timeSinceStr } from './utils/DisplayUtils';\nimport type { ModelTraceInfo } from '../model-trace-explorer';\n\nconst DEFAULT_ASSESSMENT_CELL_WIDTH_PX = 120;\nconst DEFAULT_ASSESSMENTS_CELL_WIDTH_COMPARE_PX = 120;\nconst MAX_ASSESSMENT_COLUMN_SIZE = 200;\nconst DEFAULT_INPUT_COLUMNS_TOTAL_WIDTH_PX = 300;\n\nexport function compareAssessmentValues(\n  assessmentInfo: AssessmentInfo,\n  a: AssessmentValueType,\n  b: AssessmentValueType,\n): 'greater' | 'less' | 'equal' {\n  if (assessmentInfo.dtype === 'pass-fail') {\n    if (a === b) {\n      return 'equal';\n    }\n    if (a === KnownEvaluationResultAssessmentStringValue.YES) {\n      return 'greater';\n    } else if (a === KnownEvaluationResultAssessmentStringValue.NO) {\n      return 'less';\n    } else {\n      return !isNil(b) ? 'less' : 'equal';\n    }\n  } else if (assessmentInfo.dtype === 'boolean') {\n    if (a === b) {\n      return 'equal';\n    }\n    if (a === true) {\n      return 'greater';\n    } else if (a === false) {\n      return 'less';\n    } else {\n      return !isNil(b) ? 'less' : 'equal';\n    }\n  } else if (assessmentInfo.dtype === 'string') {\n    // Compare the strings in alphabetical sort order.\n    if (a === b) {\n      return 'equal';\n    }\n    if (a === null) {\n      return 'less';\n    }\n    if (b === null) {\n      return 'greater';\n    }\n    const aString = a as string | undefined;\n    const bString = b as string | undefined;\n    if (isNil(aString)) {\n      return 'less';\n    } else if (isNil(bString)) {\n      return 'greater';\n    }\n    return aString.toString().localeCompare(bString.toString()) === 1 ? 'greater' : 'less';\n  } else if (assessmentInfo.dtype === 'numeric') {\n    if (a === b) {\n      return 'equal';\n    }\n    if (a === null) {\n      return 'less';\n    }\n    if (b === null) {\n      return 'greater';\n    }\n    const aNumber = a as number;\n    const bNumber = b as number;\n    return aNumber > bNumber ? 'greater' : 'less';\n  }\n\n  return 'equal';\n}\n\nexport const formatResponseTitle = (outputs: string) => {\n  let outputsTitle = outputs;\n\n  try {\n    const parsedOutputs = JSON.parse(outputs);\n\n    // Try to parse OpenAI messages\n    const choices = parsedOutputs['response']['choices'];\n    if (Array.isArray(choices) && !isNil(choices[0]?.message?.content)) {\n      outputsTitle = choices[0]?.message?.content;\n    } else {\n      outputsTitle = stringifyValue(outputs);\n    }\n  } catch {\n    outputsTitle = stringifyValue(outputs);\n  }\n\n  return outputsTitle;\n};\n\nexport const getColumnConfig = (\n  col: TracesTableColumn,\n  {\n    evaluationInputs,\n    isComparing,\n    theme,\n    intl,\n    experimentId,\n    onChangeEvaluationId,\n    onTraceTagsEdit,\n  }: {\n    evaluationInputs: TracesTableColumn[];\n    isComparing: boolean;\n    theme: ThemeType;\n    intl: IntlShape;\n    experimentId: string;\n    onChangeEvaluationId: (evaluationId: string | undefined) => void;\n    onTraceTagsEdit?: (trace: ModelTraceInfo) => void;\n  },\n): ColumnDef<EvalTraceComparisonEntry> => {\n  const baseColConfig: ColumnDef<EvalTraceComparisonEntry> = {\n    header: col.label,\n    id: col.id,\n    accessorFn: (originalRow) => originalRow,\n  };\n\n  switch (col.type) {\n    case TracesTableColumnType.INPUT:\n      return {\n        ...baseColConfig,\n        sortingFn: (a, b) => {\n          const aValue = a.getValue(col.id) as EvalTraceComparisonEntry;\n          const bValue = b.getValue(col.id) as EvalTraceComparisonEntry;\n          const aSortValue = {\n            request: aValue.currentRunValue?.inputs[col.id] || aValue.otherRunValue?.inputs[col.id] || '',\n            evalId: aValue.currentRunValue?.evaluationId || aValue.otherRunValue?.evaluationId || '',\n          };\n          const bSortValue = {\n            request: bValue.currentRunValue?.inputs[col.id] || bValue.otherRunValue?.inputs[col.id] || '',\n            evalId: bValue.currentRunValue?.evaluationId || bValue.otherRunValue?.evaluationId || '',\n          };\n\n          return JSON.stringify(aSortValue).localeCompare(JSON.stringify(bSortValue));\n        },\n        size: DEFAULT_INPUT_COLUMNS_TOTAL_WIDTH_PX / evaluationInputs.length,\n        minSize: 120,\n        cell: (cell) =>\n          inputColumnCellRenderer(\n            onChangeEvaluationId,\n            cell,\n            isComparing,\n            theme,\n            col.id,\n            (cell.table.options.meta as any)?.getRunColor,\n          ),\n      };\n    case TracesTableColumnType.ASSESSMENT:\n      return {\n        ...baseColConfig,\n        accessorFn: (originalRow) => {\n          return { isComparing, assessmentInfo: col.assessmentInfo, comparisonEntry: originalRow };\n        },\n        sortingFn: (a, b) => {\n          const { comparisonEntry: aValue } = a.getValue(col.id) as {\n            comparisonEntry: EvalTraceComparisonEntry;\n          };\n          const { comparisonEntry: bValue } = b.getValue(col.id) as {\n            comparisonEntry: EvalTraceComparisonEntry;\n          };\n          if (col.assessmentInfo) {\n            const aAssessment = {\n              currentValue: aValue.currentRunValue?.responseAssessmentsByName[col.assessmentInfo.name]?.[0],\n              otherValue: aValue.otherRunValue?.responseAssessmentsByName[col.assessmentInfo.name]?.[0],\n            };\n            const bAssessment = {\n              currentValue: bValue.currentRunValue?.responseAssessmentsByName[col.assessmentInfo.name]?.[0],\n              otherValue: bValue.otherRunValue?.responseAssessmentsByName[col.assessmentInfo.name]?.[0],\n            };\n            return sortCompareAssessments(col.assessmentInfo, aAssessment, bAssessment);\n          }\n          return 0;\n        },\n        maxSize: MAX_ASSESSMENT_COLUMN_SIZE,\n        size: isComparing ? DEFAULT_ASSESSMENTS_CELL_WIDTH_COMPARE_PX : DEFAULT_ASSESSMENT_CELL_WIDTH_PX,\n        minSize: isComparing ? DEFAULT_ASSESSMENTS_CELL_WIDTH_COMPARE_PX : DEFAULT_ASSESSMENT_CELL_WIDTH_PX,\n        cell: (cell) => {\n          const { isComparing, assessmentInfo, comparisonEntry } = cell.getValue() as {\n            isComparing: boolean;\n            assessmentInfo: AssessmentInfo;\n            comparisonEntry: EvalTraceComparisonEntry;\n          };\n          return assessmentCellRenderer(theme, intl, isComparing, assessmentInfo, comparisonEntry);\n        },\n      };\n    case TracesTableColumnType.TRACE_INFO:\n      return {\n        ...baseColConfig,\n        accessorFn: (originalRow) => {\n          return { isComparing, comparisonEntry: originalRow };\n        },\n        sortingFn: (a, b) => {\n          const { comparisonEntry: aValue } = a.getValue(col.id) as {\n            comparisonEntry: EvalTraceComparisonEntry;\n          };\n          const { comparisonEntry: bValue } = b.getValue(col.id) as {\n            comparisonEntry: EvalTraceComparisonEntry;\n          };\n\n          return traceInfoSortingFn(aValue?.currentRunValue?.traceInfo, bValue?.currentRunValue?.traceInfo, col.id);\n        },\n        size: col.id === RESPONSE_COLUMN_ID ? 300 : 100,\n        minSize: col.id === RESPONSE_COLUMN_ID ? 120 : 100,\n        cell: (cell) => {\n          const { isComparing, comparisonEntry } = cell.getValue() as {\n            isComparing: boolean;\n            comparisonEntry: EvalTraceComparisonEntry;\n          };\n\n          return traceInfoCellRenderer(\n            experimentId,\n            isComparing,\n            col.id,\n            comparisonEntry,\n            onChangeEvaluationId,\n            theme,\n            onTraceTagsEdit,\n          );\n        },\n      };\n    case TracesTableColumnType.INTERNAL_MONITOR_REQUEST_TIME:\n      return {\n        ...baseColConfig,\n        accessorFn: (originalRow) => originalRow.currentRunValue?.requestTime,\n        sortingFn: (a, b) => {\n          const aValue = a.getValue(col.id);\n          const bValue = b.getValue(col.id);\n          return JSON.stringify(aValue).localeCompare(JSON.stringify(bValue));\n        },\n        size: 100,\n        minSize: 100,\n        cell: (cell) => {\n          const requestTime = cell.getValue() as string | undefined;\n          if (!requestTime) {\n            return null;\n          }\n          const date = new Date(requestTime);\n          return (\n            <Tooltip\n              componentId=\"mlflow.experiment-evaluation-monitoring.trace-info-hover-request-time\"\n              content={date.toLocaleString(navigator.language, { timeZoneName: 'short' })}\n            >\n              <span>{timeSinceStr(date)}</span>\n            </Tooltip>\n          );\n        },\n      };\n    default:\n      return baseColConfig;\n  }\n};\n\nexport function sortCompareAssessments(\n  assessmentInfo: AssessmentInfo,\n  a: {\n    currentValue?: RunEvaluationResultAssessment;\n    otherValue?: RunEvaluationResultAssessment;\n  },\n  b: {\n    currentValue?: RunEvaluationResultAssessment;\n    otherValue?: RunEvaluationResultAssessment;\n  },\n) {\n  const aCurrentValue = a.currentValue ? getEvaluationResultAssessmentValue(a.currentValue) : undefined;\n  const bCurrentValue = b.currentValue ? getEvaluationResultAssessmentValue(b.currentValue) : undefined;\n  const aOtherValue = a.otherValue ? getEvaluationResultAssessmentValue(a.otherValue) : undefined;\n  const bOtherValue = b.otherValue ? getEvaluationResultAssessmentValue(b.otherValue) : undefined;\n\n  if (assessmentInfo.dtype === 'pass-fail') {\n    // Priorities:\n    // Pass => Fail\n    // Fail\n    // Fail => Pass\n    // Pass\n    const aIsPassToFail =\n      aOtherValue === KnownEvaluationResultAssessmentStringValue.YES &&\n      aCurrentValue === KnownEvaluationResultAssessmentStringValue.NO;\n    const bIsPassToFail =\n      bOtherValue === KnownEvaluationResultAssessmentStringValue.YES &&\n      bCurrentValue === KnownEvaluationResultAssessmentStringValue.NO;\n    const aIsFailToPass =\n      aOtherValue === KnownEvaluationResultAssessmentStringValue.NO &&\n      aCurrentValue === KnownEvaluationResultAssessmentStringValue.YES;\n    const bIsFailToPass =\n      bOtherValue === KnownEvaluationResultAssessmentStringValue.NO &&\n      bCurrentValue === KnownEvaluationResultAssessmentStringValue.YES;\n    const aIsFailToFail =\n      aOtherValue === KnownEvaluationResultAssessmentStringValue.NO &&\n      aCurrentValue === KnownEvaluationResultAssessmentStringValue.NO;\n    const bIsFailToFail =\n      bOtherValue === KnownEvaluationResultAssessmentStringValue.NO &&\n      bCurrentValue === KnownEvaluationResultAssessmentStringValue.NO;\n    const aIsPassToPass =\n      aOtherValue === KnownEvaluationResultAssessmentStringValue.YES &&\n      aCurrentValue === KnownEvaluationResultAssessmentStringValue.YES;\n    const bIsPassToPass =\n      bOtherValue === KnownEvaluationResultAssessmentStringValue.YES &&\n      bCurrentValue === KnownEvaluationResultAssessmentStringValue.YES;\n\n    // Sort according to priority\n    if (aIsPassToFail && !bIsPassToFail) return -1;\n    if (!aIsPassToFail && bIsPassToFail) return 1;\n\n    if (aIsFailToFail && !bIsFailToFail) return -1;\n    if (!aIsFailToFail && bIsFailToFail) return 1;\n\n    if (aIsFailToPass && !bIsFailToPass) return -1;\n    if (!aIsFailToPass && bIsFailToPass) return 1;\n\n    if (aIsPassToPass && !bIsPassToPass) return -1;\n    if (!aIsPassToPass && bIsPassToPass) return 1;\n\n    return sortPassFailAssessments(a.currentValue, b.currentValue);\n  } else {\n    if (aCurrentValue === bCurrentValue) {\n      return 0;\n    }\n    if (!isNil(aCurrentValue) && !isNil(bCurrentValue)) {\n      return aCurrentValue > bCurrentValue ? 1 : -1;\n    } else {\n      return isNil(aCurrentValue) ? -1 : 1;\n    }\n  }\n}\n\nfunction sortPassFailAssessments(a?: RunEvaluationResultAssessment, b?: RunEvaluationResultAssessment) {\n  if (!a && b) {\n    return 1;\n  } else if (a && !b) {\n    return -1;\n  }\n  if (!a || !b) {\n    return 0;\n  }\n\n  const aIsPassing =\n    a.stringValue === KnownEvaluationResultAssessmentStringValue.YES\n      ? true\n      : a.stringValue === KnownEvaluationResultAssessmentStringValue.NO\n      ? false\n      : undefined;\n  const bIsPassing =\n    b.stringValue === KnownEvaluationResultAssessmentStringValue.YES\n      ? true\n      : b.stringValue === KnownEvaluationResultAssessmentStringValue.NO\n      ? false\n      : undefined;\n\n  if (aIsPassing === bIsPassing) {\n    return 0;\n  }\n  // Null values get sorted last.\n  if (aIsPassing === undefined) {\n    return 1;\n  }\n  if (bIsPassing === undefined) {\n    return -1;\n  }\n  return aIsPassing ? 1 : -1;\n}\n","import { flexRender } from '@tanstack/react-table';\nimport type { Cell, Row, RowSelectionState } from '@tanstack/react-table';\nimport type { VirtualItem } from '@tanstack/react-virtual';\nimport React from 'react';\n\nimport { TableCell, TableRow, TableRowSelectCell, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport type { TracesTableColumn, EvalTraceComparisonEntry } from './types';\nimport { escapeCssSpecialCharacters } from './utils/DisplayUtils';\n\ninterface GenAiTracesTableBodyRowsProps {\n  rows: Row<EvalTraceComparisonEntry>[];\n  isComparing: boolean;\n  enableRowSelection?: boolean;\n  virtualItems: VirtualItem<Element>[];\n  virtualizerTotalSize: number;\n  virtualizerMeasureElement: (node: HTMLDivElement | null) => void;\n  // eslint-disable-next-line react/no-unused-prop-types\n  rowSelectionState: RowSelectionState | undefined;\n  selectedColumns: TracesTableColumn[];\n}\n\nexport const GenAiTracesTableBodyRows = React.memo(\n  ({\n    rows,\n    isComparing,\n    enableRowSelection,\n    virtualItems,\n    virtualizerTotalSize,\n    virtualizerMeasureElement,\n    selectedColumns,\n  }: GenAiTracesTableBodyRowsProps) => {\n    return (\n      <div\n        style={{\n          height: `${virtualizerTotalSize}px`, // tells scrollbar how big the table is\n          position: 'relative', // needed for absolute positioning of rows\n          display: 'grid',\n        }}\n      >\n        {virtualItems.map((virtualRow) => {\n          const row = rows[virtualRow.index] as Row<EvalTraceComparisonEntry>;\n          const exportableTrace = row.original.currentRunValue && !isComparing;\n          return (\n            <div\n              key={virtualRow.key}\n              data-index={virtualRow.index}\n              ref={(node) => virtualizerMeasureElement(node)}\n              style={{\n                position: 'absolute',\n                transform: `translate3d(0, ${virtualRow.start}px, 0)`,\n                willChange: 'transform',\n                width: '100%',\n              }}\n            >\n              <GenAiTracesTableBodyRow\n                row={row}\n                exportableTrace={exportableTrace}\n                enableRowSelection={enableRowSelection}\n                isSelected={enableRowSelection ? row.getIsSelected() : undefined}\n                isComparing={isComparing}\n                selectedColumns={selectedColumns}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\n\n// Memoized wrapper for the body rows which is used during column resizing\nexport const MemoizedGenAiTracesTableBodyRows = React.memo(GenAiTracesTableBodyRows) as typeof GenAiTracesTableBodyRows;\n\nexport const GenAiTracesTableBodyRow = React.memo(\n  ({\n    row,\n    exportableTrace,\n    enableRowSelection,\n    isComparing,\n    isSelected,\n    // eslint-disable-next-line react/no-unused-prop-types\n    selectedColumns, // Prop needed to force row re-rending when selectedColumns change\n  }: {\n    row: Row<EvalTraceComparisonEntry>;\n    exportableTrace?: boolean;\n    enableRowSelection?: boolean;\n    isComparing: boolean;\n    isSelected?: boolean;\n    selectedColumns: TracesTableColumn[];\n  }) => {\n    const cells = row.getVisibleCells();\n    const intl = useIntl();\n    return (\n      <>\n        <TableRow>\n          {enableRowSelection && (\n            <Tooltip\n              componentId=\"mlflow.experiment-evaluation-monitoring.evals-logs-table-cell-tooltip\"\n              content={\n                isComparing\n                  ? intl.formatMessage({\n                      defaultMessage: 'You cannot select rows when comparing runs',\n                      description: 'Tooltip message for the select button when comparing runs',\n                    })\n                  : !exportableTrace\n                  ? intl.formatMessage({\n                      defaultMessage:\n                        'This trace is not exportable because it either contains an error or the response is not a ChatCompletionResponse.',\n                      description: 'Tooltip message for the export button when the trace is not exportable',\n                    })\n                  : null\n              }\n            >\n              <TableRowSelectCell\n                componentId=\"mlflow.experiment-evaluation-monitoring.evals-logs-table-cell\"\n                checked={isSelected && exportableTrace}\n                onChange={row.getToggleSelectedHandler()}\n                isDisabled={isComparing || !exportableTrace}\n              />\n            </Tooltip>\n          )}\n          {cells.map((cell) => (\n            <GenAiTracesTableBodyRowCell cell={cell} key={cell.id} />\n          ))}\n        </TableRow>\n      </>\n    );\n  },\n);\n\nexport const GenAiTracesTableBodyRowCell = React.memo(({ cell }: { cell: Cell<EvalTraceComparisonEntry, unknown> }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <TableCell\n      key={cell.id}\n      style={{\n        flex: `1 1 var(--col-${escapeCssSpecialCharacters(cell.column.id)}-size)`,\n      }}\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        // First span, make it width full.\n        '> span:first-of-type': {\n          padding: `${theme.spacing.xs}px 0px`,\n          width: '100%',\n        },\n      }}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n    </TableCell>\n  );\n});\n","import { useMemo } from 'react';\n\nimport { Tooltip, useDesignSystemTheme, XCircleFillIcon } from '@databricks/design-system';\nimport { useIntl, type IntlShape } from '@databricks/i18n';\n\nimport {\n  KnownEvaluationResultAssessmentStringValue,\n  KnownEvaluationResultAssessmentValueMapping,\n  withAlpha,\n} from './GenAiEvaluationTracesReview.utils';\nimport { RunColorCircle } from './RunColorCircle';\nimport type { AssessmentAggregates, AssessmentFilter, AssessmentInfo, AssessmentValueType } from '../types';\nimport { COMPARE_TO_RUN_COLOR, CURRENT_RUN_COLOR, getEvaluationResultAssessmentBackgroundColor } from '../utils/Colors';\nimport { displayPercentage } from '../utils/DisplayUtils';\n\ninterface RcaAssessmentRunDisplayInfoCount {\n  count: number;\n  fraction: number;\n  percentage: string;\n  tooltip: string;\n  toggleFilter: () => void;\n  isSelected: boolean;\n}\n\ninterface RcaAssessmentDisplayInfoCount {\n  assessment: string;\n  title: string;\n  currentInfo: RcaAssessmentRunDisplayInfoCount;\n  otherInfo?: RcaAssessmentRunDisplayInfoCount;\n  icon: JSX.Element;\n}\n\nexport const EvaluationsRcaStats = ({\n  overallAssessmentInfo,\n  assessmentNameToAggregates,\n  allAssessmentFilters,\n  toggleAssessmentFilter,\n  runUuid,\n  compareToRunUuid,\n}: {\n  overallAssessmentInfo: AssessmentInfo;\n  assessmentNameToAggregates: Record<string, AssessmentAggregates>;\n  allAssessmentFilters: AssessmentFilter[];\n  toggleAssessmentFilter: (\n    assessmentName: string,\n    filterValue: AssessmentValueType,\n    run: string,\n    filterType?: AssessmentFilter['filterType'],\n  ) => void;\n  runUuid?: string;\n  compareToRunUuid?: string;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const rcaData = useMemo(() => {\n    return getRcaData(\n      intl,\n      assessmentNameToAggregates,\n      allAssessmentFilters,\n      toggleAssessmentFilter,\n      Boolean(compareToRunUuid),\n      runUuid,\n      compareToRunUuid,\n    );\n  }, [intl, assessmentNameToAggregates, allAssessmentFilters, toggleAssessmentFilter, compareToRunUuid, runUuid]);\n\n  if (rcaData.length === 0) {\n    return <></>;\n  }\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div\n        css={{\n          fontWeight: theme.typography.typographyBoldFontWeight,\n        }}\n      >\n        {intl.formatMessage({\n          defaultMessage: 'Root Cause Analysis',\n          description: 'Root cause analysis section title',\n        })}\n      </div>\n\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <RcaPills\n          overallAssessmentInfo={overallAssessmentInfo}\n          rcaData={rcaData}\n          run=\"current\"\n          runColor={compareToRunUuid ? CURRENT_RUN_COLOR : undefined}\n        />\n      </div>\n      {compareToRunUuid && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <RcaPills\n            overallAssessmentInfo={overallAssessmentInfo}\n            rcaData={rcaData}\n            run=\"other\"\n            runColor={COMPARE_TO_RUN_COLOR}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const RcaPills = ({\n  rcaData,\n  run,\n  runColor,\n  overallAssessmentInfo,\n}: {\n  rcaData: RcaAssessmentDisplayInfoCount[];\n  run: 'current' | 'other';\n  runColor?: string;\n  overallAssessmentInfo: AssessmentInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm, alignItems: 'center' }}>\n      {runColor && (\n        <div css={{ display: 'flex' }}>\n          <RunColorCircle color={runColor} />\n        </div>\n      )}\n      <div\n        css={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: theme.spacing.xs,\n        }}\n      >\n        {rcaData.map((item, i) => {\n          const runDisplayInfoCount = run === 'current' ? item.currentInfo : item.otherInfo;\n          if (!runDisplayInfoCount) {\n            // eslint-disable-next-line react/jsx-key -- TODO(FEINF-1756)\n            return <></>;\n          }\n          const backgroundColor = getEvaluationResultAssessmentBackgroundColor(theme, overallAssessmentInfo, {\n            stringValue: 'no',\n          });\n          return (\n            <Tooltip key={i} content={runDisplayInfoCount.tooltip} componentId=\"mlflow.evaluations_review.rca_pill\">\n              <>\n                <div\n                  key={i}\n                  style={{\n                    border: runDisplayInfoCount.isSelected ? `1px solid ${theme.colors.grey400}` : '',\n                  }}\n                  css={{\n                    color: theme.colors.textSecondary,\n                    borderRadius: theme.general.borderRadiusBase,\n                    padding: `0 ${theme.spacing.xs}px`,\n                    height: '20px',\n                    display: 'flex',\n                    backgroundColor: runDisplayInfoCount.isSelected\n                      ? withAlpha(backgroundColor, 1.0)\n                      : withAlpha(backgroundColor, 0.5),\n                    // Bring back when we support filtering on RCA.\n                    // cursor: 'pointer',\n                    // '&:hover': {\n                    //   backgroundColor: withAlpha(backgroundColor, 0.9),\n                    // },\n                    gap: theme.spacing.xs,\n                    fontSize: theme.typography.fontSizeSm,\n                  }}\n                  // Bring back when we support filtering on RCA.\n                  // onClick={runDisplayInfoCount.toggleFilter}\n                >\n                  {runDisplayInfoCount.count}\n                  <div>{item.title.toLocaleLowerCase()}</div>\n                </div>\n              </>\n            </Tooltip>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction getRcaData(\n  intl: IntlShape,\n  assessmentNameToAggregates: Record<string, AssessmentAggregates>,\n  assessmentFilters: AssessmentFilter[],\n  toggleAssessmentFilter: (\n    assessmentName: string,\n    filterValue: AssessmentValueType,\n    run: string,\n    filterType?: AssessmentFilter['filterType'],\n  ) => void,\n  isCompareToRun: boolean,\n  currentRunDisplayName?: string,\n  otherRunDisplayName?: string,\n): RcaAssessmentDisplayInfoCount[] {\n  // If all of the unfiltered assessment display infos have 0 root cause, return an empty array.\n  if (\n    Object.values(assessmentNameToAggregates).every(\n      (assessmentDisplayInfo) =>\n        assessmentDisplayInfo.currentNumRootCause === 0 && (assessmentDisplayInfo.otherNumRootCause || 0) === 0,\n    )\n  ) {\n    return [];\n  }\n  // Remove any root cause values that are 0 in the unfiltered set. This that the set of rca pills don't hide 0 values when filtered\n  // but keep the set minimal when unfiltered.\n  const sortedAssessmentAggregates = Object.values(assessmentNameToAggregates)\n    .filter((x) => x.currentNumRootCause > 0 || (x.otherNumRootCause || 0) > 0)\n    .sort((a, b) => b.currentNumRootCause - a.currentNumRootCause);\n  const maxNumRootCause = Math.max(\n    sortedAssessmentAggregates[0]?.currentNumRootCause || 0,\n    sortedAssessmentAggregates[0]?.otherNumRootCause || 0,\n  );\n  return sortedAssessmentAggregates.map((assessmentDisplayInfo) => {\n    const knownValueLabel =\n      KnownEvaluationResultAssessmentValueMapping[assessmentDisplayInfo.assessmentInfo.name]?.[\n        KnownEvaluationResultAssessmentStringValue.NO\n      ];\n    const title = knownValueLabel ? intl.formatMessage(knownValueLabel) : assessmentDisplayInfo.assessmentInfo.name;\n\n    const currentCounts = assessmentDisplayInfo.currentCounts;\n    const numPassing = currentCounts?.get(KnownEvaluationResultAssessmentStringValue.YES) || 0;\n    const numFailing = currentCounts?.get(KnownEvaluationResultAssessmentStringValue.NO) || 0;\n    const numMissing = currentCounts?.get(undefined) || 0;\n    const numRootCause = assessmentDisplayInfo.currentNumRootCause;\n\n    const numEvals = numPassing + numFailing + numMissing;\n\n    const otherCounts = assessmentDisplayInfo.otherCounts;\n    let otherNumEvals: number | undefined;\n    if (assessmentDisplayInfo.otherCounts !== undefined) {\n      const otherNumPassing = otherCounts?.get(KnownEvaluationResultAssessmentStringValue.YES) || 0;\n      const otherNumFailing = otherCounts?.get(KnownEvaluationResultAssessmentStringValue.NO) || 0;\n      const otherNumMissing = otherCounts?.get(undefined) || 0;\n      otherNumEvals = otherNumPassing + otherNumFailing + otherNumMissing;\n    }\n    const otherNumRootCause = assessmentDisplayInfo.otherNumRootCause || 0;\n    const rootCauseFraction = numRootCause / numEvals;\n    const otherRootCauseFraction = otherNumRootCause / (otherNumEvals || 1);\n    const currentPercentage = displayPercentage(rootCauseFraction);\n    const otherPercentage = displayPercentage(otherRootCauseFraction);\n\n    return {\n      assessment: assessmentDisplayInfo.assessmentInfo.name,\n      // Map assessment to known values.\n      title,\n      currentInfo: {\n        count: numRootCause,\n        fraction: numRootCause / maxNumRootCause,\n        tooltip: intl.formatMessage(\n          {\n            defaultMessage:\n              '{numRootCause}/{numEvals} ({percentage}%) runs failed due to the {assessment} judge failing for the current run \"{currentRun}\".',\n            description: 'Tooltip for the root cause metrics bar on the LLM evaluation page.',\n          },\n          {\n            numRootCause,\n            numEvals,\n            percentage: currentPercentage,\n            assessment: assessmentDisplayInfo.assessmentInfo.name,\n            currentRun: currentRunDisplayName,\n          },\n        ),\n        toggleFilter: () =>\n          toggleAssessmentFilter(assessmentDisplayInfo.assessmentInfo.name, 'failing_root_cause', 'current'),\n        isSelected: assessmentFilters.some(\n          (filter) =>\n            filter.filterType === 'rca' &&\n            filter.run === 'current' &&\n            filter.assessmentName === assessmentDisplayInfo.assessmentInfo.name,\n        ),\n        percentage: currentPercentage,\n      },\n      otherInfo: isCompareToRun\n        ? {\n            count: otherNumRootCause,\n            fraction: otherNumRootCause / maxNumRootCause,\n            tooltip: intl.formatMessage(\n              {\n                defaultMessage:\n                  '{numRootCause}/{numEvals} ({percentage}%) runs failed due to the {assessment} judge failing for run \"{otherRunDisplayName}\".',\n                description: 'Tooltip for the root cause metrics bar on the LLM evaluation page.',\n              },\n              {\n                numRootCause: otherNumRootCause,\n                numEvals: otherNumEvals,\n                percentage: otherPercentage,\n                assessment: assessmentDisplayInfo.assessmentInfo.name,\n                otherRunDisplayName,\n              },\n            ),\n            toggleFilter: () => toggleAssessmentFilter(assessmentDisplayInfo.assessmentInfo.name, 'rca', 'other'),\n            isSelected: assessmentFilters.some(\n              (filter) =>\n                filter.filterType === 'rca' &&\n                filter.run === 'other' &&\n                filter.assessmentName === assessmentDisplayInfo.assessmentInfo.name,\n            ),\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n            percentage: otherPercentage!,\n          }\n        : undefined,\n      icon: <XCircleFillIcon />,\n    };\n  });\n}\n","import {\n  BinaryIcon,\n  BracketsXIcon,\n  NumbersIcon,\n  SparkleDoubleIcon,\n  Tag,\n  Typography,\n  useDesignSystemTheme,\n  UserIcon,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { EvaluationsRcaStats } from './EvaluationsRcaStats';\nimport { KnownEvaluationResultAssessmentName } from '../enum';\nimport type { AssessmentAggregates, AssessmentFilter, AssessmentInfo, AssessmentValueType } from '../types';\n\nexport const EvaluationsAssessmentHoverCard = ({\n  assessmentInfo,\n  assessmentNameToAggregates,\n  allAssessmentFilters,\n  toggleAssessmentFilter,\n  runUuid,\n  compareToRunUuid,\n}: {\n  assessmentInfo: AssessmentInfo;\n  assessmentNameToAggregates: Record<string, AssessmentAggregates>;\n  allAssessmentFilters: AssessmentFilter[];\n  toggleAssessmentFilter: (\n    assessmentName: string,\n    filterValue: AssessmentValueType,\n    run: string,\n    filterType?: AssessmentFilter['filterType'],\n  ) => void;\n  runUuid?: string;\n  compareToRunUuid?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  return (\n    <>\n      <div\n        css={{\n          maxWidth: '25rem',\n          display: 'flex',\n          flexDirection: 'column',\n          overflowWrap: 'break-word',\n          wordBreak: 'break-word',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: theme.spacing.xs,\n              paddingBottom: theme.spacing.sm,\n              borderBottom: `1px solid ${theme.colors.border}`,\n            }}\n          >\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.xs,\n                alignItems: 'center',\n              }}\n            >\n              {/* Dtype icon  */}\n              {assessmentInfo.dtype === 'numeric' ? (\n                <NumbersIcon />\n              ) : assessmentInfo.dtype === 'boolean' ? (\n                <BinaryIcon />\n              ) : (\n                <></>\n              )}\n\n              <Typography.Title\n                level={4}\n                css={{\n                  marginBottom: 0,\n                  marginRight: theme.spacing.xs,\n                }}\n              >\n                {assessmentInfo.displayName}\n              </Typography.Title>\n              {assessmentInfo.source?.sourceType === 'AI_JUDGE' && (\n                <Tag color=\"turquoise\" componentId=\"mlflow.experiment.evaluations.ai-judge-tag\">\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.xs,\n                    }}\n                  >\n                    <SparkleDoubleIcon\n                      css={{\n                        color: theme.colors.textSecondary,\n                      }}\n                    />\n                    <Typography.Hint>\n                      {intl.formatMessage({\n                        defaultMessage: 'AI Judge',\n                        description: 'Label for AI judge in the tooltip for the assessment in the evaluation metrics.',\n                      })}\n                    </Typography.Hint>\n                  </div>\n                </Tag>\n              )}\n              {assessmentInfo.source?.sourceType === 'HUMAN' && (\n                <Tag color=\"coral\" componentId=\"mlflow.experiment.evaluations.human-judge-tag\">\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.xs,\n                    }}\n                  >\n                    <UserIcon />\n                    <Typography.Hint>\n                      {intl.formatMessage({\n                        defaultMessage: 'Human judge',\n                        description:\n                          'Label for human judge in the tooltip for the assessment in the evaluation metrics.',\n                      })}\n                    </Typography.Hint>\n                  </div>\n                </Tag>\n              )}\n              {assessmentInfo.isCustomMetric && (\n                <Tag color=\"indigo\" componentId=\"mlflow.experiment.evaluations.ai-judge-tag\">\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.xs,\n                    }}\n                  >\n                    <Typography.Hint>\n                      <BracketsXIcon />\n                    </Typography.Hint>\n\n                    <Typography.Hint>{assessmentInfo.metricName}</Typography.Hint>\n                  </div>\n                </Tag>\n              )}\n            </div>\n            <div>\n              <Typography.Hint>{assessmentInfo.name}</Typography.Hint>\n            </div>\n          </div>\n        </div>\n        <div>\n          <span\n            css={{\n              display: 'contents',\n              '& p': {\n                marginBottom: 0,\n              },\n            }}\n          >\n            {assessmentInfo.description}\n          </span>\n        </div>\n        {assessmentInfo.name === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT && runUuid ? (\n          <div>\n            <EvaluationsRcaStats\n              overallAssessmentInfo={assessmentInfo}\n              assessmentNameToAggregates={assessmentNameToAggregates}\n              allAssessmentFilters={allAssessmentFilters}\n              toggleAssessmentFilter={toggleAssessmentFilter}\n              runUuid={runUuid}\n              compareToRunUuid={compareToRunUuid}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n};\n","import { isNil } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { Popover, type ThemeType } from '@databricks/design-system';\nimport type { IntlShape } from '@databricks/i18n';\n\nimport {\n  type AssessmentAggregates,\n  type AssessmentFilter,\n  type AssessmentInfo,\n  type AssessmentValueType,\n} from '../../types';\nimport { ERROR_KEY, getBarChartData } from '../../utils/AggregationUtils';\nimport { getDisplayScore, getDisplayScoreChange } from '../../utils/DisplayUtils';\n\nconst MAX_VISIBLE_ITEMS = 4;\n\nexport const CategoricalAggregateChart = React.memo(\n  ({\n    theme,\n    intl,\n    assessmentInfo,\n    assessmentAggregates,\n    allAssessmentFilters,\n    toggleAssessmentFilter,\n    currentRunDisplayName,\n    compareToRunDisplayName,\n  }: {\n    theme: ThemeType;\n    intl: IntlShape;\n    assessmentInfo: AssessmentInfo;\n    assessmentAggregates: AssessmentAggregates;\n    allAssessmentFilters: AssessmentFilter[];\n    toggleAssessmentFilter: (\n      assessmentName: string,\n      filterValue: AssessmentValueType,\n      run: string,\n      filterType?: AssessmentFilter['filterType'],\n    ) => void;\n    currentRunDisplayName?: string;\n    compareToRunDisplayName?: string;\n  }) => {\n    /** Bar data */\n    const barChartData = useMemo(\n      () =>\n        getBarChartData(\n          intl,\n          theme,\n          assessmentInfo,\n          allAssessmentFilters,\n          toggleAssessmentFilter,\n          assessmentAggregates,\n          currentRunDisplayName,\n          compareToRunDisplayName,\n        ),\n      [\n        intl,\n        theme,\n        assessmentInfo,\n        allAssessmentFilters,\n        toggleAssessmentFilter,\n        assessmentAggregates,\n        currentRunDisplayName,\n        compareToRunDisplayName,\n      ],\n    );\n\n    // Sort barChartData: most frequent first, ties resolved by original order, error and null entries at bottom\n    const sortedBarChartData = useMemo(() => {\n      // Keep original order for pass-fail and boolean assessments\n      if (assessmentInfo.dtype === 'pass-fail' || assessmentInfo.dtype === 'boolean') {\n        return barChartData;\n      }\n\n      return barChartData\n        .map((item, originalIndex) => ({ ...item, originalIndex }))\n        .sort((a, b) => {\n          const aIsBottomEntry = a.name === 'null' || a.name === ERROR_KEY;\n          const bIsBottomEntry = b.name === 'null' || b.name === ERROR_KEY;\n\n          // Always put error and null entries at the bottom\n          if (aIsBottomEntry && !bIsBottomEntry) return 1;\n          if (bIsBottomEntry && !aIsBottomEntry) return -1;\n\n          // Sort regular entries by frequency (current.value) in descending order\n          if (!aIsBottomEntry && !bIsBottomEntry) {\n            const valueComparison = (b.current?.value || 0) - (a.current?.value || 0);\n            if (valueComparison !== 0) return valueComparison;\n          }\n\n          // Resolve ties by original order\n          return a.originalIndex - b.originalIndex;\n        });\n    }, [barChartData, assessmentInfo]);\n\n    // If there's more than MAX_VISIBLE_ITEMS, show a popover with the <MAX_VISIBLE_ITEMS>th item and the rest\n    const visibleItems =\n      sortedBarChartData.length > MAX_VISIBLE_ITEMS\n        ? sortedBarChartData.slice(0, MAX_VISIBLE_ITEMS - 1)\n        : sortedBarChartData;\n    const hiddenItems =\n      sortedBarChartData.length > MAX_VISIBLE_ITEMS ? sortedBarChartData.slice(MAX_VISIBLE_ITEMS - 1) : [];\n    const hasMoreItems = hiddenItems.length > 0;\n\n    const hoverBarColor = theme.colors.actionDefaultBackgroundHover;\n    const selectedBarColor = theme.colors.actionDefaultBackgroundPress;\n\n    return (\n      <table>\n        <tbody>\n          {visibleItems.map((barData) => (\n            <ChartRow\n              key={barData.name}\n              barData={barData}\n              theme={theme}\n              hoverBarColor={hoverBarColor}\n              selectedBarColor={selectedBarColor}\n              assessmentInfo={assessmentInfo}\n            />\n          ))}\n          {hasMoreItems && (\n            <tr>\n              <td colSpan={2}>\n                <Popover.Root componentId=\"categorical-aggregate-chart-more-items\">\n                  <Popover.Trigger asChild>\n                    <div\n                      css={{\n                        cursor: 'pointer',\n                        padding: `${theme.spacing.xs}px`,\n                        color: theme.colors.actionLinkDefault,\n                        fontSize: theme.typography.fontSizeSm,\n                        fontWeight: 'normal',\n                        ':hover': {\n                          backgroundColor: hoverBarColor,\n                        },\n                        borderRadius: theme.general.borderRadiusBase,\n                      }}\n                    >\n                      {intl.formatMessage(\n                        {\n                          defaultMessage: '+{count} more',\n                          description:\n                            'Message for the popover trigger to show more items in the categorical aggregate chart.',\n                        },\n                        { count: hiddenItems.length },\n                      )}\n                    </div>\n                  </Popover.Trigger>\n                  <Popover.Content\n                    align=\"start\"\n                    side=\"bottom\"\n                    css={{\n                      maxHeight: '200px',\n                      overflowY: 'auto',\n                      width: '200px',\n                      minWidth: '200px',\n                    }}\n                  >\n                    <table>\n                      <tbody>\n                        {hiddenItems.map((barData) => (\n                          <ChartRow\n                            key={barData.name}\n                            barData={barData}\n                            theme={theme}\n                            hoverBarColor={hoverBarColor}\n                            selectedBarColor={selectedBarColor}\n                            assessmentInfo={assessmentInfo}\n                          />\n                        ))}\n                      </tbody>\n                    </table>\n                  </Popover.Content>\n                </Popover.Root>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  },\n);\n\nconst ChartRow = ({\n  barData,\n  theme,\n  hoverBarColor,\n  selectedBarColor,\n  assessmentInfo,\n}: {\n  barData: any;\n  theme: ThemeType;\n  hoverBarColor: string;\n  selectedBarColor: string;\n  assessmentInfo: AssessmentInfo;\n}) => {\n  const isError = barData.name === ERROR_KEY;\n  const isNull = barData.name === 'null';\n\n  if (isError || isNull) {\n    return (\n      <tr\n        key={barData.name}\n        css={{\n          // filtering by error is not currently supported\n          cursor: barData.name !== ERROR_KEY ? 'pointer' : 'not-allowed',\n          ':hover': {\n            backgroundColor: hoverBarColor,\n          },\n          color: barData.name === ERROR_KEY ? theme.colors.textValidationWarning : theme.colors.textSecondary,\n          fontWeight: 'normal',\n          fontSize: theme.typography.fontSizeSm,\n        }}\n        onClick={barData.name !== ERROR_KEY ? barData.current.toggleFilter : undefined}\n      >\n        <td\n          css={{\n            width: '100%',\n            borderTopLeftRadius: theme.general.borderRadiusBase,\n            borderBottomLeftRadius: theme.general.borderRadiusBase,\n            backgroundColor: `${barData.current.isSelected ? selectedBarColor : ''}`,\n            paddingLeft: theme.spacing.xs,\n            paddingTop: theme.spacing.xs,\n            paddingBottom: theme.spacing.xs,\n            fontStyle: barData.name === ERROR_KEY ? 'normal' : 'italic',\n          }}\n        >\n          <span\n            css={{\n              lineHeight: `${theme.typography.fontSizeSm}px`,\n            }}\n          >\n            {barData.name}\n          </span>\n        </td>\n        <td\n          css={{\n            textAlign: 'right',\n            verticalAlign: 'center',\n            borderTopRightRadius: theme.general.borderRadiusBase,\n            borderBottomRightRadius: theme.general.borderRadiusBase,\n            backgroundColor: `${barData.current.isSelected ? selectedBarColor : ''}`,\n            paddingRight: theme.spacing.xs,\n            paddingTop: theme.spacing.xs,\n            paddingBottom: theme.spacing.xs,\n            fontStyle: 'normal',\n          }}\n        >\n          <span\n            css={{\n              display: 'inline-block',\n              verticalAlign: 'center',\n              lineHeight: `${theme.typography.fontSizeSm}px`,\n            }}\n          >\n            {!isNil(barData.scoreChange)\n              ? getDisplayScoreChange(assessmentInfo, barData.scoreChange, false)\n              : barData.current.value}\n          </span>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <tr\n      key={barData.name}\n      css={{\n        cursor: 'pointer',\n        ':hover': {\n          backgroundColor: hoverBarColor,\n        },\n      }}\n      onClick={barData.current.toggleFilter}\n    >\n      <td\n        css={{\n          width: '100%',\n          borderTopLeftRadius: theme.general.borderRadiusBase,\n          borderBottomLeftRadius: theme.general.borderRadiusBase,\n          backgroundColor: `${barData.current.isSelected ? selectedBarColor : ''}`,\n          paddingLeft: theme.spacing.xs,\n          paddingTop: theme.spacing.xs,\n          paddingBottom: theme.spacing.xs,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '2px',\n            width: '100%',\n          }}\n        >\n          <span\n            css={{\n              fontWeight: 'normal',\n              fontSize: '10px',\n              lineHeight: '10px',\n\n              color: theme.colors.textSecondary,\n            }}\n          >\n            {barData.name}\n          </span>\n          <div\n            css={{\n              flex: 1,\n              width: '100%',\n              position: 'relative',\n            }}\n          >\n            <div\n              style={{\n                width: barData.current.value > 0 ? `${barData.current.fraction * 100}%` : '2px',\n                borderRadius: '2px',\n              }}\n              css={{\n                position: 'relative',\n                // Allow shrinking for other items with minWidth.\n                flexShrink: 1,\n                transition: 'width 0.3s',\n                backgroundColor: barData.backgroundColor,\n                height: '10px',\n                display: 'flex',\n\n                alignItems: 'center',\n              }}\n            />\n          </div>\n        </div>\n      </td>\n      <td\n        css={{\n          textAlign: 'right',\n          verticalAlign: 'bottom',\n          borderTopRightRadius: theme.general.borderRadiusBase,\n          borderBottomRightRadius: theme.general.borderRadiusBase,\n          backgroundColor: `${barData.current.isSelected ? selectedBarColor : ''}`,\n          paddingRight: theme.spacing.xs,\n          paddingTop: theme.spacing.xs,\n          paddingBottom: theme.spacing.xs,\n        }}\n      >\n        <span\n          css={{\n            color: theme.colors.textSecondary,\n            fontWeight: 'normal',\n            fontSize: theme.typography.fontSizeSm,\n            display: 'inline-block',\n            verticalAlign: 'bottom',\n            lineHeight: `${theme.typography.fontSizeSm}px`,\n          }}\n        >\n          {!isNil(barData.scoreChange)\n            ? getDisplayScoreChange(assessmentInfo, barData.scoreChange)\n            : getDisplayScore(assessmentInfo, barData.current.fraction)}\n        </span>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\n\nimport { HoverCard, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport type { NumericAggregate } from '../../types';\nimport { displayFloat } from '../../utils/DisplayUtils';\n\nexport const NumericAggregateChart = React.memo(({ numericAggregate }: { numericAggregate: NumericAggregate }) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'row',\n        }}\n      >\n        {numericAggregate.counts.map((count, index) => (\n          <HoverCard\n            key={'hover-card-' + index}\n            content={\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                }}\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <div\n                    css={{\n                      width: '25%',\n                    }}\n                  >\n                    <Typography.Text>\n                      {intl.formatMessage({\n                        defaultMessage: 'Range',\n                        description: 'Label for the range in the tooltip for the numeric aggregate chart.',\n                      })}\n                    </Typography.Text>\n                  </div>\n                  <div>\n                    <Typography.Text color=\"secondary\">\n                      {displayFloat(count.lower, 2) === displayFloat(count.upper, 2)\n                        ? displayFloat(count.lower, 2)\n                        : `${displayFloat(count.lower, 2)} - ${displayFloat(count.upper, 2)}`}\n                    </Typography.Text>\n                  </div>\n                </div>\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <div\n                    css={{\n                      width: '25%',\n                    }}\n                  >\n                    <Typography.Text>\n                      {intl.formatMessage({\n                        defaultMessage: 'Count',\n                        description: 'Label for the count in the tooltip for the numeric aggregate chart.',\n                      })}\n                    </Typography.Text>\n                  </div>\n                  <div>\n                    <Typography.Text color=\"secondary\">{count.count}</Typography.Text>\n                  </div>\n                </div>\n              </div>\n            }\n            trigger={\n              <div\n                key={'bar-' + index}\n                css={{\n                  display: 'flex',\n                  flex: 1,\n                  flexDirection: 'column-reverse',\n                  height: '60px',\n                  width: '10px',\n                  ':hover': {\n                    backgroundColor: theme.colors.actionDefaultBackgroundHover,\n                  },\n                }}\n              >\n                <div\n                  css={{\n                    height: `${(count.count / numericAggregate.maxCount) * 100}%`,\n                    minHeight: '1px',\n                    width: '80%',\n                    verticalAlign: 'bottom',\n                    backgroundColor: theme.colors.blue400,\n                    borderTopRightRadius: theme.general.borderRadiusBase,\n                    borderTopLeftRadius: theme.general.borderRadiusBase,\n                  }}\n                />\n              </div>\n            }\n          />\n        ))}\n      </div>\n      {numericAggregate.min === numericAggregate.max ? (\n        <div\n          css={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'row',\n            fontWeight: 'normal',\n            fontSize: theme.typography.fontSizeSm,\n            color: theme.colors.textSecondary,\n          }}\n        >\n          {displayFloat(numericAggregate.min, 2)}\n        </div>\n      ) : (\n        <div\n          css={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            flexDirection: 'row',\n            fontWeight: 'normal',\n            fontSize: theme.typography.fontSizeSm,\n            color: theme.colors.textSecondary,\n          }}\n        >\n          <div>{displayFloat(numericAggregate.min, 2)}</div>\n          <div>{displayFloat(numericAggregate.max, 2)}</div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { isNil } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport type { ThemeType } from '@databricks/design-system';\nimport type { IntlShape } from '@databricks/i18n';\n\nimport { CategoricalAggregateChart } from './CategoricalAggregateChart';\nimport { NumericAggregateChart } from './NumericAggregateChart';\nimport {\n  type AssessmentAggregates,\n  type AssessmentFilter,\n  type AssessmentInfo,\n  type AssessmentValueType,\n} from '../../types';\nimport { AGGREGATE_SCORE_CHANGE_BACKGROUND_COLORS, AGGREGATE_SCORE_CHANGE_TEXT_COLOR } from '../../utils/Colors';\nimport { getDisplayOverallScoreAndChange } from '../../utils/DisplayUtils';\nimport { withAlpha } from '../GenAiEvaluationTracesReview.utils';\n\nexport const AssessmentColumnSummary = React.memo(\n  ({\n    theme,\n    intl,\n    assessmentInfo,\n    assessmentAggregates,\n    allAssessmentFilters,\n    toggleAssessmentFilter,\n    currentRunDisplayName,\n    compareToRunDisplayName,\n    collapsedHeader,\n  }: {\n    theme: ThemeType;\n    intl: IntlShape;\n    assessmentInfo: AssessmentInfo;\n    assessmentAggregates: AssessmentAggregates;\n    allAssessmentFilters: AssessmentFilter[];\n    toggleAssessmentFilter: (\n      assessmentName: string,\n      filterValue: AssessmentValueType,\n      run: string,\n      filterType?: AssessmentFilter['filterType'],\n    ) => void;\n    currentRunDisplayName?: string;\n    compareToRunDisplayName?: string;\n    collapsedHeader?: boolean;\n  }) => {\n    const dtypeAggregateLabel = useMemo(() => {\n      if (assessmentInfo.dtype === 'pass-fail') {\n        return intl.formatMessage({\n          defaultMessage: 'PASS',\n          description: 'Header label for pass/fail assessment type for the pass rate',\n        });\n      } else if (assessmentInfo.dtype === 'boolean') {\n        return intl.formatMessage({\n          defaultMessage: 'TRUE',\n          description: 'Header label for boolean assessment type for the true rate',\n        });\n      } else if (assessmentInfo.dtype === 'string') {\n        return intl.formatMessage({\n          defaultMessage: 'STRING',\n          description: 'Header label for string assessment type',\n        });\n      } else if (assessmentInfo.dtype === 'numeric') {\n        return intl.formatMessage({\n          defaultMessage: 'AVG',\n          description: 'Header label for numeric assessment type for the average value',\n        });\n      }\n      return undefined;\n    }, [assessmentInfo, intl]);\n\n    /** Overall aggregate scores */\n    const { displayScore, displayScoreChange, changeDirection } = useMemo(\n      () => getDisplayOverallScoreAndChange(intl, assessmentInfo, assessmentAggregates),\n      [intl, assessmentInfo, assessmentAggregates],\n    );\n\n    if (assessmentInfo.dtype === 'unknown') {\n      return null;\n    }\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            paddingTop: theme.spacing.xs,\n          }}\n        >\n          {/* Aggregate label, e.g. \"PASS\" or \"TRUE\" */}\n          <div\n            css={{\n              fontWeight: 400,\n              fontSize: '10px',\n              color: theme.colors.textPlaceholder,\n            }}\n          >\n            {dtypeAggregateLabel}\n          </div>\n          {/* Overall score & diff */}\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.xs,\n            }}\n          >\n            {/* Current run score */}\n            <div\n              css={{\n                fontSize: theme.typography.fontSizeLg,\n                color: theme.colors.textPrimary,\n                fontWeight: theme.typography.typographyBoldFontWeight,\n              }}\n            >\n              {displayScore}\n            </div>\n            {/* Diff score */}\n            {!isNil(displayScoreChange) && compareToRunDisplayName && (\n              <div\n                css={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  height: '20px',\n                  gap: theme.spacing.xs,\n                  padding: `2px ${theme.spacing.xs}px`,\n                  fontSize: theme.typography.fontSizeMd,\n                  fontWeight: 'normal',\n                  borderRadius: theme.general.borderRadiusBase,\n                  color: AGGREGATE_SCORE_CHANGE_TEXT_COLOR,\n                  backgroundColor:\n                    changeDirection === 'none'\n                      ? ''\n                      : changeDirection === 'up'\n                      ? AGGREGATE_SCORE_CHANGE_BACKGROUND_COLORS.up\n                      : changeDirection === 'down'\n                      ? AGGREGATE_SCORE_CHANGE_BACKGROUND_COLORS.down\n                      : withAlpha(theme.colors.textSecondary, 0.1),\n                }}\n              >\n                {displayScoreChange}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!collapsedHeader &&\n          (!isNil(assessmentAggregates.currentNumericAggregate) ? (\n            <NumericAggregateChart numericAggregate={assessmentAggregates.currentNumericAggregate} />\n          ) : (\n            // Categorical charts\n            <CategoricalAggregateChart\n              theme={theme}\n              intl={intl}\n              assessmentInfo={assessmentInfo}\n              assessmentAggregates={assessmentAggregates}\n              allAssessmentFilters={allAssessmentFilters}\n              toggleAssessmentFilter={toggleAssessmentFilter}\n              currentRunDisplayName={currentRunDisplayName}\n              compareToRunDisplayName={compareToRunDisplayName}\n            />\n          ))}\n      </div>\n    );\n  },\n);\n","import { flexRender } from '@tanstack/react-table';\nimport type { HeaderGroup, ColumnSizingState, Updater } from '@tanstack/react-table';\nimport { isNil } from 'lodash';\nimport React, { useState } from 'react';\n\nimport {\n  HoverCard,\n  TableHeader,\n  TableRow,\n  TableRowSelectCell,\n  useDesignSystemTheme,\n  ChevronDownIcon,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { EvaluationsAssessmentHoverCard } from './components/EvaluationsAssessmentHoverCard';\nimport { AssessmentColumnSummary } from './components/charts/AssessmentColumnSummary';\nimport { createAssessmentColumnId } from './hooks/useTableColumns';\nimport {\n  type AssessmentAggregates,\n  type AssessmentFilter,\n  type AssessmentInfo,\n  type AssessmentValueType,\n  type EvalTraceComparisonEntry,\n} from './types';\nimport { escapeCssSpecialCharacters } from './utils/DisplayUtils';\n\ninterface GenAiTracesTableHeaderProps {\n  enableRowSelection?: boolean;\n  enableGrouping?: boolean;\n  selectedAssessmentInfos: AssessmentInfo[];\n  assessmentNameToAggregates: Record<string, AssessmentAggregates>;\n  assessmentFilters: AssessmentFilter[];\n  toggleAssessmentFilter: (\n    assessmentName: string,\n    filterValue: AssessmentValueType,\n    run: string,\n    filterType?: AssessmentFilter['filterType'],\n  ) => void;\n  runDisplayName?: string;\n  compareToRunUuid?: string;\n  compareToRunDisplayName?: string;\n  disableAssessmentTooltips?: boolean;\n  collapsedHeader: boolean;\n  setCollapsedHeader: (collapsed: boolean) => void;\n  isComparing: boolean;\n  headerGroups: HeaderGroup<EvalTraceComparisonEntry>[];\n  allRowSelected: boolean;\n  someRowSelected: boolean;\n  toggleAllRowsSelectedHandler: () => (event: unknown) => void;\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void;\n}\n\nexport const GenAiTracesTableHeader = React.memo(\n  ({\n    enableRowSelection,\n    enableGrouping,\n    selectedAssessmentInfos,\n    assessmentNameToAggregates,\n    assessmentFilters,\n    toggleAssessmentFilter,\n    runDisplayName,\n    compareToRunUuid,\n    compareToRunDisplayName,\n    disableAssessmentTooltips,\n    collapsedHeader,\n    setCollapsedHeader,\n    isComparing,\n    headerGroups,\n    allRowSelected,\n    someRowSelected,\n    toggleAllRowsSelectedHandler,\n    setColumnSizing,\n  }: GenAiTracesTableHeaderProps) => {\n    const { theme } = useDesignSystemTheme();\n    const intl = useIntl();\n    const [isChevronHovered, setIsChevronHovered] = useState(false);\n\n    // super hacky way to get the border to show between the header and the row\n    const borderCss = enableGrouping\n      ? {\n          position: 'relative' as const,\n          '&::before': {\n            content: '\"\"',\n            position: 'absolute' as const,\n            top: '32px',\n            left: 0,\n            right: 0,\n            borderTop: `1px solid ${theme.colors.border}`,\n          },\n        }\n      : {};\n\n    return (\n      <>\n        {headerGroups.map((headerGroup, depth) => (\n          <TableRow\n            isHeader\n            key={headerGroup.id}\n            css={{\n              position: 'sticky',\n              top: depth * 40,\n              zIndex: 100,\n              // hack to hide the bottom border of the first row\n              ...(enableGrouping && {\n                '& > *': {\n                  borderBottom: depth === 0 ? 'none' : undefined,\n                },\n              }),\n              ...(depth === headerGroups.length - 1 && {\n                borderBottom: `1px solid ${isChevronHovered ? theme.colors.blue500 : theme.colors.border}`,\n                transition: 'border-color 0.2s',\n                // Remove default cell borders in the last header row\n                '& > *': {\n                  borderBottom: 'none',\n                },\n              }),\n            }}\n          >\n            {enableRowSelection && (\n              <div css={selectedAssessmentInfos.length === 0 && depth === 1 ? {} : borderCss}>\n                <TableRowSelectCell\n                  componentId=\"mlflow.experiment-evaluation-monitoring.evals-logs-table-header-select-cell\"\n                  checked={allRowSelected}\n                  indeterminate={someRowSelected}\n                  onChange={toggleAllRowsSelectedHandler()}\n                  checkboxLabel={intl.formatMessage({\n                    defaultMessage: 'Select all',\n                    description: 'Description for button to select all rows in table',\n                  })}\n                  noCheckbox={depth === 0}\n                  isDisabled={isComparing}\n                />\n              </div>\n            )}\n            {headerGroup.headers.map((header) => {\n              if (header.isPlaceholder) return null; // skip spacer cells\n\n              const assessmentInfo = selectedAssessmentInfos.find(\n                (info) => createAssessmentColumnId(info.name) === header.id,\n              );\n\n              const title = header.isPlaceholder ? null : (\n                <div\n                  css={{\n                    display: 'inline-block',\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    wordBreak: 'normal',\n                    overflowWrap: 'normal',\n                  }}\n                  title={String(flexRender(header.column.columnDef.header, header.getContext()))}\n                >\n                  {flexRender(header.column.columnDef.header, header.getContext())}\n                </div>\n              );\n              const titleElement =\n                assessmentInfo && !disableAssessmentTooltips ? (\n                  <HoverCard\n                    key={header.id}\n                    content={\n                      <>\n                        <EvaluationsAssessmentHoverCard\n                          assessmentInfo={assessmentInfo}\n                          assessmentNameToAggregates={assessmentNameToAggregates}\n                          allAssessmentFilters={assessmentFilters}\n                          toggleAssessmentFilter={toggleAssessmentFilter}\n                          runUuid={runDisplayName}\n                          compareToRunUuid={compareToRunUuid ? compareToRunDisplayName : undefined}\n                        />\n                      </>\n                    }\n                    trigger={title}\n                  />\n                ) : !isNil(title) ? (\n                  title\n                ) : null;\n\n              return (\n                <TableHeader\n                  key={header.column.id}\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluations_evaluationsoverview.tsx_576\"\n                  css={{\n                    '> span:first-of-type': {\n                      width: '100%',\n                      height: '100%',\n                      marginTop: 'auto',\n                      marginBottom: 'auto',\n                    },\n                    ...(selectedAssessmentInfos.length === 0 && depth === 1 ? {} : borderCss),\n                  }}\n                  style={{\n                    flex: `${header.colSpan} 1 var(--header-${escapeCssSpecialCharacters(header?.column.id)}-size)`,\n                  }}\n                  header={header}\n                  column={header.column}\n                  setColumnSizing={setColumnSizing}\n                >\n                  <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n                    {titleElement}\n                    <div\n                      css={{\n                        borderTop:\n                          !enableGrouping && selectedAssessmentInfos.length > 0\n                            ? `1px solid ${theme.colors.border}`\n                            : '',\n                        width: '100%',\n                      }}\n                    >\n                      {assessmentInfo && (\n                        <AssessmentColumnSummary\n                          theme={theme}\n                          intl={intl}\n                          assessmentInfo={assessmentInfo}\n                          assessmentAggregates={assessmentNameToAggregates[assessmentInfo.name]}\n                          allAssessmentFilters={assessmentFilters}\n                          toggleAssessmentFilter={toggleAssessmentFilter}\n                          currentRunDisplayName={runDisplayName}\n                          compareToRunDisplayName={compareToRunUuid ? compareToRunDisplayName : undefined}\n                          collapsedHeader={collapsedHeader}\n                        />\n                      )}\n                    </div>\n                  </div>\n                </TableHeader>\n              );\n            })}\n            {depth === headerGroups.length - 1 && (\n              <div\n                css={{\n                  paddingTop: '0px !important',\n                  position: 'absolute',\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  zIndex: 101,\n                  padding: 0,\n                  pointerEvents: 'none',\n                }}\n              >\n                {/* Mask the border under the chevron */}\n                <div\n                  css={{\n                    position: 'absolute',\n                    left: '50%',\n                    top: '100%',\n                    width: '24px',\n                    height: '12px',\n                    background: theme.colors.backgroundPrimary,\n                    transform: 'translate(-50%, -50%)',\n                    zIndex: 101,\n                  }}\n                />\n                {/* Chevron circle, pointer events enabled */}\n                <div\n                  css={{\n                    position: 'absolute',\n                    left: '50%',\n                    top: '100%',\n                    transform: 'translate(-50%, -50%)',\n                    zIndex: 102,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    width: '22px',\n                    height: '22px',\n                    pointerEvents: 'auto',\n                    cursor: 'pointer',\n                  }}\n                  onClick={() => setCollapsedHeader(!collapsedHeader)}\n                  onMouseEnter={() => setIsChevronHovered(true)}\n                  onMouseLeave={() => setIsChevronHovered(false)}\n                >\n                  <div\n                    css={{\n                      width: '22px',\n                      height: '22px',\n                      borderRadius: '50%',\n                      background: theme.colors.backgroundPrimary,\n                      border: `2px solid ${theme.colors.border}`,\n                      boxShadow: '0 2px 8px 0 rgba(0,0,0,0.10)',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      transition: 'border-color 0.2s, box-shadow 0.2s',\n                      ':hover': {\n                        borderColor: theme.colors.blue500,\n                        boxShadow: '0 2px 12px 0 rgba(0,0,0,0.18)',\n                      },\n                      opacity: isChevronHovered ? 1 : 0.5,\n                    }}\n                  >\n                    <ChevronDownIcon\n                      css={{\n                        transform: !collapsedHeader ? 'rotate(180deg)' : 'none',\n                        transition: 'transform 0.2s, opacity 0.2s',\n                        color: theme.colors.textSecondary,\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </TableRow>\n        ))}\n      </>\n    );\n  },\n);\n","import type { HeaderContext } from '@tanstack/react-table';\n\nimport { HoverCard, useDesignSystemTheme } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { TracesTableColumnGroup, TracesTableColumnGroupToLabelMap, type EvalTraceComparisonEntry } from '../types';\n\ntype HeaderCellRendererMeta = {\n  groupId: TracesTableColumnGroup;\n  visibleCount: number;\n  totalCount: number;\n  enableGrouping?: boolean;\n};\n\nexport const HeaderCellRenderer = (props: HeaderContext<EvalTraceComparisonEntry, unknown>) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { groupId, visibleCount, totalCount, enableGrouping } = props.column.columnDef.meta as HeaderCellRendererMeta;\n\n  if (!enableGrouping) {\n    return TracesTableColumnGroupToLabelMap[groupId as TracesTableColumnGroup];\n  }\n\n  const groupName = TracesTableColumnGroupToLabelMap[groupId as TracesTableColumnGroup];\n  return (\n    <div\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        overflow: 'hidden',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div>{groupName}</div>\n      {groupId === TracesTableColumnGroup.INFO ? null : visibleCount === totalCount ? (\n        <div\n          css={{\n            color: theme.colors.textSecondary,\n            fontWeight: 'normal',\n          }}\n        >\n          ({visibleCount}/{totalCount})\n        </div>\n      ) : (\n        <HoverCard\n          trigger={\n            <div\n              css={{\n                color: theme.colors.textSecondary,\n                ':hover': {\n                  textDecoration: 'underline',\n                },\n                fontWeight: 'normal',\n              }}\n            >\n              ({visibleCount}/{totalCount})\n            </div>\n          }\n          content={intl.formatMessage(\n            {\n              defaultMessage: 'Showing {visibleCount} out of {totalCount} {groupName}. Select columns to view more.',\n              description: 'Tooltip for the group column header',\n            },\n            {\n              visibleCount,\n              totalCount,\n              groupName,\n            },\n          )}\n          align=\"start\"\n        />\n      )}\n    </div>\n  );\n};\n","import { first, isNil, isString } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport {\n  KnownEvaluationResultAssessmentValueMapping,\n  getEvaluationResultAssessmentValue,\n  isDraftAssessment,\n} from './GenAiEvaluationTracesReview.utils';\nimport type { RunEvaluationResultAssessment, RunEvaluationResultAssessmentDraft } from '../types';\nimport { timeSinceStr } from '../utils/DisplayUtils';\nimport { useMarkdownConverter } from '../utils/MarkdownUtils';\n\ntype AssessmentWithHistory = RunEvaluationResultAssessment | RunEvaluationResultAssessmentDraft;\n\nexport const EvaluationsReviewAssessmentDetailedHistory = ({\n  history,\n  alwaysExpanded = false,\n}: {\n  /**\n   * List of assessments to display, ordered from the most recent to the oldest.\n   */\n  history: AssessmentWithHistory[];\n  /**\n   * Whether the detailed view is always expanded.\n   */\n  alwaysExpanded?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const [referenceDate, setReferenceDate] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const updateDateInterval = setInterval(() => {\n      setReferenceDate(new Date());\n    }, 5000);\n    return () => {\n      clearInterval(updateDateInterval);\n    };\n  }, []);\n\n  const transitions = useMemo(() => {\n    return history.reduce<[AssessmentWithHistory, AssessmentWithHistory][]>((result, next, index) => {\n      const previous = history[index + 1];\n      if (previous) {\n        return [...result, [next, previous]];\n      }\n\n      return result;\n    }, []);\n  }, [history]);\n\n  const { makeHTML } = useMarkdownConverter();\n\n  const rationaleHtml = useMemo(() => {\n    const rationale = first(history)?.rationale;\n    return isString(rationale) ? makeHTML(rationale) : null;\n  }, [history, makeHTML]);\n\n  if (!transitions.length) {\n    if (first(history)?.rationale) {\n      return (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n          }}\n        >\n          {/* eslint-disable-next-line react/no-danger */}\n          <span css={{ display: 'contents' }} dangerouslySetInnerHTML={{ __html: rationaleHtml ?? '' }} />\n        </div>\n      );\n    } else if (first(history)?.errorMessage) {\n      return (\n        <>\n          <Typography.Text color=\"error\">{first(history)?.errorMessage}</Typography.Text>\n        </>\n      );\n    } else {\n      return (\n        <>\n          {!alwaysExpanded && (\n            <div>\n              <Spacer size=\"sm\" />\n              <Typography.Hint>\n                <FormattedMessage\n                  defaultMessage=\"No details for assessment\"\n                  description=\"Evaluation review > assessments > no history\"\n                />\n              </Typography.Hint>\n            </div>\n          )}\n        </>\n      );\n    }\n  }\n\n  const getMappedValue = (assessment: AssessmentWithHistory) => {\n    const value = getEvaluationResultAssessmentValue(assessment);\n    const knownMapping = KnownEvaluationResultAssessmentValueMapping[assessment.name];\n\n    if (knownMapping && !isNil(value)) {\n      const messageDescriptor = knownMapping[value.toString()] ?? knownMapping['default'];\n      if (messageDescriptor) {\n        return <FormattedMessage {...messageDescriptor} values={{ value }} />;\n      }\n    }\n\n    return value;\n  };\n\n  return (\n    <>\n      <Spacer size=\"sm\" />\n      {transitions.map(([next, previous], index) => {\n        const prevValue = getMappedValue(previous);\n        const nextValue = getMappedValue(next);\n\n        const isSameValue = prevValue === nextValue;\n\n        const when = isDraftAssessment(next)\n          ? intl.formatMessage({\n              defaultMessage: 'just now',\n              description: 'Evaluation review > assessments > tooltip > just now',\n            })\n          : timeSinceStr(next.timestamp, referenceDate);\n\n        return (\n          <div\n            key={`${next.timestamp}-${index}`}\n            css={{ marginBottom: !alwaysExpanded ? theme.spacing.md : undefined }}\n          >\n            <Typography.Hint css={{ marginBottom: theme.spacing.xs }}>\n              {prevValue && nextValue && (\n                <>\n                  <code>{getMappedValue(previous)}</code> &#8594; <code>{getMappedValue(next)}</code>{' '}\n                </>\n              )}\n              {isSameValue ? (\n                <FormattedMessage\n                  defaultMessage=\"added {when} by {user}\"\n                  description=\"Evaluation review > assessments > detailed history > added history entry\"\n                  values={{\n                    when,\n                    user: next.source?.sourceId,\n                  }}\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage=\"edited {when} by {user}\"\n                  description=\"Evaluation review > assessments > detailed history > edited history entry\"\n                  values={{\n                    when,\n                    user: next.source?.sourceId,\n                  }}\n                />\n              )}\n            </Typography.Hint>\n            {next.rationale && <Typography.Text>{next.rationale}</Typography.Text>}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { first } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { LegacyTooltip } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport {\n  KnownEvaluationResultAssessmentValueMapping,\n  getEvaluationResultAssessmentValue,\n  isDraftAssessment,\n  isEvaluationResultOverallAssessment,\n  hasBeenEditedByHuman,\n} from './GenAiEvaluationTracesReview.utils';\nimport type { RunEvaluationResultAssessment } from '../types';\nimport { timeSinceStr } from '../utils/DisplayUtils';\n\nexport const EvaluationsReviewAssessmentTooltip = ({\n  assessmentHistory,\n  children,\n  disable = false,\n}: React.PropsWithChildren<{\n  assessmentHistory: RunEvaluationResultAssessment[];\n  disable?: boolean;\n}>) => {\n  const intl = useIntl();\n\n  const isOverallAssessment = useMemo(\n    () => assessmentHistory.some(isEvaluationResultOverallAssessment),\n    [assessmentHistory],\n  );\n\n  const [referenceDate, setReferenceDate] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const updateDateInterval = setInterval(() => {\n      setReferenceDate(new Date());\n    }, 5000);\n    return () => {\n      clearInterval(updateDateInterval);\n    };\n  }, []);\n\n  const getTitle = () => {\n    const mostRecentEntry = first(assessmentHistory);\n    if (!mostRecentEntry) {\n      return undefined;\n    }\n    const isEditedByHuman = hasBeenEditedByHuman(mostRecentEntry);\n\n    if (isEditedByHuman) {\n      const previousRecentEntry = assessmentHistory[1];\n      const previousRecentValue = previousRecentEntry\n        ? getEvaluationResultAssessmentValue(previousRecentEntry)?.toString()\n        : undefined;\n\n      const timeSince = isDraftAssessment(mostRecentEntry)\n        ? intl.formatMessage({\n            defaultMessage: 'just now',\n            description: 'Evaluation review > assessments > tooltip > just now',\n          })\n        : timeSinceStr(mostRecentEntry.timestamp, referenceDate);\n\n      if (previousRecentValue) {\n        const mappedValue = KnownEvaluationResultAssessmentValueMapping[mostRecentEntry.name]?.[previousRecentValue];\n        const displayedPreviousValue = mappedValue ? intl.formatMessage(mappedValue) : previousRecentValue;\n\n        return (\n          <FormattedMessage\n            defaultMessage=\"Edited {timeSince} by {source}. Original value: {value}\"\n            values={{\n              timeSince,\n              source: mostRecentEntry?.source?.sourceId,\n              value: displayedPreviousValue,\n            }}\n            description=\"Evaluation review > assessments > tooltip > edited by human\"\n          />\n        );\n      }\n\n      return (\n        <FormattedMessage\n          defaultMessage=\"Edited {timeSince} by {source}.\"\n          values={{\n            timeSince,\n            source: mostRecentEntry?.source?.sourceId,\n          }}\n          description=\"Evaluation review > assessments > tooltip > edited by human\"\n        />\n      );\n    }\n\n    if (isOverallAssessment) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Overall assessment added by LLM-as-a-judge\"\n          description=\"Evaluation review > assessments > tooltip > overall assessment added by LLM-as-a-judge\"\n        />\n      );\n    }\n\n    if (mostRecentEntry?.errorMessage) {\n      return mostRecentEntry?.errorMessage;\n    }\n\n    return (\n      <FormattedMessage\n        defaultMessage=\"Assessment added by LLM-as-a-judge\"\n        description=\"Evaluation review > assessments > tooltip > assessment added by LLM-as-a-judge\"\n      />\n    );\n  };\n  return (\n    <LegacyTooltip title={disable ? undefined : getTitle()} placement=\"top\">\n      {children}\n    </LegacyTooltip>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport {\n  Button,\n  Input,\n  Spacer,\n  TypeaheadComboboxInput,\n  TypeaheadComboboxMenu,\n  TypeaheadComboboxMenuItem,\n  TypeaheadComboboxRoot,\n  useComboboxState,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport { getEvaluationResultAssessmentValue } from './GenAiEvaluationTracesReview.utils';\nimport type {\n  AssessmentDropdownSuggestionItem,\n  RunEvaluationResultAssessment,\n  RunEvaluationResultAssessmentDraft,\n} from '../types';\n\n/**\n * A form capable of adding or editing an assessment.\n */\nexport const EvaluationsReviewAssessmentUpsertForm = ({\n  editedAssessment,\n  valueSuggestions,\n  onSave,\n  onCancel,\n  readOnly = false,\n}: {\n  editedAssessment?: RunEvaluationResultAssessment | RunEvaluationResultAssessmentDraft;\n  valueSuggestions: AssessmentDropdownSuggestionItem[];\n  onSave: (values: { value: string | boolean; rationale?: string; assessmentName?: string }) => void;\n  onCancel: () => void;\n  readOnly?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const [rationale, setRationale] = useState<string | undefined>(() => {\n    return editedAssessment?.rationale || undefined;\n  });\n\n  const [inputValue, setInputValue] = useState('');\n\n  const [formValue, setFormValue] = useState<AssessmentDropdownSuggestionItem | undefined>(() => {\n    // If we're editing an existing assessment, find relevant suggestion and use it as a form value\n    if (editedAssessment) {\n      const value = getEvaluationResultAssessmentValue(editedAssessment)?.toString();\n      if (value) {\n        return valueSuggestions.find((item) => item.key === value) ?? { key: value, label: value };\n      }\n\n      // Special case: if there's no value at all but we use a draft assessment, use assessment name\n      return { key: editedAssessment.name, label: editedAssessment.name };\n    }\n\n    return { key: '', label: '' };\n  });\n\n  const [showAllSuggestions, setShowAllSuggestions] = useState(false);\n\n  const filteredSuggestions = useMemo(\n    () => valueSuggestions.filter((item) => item.label.toLowerCase().includes(inputValue.toLowerCase())),\n    [inputValue, valueSuggestions],\n  );\n\n  // Show either all or filtered suggestions\n  const visibleSuggestions = showAllSuggestions ? valueSuggestions : filteredSuggestions;\n\n  // The combobox is displayed if there are suggestions or a custom value is provided\n  const displayCombobox = inputValue || visibleSuggestions.length > 0;\n\n  const comboboxState = useComboboxState<AssessmentDropdownSuggestionItem>({\n    componentId:\n      'codegen_mlflow_app_src_experiment-tracking_components_evaluations_components_evaluationsreviewassessmentupsertform.tsx_124',\n    allItems: valueSuggestions,\n    items: visibleSuggestions,\n    setItems: () => {},\n    setInputValue: (val) => {\n      setShowAllSuggestions(false);\n      setInputValue(val);\n    },\n    multiSelect: false,\n    allowNewValue: true,\n    itemToString: (item) => (item ? item.label : ''),\n    formValue,\n    initialSelectedItem: formValue,\n    initialInputValue: formValue?.label ?? '',\n    formOnChange: (item) => {\n      // If no changes made to the currently selected item, do nothing.\n      // This is required, otherwise TypeaheadCombobox will replace object with plain string\n      if (formValue?.label === item) {\n        return;\n      }\n\n      // If provided custom value, construct a new item\n      if (typeof item === 'string') {\n        setFormValue({ key: inputValue ?? '', label: inputValue ?? '' });\n        return;\n      }\n\n      // If used a dropdown option, set it as a form value\n      setFormValue(item);\n    },\n    onIsOpenChange(isOpen) {\n      if (isOpen) {\n        // After uses clicks on the combobox, we're displaying all suggestions\n        setShowAllSuggestions(true);\n      }\n    },\n  });\n\n  const addNewElementLabel = intl.formatMessage(\n    {\n      defaultMessage: 'Add \"{label}\"',\n      description: 'Evaluation review > assessments > add new custom value element',\n    },\n    {\n      label: inputValue,\n    },\n  );\n\n  return (\n    <div>\n      <TypeaheadComboboxRoot comboboxState={comboboxState}>\n        <TypeaheadComboboxInput\n          readOnly={readOnly}\n          css={{ width: 300, backgroundColor: theme.colors.backgroundPrimary }}\n          placeholder={intl.formatMessage({\n            defaultMessage: 'Select or type an assessment',\n            description: 'Evaluation review > assessments > combobox placeholder',\n          })}\n          onKeyUp={(e) => {\n            // Close menu on Enter if no item is highlighted. We need to use onKeyUp to avoid conflicts with Downshift\n            if (comboboxState.highlightedIndex === -1 && e.key === 'Enter') {\n              comboboxState.closeMenu();\n            }\n          }}\n          comboboxState={comboboxState}\n          formOnChange={(val) => {\n            setFormValue(val);\n          }}\n        />\n        {displayCombobox && (\n          <TypeaheadComboboxMenu comboboxState={comboboxState} emptyText={addNewElementLabel} matchTriggerWidth>\n            {visibleSuggestions.map((item, index) => (\n              <TypeaheadComboboxMenuItem\n                key={`${item.key}-${index}`}\n                item={item}\n                index={index}\n                comboboxState={comboboxState}\n                isDisabled={item?.disabled || false}\n              >\n                {item.label}\n              </TypeaheadComboboxMenuItem>\n            ))}\n          </TypeaheadComboboxMenu>\n        )}\n      </TypeaheadComboboxRoot>\n      <Spacer size=\"sm\" />\n      <div css={{ backgroundColor: theme.colors.backgroundPrimary, borderRadius: theme.general.borderRadiusBase }}>\n        <Input.TextArea\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluations_components_evaluationsreviewassessmentupsertform.tsx_160\"\n          autoSize\n          value={rationale ?? ''}\n          onChange={(e) => setRationale(e.target.value)}\n          placeholder={intl.formatMessage({\n            defaultMessage: 'Add rationale (optional)',\n            description: 'Evaluation review > assessments > rationale input placeholder',\n          })}\n        />\n      </div>\n      <Spacer size=\"sm\" />\n      <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n        <Button\n          size=\"small\"\n          type=\"primary\"\n          componentId=\"mlflow.evaluations_review.confirm_edited_assessment_button\"\n          onClick={() => {\n            // Assert form value\n            if (!formValue) {\n              return;\n            }\n            // Select assessment name either:\n            // - from general suggestion when having multiple\n            // - from already existing assessment when editing\n            // - from custom value when provided\n            const targetAssessmentName = formValue.rootAssessmentName ?? editedAssessment?.name ?? formValue.key;\n\n            // Either use value or set it to \"true\" if we're using plain custom assessment name\n            const value = targetAssessmentName !== formValue.key ? formValue.key : true;\n            onSave({ value, rationale, assessmentName: targetAssessmentName });\n          }}\n          disabled={!formValue?.key}\n        >\n          <FormattedMessage\n            defaultMessage=\"Confirm\"\n            description=\"Evaluation review > assessments > confirm assessment button label\"\n          />\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"tertiary\"\n          componentId=\"mlflow.evaluations_review.cancel_edited_assessment_button\"\n          onClick={onCancel}\n        >\n          <FormattedMessage\n            defaultMessage=\"Cancel\"\n            description=\"Evaluation review > assessments > cancel assessment button label\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { useIntl } from '@databricks/i18n';\n\nimport { getAssessmentValueSuggestions } from '../components/GenAiEvaluationTracesReview.utils';\nimport type { AssessmentInfo, AssessmentDropdownSuggestionItem, RunEvaluationResultAssessment } from '../types';\n\n/**\n * Manages the state of the edit assessment form. Provides methods to start adding and editing assessments.\n */\nexport const useEditAssessmentFormState = (\n  assessmentHistory: RunEvaluationResultAssessment[],\n  assessmentInfos?: AssessmentInfo[],\n) => {\n  const intl = useIntl();\n\n  // The assessment that is currently being edited.\n  const [editingAssessment, setEditingAssessment] = useState<RunEvaluationResultAssessment | undefined>(undefined);\n  // True if the upsert form is currently being shown, false otherwise.\n  const [showUpsertForm, setShowUpsertForm] = useState(false);\n  // A list of suggestions for the value dropdown.\n  const [suggestions, setSuggestions] = useState<AssessmentDropdownSuggestionItem[]>([]);\n\n  const setFormState = useCallback(\n    (isEditing: boolean, assessment?: RunEvaluationResultAssessment) => {\n      setEditingAssessment(assessment);\n      setShowUpsertForm(isEditing);\n      setSuggestions(getAssessmentValueSuggestions(intl, assessment, assessmentHistory, assessmentInfos));\n    },\n    [intl, assessmentInfos, assessmentHistory],\n  );\n  const editAssessment = useCallback(\n    (assessment: RunEvaluationResultAssessment) => setFormState(true, assessment),\n    [setFormState],\n  );\n  const addAssessment = useCallback(() => setFormState(true, undefined), [setFormState]);\n  const closeForm = useCallback(() => {\n    setEditingAssessment(undefined);\n    setShowUpsertForm(false);\n  }, []);\n\n  return {\n    suggestions,\n    editingAssessment,\n    showUpsertForm,\n    addAssessment,\n    editAssessment,\n    closeForm,\n  };\n};\n","import { first, isString } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport {\n  AssistantIcon,\n  BugIcon,\n  Button,\n  ChevronRightIcon,\n  ChevronUpIcon,\n  PlusIcon,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport { EvaluationsReviewAssessmentDetailedHistory } from './EvaluationsReviewAssessmentDetailedHistory';\nimport { EvaluationsReviewAssessmentTag } from './EvaluationsReviewAssessmentTag';\nimport { EvaluationsReviewAssessmentTooltip } from './EvaluationsReviewAssessmentTooltip';\nimport { EvaluationsReviewAssessmentUpsertForm } from './EvaluationsReviewAssessmentUpsertForm';\nimport {\n  createDraftEvaluationResultAssessmentObject,\n  getEvaluationResultAssessmentValue,\n  isAssessmentMissing,\n  isDraftAssessment,\n  KnownEvaluationResultAssessmentName,\n  KnownEvaluationResultAssessmentValueLabel,\n} from './GenAiEvaluationTracesReview.utils';\nimport { useEditAssessmentFormState } from '../hooks/useEditAssessmentFormState';\nimport type { AssessmentInfo, RunEvaluationResultAssessmentDraft, RunEvaluationResultAssessment } from '../types';\nimport { EXPANDED_ASSESSMENT_DETAILS_VIEW } from '../utils/EvaluationLogging';\nimport { useMarkdownConverter } from '../utils/MarkdownUtils';\n\n/**\n * Displays an expanded assessment with rationale and edit history.\n * Expanded assessments each has its own edit form.\n */\nconst ExpandedAssessment = ({\n  assessmentsType, // Type of the assessments, e.g. 'overall', 'response', 'retrieval'. Used for component IDs.\n  assessmentName, // Name of the assessment.\n  assessmentHistory, // A list of assessment history.\n  rootCauseAssessment, // The root cause assessment causing this to fail.\n  onUpsertAssessment, // Callback to upsert an assessment. This is called when the user saves an assessment. Any pre-saving logic should be done here.\n  allowEditing = false, // Whether editing is allowed.\n  options, // A list of known assessment names as options for the dropdown.\n  inputs, // Dependency array to control the refresh of the states.\n  assessmentInfo,\n  assessmentInfos,\n}: {\n  assessmentsType: 'overall' | 'response' | 'retrieval';\n  assessmentName: string;\n  assessmentHistory: RunEvaluationResultAssessment[];\n  rootCauseAssessment?: RunEvaluationResultAssessment;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  allowEditing?: boolean;\n  options?: KnownEvaluationResultAssessmentName[];\n  inputs?: any;\n  assessmentInfo: AssessmentInfo;\n  assessmentInfos: AssessmentInfo[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const isOverallAssessment = assessmentsType === 'overall';\n\n  const {\n    suggestions,\n    editingAssessment,\n    showUpsertForm: isEditing,\n    editAssessment,\n    closeForm,\n  } = useEditAssessmentFormState(assessmentHistory, assessmentInfos);\n\n  // Clear the states when the inputs change\n  useEffect(() => {\n    // Close the form if it's open\n    closeForm();\n  }, [inputs, closeForm]);\n\n  const assessment = first(assessmentHistory);\n\n  const intlLabel = KnownEvaluationResultAssessmentValueLabel[assessmentName];\n  const label = intlLabel ? intl.formatMessage(intlLabel) : assessmentName;\n\n  const hasValue = Boolean(assessment && getEvaluationResultAssessmentValue(assessment));\n  const isDraft = Boolean(assessment && isDraftAssessment(assessment));\n\n  const isEditable = allowEditing && (hasValue || isDraft);\n\n  const { makeHTML } = useMarkdownConverter();\n\n  const suggestedActionHtml = useMemo(() => {\n    const suggestedAction = assessment?.rootCauseAssessment?.suggestedActions;\n    return isString(suggestedAction) ? makeHTML(suggestedAction) : null;\n  }, [assessment, makeHTML]);\n\n  return (\n    <div\n      key={assessmentName}\n      css={{\n        display: 'block',\n        marginBottom: !isOverallAssessment ? theme.spacing.md : undefined,\n      }}\n    >\n      {!isEditing && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n          }}\n        >\n          {assessmentName !== KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT && (\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.sm,\n                alignItems: 'center',\n              }}\n            >\n              <EvaluationsReviewAssessmentTag\n                assessment={assessment}\n                aria-label={label}\n                disableJudgeTypeIcon={isAssessmentMissing(assessment)}\n                onEdit={\n                  isEditable\n                    ? () => {\n                        const assessmentToEdit = first(assessmentHistory);\n                        assessmentToEdit && editAssessment(assessmentToEdit);\n                      }\n                    : undefined\n                }\n                assessmentInfo={assessmentInfo}\n                type=\"assessment-value\"\n              />\n            </div>\n          )}\n          <EvaluationsReviewAssessmentDetailedHistory\n            history={assessmentHistory}\n            alwaysExpanded={isOverallAssessment}\n          />\n\n          {rootCauseAssessment && (\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: theme.spacing.sm,\n                marginTop: theme.spacing.xs,\n              }}\n            >\n              {/* Root cause failure */}\n              <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n                <BugIcon color=\"danger\" />\n                <Typography.Text bold>\n                  <FormattedMessage\n                    defaultMessage=\"Root cause failure:\"\n                    description=\"Evaluation review > assessments > root cause failure > title\"\n                  />\n                </Typography.Text>\n                <EvaluationsReviewAssessmentTag\n                  assessment={rootCauseAssessment}\n                  isRootCauseAssessment\n                  aria-label={label}\n                  assessmentInfo={assessmentInfo}\n                  type=\"assessment-value\"\n                />\n              </div>\n              <EvaluationsReviewAssessmentDetailedHistory\n                history={[rootCauseAssessment]}\n                alwaysExpanded={isOverallAssessment}\n              />\n              {suggestedActionHtml && (\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                  }}\n                >\n                  <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n                    <AssistantIcon color=\"ai\" />\n                    <Typography.Text bold>\n                      <FormattedMessage\n                        defaultMessage=\"Suggested actions\"\n                        description=\"Evaluation review > assessments > suggested actions > title\"\n                      />\n                    </Typography.Text>\n                  </div>\n                  {/* eslint-disable-next-line react/no-danger */}\n                  <span css={{ display: 'contents' }} dangerouslySetInnerHTML={{ __html: suggestedActionHtml }} />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n      {isEditing && (\n        <>\n          <EvaluationsReviewAssessmentUpsertForm\n            key={editingAssessment?.name}\n            editedAssessment={editingAssessment}\n            valueSuggestions={suggestions}\n            onCancel={closeForm}\n            onSave={({ value, rationale, assessmentName }) => {\n              const defaultAssessmentName = isOverallAssessment\n                ? KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT\n                : '';\n              const assessment = createDraftEvaluationResultAssessmentObject({\n                name: assessmentName ?? editingAssessment?.name ?? defaultAssessmentName,\n                isOverallAssessment: isOverallAssessment,\n                value,\n                rationale,\n              });\n              onUpsertAssessment(assessment);\n              closeForm();\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\n/**\n * Displays a list of assessments in expanded mode along with an add assessment button at the end.\n */\nconst ExpandedAssessments = ({\n  assessmentsType, // Type of the assessments, e.g. 'overall', 'response', 'retrieval'. Used for component IDs.\n  assessmentsByName, // A list of assessments by name.\n  rootCauseAssessment, // The root cause assessment causing this to fail.\n  onUpsertAssessment, // Callback to upsert an assessment. This is called when the user saves an assessment. Any pre-saving logic should be done here.\n  allowEditing = false, // Whether editing is allowed.\n  allowMoreThanOne = false, // Whether allow more than one assessment.\n  options, // A list of known assessment names as options for the dropdown.\n  inputs, // Dependency array to control the refresh of the states.\n  assessmentInfos,\n}: {\n  assessmentsType: 'overall' | 'response' | 'retrieval';\n  assessmentsByName: [string, RunEvaluationResultAssessment[]][];\n  rootCauseAssessment?: RunEvaluationResultAssessment;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  allowEditing?: boolean;\n  allowMoreThanOne?: boolean;\n  options?: KnownEvaluationResultAssessmentName[];\n  inputs?: any;\n  assessmentInfos: AssessmentInfo[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const isOverallAssessment = assessmentsType === 'overall';\n\n  const nonEmptyAssessments = assessmentsByName.filter(([_, assessmentList]) => assessmentList.length > 0);\n\n  const { suggestions, editingAssessment, showUpsertForm, addAssessment, closeForm } = useEditAssessmentFormState(\n    nonEmptyAssessments.flatMap(([_key, assessmentList]) => assessmentList),\n    assessmentInfos,\n  );\n\n  // Clear the states when the inputs change\n  useEffect(() => {\n    // Close the form if it's open\n    closeForm();\n  }, [inputs, closeForm]);\n\n  const containsAssessments = Object.keys(nonEmptyAssessments).length > 0;\n  const showAddAssessmentButton = allowEditing && (allowMoreThanOne || !containsAssessments);\n\n  return (\n    <>\n      <div\n        // comment for copybara formatting\n        css={{ display: 'block', flexWrap: 'wrap', gap: theme.spacing.xs }}\n      >\n        {nonEmptyAssessments.map(([key, assessmentList]) => {\n          const assessmentInfo = assessmentInfos.find((info) => info.name === key);\n          if (!assessmentInfo) {\n            return <div css={{ display: 'none' }} key={key} />;\n          }\n          return (\n            <ExpandedAssessment\n              key={key}\n              assessmentsType={assessmentsType}\n              assessmentName={key}\n              assessmentHistory={assessmentList}\n              rootCauseAssessment={rootCauseAssessment}\n              onUpsertAssessment={onUpsertAssessment}\n              allowEditing={allowEditing}\n              options={options}\n              inputs={inputs}\n              assessmentInfo={assessmentInfo}\n              assessmentInfos={assessmentInfos}\n            />\n          );\n        })}\n        {showAddAssessmentButton && (\n          <Button\n            componentId={`mlflow.evaluations_review.add_assessment_${assessmentsType}_button`}\n            onClick={addAssessment}\n            icon={<PlusIcon />}\n            size=\"small\"\n          >\n            <FormattedMessage\n              defaultMessage=\"Add assessment\"\n              description=\"Evaluation review > assessments > add assessment button label\"\n            />\n          </Button>\n        )}\n      </div>\n      {showUpsertForm && (\n        <>\n          <Spacer size=\"sm\" />\n          <EvaluationsReviewAssessmentUpsertForm\n            valueSuggestions={suggestions}\n            onCancel={closeForm}\n            onSave={({ value, rationale, assessmentName }) => {\n              const defaultAssessmentName = isOverallAssessment\n                ? KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT\n                : assessmentName || '';\n              const assessment = createDraftEvaluationResultAssessmentObject({\n                name: assessmentName ?? editingAssessment?.name ?? defaultAssessmentName,\n                isOverallAssessment: isOverallAssessment,\n                value,\n                rationale,\n              });\n              onUpsertAssessment(assessment);\n              closeForm();\n            }}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\n/**\n * Displays a list of assessments in compact mode.\n * Compact assessments share the same edit form.\n */\nconst CompactAssessments = ({\n  assessmentsType, // Type of the assessments, e.g. 'overall', 'response', 'retrieval'. Used for component IDs.\n  assessmentsByName, // A list of assessments by name.\n  onUpsertAssessment, // Callback to upsert an assessment. This is called when the user saves an assessment. Any pre-saving logic should be done here.\n  allowEditing = false, // Whether editing is allowed.\n  allowMoreThanOne = false, // Whether allow more than one assessment.\n  options, // A list of known assessment names as options for the dropdown.\n  inputs, // Dependency array to control the refresh of the states.\n  assessmentInfos,\n}: {\n  assessmentsType: 'overall' | 'response' | 'retrieval';\n  assessmentsByName: [string, RunEvaluationResultAssessment[]][];\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  allowEditing?: boolean;\n  allowMoreThanOne?: boolean;\n  options?: KnownEvaluationResultAssessmentName[];\n  inputs?: any;\n  assessmentInfos: AssessmentInfo[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const isOverallAssessment = assessmentsType === 'overall';\n\n  const { suggestions, editingAssessment, showUpsertForm, addAssessment, editAssessment, closeForm } =\n    useEditAssessmentFormState(\n      assessmentsByName.flatMap(([_key, assessmentList]) => assessmentList),\n      assessmentInfos,\n    );\n\n  // Clear the states when the inputs change\n  useEffect(() => {\n    // Close the form if it's open\n    closeForm();\n  }, [inputs, closeForm]);\n\n  const nonEmptyAssessments = assessmentsByName.filter(([_, assessmentList]) => assessmentList.length > 0);\n\n  const containsAssessments = Object.keys(nonEmptyAssessments).length > 0;\n  const showAddAssessmentButton = allowEditing && (allowMoreThanOne || !containsAssessments);\n\n  return (\n    <>\n      <div css={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.xs, alignItems: 'center' }}>\n        {nonEmptyAssessments.map(([key, assessmentList]) => {\n          const assessment = first(assessmentList);\n          const assessmentInfo = assessmentInfos.find((info) => info.name === key);\n\n          if (!assessmentInfo) {\n            // eslint-disable-next-line react/jsx-key -- TODO(FEINF-1756)\n            return <></>;\n          }\n\n          const intlLabel = KnownEvaluationResultAssessmentValueLabel[key];\n          const label = intlLabel ? intl.formatMessage(intlLabel) : key;\n\n          const hasValue = Boolean(assessment && getEvaluationResultAssessmentValue(assessment));\n          const isDraft = Boolean(assessment && isDraftAssessment(assessment));\n\n          const isEditable = allowEditing && (hasValue || isDraft) && assessmentInfo.isEditable;\n\n          return (\n            <div\n              key={key}\n              css={{\n                display: 'contents',\n              }}\n            >\n              <EvaluationsReviewAssessmentTooltip assessmentHistory={assessmentList}>\n                <EvaluationsReviewAssessmentTag\n                  assessment={assessment}\n                  aria-label={label}\n                  active={editingAssessment?.name === key && showUpsertForm}\n                  disableJudgeTypeIcon={isAssessmentMissing(assessment)}\n                  onEdit={\n                    isEditable\n                      ? () => {\n                          const assessmentToEdit = first(assessmentList);\n                          assessmentToEdit && editAssessment(assessmentToEdit);\n                        }\n                      : undefined\n                  }\n                  assessmentInfo={assessmentInfo}\n                  type=\"assessment-value\"\n                />\n              </EvaluationsReviewAssessmentTooltip>\n            </div>\n          );\n        })}\n        {showAddAssessmentButton && (\n          <Button\n            componentId={`mlflow.evaluations_review.add_assessment_${assessmentsType}_button`}\n            onClick={addAssessment}\n            icon={<PlusIcon />}\n            size=\"small\"\n          >\n            <FormattedMessage\n              defaultMessage=\"Add assessment\"\n              description=\"Evaluation review > assessments > add assessment button label\"\n            />\n          </Button>\n        )}\n      </div>\n      {showUpsertForm && (\n        <>\n          <Spacer size=\"sm\" />\n          <EvaluationsReviewAssessmentUpsertForm\n            key={editingAssessment?.name}\n            editedAssessment={editingAssessment}\n            valueSuggestions={suggestions}\n            onCancel={closeForm}\n            onSave={({ value, rationale, assessmentName }) => {\n              const defaultAssessmentName = isOverallAssessment\n                ? KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT\n                : assessmentName || '';\n              const assessment = createDraftEvaluationResultAssessmentObject({\n                name: assessmentName ?? editingAssessment?.name ?? defaultAssessmentName,\n                isOverallAssessment: isOverallAssessment,\n                value,\n                rationale,\n              });\n              onUpsertAssessment(assessment);\n              closeForm();\n            }}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\n/**\n * Displays a list of assessments with an option to expand and see the detailed view.\n */\nexport const EvaluationsReviewAssessments = ({\n  assessmentsType, // Type of the assessments, e.g. 'overall', 'response', 'retrieval'. Used for component IDs.\n  assessmentsByName, // A list of assessments by name.\n  rootCauseAssessment, // The root cause assessment causing this to fail.\n  onUpsertAssessment, // Callback to upsert an assessment. This is called when the user saves an assessment. Any pre-saving logic should be done here.\n  allowEditing = false, // Whether editing is allowed.\n  allowMoreThanOne = false, // Whether allow more than one assessment.\n  alwaysExpanded = false, // Whether the detailed view is always expanded.\n  options, // A list of known assessment names as options for the dropdown.\n  inputs, // Dependency array to control the refresh of the states.\n  assessmentInfos,\n}: {\n  assessmentsType: 'overall' | 'response' | 'retrieval';\n  assessmentsByName: [string, RunEvaluationResultAssessment[]][];\n  rootCauseAssessment?: RunEvaluationResultAssessment;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  allowEditing?: boolean;\n  allowMoreThanOne?: boolean;\n  alwaysExpanded?: boolean;\n  options?: KnownEvaluationResultAssessmentName[];\n  inputs?: any;\n  assessmentInfos: AssessmentInfo[];\n}) => {\n  // True if in expanded view, false otherwise.\n  const [isExpandedView, setIsExpandedView] = useState(false);\n  const showExpandedView = alwaysExpanded || isExpandedView;\n\n  const nonEmptyAssessments = assessmentsByName.filter(([_, assessmentList]) => assessmentList.length > 0);\n\n  // Remove the overall assessment if it's not an overall assessment and we're not showing overall assessments.\n  let filteredAssessmentsByName = assessmentsByName;\n  if (assessmentsType !== 'overall') {\n    filteredAssessmentsByName = assessmentsByName.filter(\n      ([key, _]) => key !== KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT,\n    );\n  }\n\n  const containsAssessments = Object.keys(nonEmptyAssessments).length > 0;\n\n  return (\n    <>\n      {showExpandedView && (\n        <ExpandedAssessments\n          assessmentsType={assessmentsType}\n          assessmentsByName={filteredAssessmentsByName}\n          rootCauseAssessment={rootCauseAssessment}\n          onUpsertAssessment={onUpsertAssessment}\n          allowEditing={allowEditing}\n          allowMoreThanOne={allowMoreThanOne}\n          options={options}\n          inputs={inputs}\n          assessmentInfos={assessmentInfos}\n        />\n      )}\n      {!showExpandedView && (\n        <CompactAssessments\n          assessmentsType={assessmentsType}\n          assessmentsByName={filteredAssessmentsByName}\n          onUpsertAssessment={onUpsertAssessment}\n          allowEditing={allowEditing}\n          allowMoreThanOne={allowMoreThanOne}\n          options={options}\n          inputs={inputs}\n          assessmentInfos={assessmentInfos}\n        />\n      )}\n\n      {containsAssessments && !alwaysExpanded && (\n        <>\n          <Spacer size=\"sm\" />\n          <Button\n            size=\"small\"\n            type=\"tertiary\"\n            componentId={`mlflow.evaluations_review.see_assessment_details_${assessmentsType}_button`}\n            icon={showExpandedView ? <ChevronUpIcon /> : <ChevronRightIcon />}\n            onClick={() => setIsExpandedView((mode) => !mode)}\n          >\n            {showExpandedView ? (\n              <FormattedMessage\n                defaultMessage=\"Hide details\"\n                description=\"Evaluation review > assessments > hide details button\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See details\"\n                description=\"Evaluation review > assessments > see details button\"\n              />\n            )}\n          </Button>\n        </>\n      )}\n    </>\n  );\n};\n","import { Button, ChevronRightIcon } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport const EvaluationsReviewAssessmentsConfirmButton = ({\n  toBeReviewed,\n  containsOverallAssessment,\n  isNextResultAvailable,\n  overridingExistingReview,\n  hasPendingAssessments,\n  onClickNext,\n  onSave,\n  onCancelOverride,\n}: {\n  toBeReviewed: boolean;\n  containsOverallAssessment: boolean;\n  isNextResultAvailable: boolean;\n  hasPendingAssessments: boolean;\n  overridingExistingReview: boolean;\n  onSave?: () => Promise<void>;\n  onClickNext?: () => void;\n  onCancelOverride?: () => void;\n}) => {\n  if (toBeReviewed) {\n    if (hasPendingAssessments) {\n      return (\n        <Button type=\"primary\" componentId=\"mlflow.evaluations_review.save_pending_assessments_button\" onClick={onSave}>\n          <FormattedMessage defaultMessage=\"Save\" description=\"Evaluation review > assessments > save button\" />\n        </Button>\n      );\n    }\n    if (overridingExistingReview) {\n      return (\n        <Button componentId=\"mlflow.evaluations_review.cancel_override_assessments_button\" onClick={onCancelOverride}>\n          <FormattedMessage\n            defaultMessage=\"Cancel\"\n            description=\"Evaluation review > assessments > cancel overriding review button\"\n          />\n        </Button>\n      );\n    }\n    return (\n      <Button\n        type=\"primary\"\n        componentId=\"mlflow.evaluations_review.mark_as_reviewed_button\"\n        onClick={onSave}\n        disabled={!containsOverallAssessment}\n      >\n        <FormattedMessage\n          defaultMessage=\"Mark as reviewed\"\n          description=\"Evaluation review > assessments > mark as reviewed button\"\n        />\n      </Button>\n    );\n  }\n  return (\n    <Button\n      type=\"primary\"\n      componentId=\"mlflow.evaluations_review.next_evaluation_result_button\"\n      onClick={onClickNext}\n      endIcon={<ChevronRightIcon />}\n      disabled={!isNextResultAvailable}\n    >\n      <FormattedMessage defaultMessage=\"Next\" description=\"Evaluation review > assessments > next button\" />\n    </Button>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport const VerticalBar = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        width: '1.5px',\n        backgroundColor: theme.colors.border,\n      }}\n    />\n  );\n};\n","import { first } from 'lodash';\n\nimport {\n  Button,\n  CheckCircleIcon,\n  PencilIcon,\n  Spacer,\n  SparkleDoubleIcon,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport { EvaluationsReviewAssessmentTag } from './EvaluationsReviewAssessmentTag';\nimport { EvaluationsReviewAssessments } from './EvaluationsReviewAssessments';\nimport { EvaluationsReviewAssessmentsConfirmButton } from './EvaluationsReviewAssessmentsConfirmButton';\nimport {\n  KnownEvaluationResultAssessmentName,\n  getOrderedAssessments,\n  isEvaluationResultReviewedAlready,\n  KnownEvaluationResponseAssessmentNames,\n  isAssessmentMissing,\n} from './GenAiEvaluationTracesReview.utils';\nimport { VerticalBar } from './VerticalBar';\nimport type {\n  AssessmentInfo,\n  RunEvaluationResultAssessment,\n  RunEvaluationResultAssessmentDraft,\n  RunEvaluationTracesDataEntry,\n} from '../types';\n\n/**\n * Displays section with a list of evaluation assessments: overall and detailed.\n */\nconst EvaluationsReviewSingleRunAssessmentsSection = ({\n  evaluationResult,\n  onUpsertAssessment,\n  onSavePendingAssessments,\n  onClickNext,\n  onResetPendingAssessments,\n  isNextAvailable,\n  overridingExistingReview = false,\n  pendingAssessments = [],\n  setOverridingExistingReview,\n  isReadOnly = false,\n  assessmentInfos,\n}: {\n  evaluationResult: RunEvaluationTracesDataEntry;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  onSavePendingAssessments: () => Promise<void>;\n  onClickNext?: () => void;\n  onResetPendingAssessments?: () => void;\n  isNextAvailable?: boolean;\n  overridingExistingReview?: boolean;\n  pendingAssessments?: RunEvaluationResultAssessmentDraft[];\n  setOverridingExistingReview: (override: boolean) => void;\n  isReadOnly?: boolean;\n  assessmentInfos: AssessmentInfo[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  if (!evaluationResult) {\n    return null;\n  }\n  const currentOverallAssessment = first(evaluationResult.overallAssessments);\n  const rootCauseAssessmentName = currentOverallAssessment?.rootCauseAssessment?.assessmentName;\n  const rootCauseAssessment = rootCauseAssessmentName\n    ? first(evaluationResult?.responseAssessmentsByName[rootCauseAssessmentName])\n    : undefined;\n\n  const toBeReviewed =\n    !isReadOnly && (!isEvaluationResultReviewedAlready(evaluationResult) || overridingExistingReview);\n\n  const reopenReviewTooltip = intl.formatMessage({\n    defaultMessage: 'Reopen review',\n    description: 'Evaluation review > assessments > reopen review tooltip',\n  });\n\n  const overallAssessmentsByName: [string, RunEvaluationResultAssessment[]][] = [\n    [KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT, evaluationResult.overallAssessments],\n  ];\n\n  const overallAssessmentInfo = assessmentInfos.find(\n    (info) => info.name === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT,\n  );\n\n  return (\n    <div css={{ width: '100%' }}>\n      <div css={{ width: '100%', paddingLeft: theme.spacing.md, paddingRight: theme.spacing.md }}>\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            paddingBottom: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n          }}\n        >\n          {overallAssessmentInfo && (\n            <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n              <SparkleDoubleIcon color=\"ai\" />\n              <Typography.Text bold>\n                <FormattedMessage\n                  defaultMessage=\"Overall assessment:\"\n                  description=\"Evaluation review > assessments > overall assessment > title\"\n                />\n              </Typography.Text>\n              {/* TODO: make overall assessment editable */}\n              <EvaluationsReviewAssessmentTag\n                assessment={currentOverallAssessment}\n                aria-label={KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT}\n                disableJudgeTypeIcon={isAssessmentMissing(currentOverallAssessment)}\n                assessmentInfo={overallAssessmentInfo}\n                type=\"assessment-value\"\n              />\n            </div>\n          )}\n          <EvaluationsReviewAssessments\n            assessmentsType=\"overall\"\n            assessmentsByName={overallAssessmentsByName}\n            rootCauseAssessment={rootCauseAssessment}\n            onUpsertAssessment={onUpsertAssessment}\n            allowEditing={toBeReviewed}\n            alwaysExpanded\n            options={[KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT]}\n            assessmentInfos={assessmentInfos}\n          />\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.general.borderRadiusBase,\n              padding: theme.spacing.sm,\n            }}\n          >\n            <Typography.Text bold>\n              <FormattedMessage\n                defaultMessage=\"Detailed assessments\"\n                description=\"Evaluation review > assessments > detailed assessments > title\"\n              />\n            </Typography.Text>\n            <Spacer size=\"sm\" />\n            <EvaluationsReviewAssessments\n              assessmentsType=\"response\"\n              assessmentsByName={getOrderedAssessments(evaluationResult.responseAssessmentsByName)}\n              onUpsertAssessment={onUpsertAssessment}\n              allowEditing={toBeReviewed}\n              allowMoreThanOne\n              options={KnownEvaluationResponseAssessmentNames}\n              assessmentInfos={assessmentInfos}\n            />\n          </div>\n        </div>\n        <div\n          css={{\n            position: 'sticky',\n            backgroundColor: theme.colors.backgroundSecondary,\n            padding: theme.spacing.md,\n            top: 0,\n            display: 'flex',\n            justifyContent: 'space-between',\n            gap: theme.spacing.sm,\n            zIndex: theme.options.zIndexBase,\n          }}\n        >\n          <div>\n            {!toBeReviewed && !isReadOnly && (\n              <div\n                css={{\n                  border: `1px solid ${theme.colors.border}`,\n                  borderRadius: theme.general.borderRadiusBase,\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: theme.spacing.sm,\n                  padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n                }}\n              >\n                <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />\n                <Typography.Hint>\n                  <FormattedMessage\n                    defaultMessage=\"Reviewed\"\n                    description=\"Evaluation review > assessments > already reviewed indicator\"\n                  />\n                </Typography.Hint>\n                <Tooltip\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluations_components_evaluationsreviewassessmentssection.tsx_149\"\n                  content={reopenReviewTooltip}\n                >\n                  <Button\n                    aria-label={reopenReviewTooltip}\n                    componentId=\"mlflow.evaluations_review.reopen_review_button\"\n                    size=\"small\"\n                    icon={<PencilIcon />}\n                    onClick={() => setOverridingExistingReview(true)}\n                  />\n                </Tooltip>\n              </div>\n            )}\n          </div>\n          <div css={{ flex: 1 }} />\n          {pendingAssessments.length > 0 && (\n            <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n              <FormattedMessage\n                defaultMessage=\"{pendingCount} pending {pendingCount, plural, =1 {change} other {changes}}\"\n                description=\"Evaluation review > assessments > pending entries counter\"\n                values={{ pendingCount: pendingAssessments.length }}\n              />\n              <Button\n                componentId=\"mlflow.evaluations_review.discard_pending_assessments_button\"\n                onClick={onResetPendingAssessments}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Discard\"\n                  description=\"Evaluation review > assessments > discard pending assessments button label\"\n                />\n              </Button>\n            </div>\n          )}\n          <EvaluationsReviewAssessmentsConfirmButton\n            onSave={async () => {\n              // Save the pending assessments\n              await onSavePendingAssessments();\n              // We can reset the override review flag now\n              setOverridingExistingReview(false);\n            }}\n            containsOverallAssessment={Boolean(currentOverallAssessment)}\n            isNextResultAvailable={Boolean(isNextAvailable)}\n            onClickNext={onClickNext}\n            toBeReviewed={toBeReviewed}\n            hasPendingAssessments={pendingAssessments.length > 0}\n            overridingExistingReview={overridingExistingReview}\n            onCancelOverride={() => setOverridingExistingReview(false)}\n          />\n        </div>\n      </div>\n      <Spacer size=\"md\" />\n    </div>\n  );\n};\n\n/**\n * Displays section with a list of evaluation assessments: overall and detailed.\n */\nexport const EvaluationsReviewAssessmentsSection = ({\n  evaluationResult,\n  otherEvaluationResult,\n  onUpsertAssessment,\n  onSavePendingAssessments,\n  onClickNext,\n  onResetPendingAssessments,\n  isNextAvailable,\n  overridingExistingReview = false,\n  pendingAssessments = [],\n  setOverridingExistingReview,\n  isReadOnly = false,\n  assessmentInfos,\n}: {\n  evaluationResult?: RunEvaluationTracesDataEntry;\n  otherEvaluationResult?: RunEvaluationTracesDataEntry;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  onSavePendingAssessments: () => Promise<void>;\n  onClickNext?: () => void;\n  onResetPendingAssessments?: () => void;\n  isNextAvailable?: boolean;\n  overridingExistingReview?: boolean;\n  pendingAssessments?: RunEvaluationResultAssessmentDraft[];\n  setOverridingExistingReview: (override: boolean) => void;\n  isReadOnly?: boolean;\n  assessmentInfos: AssessmentInfo[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        width: '100%',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {evaluationResult && (\n        <EvaluationsReviewSingleRunAssessmentsSection\n          evaluationResult={evaluationResult}\n          onUpsertAssessment={onUpsertAssessment}\n          onSavePendingAssessments={onSavePendingAssessments}\n          onClickNext={onClickNext}\n          onResetPendingAssessments={onResetPendingAssessments}\n          isNextAvailable={isNextAvailable}\n          overridingExistingReview={overridingExistingReview}\n          setOverridingExistingReview={setOverridingExistingReview}\n          pendingAssessments={pendingAssessments}\n          isReadOnly={isReadOnly}\n          assessmentInfos={assessmentInfos}\n        />\n      )}\n      {otherEvaluationResult && (\n        <>\n          <VerticalBar />\n          <EvaluationsReviewSingleRunAssessmentsSection\n            evaluationResult={otherEvaluationResult}\n            onUpsertAssessment={onUpsertAssessment}\n            onSavePendingAssessments={onSavePendingAssessments}\n            onClickNext={onClickNext}\n            onResetPendingAssessments={onResetPendingAssessments}\n            isNextAvailable={isNextAvailable}\n            overridingExistingReview={overridingExistingReview}\n            setOverridingExistingReview={setOverridingExistingReview}\n            pendingAssessments={pendingAssessments}\n            isReadOnly\n            assessmentInfos={assessmentInfos}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\n\nimport { Drawer, Empty, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport { ModelTraceExplorer } from '@databricks/web-shared/model-trace-explorer';\n\nexport const EvaluationTraceDataDrawer = ({\n  requestId,\n  onClose,\n  trace,\n}: {\n  requestId: string;\n  onClose: () => void;\n  trace: ModelTrace;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const title = (\n    <Typography.Title level={2} withoutMargins>\n      {requestId}\n    </Typography.Title>\n  );\n\n  const renderContent = () => {\n    const containsSpans = trace.data.spans.length > 0;\n    if (isNil(trace) || !containsSpans) {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            description={null}\n            title={\n              <FormattedMessage\n                defaultMessage=\"No trace data recorded\"\n                description=\"Experiment page > traces data drawer > no trace data recorded empty state\"\n              />\n            }\n          />\n        </>\n      );\n    } else {\n      return (\n        <div\n          css={{\n            height: '100%',\n            marginLeft: -theme.spacing.lg,\n            marginRight: -theme.spacing.lg,\n            marginBottom: -theme.spacing.lg,\n          }}\n          // This is required for mousewheel scrolling within `Drawer`\n          onWheel={(e) => e.stopPropagation()}\n        >\n          <ModelTraceExplorer modelTrace={trace} />\n        </div>\n      );\n    }\n  };\n\n  return (\n    <Drawer.Root\n      modal\n      open\n      onOpenChange={(open) => {\n        if (!open) {\n          onClose();\n        }\n      }}\n    >\n      <Drawer.Content\n        componentId=\"mlflow.evaluations_review.trace_data_drawer\"\n        width=\"85vw\"\n        title={title}\n        expandContentToFullHeight\n      >\n        {renderContent()}\n      </Drawer.Content>\n    </Drawer.Root>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Button, Spacer, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport type { UseQueryResult } from '@databricks/web-shared/query-client';\n\nimport { EvaluationTraceDataDrawer } from './EvaluationTraceDataDrawer';\nimport { VerticalBar } from './VerticalBar';\nimport { GenAITracesTableActions } from '../GenAITracesTableActions';\nimport type { RunEvaluationTracesDataEntry } from '../types';\nimport { prettySizeWithUnit } from '../utils/DisplayUtils';\n\n// Keep in sync with https://src.dev.databricks.com/databricks-eng/universe@679eb50f2399a24f4c7f919ccb55028bd8662316/-/blob/tracing-server/src/dao/TraceEntitySpace.scala?L45\nconst DROPPED_SPAN_SIZE_TRACE_METADATA_KEY = 'databricks.tracingserver.dropped_spans_size_bytes';\n\nconst EvaluationsReviewSingleRunHeaderSection = ({\n  experimentId,\n  runDisplayName,\n  evaluationResult,\n  exportToEvalsInstanceEnabled = false,\n  traceQueryResult,\n  getTrace,\n}: {\n  experimentId: string;\n  runDisplayName?: string;\n  evaluationResult: RunEvaluationTracesDataEntry;\n  exportToEvalsInstanceEnabled?: boolean;\n  traceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n  getTrace?: (requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const [selectedTraceDetailsRequestId, setSelectedTraceDetailsRequestId] = useState<string | null>(null);\n\n  const droppedSpanSize = evaluationResult.traceInfo?.trace_metadata?.[DROPPED_SPAN_SIZE_TRACE_METADATA_KEY];\n  let prettySizeString: string | undefined;\n  if (!isNil(droppedSpanSize)) {\n    const fractionDigits = 2;\n    const prettySize = prettySizeWithUnit(Number(droppedSpanSize), fractionDigits);\n    prettySizeString = `${prettySize.value} ${prettySize.unit}`;\n  }\n\n  return (\n    <div css={{ width: '100%' }}>\n      <div\n        css={{\n          width: '100%',\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.md,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <Typography.Title level={4}>{runDisplayName}</Typography.Title>\n        {evaluationResult.requestId && (\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.sm,\n            }}\n          >\n            {exportToEvalsInstanceEnabled && getTrace && (\n              <GenAITracesTableActions\n                experimentId={experimentId}\n                selectedTraces={[evaluationResult]}\n                traceActions={{\n                  exportToEvals: {\n                    getTrace,\n                  },\n                }}\n                traceInfos={undefined}\n              />\n            )}\n            <Tooltip\n              delayDuration={0}\n              componentId=\"mlflow.evaluations_review.see_detailed_trace_view_tooltip\"\n              content={\n                droppedSpanSize\n                  ? `The trace spans were not stored due to their large size: ${prettySizeString}`\n                  : undefined\n              }\n              side=\"left\"\n            >\n              <Button\n                componentId=\"mlflow.evaluations_review.see_detailed_trace_view_button\"\n                onClick={() => setSelectedTraceDetailsRequestId(evaluationResult.requestId)}\n                loading={traceQueryResult.isLoading}\n                disabled={!isNil(droppedSpanSize)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"See detailed trace view\"\n                  description=\"Evaluation review > see detailed trace view button\"\n                />\n              </Button>\n            </Tooltip>\n          </div>\n        )}\n        {selectedTraceDetailsRequestId &&\n          (!isNil(traceQueryResult.data) ? (\n            <EvaluationTraceDataDrawer\n              onClose={() => {\n                setSelectedTraceDetailsRequestId(null);\n              }}\n              requestId={selectedTraceDetailsRequestId}\n              trace={traceQueryResult.data}\n            />\n          ) : (\n            <>\n              {intl.formatMessage({\n                defaultMessage: 'No trace data available',\n                description: 'Evaluation review > no trace data available',\n              })}\n            </>\n          ))}\n      </div>\n      <Spacer size=\"md\" />\n    </div>\n  );\n};\n\n/**\n * Displays inputs for a given evaluation result, across one or two runs.\n */\nexport const EvaluationsReviewHeaderSection = ({\n  experimentId,\n  runDisplayName,\n  otherRunDisplayName,\n  evaluationResult,\n  otherEvaluationResult,\n  exportToEvalsInstanceEnabled = false,\n  traceQueryResult,\n  compareToTraceQueryResult,\n}: {\n  experimentId: string;\n  evaluationResult: RunEvaluationTracesDataEntry;\n  runDisplayName?: string;\n  otherRunDisplayName?: string;\n  otherEvaluationResult?: RunEvaluationTracesDataEntry;\n  exportToEvalsInstanceEnabled?: boolean;\n  traceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n  compareToTraceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        width: '100%',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <EvaluationsReviewSingleRunHeaderSection\n        experimentId={experimentId}\n        runDisplayName={runDisplayName}\n        evaluationResult={evaluationResult}\n        exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n        traceQueryResult={traceQueryResult}\n      />\n      {otherRunDisplayName && otherEvaluationResult && (\n        <>\n          <VerticalBar />\n          <EvaluationsReviewSingleRunHeaderSection\n            experimentId={experimentId}\n            runDisplayName={otherRunDisplayName}\n            evaluationResult={otherEvaluationResult}\n            exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n            traceQueryResult={compareToTraceQueryResult}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\ninterface EvaluationsReviewCopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const EvaluationsReviewCopyButton = ({\n  copyText,\n  showLabel = true,\n  componentId,\n  ...buttonProps\n}: EvaluationsReviewCopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { useMemo } from 'react';\n\nexport const EvaluationsReviewExpandedJSONValueCell = ({ value }: { value: string | Record<string, unknown> }) => {\n  const structuredJSONValue = useMemo(() => {\n    // If value is already an object, stringify it directly\n    if (typeof value === 'object' && value !== null) {\n      return JSON.stringify(value, null, 2);\n    }\n\n    // If value is a string, try to parse it as JSON\n    if (typeof value === 'string') {\n      try {\n        const objectData = JSON.parse(value);\n        return JSON.stringify(objectData, null, 2);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    // For any other type, return null\n    return null;\n  }, [value]);\n\n  return (\n    <div\n      css={{\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n        fontFamily: structuredJSONValue ? 'monospace' : undefined,\n      }}\n    >\n      {structuredJSONValue || String(value)}\n    </div>\n  );\n};\n","import { isString } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { EvaluationsReviewCopyButton } from './EvaluationsReviewCopyButton';\nimport { EvaluationsReviewExpandedJSONValueCell } from './EvaluationsReviewExpandableCell';\nimport { EXPECTED_FACTS_FIELD_NAME, stringifyValue } from './GenAiEvaluationTracesReview.utils';\nimport { useMarkdownConverter } from '../utils/MarkdownUtils';\n\nexport const EvaluationsReviewTextBox = ({\n  fieldName,\n  title,\n  value,\n  showCopyIcon,\n}: {\n  fieldName: string;\n  title: React.ReactNode;\n  value: any;\n  showCopyIcon?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { makeHTML } = useMarkdownConverter();\n\n  const htmlContent = useMemo(() => {\n    return isString(value) ? makeHTML(value) : null;\n  }, [value, makeHTML]);\n\n  const jsonContent = useMemo(() => {\n    return isString(value) ? null : stringifyValue(value);\n  }, [value]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        flex: 1,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.md,\n        borderRadius: theme.general.borderRadiusBase,\n        marginBottom: theme.spacing.md,\n      }}\n    >\n      <div css={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Text bold>{title}</Typography.Text>\n        {showCopyIcon && (\n          <EvaluationsReviewCopyButton\n            copyText={stringifyValue(value)}\n            showLabel={false}\n            type=\"tertiary\"\n            icon={<CopyIcon />}\n          />\n        )}\n      </div>\n      <Typography.Paragraph\n        css={{\n          marginBottom: '0 !important',\n        }}\n      >\n        {isString(value) ? (\n          // eslint-disable-next-line react/no-danger\n          <span css={{ display: 'contents' }} dangerouslySetInnerHTML={{ __html: htmlContent ?? '' }} />\n        ) : fieldName === EXPECTED_FACTS_FIELD_NAME && Array.isArray(value) ? (\n          <ul>\n            {value.map((fact, index) => (\n              <li key={index}>\n                <EvaluationsReviewExpandedJSONValueCell key={index} value={fact} />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <EvaluationsReviewExpandedJSONValueCell value={jsonContent} />\n        )}\n      </Typography.Paragraph>\n    </div>\n  );\n};\n","import { Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { EvaluationsReviewTextBox } from './EvaluationsReviewTextBox';\nimport type { RunEvaluationTracesDataEntry } from '../types';\n\n/**\n * Displays inputs for a given evaluation result of a single run.\n */\nconst EvaluationsReviewSingleRunInputSection = ({\n  evaluationResult,\n}: {\n  evaluationResult: RunEvaluationTracesDataEntry;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { inputs } = evaluationResult;\n  const inputsEntries = Object.entries(inputs);\n  const noValues = inputsEntries.length === 0;\n  return (\n    <div css={{ width: '100%', paddingLeft: theme.spacing.md, paddingRight: theme.spacing.md }}>\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"{count, plural, one {Input} other {Inputs}}\"\n          description=\"Evaluation review > input section > title\"\n          values={{ count: inputsEntries.length }}\n        />\n      </Typography.Text>\n      <Spacer size=\"sm\" />\n      {noValues && (\n        <Typography.Paragraph>\n          <FormattedMessage\n            defaultMessage=\"No inputs logged\"\n            description=\"Evaluation review > input section > no values\"\n          />\n        </Typography.Paragraph>\n      )}\n      {inputsEntries.map(([key, input]) => (\n        <EvaluationsReviewTextBox fieldName={key} title={key} value={input} key={key} />\n      ))}\n    </div>\n  );\n};\n\n/**\n * Displays inputs for a given evaluation result, across one or two runs.\n */\nexport const EvaluationsReviewInputSection = ({\n  evaluationResult,\n  otherEvaluationResult,\n}: {\n  evaluationResult?: RunEvaluationTracesDataEntry;\n  otherEvaluationResult?: RunEvaluationTracesDataEntry;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const inputsAreTheSame = evaluationResult?.inputsId === otherEvaluationResult?.inputsId;\n  return (\n    <div\n      css={{\n        display: 'flex',\n        width: '100%',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {evaluationResult && <EvaluationsReviewSingleRunInputSection evaluationResult={evaluationResult} />}\n      {!inputsAreTheSame && otherEvaluationResult && (\n        <EvaluationsReviewSingleRunInputSection evaluationResult={otherEvaluationResult} />\n      )}\n    </div>\n  );\n};\n","import { Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { EvaluationsReviewTextBox } from './EvaluationsReviewTextBox';\nimport {\n  isRetrievedContext,\n  KnownEvaluationResultAssessmentOutputLabel,\n  KnownEvaluationResultAssessmentTargetLabel,\n} from './GenAiEvaluationTracesReview.utils';\nimport { VerticalBar } from './VerticalBar';\nimport type { RunEvaluationTracesDataEntry } from '../types';\n\nconst EvaluationsReviewSingleRunResponseSection = ({\n  evaluationResult,\n}: {\n  evaluationResult: RunEvaluationTracesDataEntry;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { outputs, targets } = evaluationResult;\n\n  // Filter out retrieve_context values\n  const outputEntries = Object.entries(outputs).filter(([, value]) => !isRetrievedContext(value));\n  const targetEntries = Object.entries(targets).filter(([, value]) => !isRetrievedContext(value));\n\n  const noValues = outputEntries.length === 0 && targetEntries.length === 0;\n\n  return (\n    <div css={{ paddingLeft: theme.spacing.md, paddingRight: theme.spacing.md, width: '100%' }}>\n      <Typography.Text bold>\n        <FormattedMessage defaultMessage=\"Response\" description=\"Evaluation review > Response section > title\" />\n      </Typography.Text>\n      <Spacer size=\"sm\" />\n      {noValues && (\n        <Typography.Paragraph>\n          <FormattedMessage\n            defaultMessage=\"No responses or targets logged\"\n            description=\"Evaluation review > Response section > no values\"\n          />\n        </Typography.Paragraph>\n      )}\n      <div css={{ display: 'flex', gap: theme.spacing.md, alignItems: 'flex-start' }}>\n        {outputEntries.length > 0 && (\n          <div css={{ flex: 1 }}>\n            {outputEntries.map(([key, output]) => {\n              const mappedTitle = KnownEvaluationResultAssessmentOutputLabel[key];\n              const title = mappedTitle ? <FormattedMessage {...mappedTitle} /> : key;\n              return <EvaluationsReviewTextBox key={key} fieldName={key} title={title} value={output} showCopyIcon />;\n            })}\n          </div>\n        )}\n\n        {targetEntries.length > 0 && (\n          <div css={{ flex: 1 }}>\n            {targetEntries.map(([key, output]) => {\n              const mappedTitle = KnownEvaluationResultAssessmentTargetLabel[key];\n              const title = mappedTitle ? <FormattedMessage {...mappedTitle} /> : key;\n              return <EvaluationsReviewTextBox key={key} fieldName={key} title={title} value={output} showCopyIcon />;\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Displays responses and targets for a given evaluation result.\n */\nexport const EvaluationsReviewResponseSection = ({\n  evaluationResult,\n  otherEvaluationResult,\n}: {\n  evaluationResult?: RunEvaluationTracesDataEntry;\n  otherEvaluationResult?: RunEvaluationTracesDataEntry;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        width: '100%',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {evaluationResult && <EvaluationsReviewSingleRunResponseSection evaluationResult={evaluationResult} />}\n      {otherEvaluationResult && (\n        <>\n          <VerticalBar />\n          <EvaluationsReviewSingleRunResponseSection evaluationResult={otherEvaluationResult} />\n        </>\n      )}\n    </div>\n  );\n};\n","import { QuestionMarkIcon, SparkleDoubleIcon, UserIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { hasBeenEditedByHuman } from './GenAiEvaluationTracesReview.utils';\nimport type { AssessmentInfo, RunEvaluationResultAssessment } from '../types';\nimport { getEvaluationResultAssessmentBackgroundColor } from '../utils/Colors';\n\n/**\n * A small indicator that shows the evaluation result's icon and sentiment.\n */\nexport const EvaluationsReviewListItemIndicator = ({\n  assessment,\n  chunkRelevanceAssessmentInfo,\n}: {\n  assessment?: RunEvaluationResultAssessment;\n  chunkRelevanceAssessmentInfo?: AssessmentInfo;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (!assessment && !chunkRelevanceAssessmentInfo) {\n    return <></>;\n  }\n\n  return (\n    <div\n      css={{\n        paddingLeft: theme.spacing.sm,\n        paddingRight: theme.spacing.sm,\n        paddingTop: 1,\n        paddingBottom: 1,\n        backgroundColor: chunkRelevanceAssessmentInfo\n          ? getEvaluationResultAssessmentBackgroundColor(theme, chunkRelevanceAssessmentInfo, assessment)\n          : '',\n        borderRadius: theme.general.borderRadiusBase,\n        svg: { width: 12, height: 12 },\n      }}\n    >\n      {assessment ? (\n        <>{hasBeenEditedByHuman(assessment) ? <UserIcon /> : <SparkleDoubleIcon />}</>\n      ) : (\n        <QuestionMarkIcon />\n      )}\n    </div>\n  );\n};\n","import { first, isNil } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { Spacer, Tag, TableSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useIntl, FormattedMessage } from '@databricks/i18n';\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport type { UseQueryResult } from '@databricks/web-shared/query-client';\n\nimport { EvaluationsReviewAssessments } from './EvaluationsReviewAssessments';\nimport { EvaluationsReviewListItemIndicator } from './EvaluationsReviewListItemIndicator';\nimport {\n  isEvaluationResultReviewedAlready,\n  KnownEvaluationResultAssessmentMetadataFields,\n  getOrderedAssessments,\n  KnownEvaluationRetrievalAssessmentNames,\n  KnownEvaluationResultAssessmentName,\n} from './GenAiEvaluationTracesReview.utils';\nimport { VerticalBar } from './VerticalBar';\nimport type {\n  AssessmentInfo,\n  RunEvaluationResultAssessmentDraft,\n  RunEvaluationTracesDataEntry,\n  RunEvaluationTracesRetrievalChunk,\n} from '../types';\nimport { useMarkdownConverter } from '../utils/MarkdownUtils';\nimport { getRetrievedContextFromTrace } from '../utils/TraceUtils';\n\nfunction isValidHttpUrl(str: any) {\n  // The URL() constructor will throw on invalid URL\n  try {\n    const url = new URL(str);\n    return url.protocol === 'http:' || url.protocol === 'https:';\n  } catch (err) {\n    return false;\n  }\n}\n\nconst RetrievedChunkHeader = ({ chunk, index }: { chunk: RunEvaluationTracesRetrievalChunk; index: number }) => {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      <Tag componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluations_components_evaluationsreviewretrievalsection.tsx_30\">\n        #{index + 1}\n      </Tag>\n      {isValidHttpUrl(chunk.docUrl) ? (\n        <Typography.Link\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_evaluations_components_evaluationsreviewretrievalsection.tsx_32\"\n          href={chunk.docUrl}\n          ellipsis\n          openInNewTab\n          strong\n        >\n          {chunk.docUrl}\n        </Typography.Link>\n      ) : (\n        <Typography.Title level={4} withoutMargins ellipsis>\n          {chunk.docUrl}\n        </Typography.Title>\n      )}\n    </div>\n  );\n};\n\nconst EvaluationsReviewSingleRunRetrievalSection = ({\n  evaluationResult,\n  onUpsertAssessment,\n  overridingExistingReview = false,\n  isReadOnly = false,\n  assessmentInfos,\n  traceQueryResult,\n}: {\n  evaluationResult: RunEvaluationTracesDataEntry;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  overridingExistingReview?: boolean;\n  isReadOnly?: boolean;\n  assessmentInfos: AssessmentInfo[];\n  traceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const [selectedIndex, setSelectedIndex] = useState<number>(0);\n\n  const { makeHTML } = useMarkdownConverter();\n\n  const evaluationRetrievalChunks = useMemo(() => {\n    return !isNil(evaluationResult.retrievalChunks) && evaluationResult.retrievalChunks.length > 0\n      ? evaluationResult.retrievalChunks\n      : getRetrievedContextFromTrace(evaluationResult.responseAssessmentsByName, traceQueryResult.data);\n  }, [evaluationResult.responseAssessmentsByName, evaluationResult.retrievalChunks, traceQueryResult.data]);\n\n  const selectedEntryHtmlContent = useMemo(\n    () => makeHTML(evaluationRetrievalChunks?.[selectedIndex]?.content),\n    [evaluationRetrievalChunks, selectedIndex, makeHTML],\n  );\n\n  const noRetrievalFound = (evaluationRetrievalChunks || []).length === 0;\n\n  const toBeReviewed =\n    !isReadOnly && (!isEvaluationResultReviewedAlready(evaluationResult) || overridingExistingReview);\n\n  const selectedChunk = evaluationRetrievalChunks?.[selectedIndex];\n\n  const sectionTitle = intl.formatMessage({\n    defaultMessage: 'Retrieval',\n    description: 'Evaluation review > Retrieval section > title',\n  });\n\n  return (\n    <div\n      css={{\n        paddingLeft: theme.spacing.md,\n        paddingRight: theme.spacing.md,\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n      role=\"region\"\n      aria-label={sectionTitle}\n    >\n      <Typography.Text bold>{sectionTitle}</Typography.Text>\n\n      {isNil(evaluationRetrievalChunks) && traceQueryResult.isFetching ? (\n        <TableSkeleton lines={3} />\n      ) : noRetrievalFound ? (\n        <Typography.Text>\n          <i>\n            <FormattedMessage\n              defaultMessage=\"No span with type RETRIEVER found in trace.\"\n              description=\"GenAi Traces Table > Modal > Message displayed when no retrievals are found\"\n            />\n          </i>\n        </Typography.Text>\n      ) : (\n        <div\n          css={{\n            minHeight: 400,\n            maxHeight: 600,\n            overflow: 'hidden',\n            display: 'flex',\n            marginTop: theme.spacing.sm,\n            border: `1px solid ${theme.colors.border}`,\n            borderRadius: theme.general.borderRadiusBase,\n          }}\n        >\n          <div\n            css={{\n              flex: 1,\n              flexShrink: 1,\n              maxWidth: 300,\n              minWidth: 200,\n              overflow: 'auto',\n              padding: theme.spacing.sm,\n              borderRight: `1px solid ${theme.colors.border}`,\n            }}\n            role=\"listbox\"\n          >\n            {noRetrievalFound && (\n              <Typography.Paragraph>\n                <FormattedMessage\n                  defaultMessage=\"No retrieval logged\"\n                  description=\"Evaluation review > retrieval section > no values\"\n                />\n              </Typography.Paragraph>\n            )}\n            {(evaluationRetrievalChunks || []).map((chunk, index) => {\n              const chunkRelevanceAssessmentInfo = assessmentInfos.find(\n                (info) => info.name === KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE,\n              );\n\n              return (\n                <div\n                  role=\"option\"\n                  aria-label={chunk.content?.slice(0, 255)}\n                  aria-selected={index === selectedIndex}\n                  key={[chunk.docUrl, index].join('-')}\n                  css={{\n                    backgroundColor: index === selectedIndex ? theme.colors.actionIconBackgroundHover : 'transparent',\n                    '&:hover': {\n                      backgroundColor: theme.colors.actionIconBackgroundHover,\n                    },\n                    padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n                    overflow: 'hidden',\n                    display: 'flex',\n                    gap: theme.spacing.sm,\n                    alignItems: 'center',\n                    cursor: 'pointer',\n                    width: '100%',\n                  }}\n                  onClick={() => {\n                    setSelectedIndex(index);\n                  }}\n                >\n                  {/* TODO: Find a better way to determine which retrieval assessment to use for the indicator */}\n                  <EvaluationsReviewListItemIndicator\n                    chunkRelevanceAssessmentInfo={chunkRelevanceAssessmentInfo}\n                    assessment={first(\n                      chunk?.retrievalAssessmentsByName?.[KnownEvaluationResultAssessmentName.CHUNK_RELEVANCE],\n                    )}\n                  />\n                  <Typography.Text ellipsis css={{ flex: 1, lineHeight: theme.typography.lineHeightLg }}>\n                    {chunk.content}\n                  </Typography.Text>\n                </div>\n              );\n            })}\n          </div>\n\n          {selectedChunk && (\n            <div css={{ flex: 2, display: 'flex', flexDirection: 'column', width: 0 }}>\n              <div\n                css={{\n                  padding: theme.spacing.md,\n                  borderBottom: `1px solid ${theme.colors.border}`,\n                }}\n              >\n                <RetrievedChunkHeader chunk={selectedChunk} index={selectedIndex} />\n                <Spacer size=\"md\" />\n                <EvaluationsReviewAssessments\n                  assessmentsType=\"retrieval\"\n                  assessmentsByName={getOrderedAssessments(selectedChunk.retrievalAssessmentsByName || {})}\n                  onUpsertAssessment={(assessment: RunEvaluationResultAssessmentDraft) => {\n                    if (!assessment.metadata) {\n                      assessment.metadata = {};\n                    }\n                    // Set the chunk index to the selected index\n                    assessment.metadata[KnownEvaluationResultAssessmentMetadataFields.CHUNK_INDEX] = selectedIndex;\n                    onUpsertAssessment(assessment);\n                  }}\n                  allowEditing={toBeReviewed}\n                  allowMoreThanOne\n                  options={KnownEvaluationRetrievalAssessmentNames}\n                  inputs={[selectedIndex]}\n                  assessmentInfos={assessmentInfos}\n                />\n              </div>\n              <div css={{ padding: theme.spacing.md, overflow: 'auto' }}>\n                <Typography.Paragraph>\n                  <span\n                    css={{ display: 'contents' }}\n                    // eslint-disable-next-line react/no-danger\n                    dangerouslySetInnerHTML={{ __html: selectedEntryHtmlContent ?? '' }}\n                  />\n                </Typography.Paragraph>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Displays RAG retrieval results for a given evaluation result.\n */\nexport const EvaluationsReviewRetrievalSection = ({\n  evaluationResult,\n  otherEvaluationResult,\n  onUpsertAssessment,\n  overridingExistingReview = false,\n  isReadOnly = false,\n  assessmentInfos,\n  traceQueryResult,\n  compareToTraceQueryResult,\n}: {\n  evaluationResult?: RunEvaluationTracesDataEntry;\n  otherEvaluationResult?: RunEvaluationTracesDataEntry;\n  onUpsertAssessment: (assessment: RunEvaluationResultAssessmentDraft) => void;\n  overridingExistingReview?: boolean;\n  isReadOnly?: boolean;\n  assessmentInfos: AssessmentInfo[];\n  traceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n  compareToTraceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        width: '100%',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {evaluationResult && (\n        <EvaluationsReviewSingleRunRetrievalSection\n          evaluationResult={evaluationResult}\n          onUpsertAssessment={onUpsertAssessment}\n          overridingExistingReview={overridingExistingReview}\n          isReadOnly={isReadOnly}\n          assessmentInfos={assessmentInfos}\n          traceQueryResult={traceQueryResult}\n        />\n      )}\n      {otherEvaluationResult && (\n        <>\n          <VerticalBar />\n          <EvaluationsReviewSingleRunRetrievalSection\n            evaluationResult={otherEvaluationResult}\n            onUpsertAssessment={onUpsertAssessment}\n            overridingExistingReview={overridingExistingReview}\n            isReadOnly={isReadOnly}\n            assessmentInfos={assessmentInfos}\n            traceQueryResult={compareToTraceQueryResult}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Alert, Button, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport type { UseQueryResult } from '@databricks/web-shared/query-client';\n\nimport { EvaluationsReviewAssessmentsSection } from './EvaluationsReviewAssessmentsSection';\nimport { EvaluationsReviewHeaderSection } from './EvaluationsReviewHeaderSection';\nimport { EvaluationsReviewInputSection } from './EvaluationsReviewInputSection';\nimport { EvaluationsReviewResponseSection } from './EvaluationsReviewResponseSection';\nimport { EvaluationsReviewRetrievalSection } from './EvaluationsReviewRetrievalSection';\nimport { getEvaluationResultTitle } from './GenAiEvaluationTracesReview.utils';\nimport { usePendingAssessmentEntries } from '../hooks/usePendingAssessmentEntries';\nimport type { AssessmentInfo, RunEvaluationResultAssessmentDraft, RunEvaluationTracesDataEntry } from '../types';\n\nexport const EvaluationsReviewDetailsHeader = ({\n  evaluationResult,\n}: {\n  evaluationResult: RunEvaluationTracesDataEntry;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm, overflow: 'hidden' }}>\n      <Typography.Title\n        level={2}\n        withoutMargins\n        css={{ flex: 1, whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}\n      >\n        {getEvaluationResultTitle(evaluationResult)}\n      </Typography.Title>\n    </div>\n  );\n};\n\nexport const EvaluationsReviewDetails = ({\n  experimentId,\n  evaluationResult,\n  otherEvaluationResult,\n  onSavePendingAssessments,\n  onClickNext,\n  runDisplayName,\n  compareToRunDisplayName,\n  isNextAvailable = false,\n  isReadOnly = false,\n  exportToEvalsInstanceEnabled = false,\n  assessmentInfos,\n  traceQueryResult,\n  compareToTraceQueryResult,\n}: {\n  experimentId: string;\n  evaluationResult: RunEvaluationTracesDataEntry;\n  otherEvaluationResult?: RunEvaluationTracesDataEntry;\n  onSavePendingAssessments?: (\n    evaluationResult: RunEvaluationTracesDataEntry,\n    pendingAssessments: RunEvaluationResultAssessmentDraft[],\n  ) => Promise<void>;\n  onClickNext?: () => void;\n  runDisplayName?: string;\n  compareToRunDisplayName?: string;\n  isNextAvailable?: boolean;\n  isReadOnly?: boolean;\n  exportToEvalsInstanceEnabled?: boolean;\n  assessmentInfos: AssessmentInfo[];\n  traceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n  compareToTraceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n}) => {\n  const intl = useIntl();\n\n  const { pendingAssessments, draftEvaluationResult, upsertAssessment, resetPendingAssessments } =\n    usePendingAssessmentEntries(evaluationResult);\n\n  const hasPendingAssessments = pendingAssessments.length > 0;\n\n  // If user has already reviewed the evaluation, this flag allows to override the review and enable editing\n  const [overridingExistingReview, setOverridingExistingReview] = useState(false);\n\n  const hasErrorCode = Boolean(evaluationResult.errorCode);\n  const hasErrorMessage = Boolean(evaluationResult.errorMessage);\n  const showAlert = hasErrorCode || hasErrorMessage;\n  const [alertExpanded, setAlertExpanded] = useState(false);\n  const toggleAlertExpanded = () => setAlertExpanded((alertExpanded) => !alertExpanded);\n\n  return (\n    <>\n      {showAlert ? (\n        <>\n          <Alert\n            action={\n              hasErrorMessage && (\n                <Button\n                  componentId={`mlflow.evaluations_review.evaluation_error_alert.show_${\n                    alertExpanded ? 'less' : 'more'\n                  }_button`}\n                  onClick={toggleAlertExpanded}\n                >\n                  {alertExpanded ? (\n                    <FormattedMessage defaultMessage=\"Show less\" description=\"Button to close alert description\" />\n                  ) : (\n                    <FormattedMessage defaultMessage=\"Show more\" description=\"Button to expand alert description\" />\n                  )}\n                </Button>\n              )\n            }\n            closable={false}\n            componentId=\"mlflow.evaluations_review.evaluation_error_alert\"\n            message={hasErrorCode ? `${evaluationResult.errorCode}` : 'UNKNOWN_ERROR'}\n            description={alertExpanded && `${evaluationResult.errorMessage}`}\n            type=\"error\"\n          />\n          <Spacer size=\"md\" />\n        </>\n      ) : null}\n      <EvaluationsReviewHeaderSection\n        experimentId={experimentId}\n        runDisplayName={runDisplayName}\n        otherRunDisplayName={compareToRunDisplayName}\n        evaluationResult={evaluationResult}\n        otherEvaluationResult={otherEvaluationResult}\n        exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n        traceQueryResult={traceQueryResult}\n        compareToTraceQueryResult={compareToTraceQueryResult}\n      />\n      <EvaluationsReviewAssessmentsSection\n        evaluationResult={draftEvaluationResult}\n        otherEvaluationResult={otherEvaluationResult}\n        onUpsertAssessment={upsertAssessment}\n        onClickNext={onClickNext}\n        onSavePendingAssessments={async () => {\n          // Save and reset the pending assessments\n          await onSavePendingAssessments?.(evaluationResult, pendingAssessments);\n          resetPendingAssessments();\n        }}\n        isNextAvailable={isNextAvailable}\n        overridingExistingReview={overridingExistingReview}\n        setOverridingExistingReview={setOverridingExistingReview}\n        pendingAssessments={pendingAssessments}\n        onResetPendingAssessments={resetPendingAssessments}\n        isReadOnly={isReadOnly}\n        assessmentInfos={assessmentInfos}\n      />\n      <EvaluationsReviewInputSection\n        evaluationResult={evaluationResult}\n        otherEvaluationResult={otherEvaluationResult}\n      />\n      <EvaluationsReviewResponseSection\n        evaluationResult={evaluationResult}\n        otherEvaluationResult={otherEvaluationResult}\n      />\n      <EvaluationsReviewRetrievalSection\n        evaluationResult={draftEvaluationResult}\n        otherEvaluationResult={otherEvaluationResult}\n        onUpsertAssessment={upsertAssessment}\n        overridingExistingReview={overridingExistingReview}\n        isReadOnly={isReadOnly}\n        assessmentInfos={assessmentInfos}\n        traceQueryResult={traceQueryResult}\n        compareToTraceQueryResult={compareToTraceQueryResult}\n      />\n      <Spacer size=\"lg\" />\n    </>\n  );\n};\n","import { flatMap, groupBy, orderBy, uniq } from 'lodash';\nimport { useCallback, useMemo, useReducer } from 'react';\n\nimport {\n  KnownEvaluationResultAssessmentMetadataFields,\n  getEvaluationResultAssessmentChunkIndex,\n  getEvaluationResultAssessmentValue,\n  isEvaluationResultOverallAssessment,\n  isEvaluationResultPerRetrievalChunkAssessment,\n} from '../components/GenAiEvaluationTracesReview.utils';\nimport type { RunEvaluationResultAssessmentDraft, RunEvaluationTracesDataEntry } from '../types';\n\nexport const usePendingAssessmentEntries = (evaluationResult: RunEvaluationTracesDataEntry) => {\n  const [pendingAssessments, dispatch] = useReducer(\n    (\n      state: RunEvaluationResultAssessmentDraft[],\n      action:\n        | {\n            type: 'upsertAssessment';\n            payload: RunEvaluationResultAssessmentDraft;\n          }\n        | {\n            type: 'resetPendingAssessments';\n          },\n    ): RunEvaluationResultAssessmentDraft[] => {\n      switch (action.type) {\n        case 'resetPendingAssessments':\n          return [];\n        case 'upsertAssessment':\n          const existingPendingAssessment = state.find(\n            (assessment) =>\n              assessment.name === action.payload.name &&\n              getEvaluationResultAssessmentChunkIndex(assessment) ===\n                getEvaluationResultAssessmentChunkIndex(action.payload),\n          );\n\n          // If the incoming assessment is already in the pending list, update it.\n          if (existingPendingAssessment) {\n            return state.map((assessment) => {\n              if (assessment === existingPendingAssessment) {\n                // Special case: handling existing assessment without value. The value of the incoming assessment\n                // will be used to update the name of the assessment.\n                if (getEvaluationResultAssessmentValue(assessment) === '' && action.payload.stringValue) {\n                  return { ...action.payload, stringValue: '', name: action.payload.stringValue };\n                }\n                return action.payload;\n              }\n              return assessment;\n            });\n          }\n          return [action.payload, ...state];\n      }\n    },\n    [],\n  );\n\n  const overallAssessmentList = useMemo(() => {\n    if (!evaluationResult) {\n      return [];\n    }\n    const pendingOverallAssessment = pendingAssessments.find(isEvaluationResultOverallAssessment);\n    if (pendingOverallAssessment) {\n      return [pendingOverallAssessment, ...evaluationResult.overallAssessments];\n    }\n    return evaluationResult.overallAssessments;\n  }, [evaluationResult, pendingAssessments]);\n\n  const responseAssessmentMap = useMemo(() => {\n    if (!evaluationResult) {\n      return {};\n    }\n\n    const allAssessmentNames = uniq([\n      ...Object.keys(evaluationResult.responseAssessmentsByName),\n      ...pendingAssessments\n        .filter(\n          (assessment) =>\n            !isEvaluationResultOverallAssessment(assessment) &&\n            !isEvaluationResultPerRetrievalChunkAssessment(assessment),\n        )\n        .map((assessment) => assessment.name),\n    ]);\n\n    return Object.fromEntries(\n      allAssessmentNames.map((key) => {\n        const pendingAssessmentForType = pendingAssessments.filter((assessment) => assessment.name === key);\n        return [key, [...pendingAssessmentForType, ...(evaluationResult.responseAssessmentsByName[key] || [])]];\n      }),\n    );\n  }, [evaluationResult, pendingAssessments]);\n\n  const retrievalChunksWithDraftAssessments = useMemo(() => {\n    const perChunkAssessments = pendingAssessments.filter(isEvaluationResultPerRetrievalChunkAssessment);\n    return evaluationResult.retrievalChunks?.map((chunk, index) => {\n      const pendingAssessmentForChunk = perChunkAssessments.filter(\n        (assessment) => assessment.metadata?.[KnownEvaluationResultAssessmentMetadataFields.CHUNK_INDEX] === index,\n      );\n      const existingAssessments = flatMap(chunk.retrievalAssessmentsByName ?? {});\n      // Group detailed assessments by name\n      const retrievalAssessmentsByName = groupBy([...pendingAssessmentForChunk, ...existingAssessments], 'name');\n      // Ensure each group is sorted by timestamp in descending order\n      Object.keys(retrievalAssessmentsByName).forEach((key) => {\n        retrievalAssessmentsByName[key] = orderBy(retrievalAssessmentsByName[key], 'timestamp', 'desc');\n      });\n      return {\n        ...chunk,\n        retrievalAssessmentsByName: retrievalAssessmentsByName,\n      };\n    });\n  }, [pendingAssessments, evaluationResult]);\n\n  const draftEvaluationResult = useMemo(() => {\n    return {\n      ...evaluationResult,\n      overallAssessments: overallAssessmentList,\n      responseAssessmentsByName: responseAssessmentMap,\n      retrievalChunks: retrievalChunksWithDraftAssessments,\n    };\n  }, [evaluationResult, overallAssessmentList, responseAssessmentMap, retrievalChunksWithDraftAssessments]);\n\n  const upsertAssessment = useCallback(\n    (assessment: RunEvaluationResultAssessmentDraft) => dispatch({ type: 'upsertAssessment', payload: assessment }),\n    [],\n  );\n\n  const resetPendingAssessments = useCallback(() => dispatch({ type: 'resetPendingAssessments' }), []);\n\n  return {\n    pendingAssessments,\n    draftEvaluationResult,\n    upsertAssessment,\n    resetPendingAssessments,\n  };\n};\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport { Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport type { UseQueryResult } from '@databricks/web-shared/query-client';\n\nimport { EvaluationsReviewDetails } from './EvaluationsReviewDetails';\nimport {\n  copyAiOverallAssessmentAsHumanAssessment,\n  shouldRepeatExistingOriginalOverallAiAssessment,\n} from './GenAiEvaluationTracesReview.utils';\nimport type { AssessmentInfo, RunEvaluationTracesDataEntry, SaveAssessmentsQuery } from '../types';\nimport { RUN_EVALUATIONS_SINGLE_ITEM_REVIEW_UI_PAGE_ID } from '../utils/EvaluationLogging';\n\nexport const GenAiEvaluationTracesReview = ({\n  experimentId,\n  evaluation,\n  otherEvaluation,\n  className,\n  runUuid,\n  isReadOnly = false,\n  selectNextEval,\n  isNextAvailable,\n  runDisplayName,\n  compareToRunDisplayName,\n  exportToEvalsInstanceEnabled = false,\n  assessmentInfos,\n  traceQueryResult,\n  compareToTraceQueryResult,\n  saveAssessmentsQuery,\n}: {\n  experimentId: string;\n  evaluation: RunEvaluationTracesDataEntry;\n  otherEvaluation?: RunEvaluationTracesDataEntry;\n  className?: string;\n  runUuid?: string;\n  isReadOnly?: boolean;\n  selectNextEval: () => void;\n  isNextAvailable: boolean;\n  runDisplayName?: string;\n  compareToRunDisplayName?: string;\n  exportToEvalsInstanceEnabled?: boolean;\n  assessmentInfos: AssessmentInfo[];\n  traceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n  compareToTraceQueryResult: UseQueryResult<ModelTrace | undefined, unknown>;\n  saveAssessmentsQuery?: SaveAssessmentsQuery;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const handleSavePendingAssessments = useCallback(\n    async (evaluation, pendingAssessments) => {\n      if (!evaluation || isReadOnly || !runUuid || !saveAssessmentsQuery) {\n        return;\n      }\n\n      // Prepare the list of assessments to be sent to the backend.\n      const assessmentsToSave = pendingAssessments.slice();\n\n      // Even if user did not provide any explicit overall assessment, we still should be able to mark the evaluation as reviewed.\n      // We check if there are no user provided overall assessments and if the last overall assessment was AI generated.\n      const shouldRepeatOverallAiAssessment = shouldRepeatExistingOriginalOverallAiAssessment(\n        evaluation,\n        pendingAssessments,\n      );\n\n      // If we should repeat the AI generated overall assessment, we need to copy and add it to the list of assessments to save.\n      if (shouldRepeatOverallAiAssessment) {\n        const repeatedOverallAssessment = copyAiOverallAssessmentAsHumanAssessment(evaluation);\n\n        repeatedOverallAssessment && assessmentsToSave.unshift(repeatedOverallAssessment);\n      }\n\n      return saveAssessmentsQuery.savePendingAssessments(runUuid, evaluation.evaluationId, assessmentsToSave);\n    },\n    [runUuid, isReadOnly, saveAssessmentsQuery],\n  );\n\n  // Scroll right side panel to the top when switching between evaluations\n  const reviewDetailsRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    reviewDetailsRef.current?.scrollTo(0, 0);\n  }, [evaluation.evaluationId]);\n\n  return (\n    <div\n      // comment for copybara formatting\n      css={{ display: 'flex', position: 'relative', overflow: 'scroll' }}\n      className={className}\n    >\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n        ref={reviewDetailsRef}\n      >\n        <EvaluationsReviewDetails\n          experimentId={experimentId}\n          key={evaluation.evaluationId}\n          evaluationResult={evaluation}\n          otherEvaluationResult={otherEvaluation}\n          onSavePendingAssessments={handleSavePendingAssessments}\n          onClickNext={selectNextEval}\n          isNextAvailable={isNextAvailable}\n          isReadOnly={isReadOnly || !runUuid}\n          runDisplayName={runDisplayName}\n          compareToRunDisplayName={compareToRunDisplayName}\n          exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n          assessmentInfos={assessmentInfos}\n          traceQueryResult={traceQueryResult}\n          compareToTraceQueryResult={compareToTraceQueryResult}\n        />\n      </div>\n      {saveAssessmentsQuery?.isSaving && (\n        <div\n          css={{\n            inset: 0,\n            position: 'absolute',\n            backgroundColor: theme.colors.overlayOverlay,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            zIndex: theme.options.zIndexBase + 1,\n          }}\n        >\n          <Spinner size=\"large\" inheritColor css={{ color: theme.colors.backgroundPrimary }} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { merge } from 'lodash';\nimport type { ReactNode } from 'react';\nimport React, { createContext, useContext } from 'react';\n\nimport { shouldEnableRunEvaluationReviewUIWriteFeatures } from '../utils/FeatureUtils';\n\nexport interface GenAITracesTableConfig {\n  enableRunEvaluationWriteFeatures: NonNullable<boolean | undefined>;\n}\n\n// Define a default configuration\nconst getDefaultConfig = (): GenAITracesTableConfig => ({\n  enableRunEvaluationWriteFeatures: shouldEnableRunEvaluationReviewUIWriteFeatures() ?? false,\n});\n\n// Create the context with a default value\nconst GenAITracesTableConfigContext = createContext<GenAITracesTableConfig>(getDefaultConfig());\n\ninterface GenAITracesTableConfigProviderProps {\n  config?: Partial<GenAITracesTableConfig>;\n  children: ReactNode;\n}\n\nexport const GenAITracesTableConfigProvider: React.FC<GenAITracesTableConfigProviderProps> = ({\n  config = {},\n  children,\n}) => {\n  const defaultConfig = getDefaultConfig();\n  // Remove undefined values from the config object\n\n  const mergedConfig: GenAITracesTableConfig = merge({}, defaultConfig, config);\n\n  return (\n    <GenAITracesTableConfigContext.Provider value={mergedConfig}>{children}</GenAITracesTableConfigContext.Provider>\n  );\n};\n\nexport const useGenAITracesTableConfig = (): GenAITracesTableConfig => {\n  const context = useContext(GenAITracesTableConfigContext);\n\n  if (!context) {\n    return getDefaultConfig(); // Fallback to defaults if no provider is found\n  }\n\n  return context;\n};\n","import { isNil } from 'lodash';\n\nimport type { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport { useQuery } from '@databricks/web-shared/query-client';\n\nexport function useGetTrace(\n  getTrace: ((requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>) | undefined,\n  requestId?: string,\n  traceId?: string,\n) {\n  return useQuery({\n    queryKey: ['getTrace', requestId, traceId],\n    queryFn: () => (getTrace ? getTrace(requestId, traceId) : Promise.resolve(undefined)),\n    enabled: !isNil(getTrace) && (!isNil(requestId) || !isNil(traceId)),\n    staleTime: Infinity, // Keep data fresh as long as the component is mounted\n    refetchOnWindowFocus: false, // Disable refetching on window focus\n    retry: 1,\n    keepPreviousData: true,\n  });\n}\n","import { isNil } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport {\n  Button,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  GenericSkeleton,\n  Modal,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { ModelTraceExplorer, type ModelTrace } from '@databricks/web-shared/model-trace-explorer';\n\nimport { EvaluationsReviewDetailsHeader } from './EvaluationsReviewDetails';\nimport { GenAiEvaluationTracesReview } from './GenAiEvaluationTracesReview';\nimport { useGenAITracesTableConfig } from '../hooks/useGenAITracesTableConfig';\nimport { useGetTrace } from '../hooks/useGetTrace';\nimport type { AssessmentInfo, EvalTraceComparisonEntry, SaveAssessmentsQuery } from '../types';\n\nconst MODAL_SPACING_REM = 4;\nconst DEFAULT_MODAL_MARGIN_REM = 1;\n\nexport const GenAiEvaluationTracesReviewModal = React.memo(\n  ({\n    experimentId,\n    runUuid,\n    evaluations,\n    selectedEvaluationId,\n    onChangeEvaluationId,\n    runDisplayName,\n    otherRunDisplayName,\n    exportToEvalsInstanceEnabled = false,\n    assessmentInfos,\n    getTrace,\n    saveAssessmentsQuery,\n  }: {\n    experimentId: string;\n    runUuid?: string;\n    evaluations: EvalTraceComparisonEntry[];\n    selectedEvaluationId: string;\n    onChangeEvaluationId: (evaluationId: string | undefined) => void;\n    runDisplayName?: string;\n    otherRunDisplayName?: string;\n    exportToEvalsInstanceEnabled?: boolean;\n    assessmentInfos: AssessmentInfo[];\n    getTrace?: (requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>;\n    saveAssessmentsQuery?: SaveAssessmentsQuery;\n  }) => {\n    const { theme, classNamePrefix } = useDesignSystemTheme();\n\n    const handleClose = useCallback(() => {\n      onChangeEvaluationId(undefined);\n    }, [onChangeEvaluationId]);\n\n    // The URL always has an evaluation id, so we look in either current or other for the eval.\n    const findEval = useCallback(\n      (entry: EvalTraceComparisonEntry) =>\n        entry.currentRunValue?.evaluationId === selectedEvaluationId ||\n        entry.otherRunValue?.evaluationId === selectedEvaluationId,\n      [selectedEvaluationId],\n    );\n\n    const previousEvaluationIdx = useMemo(\n      () => (evaluations ? evaluations?.findIndex(findEval) - 1 : undefined),\n      [evaluations, findEval],\n    );\n    const isPreviousAvailable = useMemo(\n      () => previousEvaluationIdx !== undefined && previousEvaluationIdx >= 0,\n      [previousEvaluationIdx],\n    );\n\n    const nextEvaluationIdx = useMemo(\n      () => (evaluations ? evaluations?.findIndex(findEval) + 1 : undefined),\n      [evaluations, findEval],\n    );\n    const isNextAvailable = useMemo(\n      () => nextEvaluationIdx !== undefined && nextEvaluationIdx < evaluations.length,\n      [nextEvaluationIdx, evaluations],\n    );\n\n    const selectPreviousEval = useCallback(() => {\n      if (evaluations === null || previousEvaluationIdx === undefined) return;\n\n      const newEvalId =\n        evaluations[previousEvaluationIdx]?.currentRunValue?.evaluationId ||\n        evaluations[previousEvaluationIdx]?.otherRunValue?.evaluationId;\n      onChangeEvaluationId(newEvalId);\n    }, [evaluations, previousEvaluationIdx, onChangeEvaluationId]);\n\n    const selectNextEval = useCallback(() => {\n      if (evaluations === null || nextEvaluationIdx === undefined) return;\n\n      const newEvalId =\n        evaluations[nextEvaluationIdx]?.currentRunValue?.evaluationId ||\n        evaluations[nextEvaluationIdx]?.otherRunValue?.evaluationId;\n      onChangeEvaluationId(newEvalId);\n    }, [evaluations, nextEvaluationIdx, onChangeEvaluationId]);\n\n    const evaluation = useMemo(() => evaluations?.find(findEval), [evaluations, findEval]);\n    const nextEvaluation = useMemo(\n      () => (nextEvaluationIdx && evaluations ? evaluations?.[nextEvaluationIdx] : undefined),\n      [evaluations, nextEvaluationIdx],\n    );\n    const previousEvaluation = useMemo(\n      () => (previousEvaluationIdx && evaluations ? evaluations?.[previousEvaluationIdx] : undefined),\n      [evaluations, previousEvaluationIdx],\n    );\n\n    const tracesTableConfig = useGenAITracesTableConfig();\n\n    const traceQueryResult = useGetTrace(\n      getTrace,\n      evaluation?.currentRunValue?.requestId,\n      evaluation?.currentRunValue?.traceInfo?.trace_id,\n    );\n    const compareToTraceQueryResult = useGetTrace(\n      getTrace,\n      evaluation?.otherRunValue?.requestId,\n      evaluation?.otherRunValue?.traceInfo?.trace_id,\n    );\n\n    // Prefetching the next and previous traces to optimize performance\n    useGetTrace(\n      getTrace,\n      nextEvaluation?.currentRunValue?.requestId,\n      nextEvaluation?.currentRunValue?.traceInfo?.trace_id,\n    );\n    useGetTrace(\n      getTrace,\n      previousEvaluation?.currentRunValue?.requestId,\n      previousEvaluation?.currentRunValue?.traceInfo?.trace_id,\n    );\n\n    // is true if only one of the two runs has a trace\n    const isSingleTraceView = Boolean(evaluation?.currentRunValue) !== Boolean(evaluation?.otherRunValue);\n\n    const currentTraceQueryResult =\n      selectedEvaluationId === evaluation?.currentRunValue?.evaluationId ? traceQueryResult : compareToTraceQueryResult;\n\n    if (isNil(evaluation)) {\n      return <></>;\n    }\n\n    return (\n      <div\n        onKeyDown={(e) => {\n          if (e.key === 'ArrowLeft') {\n            selectPreviousEval();\n          } else if (e.key === 'ArrowRight') {\n            selectNextEval();\n          }\n        }}\n      >\n        <Modal\n          componentId=\"mlflow.evaluations_review.modal\"\n          visible\n          title={\n            evaluation.currentRunValue ? (\n              <EvaluationsReviewDetailsHeader evaluationResult={evaluation.currentRunValue} />\n            ) : evaluation.otherRunValue ? (\n              <EvaluationsReviewDetailsHeader evaluationResult={evaluation.otherRunValue} />\n            ) : null\n          }\n          onCancel={handleClose}\n          size=\"wide\"\n          verticalSizing=\"maxed_out\"\n          css={{\n            width: '100% !important',\n            padding: `0 ${MODAL_SPACING_REM}rem !important`,\n            [`& .${classNamePrefix}-modal-body`]: {\n              flex: 1,\n            },\n          }}\n          footer={null} // Hide the footer\n        >\n          {currentTraceQueryResult.isFetching && (\n            <GenericSkeleton\n              label=\"Loading trace...\"\n              style={{\n                // Size the width and height to fit the modal content area\n                width: 'calc(100% - 45px)',\n                height: 'calc(100% - 100px)',\n                position: 'absolute',\n                paddingRight: 500,\n                zIndex: 2100,\n                backgroundColor: theme.colors.backgroundPrimary,\n              }}\n            />\n          )}\n          {\n            // Show ModelTraceExplorer only if there is no run to compare to and there's trace data.\n            isSingleTraceView && !isNil(currentTraceQueryResult.data) ? (\n              <div css={{ height: '100%', marginLeft: -theme.spacing.lg, marginRight: -theme.spacing.lg }}>\n                <ModelTraceExplorerModalBody traceData={currentTraceQueryResult.data} />\n              </div>\n            ) : (\n              evaluation.currentRunValue && (\n                <GenAiEvaluationTracesReview\n                  experimentId={experimentId}\n                  evaluation={evaluation.currentRunValue}\n                  otherEvaluation={evaluation.otherRunValue}\n                  selectNextEval={selectNextEval}\n                  isNextAvailable={isNextAvailable}\n                  css={{ flex: 1, overflow: 'hidden' }}\n                  runUuid={runUuid}\n                  isReadOnly={!tracesTableConfig.enableRunEvaluationWriteFeatures}\n                  runDisplayName={runDisplayName}\n                  compareToRunDisplayName={otherRunDisplayName}\n                  exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n                  assessmentInfos={assessmentInfos}\n                  traceQueryResult={traceQueryResult}\n                  compareToTraceQueryResult={compareToTraceQueryResult}\n                  saveAssessmentsQuery={saveAssessmentsQuery}\n                />\n              )\n            )\n          }\n        </Modal>\n        <div\n          css={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            position: 'fixed',\n            top: '50%',\n            left: 0,\n            zIndex: 2000,\n            opacity: '.75',\n            width: `${MODAL_SPACING_REM + DEFAULT_MODAL_MARGIN_REM}rem`,\n            '&:hover': {\n              opacity: '1.0',\n            },\n          }}\n        >\n          <div\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n              marginRight: theme.spacing.sm,\n            }}\n          >\n            <Button\n              disabled={!isPreviousAvailable}\n              componentId=\"mlflow.evaluations_review.modal.previous_eval\"\n              icon={<ChevronLeftIcon />}\n              onClick={() => selectPreviousEval()}\n            />\n          </div>\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            justifyContent: 'flex-start',\n            position: 'fixed',\n            top: '50%',\n            right: 0,\n            zIndex: 2000,\n            width: `${MODAL_SPACING_REM + DEFAULT_MODAL_MARGIN_REM}rem`,\n            opacity: '.75',\n            '&:hover': {\n              opacity: '1.0',\n            },\n          }}\n        >\n          <div\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n              marginLeft: theme.spacing.sm,\n            }}\n          >\n            <Button\n              disabled={!isNextAvailable}\n              componentId=\"mlflow.evaluations_review.modal.next_eval\"\n              icon={<ChevronRightIcon />}\n              onClick={() => selectNextEval()}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nconst ModelTraceExplorerModalBody = ({ traceData }: { traceData: ModelTrace }) => {\n  return <ModelTraceExplorer modelTrace={traceData} />;\n};\n","import { getCoreRowModel, getSortedRowModel, useReactTable } from '@tanstack/react-table';\nimport type { RowSelectionState, OnChangeFn, ColumnDef, Row } from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { isNil } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { Empty, SearchIcon, Table, useDesignSystemTheme } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\nimport type { ModelTrace, ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\n\nimport { GenAITracesTableContext } from './GenAITracesTableContext';\nimport { sortColumns, sortGroupedColumns } from './GenAiTracesTable.utils';\nimport { getColumnConfig } from './GenAiTracesTableBody.utils';\nimport { MemoizedGenAiTracesTableBodyRows } from './GenAiTracesTableBodyRows';\nimport { GenAiTracesTableHeader } from './GenAiTracesTableHeader';\nimport { HeaderCellRenderer } from './cellRenderers/HeaderCellRenderer';\nimport { GenAiEvaluationTracesReviewModal } from './components/GenAiEvaluationTracesReviewModal';\nimport { REQUEST_TIME_COLUMN_ID, SESSION_COLUMN_ID, SERVER_SORTABLE_INFO_COLUMNS } from './hooks/useTableColumns';\nimport {\n  type EvaluationsOverviewTableSort,\n  TracesTableColumnType,\n  type AssessmentAggregates,\n  type AssessmentFilter,\n  type AssessmentInfo,\n  type AssessmentValueType,\n  type EvalTraceComparisonEntry,\n  type SaveAssessmentsQuery,\n  type TracesTableColumn,\n  TracesTableColumnGroup,\n} from './types';\nimport { getAssessmentAggregates } from './utils/AggregationUtils';\nimport { escapeCssSpecialCharacters } from './utils/DisplayUtils';\nimport { getRowIdFromEvaluation } from './utils/TraceUtils';\n\nexport const GenAiTracesTableBody = React.memo(\n  ({\n    experimentId,\n    selectedColumns,\n    evaluations,\n    selectedEvaluationId,\n    selectedAssessmentInfos,\n    assessmentInfos,\n    assessmentFilters,\n    tableSort,\n    onChangeEvaluationId,\n    getRunColor,\n    runUuid,\n    runDisplayName,\n    compareToRunUuid,\n    compareToRunDisplayName,\n    rowSelection,\n    setRowSelection,\n    exportToEvalsInstanceEnabled = false,\n    getTrace,\n    toggleAssessmentFilter,\n    saveAssessmentsQuery,\n    disableAssessmentTooltips,\n    onTraceTagsEdit,\n    enableRowSelection,\n    enableGrouping = false,\n    allColumns,\n  }: {\n    experimentId: string;\n    selectedColumns: TracesTableColumn[];\n    evaluations: EvalTraceComparisonEntry[];\n    selectedEvaluationId: string | undefined;\n    selectedAssessmentInfos: AssessmentInfo[];\n    assessmentInfos: AssessmentInfo[];\n    assessmentFilters: AssessmentFilter[];\n    tableSort: EvaluationsOverviewTableSort | undefined;\n    onChangeEvaluationId: (evaluationId: string | undefined) => void;\n    getRunColor?: (runUuid: string) => string;\n    // Current run\n    runUuid?: string;\n    runDisplayName?: string;\n    // Other run\n    compareToRunUuid?: string;\n    compareToRunDisplayName?: string;\n    rowSelection?: RowSelectionState;\n    setRowSelection?: OnChangeFn<RowSelectionState>;\n    exportToEvalsInstanceEnabled?: boolean;\n    getTrace?: (requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>;\n    toggleAssessmentFilter: (\n      assessmentName: string,\n      filterValue: AssessmentValueType,\n      run: string,\n      filterType?: AssessmentFilter['filterType'],\n    ) => void;\n    saveAssessmentsQuery?: SaveAssessmentsQuery;\n    disableAssessmentTooltips?: boolean;\n    onTraceTagsEdit?: (trace: ModelTraceInfo) => void;\n    enableRowSelection?: boolean;\n    enableGrouping?: boolean;\n    allColumns: TracesTableColumn[];\n  }) => {\n    const intl = useIntl();\n    const { theme } = useDesignSystemTheme();\n    const [collapsedHeader, setCollapsedHeader] = useState(false);\n\n    const isComparing = !isNil(compareToRunUuid);\n\n    const evaluationInputs = selectedColumns.filter((col) => col.type === TracesTableColumnType.INPUT);\n\n    const { columns } = useMemo(() => {\n      if (!enableGrouping) {\n        // Return flat columns without grouping\n        const columnsList = selectedColumns.map((col) =>\n          getColumnConfig(col, {\n            evaluationInputs,\n            isComparing,\n            theme,\n            intl,\n            experimentId,\n            onChangeEvaluationId,\n            onTraceTagsEdit,\n          }),\n        );\n\n        return { columns: sortColumns(columnsList, selectedColumns) };\n      }\n\n      // Create a map of group IDs to their column arrays\n      const groupColumns = new Map<TracesTableColumnGroup, ColumnDef<EvalTraceComparisonEntry>[]>();\n      const sortedGroupedColumns = sortGroupedColumns(selectedColumns, isComparing);\n\n      sortedGroupedColumns.forEach((col) => {\n        // Get the group for this column, defaulting to 'Info' if not specified\n        const groupId = col.group || TracesTableColumnGroup.INFO;\n\n        // Initialize the group's columns array if it doesn't exist\n        if (!groupColumns.has(groupId)) {\n          groupColumns.set(groupId, []);\n        }\n\n        // or branch of this should never get hit\n        (groupColumns.get(groupId) || []).push(\n          getColumnConfig(col, {\n            evaluationInputs,\n            isComparing,\n            theme,\n            intl,\n            experimentId,\n            onChangeEvaluationId,\n            onTraceTagsEdit,\n          }),\n        );\n      });\n\n      // Convert the map to an array of column groups and sort columns within each group\n      const topLevelColumns: ColumnDef<EvalTraceComparisonEntry>[] = Array.from(groupColumns.entries()).map(\n        ([groupId, columns]) => ({\n          header: HeaderCellRenderer,\n          meta: {\n            groupId,\n            visibleCount: columns.length,\n            totalCount: allColumns.filter((col) => col.group === groupId).length,\n            enableGrouping,\n          },\n          id: `${groupId}-group`,\n          columns,\n        }),\n      );\n\n      return { columns: topLevelColumns };\n    }, [\n      selectedColumns,\n      evaluationInputs,\n      isComparing,\n      onChangeEvaluationId,\n      theme,\n      intl,\n      experimentId,\n      onTraceTagsEdit,\n      enableGrouping,\n      allColumns,\n    ]);\n\n    const { setTable, setSelectedRowIds } = React.useContext(GenAITracesTableContext);\n\n    const table = useReactTable<EvalTraceComparisonEntry & { multiline?: boolean }>({\n      data: evaluations,\n      columns,\n      getCoreRowModel: getCoreRowModel(),\n      getSortedRowModel: getSortedRowModel(),\n      enableColumnResizing: true,\n      columnResizeMode: 'onChange',\n      enableRowSelection,\n      enableMultiSort: true,\n      state: {\n        rowSelection,\n      },\n      meta: {\n        getRunColor,\n      },\n      onRowSelectionChange: setRowSelection,\n      getRowId: (row) => getRowIdFromEvaluation(row.currentRunValue),\n    });\n\n    // Need to check if rowSelection is undefined, otherwise getIsAllRowsSelected throws an error\n    const allRowSelected = rowSelection !== undefined && table.getIsAllRowsSelected();\n    const someRowSelected = table.getIsSomeRowsSelected();\n\n    useEffect(() => {\n      setTable(table);\n\n      return () => setTable(undefined);\n    }, [table, setTable]);\n\n    useEffect(() => {\n      if (enableRowSelection) {\n        setSelectedRowIds(table.getSelectedRowModel().rows.map((r) => r.id));\n      }\n    }, [table, rowSelection, setSelectedRowIds, enableRowSelection]);\n\n    // When the table is empty.\n    const emptyDescription = intl.formatMessage({\n      defaultMessage: ' No traces found. Try clearing your active filters to see more traces.',\n      description: 'Text displayed when no traces are found in the trace review page',\n    });\n\n    const emptyComponent = <Empty description={emptyDescription} image={<SearchIcon />} />;\n    const isEmpty = (): boolean => table.getRowModel().rows.length === 0;\n\n    // Updating sorting when the prop changes.\n    useEffect(() => {\n      // Only do client-side sorting for columns that are not supported by the server.\n      if (!tableSort || SERVER_SORTABLE_INFO_COLUMNS.includes(tableSort.key)) {\n        table.setSorting([]);\n        return;\n      }\n\n      if (tableSort.key === SESSION_COLUMN_ID) {\n        table.setSorting([\n          {\n            id: tableSort.key,\n            desc: !tableSort.asc,\n          },\n          {\n            id: REQUEST_TIME_COLUMN_ID,\n            desc: false,\n          },\n        ]);\n      } else {\n        table.setSorting([\n          {\n            id: tableSort.key,\n            desc: !tableSort.asc,\n          },\n        ]);\n      }\n    }, [tableSort, table]);\n\n    const { rows } = table.getRowModel();\n\n    // The virtualizer needs to know the scrollable container element\n    const tableContainerRef = React.useRef<HTMLDivElement>(null);\n\n    const rowVirtualizer = useVirtualizer({\n      count: rows.length,\n      estimateSize: () => 120, // estimate row height for accurate scrollbar dragging\n      getScrollElement: () => tableContainerRef.current,\n      measureElement:\n        typeof window !== 'undefined' && navigator.userAgent.indexOf('Firefox') === -1\n          ? (element) => element?.getBoundingClientRect().height\n          : undefined,\n      overscan: 10,\n    });\n\n    const virtualItems = rowVirtualizer.getVirtualItems();\n    const tableHeaderGroups = table.getHeaderGroups();\n\n    /**\n     * Instead of calling `column.getSize()` on every render for every header\n     * and especially every data cell (very expensive),\n     * we will calculate all column sizes at once at the root table level in a useMemo\n     * and pass the column sizes down as CSS variables to the <table> element.\n     */\n    const { columnSizeVars, tableWidth } = useMemo(() => {\n      const colSizes: { [key: string]: string } = {};\n      tableHeaderGroups.forEach((headerGroup) => {\n        headerGroup.headers.forEach((header) => {\n          colSizes[`--header-${escapeCssSpecialCharacters(header.column.id)}-size`] = header.getSize() + 'px';\n        });\n      });\n\n      // Calculate the total width of the table by adding up the width of all columns.\n      let tableWidth = 0;\n      if (rows.length > 0) {\n        const row = rows[0] as Row<EvalTraceComparisonEntry>;\n        const cells = row.getVisibleCells();\n        cells.forEach((cell) => {\n          colSizes[`--col-${escapeCssSpecialCharacters(cell.column.id)}-size`] = cell.column.getSize() + 'px';\n          tableWidth += cell.column.getSize();\n        });\n      }\n\n      return { columnSizeVars: colSizes, tableWidth: tableWidth + 'px' };\n    }, [tableHeaderGroups, rows]);\n\n    // Compute assessment aggregates.\n    const assessmentNameToAggregates = useMemo(() => {\n      const result: Record<string, AssessmentAggregates> = {};\n      for (const assessmentInfo of selectedAssessmentInfos) {\n        result[assessmentInfo.name] = getAssessmentAggregates(assessmentInfo, evaluations, assessmentFilters);\n      }\n      return result;\n    }, [selectedAssessmentInfos, evaluations, assessmentFilters]);\n\n    return (\n      <>\n        <div\n          className=\"container\"\n          ref={tableContainerRef}\n          css={{\n            height: '100%',\n            position: 'relative',\n            overflowY: 'auto',\n            overflowX: 'auto',\n            minWidth: '100%',\n            width: tableWidth,\n          }}\n        >\n          <Table\n            css={{\n              width: '100%',\n              ...columnSizeVars, // Define column sizes on the <table> element\n            }}\n            empty={isEmpty() ? emptyComponent : undefined}\n            someRowsSelected={enableRowSelection ? someRowSelected || allRowSelected : undefined}\n          >\n            <GenAiTracesTableHeader\n              headerGroups={table.getHeaderGroups()}\n              enableRowSelection={enableRowSelection}\n              enableGrouping={enableGrouping}\n              selectedAssessmentInfos={selectedAssessmentInfos}\n              assessmentNameToAggregates={assessmentNameToAggregates}\n              assessmentFilters={assessmentFilters}\n              toggleAssessmentFilter={toggleAssessmentFilter}\n              runDisplayName={runDisplayName}\n              compareToRunUuid={compareToRunUuid}\n              compareToRunDisplayName={compareToRunDisplayName}\n              disableAssessmentTooltips={disableAssessmentTooltips}\n              collapsedHeader={collapsedHeader}\n              setCollapsedHeader={setCollapsedHeader}\n              isComparing={isComparing}\n              allRowSelected={allRowSelected}\n              someRowSelected={someRowSelected}\n              toggleAllRowsSelectedHandler={table.getToggleAllRowsSelectedHandler}\n              setColumnSizing={table.setColumnSizing}\n            />\n\n            <MemoizedGenAiTracesTableBodyRows\n              rows={rows}\n              isComparing={isComparing}\n              enableRowSelection={enableRowSelection}\n              virtualItems={virtualItems}\n              virtualizerTotalSize={rowVirtualizer.getTotalSize()}\n              virtualizerMeasureElement={rowVirtualizer.measureElement}\n              rowSelectionState={rowSelection}\n              selectedColumns={selectedColumns}\n            />\n          </Table>\n        </div>\n        {selectedEvaluationId && (\n          <GenAiEvaluationTracesReviewModal\n            experimentId={experimentId}\n            runUuid={runUuid}\n            runDisplayName={runDisplayName}\n            otherRunDisplayName={compareToRunDisplayName}\n            evaluations={rows.map((row) => row.original)}\n            selectedEvaluationId={selectedEvaluationId}\n            onChangeEvaluationId={onChangeEvaluationId}\n            exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n            assessmentInfos={assessmentInfos}\n            getTrace={getTrace}\n            saveAssessmentsQuery={saveAssessmentsQuery}\n          />\n        )}\n      </>\n    );\n  },\n);\n","import { useEffect, useState } from 'react';\n\nimport { TableFilterInput } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nconst SEARCH_QUERY_FILTER_DEBOUNCE_MS = 400;\n\nexport function GenAiTracesTableSearchInput({\n  searchQuery,\n  setSearchQuery,\n}: {\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n}) {\n  const intl = useIntl();\n\n  const [pendingUserQuery, setPendingUserQuery] = useState(searchQuery);\n  // When the search query changes, update the pending user query.\n  useEffect(() => {\n    setPendingUserQuery(searchQuery);\n  }, [searchQuery]);\n\n  // Debounce adding the filter search query to the URL so we don't over push to the URL.\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSearchQuery(pendingUserQuery);\n    }, SEARCH_QUERY_FILTER_DEBOUNCE_MS);\n    return () => clearTimeout(timeout);\n  }, [pendingUserQuery, setSearchQuery]);\n\n  return (\n    <TableFilterInput\n      componentId=\"mlflow.evaluations_review.table_ui.filter_input\"\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Search traces by request',\n        description: 'Placeholder text for the search input in the trace results table',\n      })}\n      value={pendingUserQuery}\n      onChange={(e) => setPendingUserQuery(e.target.value)}\n    />\n  );\n}\n","/** Constants for logging. */\n\n// Pages\nexport const RUN_EVALUATION_RESULTS_TAB_SINGLE_RUN = 'mlflow.evaluations_review.run_evaluation_results_single_run_page';\nexport const RUN_EVALUATION_RESULTS_TAB_COMPARE_RUNS =\n  'mlflow.evaluations_review.run_evaluation_results_compare_runs_page';\n\n// When a user opens a single item in the evaluations table, the page ID for the evaluations review page modal.\nexport const RUN_EVALUATIONS_SINGLE_ITEM_REVIEW_UI_PAGE_ID = 'mlflow.evaluations_review.review_ui';\n\n// Views\n// Counts the number of times the expanded assessment details is clicked, showing how many times users view rationales.\nexport const EXPANDED_ASSESSMENT_DETAILS_VIEW: Record<string, string> = {\n  // Important note: Overall is always expanded.\n  overall: 'mlflow.evaluations_review.expanded_overall_assessment_details_view',\n  response: 'mlflow.evaluations_review.expanded_response_assessment_details_view',\n  retrieval: 'mlflow.evaluations_review.expanded_retrieval_assessment_details_view',\n};\n\nexport const ASSESSMENT_RATIONAL_HOVER_DETAILS_VIEW =\n  'mlflow.evaluations_review.assessment_rationale_hover_details_view';\n\n// Buttons\n// The component ID for the compare-to-run dropdown in the evaluations table.\nexport const COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID = 'mlflow.evaluations_review.table_ui.compare_to_run_combobox';\n\n// The component ID for the filter dropdown in the evaluations table.\nexport const FILTER_DROPDOWN_COMPONENT_ID = 'mlflow.evaluations_review.table_ui.filter_form';\n\n// The component ID for the column selector dropdown in the evaluations table.\nexport const COLUMN_SELECTOR_DROPDOWN_COMPONENT_ID = 'mlflow.evaluations_review.table_ui.column_filter_combobox';\n","import {\n  ChevronDownIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxCustomButtonTriggerWrapper,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  Button,\n  ColumnsIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport type { TracesTableColumn } from '../types';\nimport { COLUMN_SELECTOR_DROPDOWN_COMPONENT_ID } from '../utils/EvaluationLogging';\n\n/**\n * Component for column selector in MLflow monitoring traces view. Allows user to control which assessments show up in table to prevent too much clutter.\n */\nexport const EvaluationsOverviewColumnSelector = ({\n  columns,\n  selectedColumns,\n  setSelectedColumns,\n  setSelectedColumnsWithHiddenColumns,\n}: {\n  columns: TracesTableColumn[];\n  selectedColumns: TracesTableColumn[];\n  // @deprecated use setSelectedColumnsWithHiddenColumns instead\n  setSelectedColumns?: React.Dispatch<React.SetStateAction<TracesTableColumn[]>>;\n  setSelectedColumnsWithHiddenColumns?: (newColumns: TracesTableColumn[]) => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const handleChange = (newColumn: TracesTableColumn) => {\n    if (setSelectedColumnsWithHiddenColumns) {\n      return setSelectedColumnsWithHiddenColumns([newColumn]);\n    } else if (setSelectedColumns) {\n      setSelectedColumns((current: TracesTableColumn[]) => {\n        const newSelectedColumns = current.some((col) => col.id === newColumn.id)\n          ? current.filter((col) => col.id !== newColumn.id)\n          : [...current, newColumn];\n        return newSelectedColumns;\n      });\n    }\n  };\n\n  return (\n    <DialogCombobox componentId={COLUMN_SELECTOR_DROPDOWN_COMPONENT_ID} label=\"Columns\" multiSelect>\n      <DialogComboboxCustomButtonTriggerWrapper>\n        <Button endIcon={<ChevronDownIcon />} componentId=\"mlflow.evaluations_review.table_ui.filter_button\">\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.sm,\n              alignItems: 'center',\n            }}\n          >\n            <ColumnsIcon />\n            {intl.formatMessage({\n              defaultMessage: 'Columns',\n              description: 'Evaluation review > evaluations list > filter dropdown button',\n            })}\n          </div>\n        </Button>\n      </DialogComboboxCustomButtonTriggerWrapper>\n      <DialogComboboxContent>\n        <DialogComboboxOptionList>\n          {columns.map((column) => (\n            <DialogComboboxOptionListCheckboxItem\n              key={column.id}\n              value={column.label}\n              checked={selectedColumns.some((col) => col.id === column.id)}\n              onChange={() => handleChange(column)}\n            />\n          ))}\n        </DialogComboboxOptionList>\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  Input,\n  SearchIcon,\n  useDesignSystemTheme,\n  DropdownMenu,\n  Button,\n  ChevronDownIcon,\n  SortUnsortedIcon,\n  ToggleButton,\n  Spinner,\n  DangerIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport { sortGroupedColumns } from '../GenAiTracesTable.utils';\nimport { SESSION_COLUMN_ID, SORTABLE_INFO_COLUMNS } from '../hooks/useTableColumns';\nimport type { EvaluationsOverviewTableSort, AssessmentInfo, TracesTableColumn } from '../types';\nimport { TracesTableColumnType, TracesTableColumnGroup, TracesTableColumnGroupToLabelMap } from '../types';\n\nexport interface SortOption {\n  label: string;\n  key: string;\n  type: TracesTableColumnType;\n  group?: TracesTableColumnGroup;\n}\n\nexport const EvaluationsOverviewSortDropdown = React.memo(\n  ({\n    tableSort,\n    columns = [],\n    onChange,\n    enableGrouping,\n    isMetadataLoading,\n    metadataError,\n  }: {\n    tableSort: EvaluationsOverviewTableSort | undefined;\n    columns: TracesTableColumn[];\n    onChange: (sortOption: SortOption, orderByAsc: boolean) => void;\n    enableGrouping?: boolean;\n    isMetadataLoading?: boolean;\n    metadataError?: Error | null;\n  }) => {\n    const intl = useIntl();\n    const { theme } = useDesignSystemTheme();\n    const [open, setOpen] = useState(false);\n\n    const sortOptions = useMemo(() => {\n      const sortOptions: SortOption[] = [];\n\n      const assessmentLabelPrefix = intl.formatMessage({\n        defaultMessage: 'Assessment',\n        description: 'Evaluation review > evaluations list > assessment sort option label prefix',\n      });\n\n      if (enableGrouping) {\n        const sortedColumns = sortGroupedColumns(columns);\n\n        for (const column of sortedColumns) {\n          if (column.type === TracesTableColumnType.ASSESSMENT) {\n            const sortableAssessmentInfo = column.assessmentInfo as AssessmentInfo;\n            const assessmentLabel = sortableAssessmentInfo.displayName;\n\n            sortOptions.push({\n              label: assessmentLabel,\n              key: column.id,\n              type: TracesTableColumnType.ASSESSMENT,\n              group: TracesTableColumnGroup.ASSESSMENT,\n            });\n          } else if (column.type === TracesTableColumnType.INPUT) {\n            sortOptions.push({\n              label: column.label,\n              key: column.id,\n              type: TracesTableColumnType.INPUT,\n              group: TracesTableColumnGroup.INFO,\n            });\n          } else if (column.type === TracesTableColumnType.TRACE_INFO) {\n            const label =\n              column.id === SESSION_COLUMN_ID\n                ? intl.formatMessage({\n                    defaultMessage: 'Session time',\n                    description: 'Session time sort option label',\n                  })\n                : column.label;\n            if (SORTABLE_INFO_COLUMNS.includes(column.id)) {\n              sortOptions.push({\n                label,\n                key: column.id,\n                type: TracesTableColumnType.TRACE_INFO,\n                group: TracesTableColumnGroup.INFO,\n              });\n            }\n          }\n        }\n\n        return sortOptions;\n      }\n\n      // First add assessments.\n      for (const sortableAssessmentCol of columns.filter(\n        (column) => column.type === TracesTableColumnType.ASSESSMENT,\n      )) {\n        const sortableAssessmentInfo = sortableAssessmentCol.assessmentInfo as AssessmentInfo;\n        const assessmentLabel = sortableAssessmentInfo.displayName;\n        sortOptions.push({\n          label: `${assessmentLabelPrefix} ﹥ ${assessmentLabel}`,\n          key: sortableAssessmentCol.id,\n          type: TracesTableColumnType.ASSESSMENT,\n        });\n      }\n      // Next add inputs.\n      const inputLabelPrefix = intl.formatMessage({\n        defaultMessage: 'Input',\n        description: 'Evaluation review > evaluations list > input sort option label prefix',\n      });\n      for (const inputColumn of columns.filter((column) => column.type === TracesTableColumnType.INPUT)) {\n        sortOptions.push({\n          label: `${inputLabelPrefix} ﹥ ${inputColumn.label}`,\n          key: inputColumn.id,\n          type: TracesTableColumnType.INPUT,\n        });\n      }\n\n      // Add info columns\n      for (const infoColumn of columns.filter(\n        (column) =>\n          (column.type === TracesTableColumnType.TRACE_INFO ||\n            column.type === TracesTableColumnType.INTERNAL_MONITOR_REQUEST_TIME) &&\n          SORTABLE_INFO_COLUMNS.includes(column.id),\n      )) {\n        sortOptions.push({\n          label: infoColumn.label,\n          key: infoColumn.id,\n          type: TracesTableColumnType.TRACE_INFO,\n        });\n      }\n\n      return sortOptions;\n    }, [columns, intl, enableGrouping]);\n\n    // Generate the label for the sort select dropdown\n    const currentSortSelectLabel = useMemo(() => {\n      // Search through all sort options generated basing on the fetched runs\n      const sortOption = sortOptions.find((option) => option.key === tableSort?.key);\n\n      let sortOptionLabel = sortOption?.label;\n\n      // If the actually chosen sort value is not found in the sort option list (e.g. because the list of fetched runs is empty),\n      // use it to generate the label\n      if (!sortOptionLabel) {\n        // The following regex extracts plain sort key name from its canonical form, i.e.\n        // metrics.`metric_key_name` => metric_key_name\n        const extractedKeyName = tableSort?.key?.match(/^.+\\.`(.+)`$/);\n        if (extractedKeyName) {\n          // eslint-disable-next-line prefer-destructuring\n          sortOptionLabel = extractedKeyName[1];\n        }\n      }\n      const sortMessage = intl.formatMessage({\n        defaultMessage: 'Sort',\n        description: 'Experiment page > sort selector > label for the dropdown button',\n      });\n\n      return !sortOptionLabel ? sortMessage : `${sortMessage}: ${sortOptionLabel}`;\n    }, [sortOptions, intl, tableSort]);\n\n    return (\n      <DropdownMenu.Root open={open} onOpenChange={setOpen} modal={false}>\n        <DropdownMenu.Trigger data-testid=\"sort-select-dropdown\" asChild>\n          <Button\n            componentId=\"mlflow.experiment_page.sort_select_v2.toggle\"\n            icon={tableSort ? tableSort.asc ? <SortAscendingIcon /> : <SortDescendingIcon /> : <SortUnsortedIcon />}\n            css={{ minWidth: 32 }}\n            aria-label={currentSortSelectLabel}\n            endIcon={<ChevronDownIcon />}\n          >\n            {currentSortSelectLabel}\n          </Button>\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content minWidth={250}>\n          {metadataError ? (\n            <div\n              css={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: theme.spacing.xs,\n                padding: `${theme.spacing.md}px`,\n                color: theme.colors.textValidationDanger,\n              }}\n              data-testid=\"filter-dropdown-error\"\n            >\n              <DangerIcon />\n              <FormattedMessage\n                defaultMessage=\"Fetching traces failed\"\n                description=\"Error message for fetching traces failed\"\n              />\n            </div>\n          ) : isMetadataLoading ? (\n            <div\n              css={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: theme.spacing.xs,\n                padding: `${theme.spacing.lg}px`,\n                color: theme.colors.textSecondary,\n              }}\n              data-testid=\"sort-dropdown-loading\"\n            >\n              <Spinner size=\"small\" />\n            </div>\n          ) : enableGrouping ? (\n            <EvaluationsOverviewSortDropdownBodyGrouped\n              sortOptions={sortOptions}\n              tableSort={tableSort}\n              onOptionSelected={(sortOption, orderByAsc) => {\n                onChange(sortOption, orderByAsc);\n                setOpen(false);\n              }}\n            />\n          ) : (\n            <EvaluationsOverviewSortDropdownBody\n              sortOptions={sortOptions}\n              tableSort={tableSort}\n              onOptionSelected={(sortOption, orderByAsc) => {\n                onChange(sortOption, orderByAsc);\n                setOpen(false);\n              }}\n            />\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n\nconst EvaluationsOverviewSortDropdownBodyGrouped = ({\n  sortOptions,\n  tableSort,\n  onOptionSelected,\n}: {\n  sortOptions: SortOption[];\n  tableSort?: EvaluationsOverviewTableSort;\n  onOptionSelected: (opt: SortOption, asc: boolean) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const inputRef = useRef<React.ComponentRef<typeof Input>>(null);\n  const firstOptionRef = useRef<HTMLDivElement>(null);\n\n  const [filter, setFilter] = useState<string>('');\n\n  const filtered = useMemo(\n    () => sortOptions.filter((opt) => opt.label.toLowerCase().includes(filter.toLowerCase())),\n    [sortOptions, filter],\n  );\n\n  const grouped = useMemo(() => {\n    const m: Record<string, SortOption[]> = {};\n    filtered.forEach((opt) => {\n      const grp = opt.group ?? TracesTableColumnGroup.INFO;\n      if (!m[grp]) m[grp] = [];\n      m[grp].push(opt);\n    });\n    return m;\n  }, [filtered]);\n\n  const handleChange = useCallback(\n    (key: string) => {\n      const opt = sortOptions.find((o) => o.key === key);\n      if (!opt) return;\n      onOptionSelected(opt, tableSort?.asc ?? true);\n    },\n    [onOptionSelected, sortOptions, tableSort?.asc],\n  );\n\n  const setOrder = useCallback(\n    (asc: boolean) => {\n      const opt = sortOptions.find((o) => o.key === tableSort?.key) ?? sortOptions[0];\n      onOptionSelected(opt, asc);\n    },\n    [onOptionSelected, sortOptions, tableSort?.key],\n  );\n\n  // Autofocus won't work everywhere so let's focus input everytime the dropdown is opened\n  useEffect(() => {\n    requestAnimationFrame(() => inputRef.current?.focus());\n  }, []);\n\n  return (\n    <>\n      <div\n        css={{\n          padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px`,\n          display: 'flex',\n          gap: theme.spacing.xs,\n        }}\n      >\n        <Input\n          ref={inputRef}\n          componentId=\"mlflow.genai_traces_table.sort_dropdown.search\"\n          prefix={<SearchIcon />}\n          placeholder=\"Search\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          type=\"search\"\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown' || e.key === 'Tab') {\n              firstOptionRef.current?.focus();\n              e.preventDefault();\n            }\n          }}\n        />\n        <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n          <ToggleButton\n            pressed={tableSort?.asc === false}\n            icon={<ArrowDownIcon />}\n            componentId=\"mlflow.genai_traces_table.sort_dropdown.sort_desc\"\n            onClick={() => setOrder(false)}\n            aria-label=\"Sort descending\"\n          />\n          <ToggleButton\n            pressed={tableSort?.asc === true}\n            icon={<ArrowUpIcon />}\n            componentId=\"mlflow.experiment_page.sort_dropdown.sort_asc\"\n            onClick={() => setOrder(true)}\n            aria-label=\"Sort ascending\"\n          />\n        </div>\n      </div>\n\n      <div css={{ maxHeight: 400, overflowY: 'auto', padding: `0 ${theme.spacing.sm}px` }}>\n        {Object.entries(grouped).map(([groupName, opts], gi) => (\n          <React.Fragment key={groupName}>\n            <DropdownMenu.Group>\n              <DropdownMenu.Label>\n                {groupName === TracesTableColumnGroup.INFO\n                  ? 'Attributes'\n                  : TracesTableColumnGroupToLabelMap[groupName as TracesTableColumnGroup]}\n              </DropdownMenu.Label>\n              {opts.map((opt, idx) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"mlflow.genai_traces_table.sort_dropdown.sort_option\"\n                  key={opt.key}\n                  checked={opt.key === tableSort?.key}\n                  onClick={() => handleChange(opt.key)}\n                  ref={gi === 0 && idx === 0 ? firstOptionRef : undefined}\n                  data-testid={`sort-select-${opt.label}`}\n                >\n                  <DropdownMenu.ItemIndicator />\n                  <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>{opt.label}</span>\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.Group>\n          </React.Fragment>\n        ))}\n\n        {/* No results fallback */}\n        {filtered.length === 0 && (\n          <DropdownMenu.Item disabled componentId=\"mlflow.genai_traces_table.sort_dropdown.no_results\">\n            <FormattedMessage\n              defaultMessage=\"No results\"\n              description=\"Experiment page > sort selector > no results after filtering\"\n            />\n          </DropdownMenu.Item>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst EvaluationsOverviewSortDropdownBody = ({\n  sortOptions,\n  tableSort,\n  onOptionSelected,\n}: {\n  sortOptions: SortOption[];\n  tableSort?: EvaluationsOverviewTableSort;\n  onOptionSelected: (sortOption: SortOption, orderByAsc: boolean) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const inputElementRef = useRef<React.ComponentRef<typeof Input>>(null);\n  const [filter, setFilter] = useState('');\n  const firstElementRef = useRef<HTMLDivElement>(null);\n\n  // Merge all sort options and filter them by the search query\n  const filteredSortOptions = useMemo(\n    () =>\n      sortOptions.filter((option) => {\n        return option.label.toLowerCase().includes(filter.toLowerCase());\n      }),\n    [sortOptions, filter],\n  );\n\n  const handleChange = useCallback(\n    (orderByKey: string) => {\n      const orderByKeyOption = sortOptions.find((option) => option.key === orderByKey);\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n      onOptionSelected(orderByKeyOption!, tableSort?.asc || true);\n    },\n    [onOptionSelected, tableSort, sortOptions],\n  );\n\n  const setOrder = useCallback(\n    (ascending: boolean) => {\n      const orderByKeyOption = sortOptions.find((option) => option.key === tableSort?.key);\n      onOptionSelected(orderByKeyOption || sortOptions[0], ascending);\n    },\n    [onOptionSelected, sortOptions, tableSort],\n  );\n\n  // Autofocus won't work everywhere so let's focus input everytime the dropdown is opened\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      inputElementRef.current?.focus();\n    });\n  }, []);\n\n  return (\n    <>\n      <div\n        css={{\n          padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px ${theme.spacing.sm}px`,\n          width: '100%',\n          display: 'flex',\n          gap: theme.spacing.xs,\n        }}\n      >\n        <Input\n          componentId=\"mlflow.experiment_page.sort_dropdown.search\"\n          prefix={<SearchIcon />}\n          value={filter}\n          type=\"search\"\n          onChange={(e) => setFilter(e.target.value)}\n          placeholder=\"Search\"\n          autoFocus\n          ref={inputElementRef}\n          onKeyDown={(e) => {\n            if (e.key === 'ArrowDown' || e.key === 'Tab') {\n              firstElementRef.current?.focus();\n              return;\n            }\n            e.stopPropagation();\n          }}\n        />\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <ToggleButton\n            pressed={tableSort?.asc === false}\n            icon={<ArrowDownIcon />}\n            componentId=\"mlflow.experiment_page.sort_dropdown.sort_desc\"\n            onClick={() => setOrder(false)}\n            aria-label=\"Sort descending\"\n            data-testid=\"sort-select-desc\"\n          />\n          <ToggleButton\n            pressed={tableSort?.asc === true}\n            icon={<ArrowUpIcon />}\n            componentId=\"mlflow.experiment_page.sort_dropdown.sort_asc\"\n            onClick={() => setOrder(true)}\n            aria-label=\"Sort ascending\"\n            data-testid=\"sort-select-asc\"\n          />\n        </div>\n      </div>\n      <DropdownMenu.Group css={{ maxHeight: 400, overflowY: 'auto' }}>\n        {filteredSortOptions.map((sortOption, index) => (\n          <DropdownMenu.CheckboxItem\n            componentId=\"mlflow.experiment_page.sort_dropdown.sort_option\"\n            key={sortOption.key}\n            onClick={() => handleChange(sortOption.key)}\n            checked={sortOption.key === tableSort?.key}\n            data-testid={`sort-select-${sortOption.label}`}\n            ref={index === 0 ? firstElementRef : undefined}\n          >\n            <DropdownMenu.ItemIndicator />\n            <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>{sortOption.label}</span>\n          </DropdownMenu.CheckboxItem>\n        ))}\n        {!filteredSortOptions.length && (\n          <DropdownMenu.Item\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunssortselectorv2.tsx_151\"\n            disabled\n          >\n            <FormattedMessage\n              defaultMessage=\"No results\"\n              description=\"Experiment page > sort selector > no results after filtering by search query\"\n            />\n          </DropdownMenu.Item>\n        )}\n      </DropdownMenu.Group>\n    </>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport const GenAiEvaluationBadge = ({\n  backgroundColor,\n  icon,\n  children,\n}:\n  | {\n      backgroundColor?: string;\n      icon?: React.ReactNode;\n      children: React.ReactNode;\n    }\n  | {\n      backgroundColor?: string;\n      icon: React.ReactNode;\n      children?: null;\n    }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '4px 8px',\n        gap: theme.spacing.xs,\n        borderRadius: theme.borders.borderRadiusMd,\n        color: theme.colors.textSecondary,\n        backgroundColor: backgroundColor || theme.colors.backgroundSecondary,\n        fontSize: theme.typography.fontSizeSm,\n      }}\n    >\n      {icon ? icon : null}\n      {children ? <span>{children}</span> : null}\n    </div>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useSearchParams } from '../utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'selectedEvaluationId';\n\n/**\n * Query param-powered hook that returns the currently selected evaluation ID\n * and a function to set the selected evaluation ID.\n */\nexport const useActiveEvaluation = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedEvaluationId = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setSelectedEvaluationId = useCallback(\n    (selectedEvaluationId: string | undefined) => {\n      setSearchParams((params) => {\n        if (selectedEvaluationId === undefined) {\n          params.delete(QUERY_PARAM_KEY);\n          return params;\n        }\n        params.set(QUERY_PARAM_KEY, selectedEvaluationId);\n        return params;\n      });\n    },\n    [setSearchParams],\n  );\n\n  return [selectedEvaluationId, setSelectedEvaluationId] as const;\n};\n","import { useCallback } from 'react';\n\nimport { useSearchParams } from '../utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'searchQuery';\n\n/**\n * Query param-powered hook that returns the search query for evaluations.\n */\nexport const useEvaluationsSearchQuery = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchQuery = searchParams.get(QUERY_PARAM_KEY) ?? '';\n\n  const setSearchQuery = useCallback(\n    (value: string | undefined) => {\n      setSearchParams((params) => {\n        if (value === undefined || value === '') {\n          params.delete(QUERY_PARAM_KEY);\n          return params;\n        }\n        params.set(QUERY_PARAM_KEY, value);\n        return params;\n      });\n    },\n    [setSearchParams],\n  );\n\n  return [searchQuery, setSearchQuery] as const;\n};\n","import { isNil } from 'lodash';\n\nimport {\n  getEvaluationResultAssessmentValue,\n  KnownEvaluationResultAssessmentName,\n} from '../components/GenAiEvaluationTracesReview.utils';\nimport type { AssessmentFilter, EvalTraceComparisonEntry } from '../types';\n\nfunction filterEval(\n  comparisonEntry: EvalTraceComparisonEntry,\n  filters: AssessmentFilter[],\n  currentRunDisplayName?: string,\n  otherRunDisplayName?: string,\n): boolean {\n  // Currently only filters on the current run value.\n  const currentRunValue = comparisonEntry?.currentRunValue;\n  const otherRunValue = comparisonEntry?.otherRunValue;\n\n  let includeEval = true;\n\n  for (const filter of filters) {\n    const assessmentName = filter.assessmentName;\n    const filterValue = filter.filterValue;\n    const run = filter.run;\n    const runValue =\n      run === currentRunDisplayName ? currentRunValue : run === otherRunDisplayName ? otherRunValue : undefined;\n    // TODO(nsthorat): Fix this logic, not clear that this is the right way to filter.\n    if (runValue === undefined) {\n      continue;\n    }\n\n    const assessment =\n      assessmentName === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT\n        ? runValue.overallAssessments?.[0]\n        : runValue.responseAssessmentsByName[assessmentName]?.[0];\n\n    if (filter.filterType === 'rca') {\n      const currentIsAssessmentRootCause =\n        runValue?.overallAssessments[0]?.rootCauseAssessment?.assessmentName === assessmentName;\n      includeEval = includeEval && currentIsAssessmentRootCause;\n    } else {\n      let assessmentValue = assessment ? getEvaluationResultAssessmentValue(assessment) : undefined;\n      if (isNil(assessmentValue)) {\n        assessmentValue = undefined;\n      }\n\n      includeEval = includeEval && assessmentValue === filterValue;\n    }\n  }\n  return includeEval;\n}\n\nexport function filterEvaluationResults(\n  evaluationResults: EvalTraceComparisonEntry[],\n  assessmentFilters: AssessmentFilter[],\n  searchQuery?: string,\n  currentRunDisplayName?: string,\n  otherRunDisplayName?: string,\n): EvalTraceComparisonEntry[] {\n  // Filter results by the assessment filters.\n  return (\n    evaluationResults\n      .filter((entry) => {\n        return filterEval(entry, assessmentFilters, currentRunDisplayName, otherRunDisplayName);\n      })\n      // Filter results by the text search box.\n      .filter((entry) => {\n        if (isNil(searchQuery) || searchQuery === '') {\n          return true;\n        }\n        const searchQueryLower = searchQuery.toLowerCase();\n        const currentInputsContainSearchQuery = Object.values(entry.currentRunValue?.inputs || {}).some(\n          (inputValue) => {\n            return JSON.stringify(inputValue).toLowerCase().includes(searchQueryLower);\n          },\n        );\n        const inputsIdEqualsToSearchQuery = entry.currentRunValue?.inputsId.toLowerCase() === searchQueryLower;\n        return currentInputsContainSearchQuery || inputsIdEqualsToSearchQuery;\n      })\n  );\n}\n","import type { RowSelectionState } from '@tanstack/react-table';\nimport { isNil } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport {\n  Button,\n  ChevronDownIcon,\n  Typography,\n  useDesignSystemTheme,\n  DialogCombobox,\n  DialogComboboxContent,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  DialogComboboxCustomButtonTriggerWrapper,\n  XCircleFillIcon,\n  TableFilterLayout,\n  LegacySkeleton,\n  FilterIcon,\n  Tooltip,\n  Spinner,\n  WarningIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport type { ModelTrace, ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\n\nimport { GenAITracesTableActions } from './GenAITracesTableActions';\nimport { computeEvaluationsComparison } from './GenAiTracesTable.utils';\nimport { GenAiTracesTableBody } from './GenAiTracesTableBody';\nimport { GenAiTracesTableSearchInput } from './GenAiTracesTableSearchInput';\nimport { EvaluationsOverviewColumnSelector } from './components/EvaluationsOverviewColumnSelector';\nimport { EvaluationsOverviewSortDropdown } from './components/EvaluationsOverviewSortDropdown';\nimport { GenAiEvaluationBadge } from './components/GenAiEvaluationBadge';\nimport {\n  getAssessmentValueLabel,\n  KnownEvaluationResultAssessmentName,\n} from './components/GenAiEvaluationTracesReview.utils';\nimport { useActiveEvaluation } from './hooks/useActiveEvaluation';\nimport {\n  assessmentValueToSerializedString,\n  serializedStringToAssessmentValue,\n  useAssessmentFilters,\n} from './hooks/useAssessmentFilters';\nimport { useEvaluationsSearchQuery } from './hooks/useEvaluationsSearchQuery';\nimport { GenAITracesTableConfigProvider, type GenAITracesTableConfig } from './hooks/useGenAITracesTableConfig';\nimport { useTableColumns } from './hooks/useTableColumns';\nimport { TracesTableColumnType } from './types';\nimport type {\n  AssessmentFilter,\n  AssessmentInfo,\n  AssessmentValueType,\n  SaveAssessmentsQuery,\n  RunEvaluationTracesDataEntry,\n  TracesTableColumn,\n  TraceActions,\n  EvaluationsOverviewTableSort,\n} from './types';\nimport { getAssessmentInfos, sortAssessmentInfos } from './utils/AggregationUtils';\nimport { displayPercentage } from './utils/DisplayUtils';\nimport { FILTER_DROPDOWN_COMPONENT_ID } from './utils/EvaluationLogging';\nimport { filterEvaluationResults } from './utils/EvaluationsFilterUtils';\nimport { applyTraceInfoV3ToEvalEntry } from './utils/TraceUtils';\n\nfunction GenAiTracesTableImpl({\n  experimentId,\n  currentEvaluationResults: oldEvalResults,\n  compareToEvaluationResults: oldCompareToEvalResults,\n  currentRunDisplayName,\n  runUuid,\n  compareToRunUuid,\n  compareToRunDisplayName,\n  compareToRunLoading,\n  sampledInfo,\n  exportToEvalsInstanceEnabled = false,\n  getTrace,\n  saveAssessmentsQuery,\n  enableRunEvaluationWriteFeatures,\n  defaultSortOption,\n  disableAssessmentTooltips,\n  onTraceTagsEdit,\n  traceActions,\n  initialSelectedColumns,\n}: {\n  experimentId: string;\n  currentEvaluationResults: RunEvaluationTracesDataEntry[];\n  compareToEvaluationResults?: RunEvaluationTracesDataEntry[];\n  currentRunDisplayName?: string;\n  runUuid?: string;\n  compareToRunUuid?: string;\n  compareToRunDisplayName?: string;\n  compareToRunLoading?: boolean;\n  sampledInfo?: SampleInfo;\n  exportToEvalsInstanceEnabled?: boolean;\n  getTrace?: (requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>;\n  saveAssessmentsQuery?: SaveAssessmentsQuery;\n  enableRunEvaluationWriteFeatures?: boolean;\n  defaultSortOption?: EvaluationsOverviewTableSort;\n  // This is a temporary hack to disable assessment hovercards because\n  // we don't properly display long strings yet. We should eventually fix the hovercard\n  // to display long strings and remove this prop.\n  disableAssessmentTooltips?: boolean;\n  onTraceTagsEdit?: (trace: ModelTraceInfo) => void;\n  traceActions?: TraceActions;\n  initialSelectedColumns?: (allColumns: TracesTableColumn[]) => TracesTableColumn[];\n}) {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  // Convert trace info v3 back to the old RunEvaluationTracesDataEntry format.\n  // We should gradually migrate this component to use trace info v3 directly and\n  // then we can remove this conversion.\n  const currentEvaluationResults = applyTraceInfoV3ToEvalEntry(oldEvalResults);\n  const compareToEvaluationResults = applyTraceInfoV3ToEvalEntry(oldCompareToEvalResults || []);\n\n  // Eventually we should just take traceActions that user passes in\n  // once exportToEval is moved to traceActions as well.\n  const fullTraceActions: TraceActions = useMemo(() => {\n    const exportToEvalAction = exportToEvalsInstanceEnabled\n      ? {\n          exportToEvals: {\n            exportToEvalsInstanceEnabled,\n            getTrace,\n          },\n        }\n      : {};\n    return {\n      ...traceActions,\n      ...exportToEvalAction,\n    };\n  }, [traceActions, exportToEvalsInstanceEnabled, getTrace]);\n\n  const enableTableRowSelection: boolean = Object.keys(fullTraceActions).length > 0;\n\n  const [selectedEvaluationId, setSelectedEvaluationId] = useActiveEvaluation();\n\n  // evaluationResults contains the merged evaluation results from the current and compare-to runs.\n  const evaluationResults = useMemo(\n    () => computeEvaluationsComparison(currentEvaluationResults, compareToEvaluationResults),\n    [currentEvaluationResults, compareToEvaluationResults],\n  );\n\n  const [searchQuery, setSearchQuery] = useEvaluationsSearchQuery();\n\n  const assessmentInfos = useMemo(() => {\n    return getAssessmentInfos(intl, currentEvaluationResults, compareToEvaluationResults);\n  }, [intl, currentEvaluationResults, compareToEvaluationResults]);\n\n  const allColumns: TracesTableColumn[] = useTableColumns(intl, currentEvaluationResults, assessmentInfos, runUuid);\n\n  const [assessmentFilters, setAssessmentFilters] = useAssessmentFilters(\n    // These are the subset of all assessment infos that are shown in the table\n    allColumns.map((col) => col.assessmentInfo).filter((info): info is AssessmentInfo => info !== undefined),\n  );\n\n  const displayEvaluationResults = useMemo(() => {\n    if (searchQuery === '' && assessmentFilters.length === 0) {\n      return evaluationResults;\n    }\n    return filterEvaluationResults(\n      evaluationResults,\n      assessmentFilters,\n      searchQuery,\n      currentRunDisplayName,\n      compareToRunDisplayName,\n    );\n  }, [evaluationResults, searchQuery, assessmentFilters, currentRunDisplayName, compareToRunDisplayName]);\n\n  // TODO(nsthorat): Add these to the URL.\n  // Initially all assessments, inputs, and certain info columns are selected\n  const [selectedColumns, setSelectedColumns] = useState<TracesTableColumn[]>(allColumns);\n\n  const selectedAssessmentInfos = useMemo(() => {\n    const selectedAssessmentCols = selectedColumns.filter((col) => col.type === TracesTableColumnType.ASSESSMENT);\n    const selectedAssessments = selectedAssessmentCols.map((col) => col.assessmentInfo as AssessmentInfo);\n    const sortedSelectedAssessments = sortAssessmentInfos(selectedAssessments);\n    return sortedSelectedAssessments;\n  }, [selectedColumns]);\n\n  const overallAssessmentCol = allColumns.find(\n    (col) =>\n      col.type === TracesTableColumnType.ASSESSMENT &&\n      col.id === KnownEvaluationResultAssessmentName.OVERALL_ASSESSMENT,\n  );\n\n  const initialSort: EvaluationsOverviewTableSort | undefined =\n    defaultSortOption ||\n    (overallAssessmentCol\n      ? { key: overallAssessmentCol.id, type: TracesTableColumnType.ASSESSMENT, asc: true }\n      : undefined);\n  const [tableSort, setTableSort] = useState<EvaluationsOverviewTableSort | undefined>(initialSort);\n\n  const getAssessmentFilter = useCallback(\n    (assessmentName: string, run: string): AssessmentFilter | undefined => {\n      return assessmentFilters.find((filter) => filter.assessmentName === assessmentName && filter.run === run);\n    },\n    [assessmentFilters],\n  );\n  const removeAssessmentFilter = useCallback(\n    (assessmentName: string, run: string) => {\n      setAssessmentFilters(\n        assessmentFilters.filter((filter) => filter.assessmentName !== assessmentName || filter.run !== run),\n      );\n    },\n    [assessmentFilters, setAssessmentFilters],\n  );\n\n  const updateAssessmentFilter = useCallback(\n    (\n      assessmentName: string,\n      filterValue: AssessmentValueType,\n      run: string,\n      filterType?: AssessmentFilter['filterType'],\n    ) => {\n      const filter = assessmentFilters.find((filter) => filter.assessmentName === assessmentName && filter.run === run);\n      if (filter === undefined) {\n        setAssessmentFilters([\n          ...assessmentFilters,\n          {\n            assessmentName,\n            filterValue,\n            filterType,\n            run,\n          },\n        ]);\n      } else {\n        setAssessmentFilters(\n          assessmentFilters.map((filter) => {\n            if (filter.assessmentName === assessmentName) {\n              return {\n                ...filter,\n                filterValue,\n                filterType,\n              };\n            }\n            return filter;\n          }),\n        );\n      }\n    },\n    [assessmentFilters, setAssessmentFilters],\n  );\n  const toggleAssessmentFilter = useCallback(\n    (\n      assessmentName: string,\n      filterValue: AssessmentValueType,\n      run: string,\n      filterType?: AssessmentFilter['filterType'],\n    ) => {\n      const filter = assessmentFilters.find((filter) => filter.assessmentName === assessmentName && filter.run === run);\n      if (filter === undefined) {\n        setAssessmentFilters([\n          ...assessmentFilters,\n          {\n            assessmentName,\n            filterValue,\n            filterType,\n            run,\n          },\n        ]);\n      } else if (filter.filterValue === filterValue && filter.filterType === filterType) {\n        // Remove the filter because it already exists.\n        setAssessmentFilters(\n          assessmentFilters.filter((filter) => filter.assessmentName !== assessmentName || filter.run !== run),\n        );\n      } else {\n        // Replace any filters with the same assessment name and run.\n        setAssessmentFilters(\n          assessmentFilters.map((filter) => {\n            if (filter.assessmentName === assessmentName && filter.run === run) {\n              return {\n                assessmentName,\n                filterValue,\n                filterType,\n                run,\n              };\n            }\n            return filter;\n          }),\n        );\n      }\n    },\n    [assessmentFilters, setAssessmentFilters],\n  );\n  const clearFilters = useCallback(() => {\n    setAssessmentFilters([]);\n  }, [setAssessmentFilters]);\n\n  const hasActiveFilters = assessmentFilters.length > 0;\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n  const selectedTraces: RunEvaluationTracesDataEntry[] = useMemo(() => {\n    const selectedEvaluationIds = Object.keys(rowSelection).filter((evaluationId) => rowSelection[evaluationId]);\n    return displayEvaluationResults\n      .filter(\n        (evaluation) =>\n          evaluation.currentRunValue && selectedEvaluationIds.includes(evaluation.currentRunValue.evaluationId),\n      )\n      .map((entry) => entry.currentRunValue)\n      .filter((entry) => entry !== undefined);\n  }, [rowSelection, displayEvaluationResults]);\n\n  const config: Partial<GenAITracesTableConfig> = {\n    enableRunEvaluationWriteFeatures: enableRunEvaluationWriteFeatures,\n  };\n\n  const totalEvaluationResults = currentEvaluationResults.length;\n\n  if (compareToRunLoading) {\n    return <LegacySkeleton />;\n  }\n\n  return (\n    <GenAITracesTableConfigProvider config={config}>\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.lg,\n          overflow: 'hidden',\n          height: '100%',\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.xs,\n            overflow: 'hidden',\n            flexGrow: 1,\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flex: 1,\n              flexDirection: 'column',\n              gap: theme.spacing.xs,\n              overflow: 'hidden',\n            }}\n          >\n            <div\n              css={{\n                display: 'flex',\n                width: '100%',\n                alignItems: 'flex-end',\n                justifyContent: 'space-between',\n                padding: `${theme.spacing.xs}px 0px`,\n              }}\n            >\n              <TableFilterLayout\n                css={{\n                  marginBottom: 0,\n                }}\n              >\n                <GenAiTracesTableSearchInput searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n                <DialogCombobox\n                  componentId={FILTER_DROPDOWN_COMPONENT_ID}\n                  label=\"Filters\"\n                  value={Array.from(assessmentFilters).map((filter) => filter.assessmentName)}\n                  multiSelect\n                >\n                  <DialogComboboxCustomButtonTriggerWrapper>\n                    <Button\n                      endIcon={<ChevronDownIcon />}\n                      componentId=\"mlflow.evaluations_review.table_ui.filter_button\"\n                      css={{\n                        border: hasActiveFilters ? `1px solid ${theme.colors.actionDefaultBorderFocus} !important` : '',\n                        backgroundColor: hasActiveFilters\n                          ? `${theme.colors.actionDefaultBackgroundHover} !important`\n                          : '',\n                      }}\n                    >\n                      <div\n                        css={{\n                          display: 'flex',\n                          gap: theme.spacing.sm,\n                          alignItems: 'center',\n                        }}\n                      >\n                        <FilterIcon />\n                        {intl.formatMessage(\n                          {\n                            defaultMessage: 'Filters{numFilters}',\n                            description: 'Evaluation review > evaluations list > filter dropdown button',\n                          },\n                          {\n                            numFilters: hasActiveFilters ? ` (${assessmentFilters.length})` : '',\n                          },\n                        )}\n                        {assessmentFilters.length > 0 && (\n                          <XCircleFillIcon\n                            css={{\n                              fontSize: 12,\n                              cursor: 'pointer',\n                              color: theme.colors.grey400,\n                              '&:hover': {\n                                color: theme.colors.grey600,\n                              },\n                            }}\n                            onClick={(e) => {\n                              clearFilters();\n                              e.stopPropagation();\n                              e.preventDefault();\n                            }}\n                          />\n                        )}\n                      </div>\n                    </Button>\n                  </DialogComboboxCustomButtonTriggerWrapper>\n                  <DialogComboboxContent>\n                    <div\n                      css={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        padding: `${theme.spacing.sm}px ${theme.spacing.sm}px`,\n                        gap: theme.spacing.md,\n                      }}\n                    >\n                      {selectedAssessmentInfos\n                        // For now, we don't support filtering on numeric values.\n                        .filter((info) => info.dtype !== 'numeric')\n                        .map((assessmentInfo) => (\n                          <div\n                            css={{\n                              display: 'flex',\n                              flexDirection: 'column',\n                              gap: theme.spacing.sm,\n                            }}\n                            key={assessmentInfo.name}\n                          >\n                            <div\n                              css={{\n                                fontWeight: 500,\n                              }}\n                            >\n                              {assessmentInfo.displayName}\n                            </div>\n                            {currentRunDisplayName && (\n                              <AssessmentsFilterSelector\n                                assessmentLabel={assessmentInfo.displayName}\n                                assessmentName={assessmentInfo.name}\n                                assessmentInfo={assessmentInfo}\n                                assessmentFilter={getAssessmentFilter(assessmentInfo.name, currentRunDisplayName)}\n                                updateAssessmentFilter={updateAssessmentFilter}\n                                removeAssessmentFilter={removeAssessmentFilter}\n                                run={currentRunDisplayName}\n                              />\n                            )}\n                            {compareToRunUuid && compareToRunDisplayName && (\n                              <div\n                                css={{\n                                  display: 'flex',\n                                  flexDirection: 'column',\n                                  gap: theme.spacing.xs,\n                                }}\n                              >\n                                <Typography.Hint>{compareToRunDisplayName}</Typography.Hint>\n                                <AssessmentsFilterSelector\n                                  assessmentLabel={assessmentInfo.displayName}\n                                  assessmentName={assessmentInfo.name}\n                                  assessmentInfo={assessmentInfo}\n                                  assessmentFilter={getAssessmentFilter(assessmentInfo.name, compareToRunDisplayName)}\n                                  updateAssessmentFilter={updateAssessmentFilter}\n                                  removeAssessmentFilter={removeAssessmentFilter}\n                                  run={compareToRunDisplayName}\n                                />\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                    </div>\n                  </DialogComboboxContent>\n                </DialogCombobox>\n                <EvaluationsOverviewSortDropdown\n                  tableSort={tableSort}\n                  columns={allColumns}\n                  onChange={(sortOption, orderByAsc) => {\n                    setTableSort({ key: sortOption.key, type: sortOption.type, asc: orderByAsc });\n                  }}\n                />\n\n                {/* Column selector */}\n                <EvaluationsOverviewColumnSelector\n                  columns={allColumns}\n                  selectedColumns={selectedColumns}\n                  setSelectedColumns={setSelectedColumns}\n                />\n                <GenAITracesTableActions\n                  experimentId={experimentId}\n                  selectedTraces={selectedTraces}\n                  setRowSelection={setRowSelection}\n                  traceActions={fullTraceActions}\n                  traceInfos={undefined}\n                />\n              </TableFilterLayout>\n              <div\n                css={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: theme.spacing.sm,\n                }}\n              >\n                <SampledInfoBadge totalRowCount={totalEvaluationResults} sampledInfo={sampledInfo} />\n                <Typography.Hint>\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: '{numFilteredEvals} of {numEvals}',\n                      description:\n                        'Text displayed when showing a filtered subset evaluations in the evaluation review page',\n                    },\n                    {\n                      numEvals: evaluationResults.length,\n                      numFilteredEvals: displayEvaluationResults.length,\n                    },\n                  )}\n                </Typography.Hint>\n              </div>\n            </div>\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.md,\n                width: '100%',\n                flex: 1,\n                overflowY: 'hidden',\n              }}\n            >\n              <div\n                css={{\n                  display: 'flex',\n                  flex: 1,\n                  overflowY: 'hidden',\n                }}\n              >\n                <GenAiTracesTableBody\n                  experimentId={experimentId}\n                  selectedColumns={selectedColumns}\n                  allColumns={allColumns}\n                  evaluations={displayEvaluationResults}\n                  selectedEvaluationId={selectedEvaluationId}\n                  selectedAssessmentInfos={selectedAssessmentInfos}\n                  assessmentInfos={assessmentInfos}\n                  assessmentFilters={assessmentFilters}\n                  onChangeEvaluationId={setSelectedEvaluationId}\n                  tableSort={tableSort}\n                  runUuid={runUuid}\n                  compareToRunUuid={compareToRunUuid}\n                  runDisplayName={currentRunDisplayName}\n                  compareToRunDisplayName={compareToRunDisplayName}\n                  enableRowSelection={enableTableRowSelection}\n                  rowSelection={enableTableRowSelection ? rowSelection : undefined}\n                  setRowSelection={enableTableRowSelection ? setRowSelection : undefined}\n                  exportToEvalsInstanceEnabled={exportToEvalsInstanceEnabled}\n                  getTrace={getTrace}\n                  toggleAssessmentFilter={toggleAssessmentFilter}\n                  saveAssessmentsQuery={saveAssessmentsQuery}\n                  disableAssessmentTooltips={disableAssessmentTooltips}\n                  onTraceTagsEdit={onTraceTagsEdit}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </GenAITracesTableConfigProvider>\n  );\n}\n\nconst SampledInfoBadge = (props: { totalRowCount: number; sampledInfo?: SampleInfo }) => {\n  const { totalRowCount, sampledInfo } = props;\n  const intl = useIntl();\n\n  if (!sampledInfo) {\n    return null;\n  }\n\n  // TODO: Remove this once table supports pagination\n  if (sampledInfo.maxAllowedCount) {\n    if (totalRowCount >= sampledInfo.maxAllowedCount) {\n      return (\n        <Tooltip\n          componentId=\"mlflow.experiment_list_view.max_traces.tooltip\"\n          content={intl.formatMessage(\n            {\n              defaultMessage: 'Only the top {evalResultsCount} results are shown',\n              description: 'Evaluation review > evaluations list > sample info tooltip',\n            },\n            {\n              evalResultsCount: totalRowCount,\n            },\n          )}\n        >\n          <WarningIcon color=\"warning\" />\n        </Tooltip>\n      );\n    }\n\n    return null;\n  }\n  if (sampledInfo.logCountLoading || isNil(sampledInfo.sampledCount) || isNil(sampledInfo.totalCount)) {\n    return <Spinner />;\n  }\n  return (\n    <GenAiEvaluationBadge>\n      <Tooltip\n        componentId=\"mlflow.experiment_list_view.sampled_badge.tooltip\"\n        content={intl.formatMessage(\n          {\n            defaultMessage: 'Retrieved {sampledCount} out of {totalCount} total logs ({percentage}%)',\n            description: 'Evaluation review > evaluations list > sample info tooltip',\n          },\n          {\n            sampledCount: sampledInfo.sampledCount,\n            totalCount: sampledInfo.totalCount,\n            percentage: displayPercentage(sampledInfo.sampledCount / sampledInfo.totalCount),\n          },\n        )}\n      >\n        Sampled {displayPercentage(sampledInfo.sampledCount / sampledInfo.totalCount)}%\n      </Tooltip>\n    </GenAiEvaluationBadge>\n  );\n};\n\nconst ANY_VALUE = '__any_value__';\n\nconst AssessmentsFilterSelector = React.memo(\n  ({\n    assessmentName,\n    assessmentInfo,\n    assessmentLabel,\n    assessmentFilter,\n    updateAssessmentFilter,\n    removeAssessmentFilter,\n    run,\n  }: {\n    assessmentName: string;\n    assessmentInfo: AssessmentInfo;\n    assessmentLabel: string;\n    assessmentFilter: AssessmentFilter | undefined;\n    updateAssessmentFilter: (assessmentName: string, filterValue: AssessmentValueType, run: string) => void;\n    removeAssessmentFilter: (assessmentName: string, run: string) => void;\n    run: string;\n  }) => {\n    const intl = useIntl();\n    const { theme } = useDesignSystemTheme();\n\n    const selectedValue = assessmentFilter\n      ? assessmentValueToSerializedString(assessmentFilter.filterValue)\n      : ANY_VALUE;\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <SegmentedControlGroup\n          name=\"size-story\"\n          value={selectedValue}\n          onChange={(event) => {\n            if (event.target.value === ANY_VALUE) {\n              removeAssessmentFilter(assessmentName, run);\n              return;\n            }\n            const value = serializedStringToAssessmentValue(assessmentInfo, event.target.value);\n            updateAssessmentFilter(assessmentName, value, run);\n          }}\n          size=\"middle\"\n          componentId={`mlflow.evaluations_review.table_ui.filter_control_${assessmentName}`}\n        >\n          <SegmentedControlButton value={ANY_VALUE}>\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.sm,\n                alignItems: 'center',\n                color: theme.colors.textPrimary,\n              }}\n            >\n              {intl.formatMessage({\n                defaultMessage: 'All',\n                description:\n                  'Evaluation review > sidebar list of evaluation results > filter control > option for filtering evaluation results with no filter',\n              })}\n            </div>\n          </SegmentedControlButton>\n          {Array.from(assessmentInfo.uniqueValues.values()).map((value) => {\n            const { content, icon } = getAssessmentValueLabel(intl, theme, assessmentInfo, value);\n            return (\n              <SegmentedControlButton\n                value={assessmentValueToSerializedString(value)}\n                key={assessmentValueToSerializedString(value)}\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    gap: theme.spacing.sm,\n                    alignItems: 'center',\n                    color: theme.colors.textPrimary,\n                  }}\n                >\n                  {content}\n                  {icon}\n                </div>\n              </SegmentedControlButton>\n            );\n          })}\n        </SegmentedControlGroup>\n      </div>\n    );\n  },\n);\n\nexport interface SampleInfo {\n  sampledCount?: number;\n  totalCount?: number;\n  logCountLoading: boolean;\n  // Set this to the max number of logs that our system can fetch.\n  // If the evaluation result count hits this number, we will show a warning indicator to the user.\n  maxAllowedCount?: number;\n}\n\n// TODO: Add an error boundary to the OSS trace table\nexport const GenAiTracesTable = GenAiTracesTableImpl;\n","import type { QueryFunctionContext } from '@databricks/web-shared/query-client';\nimport { useQuery } from '@databricks/web-shared/query-client';\n\nimport { makeRequest } from '../utils/FetchUtils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\ntype UseExperimentRunsForTraceComparisonQueryKey = ['EXPERIMENT_RUNS_FOR_TRACE_COMPARISON', { experimentId: string }];\n\nconst getQueryKey = (experimentId: string): UseExperimentRunsForTraceComparisonQueryKey => [\n  'EXPERIMENT_RUNS_FOR_TRACE_COMPARISON',\n  { experimentId },\n];\n\ntype RawSearchRunsResponse = {\n  runs: {\n    info?: {\n      run_uuid?: string;\n      run_name?: string;\n    };\n  }[];\n};\n\nconst queryFn = async ({\n  queryKey: [, { experimentId }],\n}: QueryFunctionContext<UseExperimentRunsForTraceComparisonQueryKey>): Promise<RawSearchRunsResponse> => {\n  return makeRequest(getAjaxUrl('ajax-api/2.0/mlflow/runs/search'), 'POST', {\n    experiment_ids: [experimentId],\n  });\n};\n\n/**\n * Fetches the runs for the given experiment, used for the \"compare to\" dropdown in the eval page.\n */\nexport const useGenAiExperimentRunsForComparison = (experimentId: string, disabled = false) => {\n  const { data, error, isLoading, isFetching } = useQuery<\n    RawSearchRunsResponse,\n    Error,\n    RawSearchRunsResponse,\n    UseExperimentRunsForTraceComparisonQueryKey\n  >(getQueryKey(experimentId), {\n    queryFn,\n    enabled: !disabled,\n    cacheTime: Infinity,\n    staleTime: Infinity,\n  });\n\n  const runInfos = data?.runs?.map((run) => ({\n    runUuid: run.info?.run_uuid,\n    runName: run.info?.run_name,\n  }));\n\n  return {\n    requestError: error,\n    isLoading,\n    isFetching,\n    runInfos,\n  };\n};\n","import { useMemo } from 'react';\n\nimport type { QueryFunctionContext } from '@databricks/web-shared/query-client';\nimport { useQueries } from '@databricks/web-shared/query-client';\n\nimport { GenAiTraceEvaluationArtifactFile } from '../enum';\nimport type {\n  EvaluationArtifactTableEntryAssessment,\n  EvaluationArtifactTableEntryEvaluation,\n  EvaluationArtifactTableEntryMetric,\n  RawGenaiEvaluationArtifactResponse,\n} from '../types';\nimport { mergeMetricsAndAssessmentsWithEvaluations, parseRawTableArtifact } from '../utils/EvaluationDataParseUtils';\nimport { makeRequest } from '../utils/FetchUtils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\ntype UseGetTraceEvaluationArtifactQueryKey = [\n  'GET_TRACE_EVALUATION_ARTIFACT',\n  { runUuid: string; artifactFile: GenAiTraceEvaluationArtifactFile },\n];\n\nconst getQueryKey = (\n  runUuid: string,\n  artifactFile: GenAiTraceEvaluationArtifactFile,\n): UseGetTraceEvaluationArtifactQueryKey => ['GET_TRACE_EVALUATION_ARTIFACT', { runUuid, artifactFile }];\n\nconst queryFn = async ({\n  queryKey: [, { runUuid, artifactFile }],\n}: QueryFunctionContext<UseGetTraceEvaluationArtifactQueryKey>): Promise<RawGenaiEvaluationArtifactResponse> => {\n  const queryParams = new URLSearchParams({ run_uuid: runUuid, path: artifactFile });\n  const url = [getAjaxUrl('ajax-api/2.0/mlflow/get-artifact'), queryParams].join('?');\n  return makeRequest(url, 'GET').then((data) => ({\n    ...data,\n    filename: artifactFile,\n  }));\n};\n\nconst allArtifactFiles = [\n  GenAiTraceEvaluationArtifactFile.Assessments,\n  GenAiTraceEvaluationArtifactFile.Evaluations,\n  GenAiTraceEvaluationArtifactFile.Metrics,\n];\n\n/**\n * Fetches evaluation trace artifacts for a given run.\n * @param runUuid - The run UUID for which to fetch evaluation artifacts.\n * @param artifacts - The list of artifact files to fetch. By default, all artifacts are fetched.\n */\nexport const useGenAiTraceEvaluationArtifacts = (\n  { runUuid, artifacts = allArtifactFiles }: { runUuid: string; artifacts?: GenAiTraceEvaluationArtifactFile[] },\n  { disabled = false }: { disabled?: boolean } = {},\n) => {\n  const isAnyArtifactRetrievalEnabled =\n    !disabled && allArtifactFiles.some((artifactFile) => artifacts.includes(artifactFile));\n\n  const queriesResult = useQueries({\n    queries: allArtifactFiles.map((artifactFile) => ({\n      queryFn,\n      queryKey: getQueryKey(runUuid, artifactFile),\n      enabled: !disabled && artifacts.includes(artifactFile),\n      refetchOnWindowFocus: false,\n    })),\n  });\n\n  const isLoading = queriesResult.some((query) => query.isLoading);\n  const isFetching = queriesResult.some((query) => query.isFetching);\n  const error = queriesResult.find((query) => query.error);\n\n  const [assessments, evaluations, metrics] = queriesResult.map((query) => query.data);\n\n  const parsedAssessments = useMemo(\n    () => parseRawTableArtifact<EvaluationArtifactTableEntryAssessment[]>(assessments),\n    [assessments],\n  );\n  const parsedEvaluations = useMemo(\n    () => parseRawTableArtifact<EvaluationArtifactTableEntryEvaluation[]>(evaluations),\n    [evaluations],\n  );\n  const parsedMetrics = useMemo(() => parseRawTableArtifact<EvaluationArtifactTableEntryMetric[]>(metrics), [metrics]);\n\n  const mergedData = useMemo(() => {\n    if (!parsedEvaluations) {\n      return undefined;\n    }\n    return mergeMetricsAndAssessmentsWithEvaluations(parsedEvaluations, parsedMetrics, parsedAssessments);\n  }, [parsedAssessments, parsedEvaluations, parsedMetrics]);\n\n  return {\n    requestError: error,\n    isLoading: isLoading && isAnyArtifactRetrievalEnabled,\n    isFetching: isFetching && isAnyArtifactRetrievalEnabled,\n    data: mergedData,\n  };\n};\n","import { isNil } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { useIntl } from '@databricks/i18n';\nimport type { NetworkRequestError } from '@databricks/web-shared/errors';\nimport { matchPredefinedErrorFromResponse } from '@databricks/web-shared/errors';\nimport type { QueryClient, UseQueryOptions, UseQueryResult } from '@databricks/web-shared/query-client';\nimport { useQuery } from '@databricks/web-shared/query-client';\n\nimport { useGenAiTraceEvaluationArtifacts } from './useGenAiTraceEvaluationArtifacts';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  REQUEST_TIME_COLUMN_ID,\n  RUN_NAME_COLUMN_ID,\n  STATE_COLUMN_ID,\n  USER_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n  useTableColumns,\n  CUSTOM_METADATA_COLUMN_ID,\n} from './useTableColumns';\nimport { SourceCellRenderer } from '../cellRenderers/Source/SourceRenderer';\nimport type { GenAiTraceEvaluationArtifactFile } from '../enum';\nimport { TracesTableColumnGroup } from '../types';\nimport type {\n  TableFilterOption,\n  EvaluationsOverviewTableSort,\n  AssessmentFilter,\n  RunEvaluationTracesDataEntry,\n  TableFilter,\n  TraceInfoV3,\n  TableFilterOptions,\n} from '../types';\nimport { getAssessmentInfos } from '../utils/AggregationUtils';\nimport { filterEvaluationResults } from '../utils/EvaluationsFilterUtils';\nimport {\n  shouldEnableUnifiedEvalTab,\n  shouldUseRunIdFilterInSearchTraces,\n  getMlflowTracesSearchPageSize,\n  getEvalTabTotalTracesLimit,\n} from '../utils/FeatureUtils';\nimport { makeRequest } from '../utils/FetchUtils';\nimport MlflowUtils from '../utils/MlflowUtils';\nimport { convertTraceInfoV3ToRunEvalEntry, getCustomMetadataKeyFromColumnId } from '../utils/TraceUtils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\ninterface SearchMlflowTracesRequest {\n  locations?: SearchMlflowLocations[];\n  filter?: string;\n  max_results: number;\n  page_token?: string;\n  order_by?: string[];\n  model_id?: string;\n  sql_warehouse_id?: string;\n}\n\ninterface SearchMlflowLocations {\n  type: 'MLFLOW_EXPERIMENT';\n  mlflow_experiment: {\n    experiment_id: string;\n  };\n}\n\nconst SEARCH_MLFLOW_TRACES_QUERY_KEY = 'searchMlflowTraces';\n\nexport const invalidateMlflowSearchTracesCache = ({ queryClient }: { queryClient: QueryClient }) => {\n  queryClient.invalidateQueries({ queryKey: [SEARCH_MLFLOW_TRACES_QUERY_KEY] });\n};\n\nexport const useMlflowTracesTableMetadata = ({\n  experimentId,\n  runUuid,\n  timeRange,\n  otherRunUuid,\n  filterByLoggedModelId,\n  loggedModelId,\n  sqlWarehouseId,\n  disabled,\n  networkFilters,\n}: {\n  experimentId: string;\n  runUuid?: string;\n  timeRange?: { startTime?: string; endTime?: string };\n  otherRunUuid?: string;\n  /**\n   * Logged model ID to filter offline traces by. Uses trace's request metadata for filtering.\n   * To fetch online traces related to a certain logged model, use \"loggedModelId\" field.\n   * N/B: request fields for fetching online and offline traces will be unified in the near future.\n   */\n  filterByLoggedModelId?: string;\n  /**\n   * Used to request online traces by logged model ID.\n   * If provided, sqlWarehouseId is required in order to query inference tables.\n   * N/B: request fields for fetching online and offline traces will be unified in the near future.\n   */\n  loggedModelId?: string;\n  sqlWarehouseId?: string;\n  disabled?: boolean;\n  networkFilters?: TableFilter[];\n}) => {\n  const intl = useIntl();\n  const filter = createMlflowSearchFilter(runUuid, timeRange, networkFilters, filterByLoggedModelId);\n  const {\n    data: traces,\n    isLoading: isInnerLoading,\n    error,\n  } = useSearchMlflowTracesInner({\n    locations: [{ mlflow_experiment: { experiment_id: experimentId ?? '' }, type: 'MLFLOW_EXPERIMENT' }],\n    filter,\n    loggedModelId,\n    sqlWarehouseId,\n    enabled: !disabled,\n  });\n\n  const otherFilter = createMlflowSearchFilter(otherRunUuid, timeRange);\n  const {\n    data: otherTraces,\n    isLoading: isOtherInnerLoading,\n    error: otherError,\n  } = useSearchMlflowTracesInner({\n    locations: [{ mlflow_experiment: { experiment_id: experimentId ?? '' }, type: 'MLFLOW_EXPERIMENT' }],\n    filter: otherFilter,\n    enabled: !disabled && Boolean(otherRunUuid),\n    loggedModelId,\n    sqlWarehouseId,\n  });\n\n  const evaluatedTraces = useMemo(() => {\n    if (!traces || isInnerLoading || error || !traces.length) {\n      return [];\n    }\n    return traces.map((trace) => convertTraceInfoV3ToRunEvalEntry(trace));\n  }, [traces, isInnerLoading, error]);\n\n  const otherEvaluatedTraces = useMemo(() => {\n    const isOtherLoading = isOtherInnerLoading && Boolean(otherRunUuid);\n    if (!otherTraces || isOtherLoading || otherError || !otherTraces.length) {\n      return [];\n    }\n    return otherTraces.map((trace) => convertTraceInfoV3ToRunEvalEntry(trace));\n  }, [otherTraces, isOtherInnerLoading, otherError, otherRunUuid]);\n\n  const assessmentInfos = useMemo(() => {\n    return getAssessmentInfos(intl, evaluatedTraces || [], otherEvaluatedTraces || []);\n  }, [intl, evaluatedTraces, otherEvaluatedTraces]);\n\n  const tableFilterOptions = useMemo(() => {\n    // Add source options\n    const sourceMap = new Map<string, TableFilterOption>();\n    traces?.forEach((trace) => {\n      const traceMetadata = trace.trace_metadata;\n      if (traceMetadata) {\n        const sourceName = traceMetadata[MlflowUtils.sourceNameTag];\n        if (sourceName && !sourceMap.has(sourceName)) {\n          sourceMap.set(sourceName, {\n            value: sourceName,\n            renderValue: () => <SourceCellRenderer traceInfo={trace} isComparing={false} disableLinks />,\n          });\n        }\n      }\n    });\n\n    return {\n      source: Array.from(sourceMap.values()).sort((a, b) => a.value.localeCompare(b.value)),\n    } as TableFilterOptions;\n  }, [traces]);\n\n  const allColumns = useTableColumns(intl, evaluatedTraces || [], assessmentInfos, runUuid, undefined, true);\n\n  return useMemo(() => {\n    return {\n      assessmentInfos,\n      allColumns,\n      totalCount: evaluatedTraces.length,\n      isLoading: isInnerLoading,\n      error,\n      isEmpty: evaluatedTraces.length === 0,\n      tableFilterOptions,\n    };\n  }, [assessmentInfos, allColumns, isInnerLoading, error, evaluatedTraces.length, tableFilterOptions]);\n};\n\nconst getNetworkAndClientFilters = (\n  filters: TableFilter[],\n): {\n  networkFilters: TableFilter[];\n  clientFilters: TableFilter[];\n} => {\n  return filters.reduce<{\n    networkFilters: TableFilter[];\n    clientFilters: TableFilter[];\n  }>(\n    (acc, filter) => {\n      // MLflow search api does not support assessment filters, so we need to pass them as client filters\n      if (filter.column === TracesTableColumnGroup.ASSESSMENT) {\n        acc.clientFilters.push(filter);\n      } else {\n        acc.networkFilters.push(filter);\n      }\n      return acc;\n    },\n    { networkFilters: [], clientFilters: [] },\n  );\n};\n\nexport const useSearchMlflowTraces = ({\n  experimentId,\n  currentRunDisplayName,\n  runUuid,\n  timeRange,\n  searchQuery,\n  filters,\n  disabled,\n  pageSize,\n  limit,\n  filterByLoggedModelId,\n  tableSort,\n  loggedModelId,\n  sqlWarehouseId,\n}: {\n  experimentId: string;\n  runUuid?: string | null;\n  timeRange?: { startTime?: string; endTime?: string };\n  searchQuery?: string;\n  filters?: TableFilter[];\n  disabled?: boolean;\n  pageSize?: number;\n  limit?: number;\n  // TODO: Remove these once mlflow apis support filtering\n  currentRunDisplayName?: string;\n  /**\n   * Logged model ID to filter offline traces by. Uses trace's request metadata for filtering.\n   * To fetch online traces related to a certain logged model, use \"loggedModelId\" field.\n   * N/B: request fields for fetching online and offline traces will be unified in the near future.\n   */\n  filterByLoggedModelId?: string;\n  /**\n   * Used to request online traces by logged model ID.\n   * If provided, sqlWarehouseId is required in order to query inference tables.\n   * N/B: request fields for fetching online and offline traces will be unified in the near future.\n   */\n  loggedModelId?: string;\n  sqlWarehouseId?: string;\n  tableSort?: EvaluationsOverviewTableSort;\n}): {\n  data: TraceInfoV3[] | undefined;\n  isLoading: boolean;\n  isFetching: boolean;\n  error?: NetworkRequestError;\n  refetchMlflowTraces?: UseQueryResult<TraceInfoV3[], NetworkRequestError>['refetch'];\n} => {\n  const { networkFilters, clientFilters } = getNetworkAndClientFilters(filters || []);\n\n  const filter = createMlflowSearchFilter(runUuid, timeRange, networkFilters, filterByLoggedModelId);\n  const orderBy = createMlflowSearchOrderBy(tableSort);\n\n  const {\n    data: traces,\n    isLoading: isInnerLoading,\n    isFetching: isInnerFetching,\n    error,\n    refetch: refetchMlflowTraces,\n  } = useSearchMlflowTracesInner({\n    locations: [{ mlflow_experiment: { experiment_id: experimentId ?? '' }, type: 'MLFLOW_EXPERIMENT' }],\n    filter,\n    enabled: !disabled,\n    pageSize,\n    limit,\n    orderBy,\n    loggedModelId,\n    sqlWarehouseId,\n  });\n\n  // TODO: Remove this once mlflow apis support filtering\n  const evalTraceComparisonEntries = useMemo(() => {\n    if (!traces) {\n      return undefined;\n    }\n\n    return traces.map((trace) => {\n      return {\n        currentRunValue: convertTraceInfoV3ToRunEvalEntry(trace),\n        otherRunValue: undefined,\n      };\n    });\n  }, [traces]);\n\n  // TODO: Remove this once mlflow apis support filtering\n  const filteredTraces: TraceInfoV3[] | undefined = useMemo(() => {\n    if (!evalTraceComparisonEntries) return undefined;\n\n    if (!currentRunDisplayName || (searchQuery === '' && clientFilters?.length === 0)) {\n      return evalTraceComparisonEntries.reduce<TraceInfoV3[]>((acc, entry) => {\n        if (entry.currentRunValue?.traceInfo) {\n          acc.push(entry.currentRunValue.traceInfo);\n        }\n        return acc;\n      }, []);\n    }\n\n    const assessmentFilters: AssessmentFilter[] = clientFilters.map((filter) => {\n      return {\n        assessmentName: filter.key || '',\n        filterValue: filter.value,\n        run: currentRunDisplayName,\n      };\n    });\n\n    const res = filterEvaluationResults(\n      evalTraceComparisonEntries,\n      assessmentFilters || [],\n      searchQuery,\n      currentRunDisplayName,\n      undefined,\n    ).reduce<TraceInfoV3[]>((acc, entry) => {\n      if (entry.currentRunValue?.traceInfo) {\n        acc.push(entry.currentRunValue.traceInfo);\n      }\n      return acc;\n    }, []);\n\n    return res;\n  }, [evalTraceComparisonEntries, clientFilters, searchQuery, currentRunDisplayName]);\n\n  if (disabled) {\n    return {\n      data: [],\n      isLoading: false,\n      isFetching: false,\n    };\n  }\n\n  return {\n    data: filteredTraces,\n    isLoading: isInnerLoading,\n    isFetching: isInnerFetching,\n    error: error || undefined,\n    refetchMlflowTraces,\n  };\n};\n\n/**\n * Fetches all mlflow traces for a given location/filter in a synchronous loop.\n * The results of all the traces are cached under a single key.\n * TODO: De-dup with useSearchMlflowTraces defined in webapp/web/js/genai\n */\nconst useSearchMlflowTracesInner = ({\n  locations,\n  filter,\n  pageSize: pageSizeProp,\n  limit: limitProp,\n  orderBy,\n  loggedModelId,\n  sqlWarehouseId,\n  enabled,\n  ...rest\n}: {\n  locations?: SearchMlflowLocations[];\n  filter?: string;\n  pageSize?: number;\n  limit?: number;\n  orderBy?: string[];\n  loggedModelId?: string;\n  sqlWarehouseId?: string;\n} & Omit<UseQueryOptions<TraceInfoV3[], NetworkRequestError>, 'queryFn'>) => {\n  return useQuery<TraceInfoV3[], NetworkRequestError>({\n    staleTime: Infinity,\n    cacheTime: Infinity,\n    enabled,\n    queryKey: [\n      SEARCH_MLFLOW_TRACES_QUERY_KEY,\n      {\n        experimentIds: (locations || []).map((x) => x.mlflow_experiment?.experiment_id),\n        filter,\n        orderBy,\n        loggedModelId,\n        sqlWarehouseId,\n      },\n    ],\n    queryFn: async ({ signal }) => {\n      let allTraces: TraceInfoV3[] = [];\n      let pageToken: string | undefined = undefined;\n\n      const pageSize = pageSizeProp || getMlflowTracesSearchPageSize();\n      const tracesLimit = limitProp || getEvalTabTotalTracesLimit();\n\n      while (allTraces.length < tracesLimit) {\n        const payload: SearchMlflowTracesRequest = {\n          locations,\n          filter,\n          max_results: pageSize,\n          order_by: orderBy,\n        };\n        if (loggedModelId && sqlWarehouseId) {\n          payload.model_id = loggedModelId;\n          payload.sql_warehouse_id = sqlWarehouseId;\n        }\n        if (pageToken) {\n          payload.page_token = pageToken;\n        }\n        const response: { traces: TraceInfoV3[]; next_page_token?: string } = await makeRequest(\n          getAjaxUrl('ajax-api/3.0/mlflow/traces/search'),\n          'POST',\n          payload,\n        );\n        const traces = response.traces;\n        if (!isNil(traces)) {\n          allTraces = allTraces.concat(traces);\n        }\n\n        // If there's no next page, break out of the loop.\n        pageToken = response.next_page_token;\n        if (!pageToken) break;\n      }\n      return allTraces;\n    },\n    ...rest,\n  });\n};\n\n/**\n * Builds evaluation trace entries from search results if no artifact data is present.\n * Falls back to provided artifactData when available or on error.\n *\n * @param artifactData - Existing evaluation trace entries from artifacts.\n * @param searchRes - Query result containing TraceInfoV3 entries.\n * @returns A list of RunEvaluationTracesDataEntry either from artifactData or initialized from search results. Also\n * returns shouldUseTraceV3 indicating if we are using artifacts or trace v3 results from search\n */\nconst buildTracesFromSearchAndArtifacts = (\n  artifactData: RunEvaluationTracesDataEntry[],\n  searchRes: UseQueryResult<TraceInfoV3[], NetworkRequestError>,\n): {\n  data: RunEvaluationTracesDataEntry[];\n  shouldUseTraceV3: boolean;\n  error?: NetworkRequestError;\n} => {\n  const { data: searchData, error } = searchRes;\n\n  if (artifactData.length > 0 || error || !searchData || searchData.length === 0) {\n    return { data: artifactData, shouldUseTraceV3: false, error: error || undefined };\n  }\n\n  // We want to start using information from TraceInfoV3 downstream rather\n  // than RunEvaluationTracesDataEntry, so fill in all properties as empty\n  // except for traceInfo.\n  return {\n    data: searchData\n      .filter((trace): trace is TraceInfoV3 => trace !== null && trace !== undefined)\n      .map((trace) => {\n        return {\n          evaluationId: '',\n          requestId: '',\n          inputs: {},\n          inputsId: '',\n          outputs: {},\n          targets: {},\n          overallAssessments: [],\n          responseAssessmentsByName: {},\n          metrics: {},\n          traceInfo: trace,\n        };\n      }),\n    shouldUseTraceV3: true,\n  };\n};\n\nconst createMlflowSearchFilter = (\n  runUuid: string | null | undefined,\n  timeRange?: { startTime?: string; endTime?: string } | null,\n  networkFilters?: TableFilter[],\n  loggedModelId?: string,\n) => {\n  const filter: string[] = [];\n  const useRunIdInSearchTraces = shouldUseRunIdFilterInSearchTraces();\n  if (runUuid) {\n    if (useRunIdInSearchTraces) {\n      filter.push(`attributes.run_id = '${runUuid}'`);\n    } else {\n      filter.push(`request_metadata.\"mlflow.sourceRun\" = '${runUuid}'`);\n    }\n  }\n  if (timeRange) {\n    const timestampField = 'attributes.timestamp_ms';\n    if (timeRange.startTime) {\n      filter.push(`${timestampField} > ${timeRange.startTime}`);\n    }\n    if (timeRange.endTime) {\n      filter.push(`${timestampField} < ${timeRange.endTime}`);\n    }\n  }\n  if (loggedModelId) {\n    filter.push(`request_metadata.\"mlflow.modelId\" = '${loggedModelId}'`);\n  }\n  if (networkFilters) {\n    networkFilters.forEach((networkFilter) => {\n      switch (networkFilter.column) {\n        case TracesTableColumnGroup.TAG:\n          if (networkFilter.key) {\n            const tagField = 'tags';\n            // Use backticks for field names with special characters\n            const fieldName =\n              networkFilter.key.includes('.') || networkFilter.key.includes(' ')\n                ? `${tagField}.\\`${networkFilter.key}\\``\n                : `${tagField}.${networkFilter.key}`;\n            filter.push(`${fieldName} ${networkFilter.operator} '${networkFilter.value}'`);\n          }\n          break;\n        case EXECUTION_DURATION_COLUMN_ID:\n          const executionField = 'attributes.execution_time_ms';\n          filter.push(`${executionField} ${networkFilter.operator} ${networkFilter.value}`);\n          break;\n        case STATE_COLUMN_ID:\n          const statusField = 'attributes.status';\n          filter.push(`${statusField} = '${networkFilter.value}'`);\n          break;\n        case USER_COLUMN_ID:\n          filter.push(`request_metadata.\"mlflow.trace.user\" = '${networkFilter.value}'`);\n          break;\n        case RUN_NAME_COLUMN_ID:\n          if (useRunIdInSearchTraces) {\n            filter.push(`attributes.run_id = '${networkFilter.value}'`);\n          } else {\n            filter.push(`request_metadata.\"mlflow.sourceRun\" = '${networkFilter.value}'`);\n          }\n          break;\n        case LOGGED_MODEL_COLUMN_ID:\n          filter.push(`request_metadata.\"mlflow.modelId\" = '${networkFilter.value}'`);\n          break;\n        case TRACE_NAME_COLUMN_ID:\n          filter.push(`attributes.name ${networkFilter.operator} '${networkFilter.value}'`);\n          break;\n        case SOURCE_COLUMN_ID:\n          filter.push(`request_metadata.\"mlflow.source.name\" ${networkFilter.operator} '${networkFilter.value}'`);\n          break;\n        default:\n          if (networkFilter.column.startsWith(CUSTOM_METADATA_COLUMN_ID)) {\n            filter.push(\n              `request_metadata.${getCustomMetadataKeyFromColumnId(networkFilter.column)} ${networkFilter.operator} '${\n                networkFilter.value\n              }'`,\n            );\n          }\n          break;\n      }\n    });\n  }\n\n  if (filter.length > 0) {\n    return filter.join(' AND ');\n  }\n  return undefined;\n};\n\nconst createMlflowSearchOrderBy = (tableSort?: EvaluationsOverviewTableSort): string[] | undefined => {\n  if (!tableSort) {\n    return undefined;\n  }\n\n  // Currently the server only supports sorting by execution time and request time. Should add\n  // more columns as they are supported by the server.\n  switch (tableSort.key) {\n    case EXECUTION_DURATION_COLUMN_ID:\n      return [`execution_time ${tableSort.asc ? 'ASC' : 'DESC'}`];\n    case REQUEST_TIME_COLUMN_ID:\n      return [`timestamp ${tableSort.asc ? 'ASC' : 'DESC'}`];\n    default:\n      return [];\n  }\n};\n\n/**\n * Fetches all mlflow traces for a given experiment id and run id.\n * It returns the traces from artifacts storage if they exist and uses search API otherwise.\n *\n * @param experimentId - The experiment id to fetch traces for.\n * @param runUuid - The run id to fetch traces for. If not provided, it will fetch traces for the entire experiment.\n * @param traceTablesLoggedInRun - The trace tables logged in run to fetch traces for. Only used for fetching from artifacts storage. If not provided, it will fetch from all artifacts\n * @param disabled - Whether to disable the traces call.\n * @param timeRange - The time range to fetch traces for. Start/End time should be in milliseconds since epoch.\n */\nexport const useMlflowTraces = (\n  experimentId?: string | null,\n  runUuid?: string | null,\n  traceTablesLoggedInRun?: GenAiTraceEvaluationArtifactFile[],\n  disabled?: boolean,\n  timeRange?: {\n    startTime: string | undefined;\n    endTime: string | undefined;\n  },\n): {\n  data: RunEvaluationTracesDataEntry[];\n  isLoading: boolean;\n  refetchMlflowTraces?: () => Promise<any>;\n  shouldUseTraceV3: boolean;\n  error?: NetworkRequestError;\n} => {\n  const isUnifiedEvalTabEnabled = shouldEnableUnifiedEvalTab();\n\n  const isExperimentIdValid = Boolean(experimentId && experimentId.length > 0);\n  const isArtifactCallEnabled = Boolean(!disabled && runUuid);\n  const isTracesCallEnabled = isExperimentIdValid && Boolean(isUnifiedEvalTabEnabled && !disabled);\n\n  const { data: artifactData, isLoading: isArtifactLoading } = useGenAiTraceEvaluationArtifacts(\n    {\n      runUuid: runUuid || '',\n      ...{ artifacts: traceTablesLoggedInRun ? traceTablesLoggedInRun : undefined },\n    },\n    { disabled: !isArtifactCallEnabled },\n  );\n\n  const filter = createMlflowSearchFilter(runUuid, timeRange);\n\n  const searchRes = useSearchMlflowTracesInner({\n    locations: [{ mlflow_experiment: { experiment_id: experimentId ?? '' }, type: 'MLFLOW_EXPERIMENT' }],\n    filter,\n    enabled: isTracesCallEnabled,\n  });\n\n  if (disabled) {\n    return {\n      data: [],\n      isLoading: false,\n      shouldUseTraceV3: false,\n    };\n  }\n\n  if (!isUnifiedEvalTabEnabled) {\n    return {\n      data: artifactData || [],\n      isLoading: isArtifactLoading,\n      shouldUseTraceV3: false,\n    };\n  }\n\n  return {\n    ...buildTracesFromSearchAndArtifacts(artifactData || [], searchRes),\n    isLoading: isArtifactLoading || (searchRes.isLoading && isTracesCallEnabled),\n    refetchMlflowTraces: searchRes.refetch,\n  };\n};\n","import { useMemo, useState } from 'react';\n\nimport {\n  useDesignSystemTheme,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxOptionListSearch,\n  DialogComboboxContent,\n  DialogComboboxTrigger,\n  DialogComboboxOptionList,\n  DialogCombobox,\n} from '@databricks/design-system';\n\nimport type { TableFilterOption } from '../../types';\n\ninterface SimpleQuery<T> {\n  data?: T;\n  isLoading?: boolean;\n}\n\nexport const TableFilterItemTypeahead = ({\n  id,\n  item,\n  options,\n  query,\n  onChange,\n  placeholder,\n  width,\n  canSearchCustomValue,\n}: {\n  id: string;\n  item?: TableFilterOption;\n  options?: TableFilterOption[];\n  query?: SimpleQuery<TableFilterOption[]>;\n  onChange: (value: string) => void;\n  placeholder: string;\n  width: number;\n  canSearchCustomValue: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const [searchValue, setSearchValue] = useState<string>('');\n\n  const displayOptions = useMemo(() => query?.data ?? options ?? [], [query?.data, options]);\n  const optionValues = useMemo(() => displayOptions.map((option) => option.value), [displayOptions]);\n\n  return (\n    <DialogCombobox\n      componentId=\"mlflow.evaluations_review.table_ui.filter_column\"\n      value={item?.value ? [item.value] : []}\n      id={id}\n    >\n      <DialogComboboxTrigger\n        withInlineLabel={false}\n        placeholder={placeholder}\n        renderDisplayedValue={() => item?.renderValue() ?? ''}\n        width={width}\n        allowClear={false}\n      />\n      <DialogComboboxContent\n        width={width}\n        style={{ zIndex: theme.options.zIndexBase + 100 }}\n        loading={query?.isLoading}\n      >\n        <DialogComboboxOptionList>\n          <DialogComboboxOptionListSearch onSearch={(value: string) => setSearchValue(value)}>\n            {displayOptions.map((option) => (\n              <DialogComboboxOptionListSelectItem\n                key={option.value}\n                value={option.value}\n                onChange={onChange}\n                checked={option.value === item?.value}\n                css={{\n                  whiteSpace: 'nowrap',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                {option.renderValue()}\n              </DialogComboboxOptionListSelectItem>\n            ))}\n            {/* Currently there's no use case for searching custom values. Eventually we might need it\n                  for tags. */}\n            {canSearchCustomValue && searchValue && !optionValues.includes(searchValue) ? (\n              <DialogComboboxOptionListSelectItem\n                key={searchValue}\n                value={searchValue}\n                onChange={onChange}\n                checked={searchValue === item?.value}\n                css={{\n                  whiteSpace: 'nowrap',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                Use \"{searchValue}\"\n              </DialogComboboxOptionListSelectItem>\n            ) : null}\n          </DialogComboboxOptionListSearch>\n        </DialogComboboxOptionList>\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import { useCallback, useState, useMemo } from 'react';\n\nimport { useDesignSystemTheme, Input } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { TableFilterItemTypeahead } from './TableFilterItemTypeahead';\nimport { ExperimentViewTracesStatusLabels } from '../../cellRenderers/StatusRenderer';\nimport {\n  assessmentValueToSerializedString,\n  serializedStringToAssessmentValueV2,\n} from '../../hooks/useAssessmentFilters';\nimport { useExperimentVersionsQuery } from '../../hooks/useExperimentVersionsQuery';\nimport { useGenAiExperimentRunsForComparison } from '../../hooks/useGenAiExperimentRunsForComparison';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  STATE_COLUMN_ID,\n  RUN_NAME_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n} from '../../hooks/useTableColumns';\nimport { TracesTableColumnGroup } from '../../types';\nimport type { AssessmentInfo, TableFilter, TableFilterOption, TableFilterOptions } from '../../types';\nimport { getAssessmentValueLabel } from '../GenAiEvaluationTracesReview.utils';\n\nexport const TableFilterItemValueInput = ({\n  index,\n  tableFilter,\n  assessmentInfos,\n  onChange,\n  experimentId,\n  tableFilterOptions,\n}: {\n  index: number;\n  tableFilter: TableFilter;\n  assessmentInfos: AssessmentInfo[];\n  onChange: (tableFilter: TableFilter, index: number) => void;\n  experimentId: string;\n  tableFilterOptions: TableFilterOptions;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const id = `filter-value-${index}`;\n\n  const [localValue, setLocalValue] = useState(tableFilter.value);\n\n  const onValueBlur = useCallback(() => {\n    if (localValue !== tableFilter.value) {\n      onChange({ ...tableFilter, value: localValue }, index);\n    }\n  }, [tableFilter, index, onChange, localValue]);\n\n  // Fetch runs data when the run name column is selected\n  const runsQuery = useGenAiExperimentRunsForComparison(experimentId);\n\n  // Transform runs data into the format expected by TableFilterItemTypeahead\n  const runNameQuery = useMemo(() => {\n    const transformedData = runsQuery.runInfos\n      ?.filter((run) => run.runUuid && run.runName)\n      ?.map((run) => ({\n        value: run.runUuid as string,\n        renderValue: () => run.runName as string,\n      }));\n\n    return {\n      data: transformedData,\n      isLoading: runsQuery.isLoading,\n    };\n  }, [runsQuery]);\n\n  // Fetch versions data when the version column is selected\n  const versionsDataQuery = useExperimentVersionsQuery(experimentId);\n\n  // Transform versions data into the format expected by TableFilterItemTypeahead\n  const versionsQuery = useMemo(() => {\n    const transformedData = versionsDataQuery.data?.map((loggedModel) => ({\n      value: loggedModel.info.model_id,\n      renderValue: () => loggedModel.info.name,\n    }));\n\n    return {\n      data: transformedData,\n      isLoading: versionsDataQuery.isLoading,\n    };\n  }, [versionsDataQuery]);\n\n  const stateOptions: TableFilterOption[] = [\n    { value: 'IN_PROGRESS', renderValue: () => intl.formatMessage(ExperimentViewTracesStatusLabels.IN_PROGRESS) },\n    { value: 'OK', renderValue: () => intl.formatMessage(ExperimentViewTracesStatusLabels.OK) },\n    { value: 'ERROR', renderValue: () => intl.formatMessage(ExperimentViewTracesStatusLabels.ERROR) },\n  ];\n\n  if (tableFilter.column === RUN_NAME_COLUMN_ID) {\n    return (\n      <TableFilterItemTypeahead\n        id={id}\n        item={runNameQuery.data?.find((item) => item.value === tableFilter.value)}\n        query={runNameQuery}\n        onChange={(value: string) => {\n          onChange({ ...tableFilter, value }, index);\n        }}\n        placeholder=\"Select run\"\n        width={200}\n        canSearchCustomValue={false}\n      />\n    );\n  }\n\n  if (tableFilter.column === LOGGED_MODEL_COLUMN_ID) {\n    return (\n      <TableFilterItemTypeahead\n        id={id}\n        item={versionsQuery.data?.find((item) => item.value === tableFilter.value)}\n        query={versionsQuery}\n        onChange={(value: string) => {\n          onChange({ ...tableFilter, value }, index);\n        }}\n        placeholder=\"Select version\"\n        width={200}\n        canSearchCustomValue={false}\n      />\n    );\n  }\n\n  if (tableFilter.column === TracesTableColumnGroup.ASSESSMENT) {\n    const assessmentInfo = assessmentInfos.find((assessment) => assessment.name === tableFilter.key);\n    if (assessmentInfo && assessmentInfo.dtype !== 'numeric' && assessmentInfo.dtype !== 'unknown') {\n      const options: TableFilterOption[] = Array.from(assessmentInfo.uniqueValues.values()).map((value) => {\n        return {\n          value: assessmentValueToSerializedString(value),\n          renderValue: () => getAssessmentValueLabel(intl, theme, assessmentInfo, value).content,\n        };\n      });\n\n      return (\n        <TableFilterItemTypeahead\n          id={id}\n          item={options.find((item) => item.value === assessmentValueToSerializedString(tableFilter.value))}\n          options={options}\n          onChange={(value: string) => {\n            onChange({ ...tableFilter, value: serializedStringToAssessmentValueV2(value) }, index);\n          }}\n          placeholder=\"Select\"\n          width={200}\n          canSearchCustomValue={false}\n        />\n      );\n    }\n  }\n\n  if (tableFilter.column === STATE_COLUMN_ID) {\n    return (\n      <TableFilterItemTypeahead\n        id={id}\n        item={stateOptions.find((item) => item.value === tableFilter.value)}\n        options={stateOptions}\n        onChange={(value: string) => {\n          onChange({ ...tableFilter, value }, index);\n        }}\n        placeholder=\"Select\"\n        width={200}\n        canSearchCustomValue={false}\n      />\n    );\n  }\n\n  if (tableFilter.column === SOURCE_COLUMN_ID) {\n    const sourceOptions = tableFilterOptions.source;\n    return (\n      <TableFilterItemTypeahead\n        id={id}\n        item={sourceOptions.find((item) => item.value === tableFilter.value)}\n        options={sourceOptions}\n        onChange={(value: string) => {\n          onChange({ ...tableFilter, value }, index);\n        }}\n        placeholder=\"Select source\"\n        width={200}\n        canSearchCustomValue={false}\n      />\n    );\n  }\n\n  return (\n    <Input\n      aria-label=\"Value\"\n      componentId=\"mlflow.evaluations_review.table_ui.filter_value\"\n      id={id}\n      placeholder={tableFilter.column === EXECUTION_DURATION_COLUMN_ID ? 'Time in milliseconds' : 'Value'}\n      type={tableFilter.column === EXECUTION_DURATION_COLUMN_ID ? 'number' : 'text'}\n      value={localValue as string}\n      onChange={(e) => {\n        setLocalValue(e.target.value);\n      }}\n      onBlur={onValueBlur}\n      css={{ width: 200 }}\n      // Disable it for assessment column at this point, since the data type is not supported yet.\n      disabled={tableFilter.column === TracesTableColumnGroup.ASSESSMENT}\n    />\n  );\n};\n","import { useQuery } from '@databricks/web-shared/query-client';\n\nimport { makeRequest } from '../utils/FetchUtils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\ninterface LoggedModel {\n  info: {\n    model_id: string;\n    experiment_id: string;\n    name: string;\n    creation_timestamp_ms?: number;\n    last_updated_timestamp_ms?: number;\n    artifact_uri?: string;\n    status?: string;\n    creator_id?: number;\n    tags?: Array<{\n      key: string;\n      value: string;\n    }>;\n  };\n  data: any;\n}\n\ninterface UseExperimentVersionsQueryResponseType {\n  models: LoggedModel[];\n  next_page_token?: string;\n}\n\nexport const useExperimentVersionsQuery = (\n  experimentId: string,\n  disabled = false,\n): {\n  data: LoggedModel[] | undefined;\n  isLoading: boolean;\n  error?: Error;\n} => {\n  const queryKey = ['EXPERIMENT_MODEL_VERSIONS', experimentId];\n\n  const { data, isLoading, error } = useQuery<UseExperimentVersionsQueryResponseType, Error>({\n    queryKey,\n    queryFn: async () => {\n      // Search for model versions related to this experiment\n      const requestBody = {\n        experiment_ids: [experimentId],\n      };\n\n      return makeRequest(getAjaxUrl('ajax-api/2.0/mlflow/logged-models/search'), 'POST', requestBody);\n    },\n    staleTime: Infinity,\n    cacheTime: Infinity,\n    enabled: !disabled,\n    refetchOnMount: false,\n    retry: false,\n  });\n\n  return {\n    data: data?.models,\n    isLoading,\n    error: error || undefined,\n  };\n};\n","import { useMemo } from 'react';\n\nimport {\n  Button,\n  useDesignSystemTheme,\n  FormUI,\n  SimpleSelect,\n  SimpleSelectOption,\n  CloseSmallIcon,\n  Input,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { TableFilterItemTypeahead } from './TableFilterItemTypeahead';\nimport { TableFilterItemValueInput } from './TableFilterItemValueInput';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  STATE_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n  USER_COLUMN_ID,\n  RUN_NAME_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n  CUSTOM_METADATA_COLUMN_ID,\n} from '../../hooks/useTableColumns';\nimport { FilterOperator, TracesTableColumnGroup, TracesTableColumnGroupToLabelMap } from '../../types';\nimport type {\n  AssessmentInfo,\n  TableFilter,\n  TableFilterOption,\n  TableFilterOptions,\n  TracesTableColumn,\n} from '../../types';\n\nconst FILTERABLE_INFO_COLUMNS = [\n  EXECUTION_DURATION_COLUMN_ID,\n  STATE_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n  USER_COLUMN_ID,\n  RUN_NAME_COLUMN_ID,\n  LOGGED_MODEL_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n];\n\nexport const TableFilterItem = ({\n  tableFilter,\n  index,\n  onChange,\n  onDelete,\n  assessmentInfos,\n  experimentId,\n  tableFilterOptions,\n  allColumns,\n}: {\n  tableFilter: TableFilter;\n  index: number;\n  onChange: (filter: TableFilter, index: number) => void;\n  onDelete: () => void;\n  assessmentInfos: AssessmentInfo[];\n  experimentId: string;\n  tableFilterOptions: TableFilterOptions;\n  allColumns: TracesTableColumn[];\n}) => {\n  const { column, operator, key } = tableFilter;\n  const { theme } = useDesignSystemTheme();\n\n  // For now, we don't support filtering on numeric values.\n  const assessmentKeyOptions: TableFilterOption[] = useMemo(\n    () =>\n      assessmentInfos\n        .filter((assessment) => assessment.dtype !== 'numeric')\n        .map((assessment) => ({ value: assessment.name, renderValue: () => assessment.displayName })),\n    [assessmentInfos],\n  );\n\n  const columnOptions: TableFilterOption[] = useMemo(() => {\n    const result = allColumns\n      .filter(\n        (column) => FILTERABLE_INFO_COLUMNS.includes(column.id) || column.id.startsWith(CUSTOM_METADATA_COLUMN_ID),\n      )\n      .map((column) => ({ value: column.id, renderValue: () => column.label }));\n\n    // Add the tag and assessment column groups\n    result.push(\n      {\n        value: TracesTableColumnGroup.TAG,\n        renderValue: () => TracesTableColumnGroupToLabelMap[TracesTableColumnGroup.TAG],\n      },\n      {\n        value: TracesTableColumnGroup.ASSESSMENT,\n        renderValue: () => TracesTableColumnGroupToLabelMap[TracesTableColumnGroup.ASSESSMENT],\n      },\n    );\n    return result;\n  }, [allColumns]);\n\n  return (\n    <>\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <FormUI.Label htmlFor={`filter-column-${index}`}>\n            <FormattedMessage\n              defaultMessage=\"Column\"\n              description=\"Label for the column field in the GenAI Traces Table Filter form\"\n            />\n          </FormUI.Label>\n          <TableFilterItemTypeahead\n            id={`filter-column-${index}`}\n            item={columnOptions.find((item) => item.value === column)}\n            options={columnOptions}\n            onChange={(value: string) => {\n              if (value !== column) {\n                // Clear other fields as well on column change\n                onChange({ column: value, operator: FilterOperator.EQUALS, value: '' }, index);\n              }\n            }}\n            placeholder=\"Select column\"\n            width={160}\n            canSearchCustomValue={false}\n          />\n        </div>\n        {column === TracesTableColumnGroup.ASSESSMENT && (\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <FormUI.Label htmlFor={`filter-key-${index}`}>\n              <FormattedMessage\n                defaultMessage=\"Name\"\n                description=\"Label for the name field for assessments in the GenAI Traces Table Filter form\"\n              />\n            </FormUI.Label>\n            <TableFilterItemTypeahead\n              id={`filter-key-${index}`}\n              item={assessmentKeyOptions.find((item) => item.value === key)}\n              options={assessmentKeyOptions}\n              onChange={(value: string) => {\n                onChange({ ...tableFilter, key: value }, index);\n              }}\n              placeholder=\"Select name\"\n              width={200}\n              canSearchCustomValue={false}\n            />\n          </div>\n        )}\n        {column === TracesTableColumnGroup.TAG && (\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <FormUI.Label htmlFor={`filter-key-${index}`}>\n              <FormattedMessage\n                defaultMessage=\"Key\"\n                description=\"Label for the key field for tags in the GenAI Traces Table Filter form\"\n              />\n            </FormUI.Label>\n            <Input\n              aria-label=\"Key\"\n              componentId=\"mlflow.evaluations_review.table_ui.filter_key\"\n              id={'filter-key-' + index}\n              type=\"text\"\n              css={{ width: 200 }}\n              placeholder={column === TracesTableColumnGroup.TAG ? 'Key' : 'Name'}\n              value={key}\n              onChange={(e) => {\n                onChange({ ...tableFilter, key: e.target.value }, index);\n              }}\n            />\n          </div>\n        )}\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <FormUI.Label htmlFor={`filter-operator-${index}`}>\n            <FormattedMessage\n              defaultMessage=\"Operator\"\n              description=\"Label for the operator field in the GenAI Traces Table Filter form\"\n            />\n          </FormUI.Label>\n          <SimpleSelect\n            aria-label=\"Operator\"\n            componentId=\"mlflow.evaluations_review.table_ui.filter_operator\"\n            id={'filter-operator-' + index}\n            placeholder=\"Select\"\n            width={100}\n            contentProps={{\n              // Set the z-index to be higher than the Popover\n              style: { zIndex: theme.options.zIndexBase + 100 },\n            }}\n            // Currently only executionTime supports other operators\n            value={column === '' || column === EXECUTION_DURATION_COLUMN_ID ? operator : '='}\n            disabled={column !== '' && column !== EXECUTION_DURATION_COLUMN_ID}\n            onChange={(e) => {\n              onChange({ ...tableFilter, operator: e.target.value as FilterOperator }, index);\n            }}\n          >\n            {(Object.values(FilterOperator) as string[]).map((op) => (\n              <SimpleSelectOption key={op} value={op}>\n                {op}\n              </SimpleSelectOption>\n            ))}\n          </SimpleSelect>\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <FormUI.Label htmlFor={`filter-value-${index}`}>\n            <FormattedMessage\n              defaultMessage=\"Value\"\n              description=\"Label for the value field in the GenAI Traces Table Filter form\"\n            />\n          </FormUI.Label>\n          <TableFilterItemValueInput\n            index={index}\n            tableFilter={tableFilter}\n            assessmentInfos={assessmentInfos}\n            onChange={onChange}\n            experimentId={experimentId}\n            tableFilterOptions={tableFilterOptions}\n          />\n        </div>\n        <div\n          css={{\n            alignSelf: 'flex-end',\n          }}\n        >\n          <Button\n            componentId=\"mlflow.evaluations_review.table_ui.filter_delete_button\"\n            type=\"tertiary\"\n            icon={<CloseSmallIcon />}\n            onClick={onDelete}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useCallback } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport {\n  Button,\n  ChevronDownIcon,\n  useDesignSystemTheme,\n  FilterIcon,\n  Popover,\n  PlusIcon,\n  XCircleFillIcon,\n  Spinner,\n  DangerIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport { TableFilterItem } from './components/filters/TableFilterItem';\nimport { FilterOperator } from './types';\nimport type { AssessmentInfo, TableFilterFormState, TableFilter, TableFilterOptions, TracesTableColumn } from './types';\nimport { FILTER_DROPDOWN_COMPONENT_ID } from './utils/EvaluationLogging';\n\nexport const GenAiTracesTableFilter = ({\n  filters,\n  setFilters,\n  assessmentInfos,\n  experimentId,\n  tableFilterOptions,\n  allColumns,\n  isMetadataLoading,\n  metadataError,\n}: {\n  filters: TableFilter[];\n  setFilters: (filters: TableFilter[]) => void;\n  assessmentInfos: AssessmentInfo[];\n  experimentId: string;\n  tableFilterOptions: TableFilterOptions;\n  allColumns: TracesTableColumn[];\n  isMetadataLoading?: boolean;\n  metadataError?: Error | null;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const hasActiveFilters = filters.length > 0;\n\n  const clearFilters = useCallback(() => {\n    setFilters([]);\n  }, [setFilters]);\n\n  return (\n    <Popover.Root componentId={FILTER_DROPDOWN_COMPONENT_ID}>\n      <Popover.Trigger asChild>\n        <Button\n          endIcon={<ChevronDownIcon />}\n          componentId=\"mlflow.evaluations_review.table_ui.filter_button\"\n          css={{\n            border: hasActiveFilters ? `1px solid ${theme.colors.actionDefaultBorderFocus} !important` : '',\n            backgroundColor: hasActiveFilters ? `${theme.colors.actionDefaultBackgroundHover} !important` : '',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.sm,\n              alignItems: 'center',\n            }}\n          >\n            <FilterIcon />\n            {intl.formatMessage(\n              {\n                defaultMessage: 'Filters{numFilters}',\n                description: 'Evaluation review > evaluations list > filter dropdown button',\n              },\n              {\n                numFilters: hasActiveFilters ? ` (${filters.length})` : '',\n              },\n            )}\n            {hasActiveFilters && (\n              <XCircleFillIcon\n                css={{\n                  fontSize: 12,\n                  cursor: 'pointer',\n                  color: theme.colors.grey400,\n                  '&:hover': {\n                    color: theme.colors.grey600,\n                  },\n                }}\n                onClick={() => {\n                  clearFilters();\n                }}\n              />\n            )}\n          </div>\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"start\" css={{ padding: theme.spacing.md }}>\n        {metadataError ? (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              gap: theme.spacing.xs,\n              padding: `${theme.spacing.md}px`,\n              color: theme.colors.textValidationDanger,\n            }}\n            data-testid=\"filter-dropdown-error\"\n          >\n            <DangerIcon />\n            <FormattedMessage\n              defaultMessage=\"Fetching traces failed\"\n              description=\"Error message for fetching traces failed\"\n            />\n          </div>\n        ) : isMetadataLoading ? (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              gap: theme.spacing.xs,\n              padding: `${theme.spacing.md}px`,\n              color: theme.colors.textSecondary,\n            }}\n            data-testid=\"filter-dropdown-loading\"\n          >\n            <Spinner size=\"small\" />\n          </div>\n        ) : (\n          <FilterForm\n            filters={filters}\n            assessmentInfos={assessmentInfos}\n            setFilters={setFilters}\n            experimentId={experimentId}\n            tableFilterOptions={tableFilterOptions}\n            allColumns={allColumns}\n          />\n        )}\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nconst useFilterForm = (filters: TableFilter[]) => {\n  const form = useForm<TableFilterFormState>({\n    defaultValues: {\n      filters: filters.length > 0 ? filters : [{ column: '', operator: FilterOperator.EQUALS, value: '' }],\n    },\n  });\n\n  return form;\n};\n\nconst FilterForm = ({\n  filters,\n  assessmentInfos,\n  setFilters,\n  experimentId,\n  tableFilterOptions,\n  allColumns,\n}: {\n  filters: TableFilter[];\n  assessmentInfos: AssessmentInfo[];\n  setFilters: (filters: TableFilter[]) => void;\n  experimentId: string;\n  tableFilterOptions: TableFilterOptions;\n  allColumns: TracesTableColumn[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const filterForm = useFilterForm(filters);\n\n  const { setValue, watch } = filterForm;\n\n  const localFilters = watch('filters');\n\n  return (\n    <FormProvider {...filterForm}>\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.lg,\n          overflow: 'auto',\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n          }}\n        >\n          {localFilters.map((filter, index) => (\n            <TableFilterItem\n              key={filter.column + filter.operator + filter.value + index}\n              tableFilter={filter}\n              index={index}\n              onChange={(newFilter) => {\n                localFilters[index] = newFilter;\n                setValue('filters', localFilters);\n              }}\n              onDelete={() => {\n                const newFilters = [...localFilters];\n                newFilters.splice(index, 1);\n                // If there are no filters, add an initial filter\n                if (newFilters.length === 0) {\n                  newFilters.push({ column: '', operator: FilterOperator.EQUALS, value: '' });\n                }\n                setValue('filters', newFilters);\n              }}\n              assessmentInfos={assessmentInfos}\n              experimentId={experimentId}\n              tableFilterOptions={tableFilterOptions}\n              allColumns={allColumns}\n            />\n          ))}\n        </div>\n        <div>\n          <Button\n            componentId=\"mlflow.evaluations_review.table_ui.add_filter_button\"\n            icon={<PlusIcon />}\n            onClick={() => {\n              setValue('filters', [...localFilters, { column: '', operator: FilterOperator.EQUALS, value: '' }]);\n            }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Add filter\"\n              description=\"Button label for adding a filter in the GenAI Traces Table filter form\"\n            />\n          </Button>\n        </div>\n        <div\n          css={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Button\n            componentId=\"mlflow.evaluations_review.table_ui.apply_filters_button\"\n            type=\"primary\"\n            onClick={() => setFilters(localFilters)}\n            css={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n            }}\n          >\n            <FormattedMessage\n              defaultMessage=\"Apply filters\"\n              description=\"Button label for applying the filters in the GenAI Traces Table\"\n            />\n          </Button>\n        </div>\n      </div>\n    </FormProvider>\n  );\n};\n","import React, { useMemo, useState } from 'react';\n\nimport {\n  ChevronDownIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxCustomButtonTriggerWrapper,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxSectionHeader,\n  Button,\n  ColumnsIcon,\n  useDesignSystemTheme,\n  DialogComboboxOptionListSearch,\n  DangerIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\n\nimport { sortGroupedColumns } from '../GenAiTracesTable.utils';\nimport { TracesTableColumnGroup, TracesTableColumnGroupToLabelMap, type TracesTableColumn } from '../types';\nimport { COLUMN_SELECTOR_DROPDOWN_COMPONENT_ID } from '../utils/EvaluationLogging';\n\ninterface Props {\n  columns: TracesTableColumn[];\n  selectedColumns: TracesTableColumn[];\n  toggleColumns: (cols: TracesTableColumn[]) => void;\n  setSelectedColumns: (cols: TracesTableColumn[]) => void;\n  isMetadataLoading?: boolean;\n  metadataError?: Error | null;\n}\n\nconst OPTION_HEIGHT = 32;\n\nconst getGroupLabel = (group: string): string => {\n  return group === TracesTableColumnGroup.INFO\n    ? 'Attributes'\n    : TracesTableColumnGroupToLabelMap[group as TracesTableColumnGroup];\n};\n\n/**\n * Column selector with section headers for each column‐group.\n */\nexport const EvaluationsOverviewColumnSelectorGrouped: React.FC<Props> = ({\n  columns = [],\n  selectedColumns = [],\n  toggleColumns,\n  setSelectedColumns,\n  isMetadataLoading = false,\n  metadataError,\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const [search, setSearch] = useState('');\n\n  const sortedGroupedColumns = useMemo(() => {\n    const sortedColumns = sortGroupedColumns(columns);\n    const map: Record<string, TracesTableColumn[]> = {};\n    sortedColumns.forEach((col) => {\n      const group = col.group ?? TracesTableColumnGroup.INFO;\n      if (!map[group]) map[group] = [];\n      map[group].push(col);\n    });\n\n    return map;\n  }, [columns]);\n\n  const filteredGroupedColumns = useMemo(() => {\n    if (!search.trim()) return sortedGroupedColumns;\n\n    const needle = search.trim().toLowerCase();\n    const out: Record<string, TracesTableColumn[]> = {};\n\n    Object.entries(sortedGroupedColumns).forEach(([group, cols]) => {\n      // Check if group name matches\n      const groupLabel = getGroupLabel(group);\n      const groupMatches = groupLabel.toLowerCase().includes(needle);\n\n      // Check if any columns in the group match\n      const hits = cols.filter((c) => c.label.toLowerCase().includes(needle));\n\n      // Include the group if either the group name or any columns match\n      if (groupMatches || hits.length) {\n        out[group] = groupMatches ? cols : hits;\n      }\n    });\n\n    return out;\n  }, [sortedGroupedColumns, search]);\n\n  const handleToggle = (column: TracesTableColumn) => {\n    return toggleColumns([column]);\n  };\n\n  const handleSelectAllInGroup = (groupColumns: TracesTableColumn[]) => {\n    const allSelected = groupColumns.every((col) => selectedColumns.some((c) => c.id === col.id));\n    if (allSelected) {\n      // If all are selected, deselect all in this group\n      const newSelection = selectedColumns.filter((col) => !groupColumns.some((gc) => gc.id === col.id));\n      setSelectedColumns(newSelection);\n    } else {\n      // If not all are selected, select all in this group\n      const newSelection = [...selectedColumns];\n      groupColumns.forEach((col) => {\n        if (!newSelection.some((c) => c.id === col.id)) {\n          newSelection.push(col);\n        }\n      });\n      setSelectedColumns(newSelection);\n    }\n  };\n\n  return (\n    <DialogCombobox componentId={COLUMN_SELECTOR_DROPDOWN_COMPONENT_ID} label=\"Columns\" multiSelect>\n      <DialogComboboxCustomButtonTriggerWrapper>\n        <Button\n          endIcon={<ChevronDownIcon />}\n          data-testid=\"column-selector-button\"\n          componentId=\"mlflow.evaluations_review.table_ui.filter_button\"\n        >\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.sm,\n              alignItems: 'center',\n            }}\n          >\n            <ColumnsIcon />\n            {intl.formatMessage({\n              defaultMessage: 'Columns',\n              description: 'Evaluation review > evaluations list > filter dropdown button',\n            })}\n          </div>\n        </Button>\n      </DialogComboboxCustomButtonTriggerWrapper>\n\n      <DialogComboboxContent\n        maxHeight={OPTION_HEIGHT * 15.5}\n        minWidth={300}\n        maxWidth={500}\n        loading={isMetadataLoading && !metadataError}\n      >\n        {metadataError ? (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              gap: theme.spacing.xs,\n              padding: `${theme.spacing.md}px`,\n              color: theme.colors.textValidationDanger,\n            }}\n            data-testid=\"filter-dropdown-error\"\n          >\n            <DangerIcon />\n            <FormattedMessage\n              defaultMessage=\"Fetching traces failed\"\n              description=\"Error message for fetching traces failed\"\n            />\n          </div>\n        ) : (\n          <DialogComboboxOptionList>\n            <DialogComboboxOptionListSearch controlledValue={search} setControlledValue={setSearch}>\n              {Object.entries(filteredGroupedColumns).map(([groupName, cols]) => (\n                <React.Fragment key={groupName}>\n                  <DialogComboboxSectionHeader>{getGroupLabel(groupName)}</DialogComboboxSectionHeader>\n\n                  <DialogComboboxOptionListCheckboxItem\n                    value={`all-${groupName}`}\n                    checked={cols.every((col) => selectedColumns.some((c) => c.id === col.id))}\n                    onChange={() => handleSelectAllInGroup(cols)}\n                  >\n                    {intl.formatMessage(\n                      {\n                        defaultMessage: 'All {groupLabel}',\n                        description: 'Evaluation review > evaluations list > select all columns in group',\n                      },\n                      { groupLabel: getGroupLabel(groupName) },\n                    )}\n                  </DialogComboboxOptionListCheckboxItem>\n\n                  {cols.map((col) => (\n                    <DialogComboboxOptionListCheckboxItem\n                      key={col.id}\n                      value={col.label}\n                      checked={selectedColumns.some((c) => c.id === col.id)}\n                      onChange={() => handleToggle(col)}\n                    >\n                      {col.label}\n                    </DialogComboboxOptionListCheckboxItem>\n                  ))}\n                </React.Fragment>\n              ))}\n            </DialogComboboxOptionListSearch>\n          </DialogComboboxOptionList>\n        )}\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import { isNil } from 'lodash';\nimport React, { useCallback } from 'react';\n\nimport {\n  Typography,\n  useDesignSystemTheme,\n  TableFilterLayout,\n  Tooltip,\n  Spinner,\n  WarningIcon,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport { GenAITracesTableActions } from './GenAITracesTableActions';\nimport { GenAiTracesTableFilter } from './GenAiTracesTableFilter';\nimport { GenAiTracesTableSearchInput } from './GenAiTracesTableSearchInput';\nimport { EvaluationsOverviewColumnSelectorGrouped } from './components/EvaluationsOverviewColumnSelectorGrouped';\nimport { EvaluationsOverviewSortDropdown } from './components/EvaluationsOverviewSortDropdown';\nimport type {\n  TraceInfoV3,\n  EvaluationsOverviewTableSort,\n  TraceActions,\n  AssessmentInfo,\n  TracesTableColumn,\n  TableFilter,\n  TableFilterOptions,\n} from './types';\nimport { shouldEnableTagGrouping } from './utils/FeatureUtils';\n\ninterface CountInfo {\n  currentCount?: number;\n  totalCount: number;\n  maxAllowedCount: number;\n  logCountLoading: boolean;\n}\n\ninterface GenAITracesTableToolbarProps {\n  // Experiment metadata\n  experimentId: string;\n\n  // Table metadata\n  allColumns: TracesTableColumn[];\n  assessmentInfos: AssessmentInfo[];\n\n  // Table data\n  traceInfos: TraceInfoV3[] | undefined;\n\n  // Filters\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n  filters: TableFilter[];\n  setFilters: (newFilters: TableFilter[] | undefined, replace?: boolean) => void;\n  tableSort: EvaluationsOverviewTableSort | undefined;\n  setTableSort: (sort: EvaluationsOverviewTableSort | undefined) => void;\n  selectedColumns: TracesTableColumn[];\n  toggleColumns: (newColumns: TracesTableColumn[]) => void;\n  setSelectedColumns: (nextSelected: TracesTableColumn[]) => void;\n\n  // Actions\n  traceActions?: TraceActions;\n\n  // Stats\n  countInfo: CountInfo;\n\n  // Table filter options\n  tableFilterOptions: TableFilterOptions;\n\n  // Loading state\n  isMetadataLoading?: boolean;\n\n  // Error state\n  metadataError?: Error | null;\n}\n\nexport const GenAITracesTableToolbar: React.FC<GenAITracesTableToolbarProps> = React.memo(\n  (props: GenAITracesTableToolbarProps) => {\n    const {\n      searchQuery,\n      setSearchQuery,\n      filters,\n      setFilters,\n      tableSort,\n      setTableSort,\n      selectedColumns,\n      toggleColumns,\n      setSelectedColumns,\n      assessmentInfos,\n      experimentId,\n      traceInfos,\n      tableFilterOptions,\n      traceActions,\n      allColumns,\n      countInfo,\n      isMetadataLoading,\n      metadataError,\n    } = props;\n    const { theme } = useDesignSystemTheme();\n\n    const onSortChange = useCallback(\n      (sortOption, orderByAsc) => {\n        setTableSort({ key: sortOption.key, type: sortOption.type, asc: orderByAsc });\n      },\n      [setTableSort],\n    );\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          width: '100%',\n          alignItems: 'flex-end',\n          justifyContent: 'space-between',\n          paddingBottom: `${theme.spacing.xs}px`,\n        }}\n      >\n        <TableFilterLayout\n          css={{\n            marginBottom: 0,\n          }}\n        >\n          <GenAiTracesTableSearchInput searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n          <GenAiTracesTableFilter\n            filters={filters}\n            setFilters={setFilters}\n            assessmentInfos={assessmentInfos}\n            experimentId={experimentId}\n            tableFilterOptions={tableFilterOptions}\n            allColumns={allColumns}\n            isMetadataLoading={isMetadataLoading}\n            metadataError={metadataError}\n          />\n          <EvaluationsOverviewSortDropdown\n            tableSort={tableSort}\n            columns={selectedColumns}\n            onChange={onSortChange}\n            enableGrouping={shouldEnableTagGrouping()}\n            isMetadataLoading={isMetadataLoading}\n            metadataError={metadataError}\n          />\n\n          <EvaluationsOverviewColumnSelectorGrouped\n            columns={allColumns}\n            selectedColumns={selectedColumns}\n            toggleColumns={toggleColumns}\n            setSelectedColumns={setSelectedColumns}\n            isMetadataLoading={isMetadataLoading}\n            metadataError={metadataError}\n          />\n          {traceActions && (\n            <GenAITracesTableActions experimentId={experimentId} traceActions={traceActions} traceInfos={traceInfos} />\n          )}\n        </TableFilterLayout>\n        <SampledInfoBadge countInfo={countInfo} />\n      </div>\n    );\n  },\n);\n\nconst SampledInfoBadge = (props: { countInfo: CountInfo }) => {\n  const { countInfo } = props;\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  if (countInfo.logCountLoading || isNil(countInfo.currentCount)) {\n    return <Spinner size=\"small\" />;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {countInfo.currentCount >= countInfo.maxAllowedCount && (\n        <Tooltip\n          componentId=\"mlflow.experiment_list_view.max_traces.tooltip\"\n          content={intl.formatMessage(\n            {\n              defaultMessage: 'Only the top {evalResultsCount} results are shown',\n              description: 'Evaluation review > evaluations list > sample info tooltip',\n            },\n            {\n              evalResultsCount: countInfo.maxAllowedCount,\n            },\n          )}\n        >\n          <WarningIcon color=\"warning\" />\n        </Tooltip>\n      )}\n      <Typography.Hint>\n        {intl.formatMessage(\n          {\n            defaultMessage: '{numFilteredEvals} of {numEvals}',\n            description: 'Text displayed when showing a filtered subset evaluations in the evaluation review page',\n          },\n          {\n            // Sometimes the api returns more than the max allowed count. To avoid confusion, we show the max allowed count.\n            numFilteredEvals:\n              countInfo.currentCount >= countInfo.maxAllowedCount ? countInfo.maxAllowedCount : countInfo.currentCount,\n            numEvals:\n              countInfo.totalCount >= countInfo.maxAllowedCount\n                ? `${countInfo.maxAllowedCount}+`\n                : countInfo.totalCount,\n          },\n        )}\n      </Typography.Hint>\n    </div>\n  );\n};\n","import type { RowSelectionState } from '@tanstack/react-table';\nimport React, { useState, useMemo, useCallback } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport type { ModelTrace, ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\n\nimport { computeEvaluationsComparison } from './GenAiTracesTable.utils';\nimport { GenAiTracesTableBody } from './GenAiTracesTableBody';\nimport { useActiveEvaluation } from './hooks/useActiveEvaluation';\nimport { FilterOperator, TracesTableColumnGroup, TracesTableColumnType } from './types';\nimport type {\n  AssessmentFilter,\n  AssessmentInfo,\n  TracesTableColumn,\n  TraceInfoV3,\n  EvaluationsOverviewTableSort,\n  TableFilter,\n} from './types';\nimport { sortAssessmentInfos } from './utils/AggregationUtils';\nimport { shouldEnableTagGrouping } from './utils/FeatureUtils';\nimport { applyTraceInfoV3ToEvalEntry } from './utils/TraceUtils';\n\ninterface GenAITracesTableBodyContainerProps {\n  // Experiment metadata\n  experimentId: string;\n  currentRunDisplayName?: string;\n  runUuid?: string;\n  compareToRunUuid?: string;\n  compareToRunDisplayName?: string;\n  getRunColor?: (runUuid: string) => string;\n\n  // Table metadata\n  assessmentInfos: AssessmentInfo[];\n\n  // Table data\n  currentTraceInfoV3: TraceInfoV3[];\n  compareToTraceInfoV3?: TraceInfoV3[];\n  getTrace: (requestId?: string, traceId?: string) => Promise<ModelTrace | undefined>;\n\n  // Table state\n  selectedColumns: TracesTableColumn[];\n  allColumns: TracesTableColumn[];\n  tableSort: EvaluationsOverviewTableSort | undefined;\n  filters: TableFilter[];\n  setFilters: (filters: TableFilter[]) => void;\n\n  // TODO: Remove this in favor of unified tagging modal apis\n  onTraceTagsEdit?: (trace: ModelTraceInfo) => void;\n\n  // Configuration\n  enableRowSelection?: boolean;\n}\n\nconst GenAITracesTableBodyContainerImpl: React.FC<GenAITracesTableBodyContainerProps> = React.memo(\n  (props: GenAITracesTableBodyContainerProps) => {\n    const {\n      experimentId,\n      currentTraceInfoV3,\n      compareToTraceInfoV3,\n      currentRunDisplayName,\n      runUuid,\n      compareToRunUuid,\n      compareToRunDisplayName,\n      setFilters,\n      filters,\n      selectedColumns,\n      tableSort,\n      assessmentInfos,\n      getTrace,\n      onTraceTagsEdit,\n      allColumns,\n      getRunColor,\n      enableRowSelection = true,\n    } = props;\n    const { theme } = useDesignSystemTheme();\n\n    // Convert trace info v3 to the format expected by GenAITracesTableBody\n    const currentEvaluationResults = useMemo(\n      () =>\n        applyTraceInfoV3ToEvalEntry(\n          currentTraceInfoV3.map((traceInfo) => ({\n            evaluationId: traceInfo.trace_id,\n            requestId: traceInfo.client_request_id || traceInfo.trace_id,\n            inputsId: traceInfo.trace_id,\n            inputs: {},\n            outputs: {},\n            targets: {},\n            overallAssessments: [],\n            responseAssessmentsByName: {},\n            metrics: {},\n            traceInfo,\n          })),\n        ),\n      [currentTraceInfoV3],\n    );\n    const compareToEvaluationResults = useMemo(\n      () =>\n        applyTraceInfoV3ToEvalEntry(\n          (compareToTraceInfoV3 || []).map((traceInfo) => ({\n            evaluationId: traceInfo.trace_id,\n            requestId: traceInfo.client_request_id || traceInfo.trace_id,\n            inputsId: traceInfo.trace_id,\n            inputs: {},\n            outputs: {},\n            targets: {},\n            overallAssessments: [],\n            responseAssessmentsByName: {},\n            metrics: {},\n            traceInfo,\n          })),\n        ),\n      [compareToTraceInfoV3],\n    );\n\n    const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n    // Handle assessment filter toggle\n    const handleAssessmentFilterToggle = useCallback(\n      (assessmentName: string, filterValue: any, run: string) => {\n        const filter = filters.find(\n          (filter) => filter.column === TracesTableColumnGroup.ASSESSMENT && filter.key === assessmentName,\n        );\n        if (filter === undefined) {\n          setFilters([\n            ...filters,\n            {\n              column: TracesTableColumnGroup.ASSESSMENT,\n              key: assessmentName,\n              operator: FilterOperator.EQUALS,\n              value: filterValue,\n            },\n          ]);\n        } else if (filter.value === filterValue) {\n          // Remove the filter because it already exists.\n          setFilters(\n            filters.filter(\n              (filter) => !(filter.column === TracesTableColumnGroup.ASSESSMENT && filter.key === assessmentName),\n            ),\n          );\n        } else {\n          // Replace any filters with the same assessment name and run.\n          setFilters(\n            filters.map((filter) => {\n              if (filter.column === TracesTableColumnGroup.ASSESSMENT && filter.key === assessmentName) {\n                return {\n                  column: TracesTableColumnGroup.ASSESSMENT,\n                  key: assessmentName,\n                  operator: FilterOperator.EQUALS,\n                  value: filterValue,\n                };\n              }\n              return filter;\n            }),\n          );\n        }\n      },\n      [filters, setFilters],\n    );\n\n    const assessmentFilters: AssessmentFilter[] = useMemo(() => {\n      return filters\n        .filter((filter) => filter.column === TracesTableColumnGroup.ASSESSMENT)\n        .map((filter) => ({\n          assessmentName: filter.key || '',\n          filterValue: filter.value,\n          run: currentRunDisplayName || '',\n        }));\n    }, [filters, currentRunDisplayName]);\n\n    const [selectedEvaluationId, setSelectedEvaluationId] = useActiveEvaluation();\n\n    // Get selected assessment infos\n    const selectedAssessmentInfos = useMemo(() => {\n      const selectedAssessmentCols = selectedColumns.filter((col) => col.type === TracesTableColumnType.ASSESSMENT);\n      const selectedAssessments = selectedAssessmentCols.map((col) => col.assessmentInfo as AssessmentInfo);\n      return sortAssessmentInfos(selectedAssessments);\n    }, [selectedColumns]);\n\n    // Compute evaluations comparison\n    const evaluationResults = useMemo(\n      () => computeEvaluationsComparison(currentEvaluationResults, compareToEvaluationResults),\n      [currentEvaluationResults, compareToEvaluationResults],\n    );\n\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n          overflow: 'hidden',\n          flexGrow: 1,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            gap: theme.spacing.md,\n            width: '100%',\n            flex: 1,\n            overflowY: 'hidden',\n          }}\n        >\n          <div\n            css={{\n              flex: 1,\n              overflowY: 'hidden',\n            }}\n          >\n            <GenAiTracesTableBody\n              experimentId={experimentId}\n              selectedColumns={selectedColumns}\n              allColumns={allColumns}\n              evaluations={evaluationResults}\n              selectedEvaluationId={selectedEvaluationId}\n              selectedAssessmentInfos={selectedAssessmentInfos}\n              assessmentInfos={assessmentInfos}\n              assessmentFilters={assessmentFilters}\n              onChangeEvaluationId={setSelectedEvaluationId}\n              getRunColor={getRunColor}\n              runUuid={runUuid}\n              compareToRunUuid={compareToRunUuid}\n              runDisplayName={currentRunDisplayName}\n              compareToRunDisplayName={compareToRunDisplayName}\n              enableRowSelection={enableRowSelection}\n              rowSelection={rowSelection}\n              setRowSelection={setRowSelection}\n              toggleAssessmentFilter={handleAssessmentFilterToggle}\n              tableSort={tableSort}\n              getTrace={getTrace}\n              onTraceTagsEdit={onTraceTagsEdit}\n              enableGrouping={shouldEnableTagGrouping()}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\n// TODO: Add an error boundary to the OSS trace table\nexport const GenAITracesTableBodyContainer = GenAITracesTableBodyContainerImpl;\n","import { useCallback, useMemo } from 'react';\n\nimport { assessmentValueToSerializedString, serializedStringToAssessmentValueV2 } from './useAssessmentFilters';\nimport { type TableFilter, type TableFilterValue, type FilterOperator, TracesTableColumnGroup } from '../types';\nimport { useSearchParams } from '../utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'filter';\nconst VALUE_SEPARATOR = '::';\n\n/**\n * Query param-powered hook that manages both generic and assessment filters.\n * Each filter is stored in the URL as: key::operator::value::type\n */\nexport const useFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const filters: TableFilter[] = useMemo(() => {\n    const filtersUrl = searchParams.getAll(QUERY_PARAM_KEY) ?? [];\n\n    return filtersUrl.reduce<TableFilter[]>((filters, urlFilter) => {\n      const [column, urlOperator, value, key] = urlFilter.split(VALUE_SEPARATOR);\n      if (!column || !urlOperator || !value) return filters;\n\n      const operator = urlOperator as FilterOperator;\n\n      const isAssessmentFilter = column === TracesTableColumnGroup.ASSESSMENT;\n      let filterValue: TableFilterValue = value;\n      if (isAssessmentFilter) {\n        filterValue = serializedStringToAssessmentValueV2(value);\n      }\n\n      filters.push({\n        column,\n        key,\n        operator,\n        value: filterValue,\n      });\n\n      return filters;\n    }, []);\n  }, [searchParams]);\n\n  const setFilters = useCallback(\n    (newFilters: TableFilter[] | undefined, replace = false) => {\n      setSearchParams(\n        (params: URLSearchParams) => {\n          params.delete(QUERY_PARAM_KEY);\n\n          if (newFilters) {\n            newFilters.forEach((filter) => {\n              let filterValue = filter.value;\n              if (filter.column === TracesTableColumnGroup.ASSESSMENT) {\n                filterValue = assessmentValueToSerializedString(filter.value);\n              }\n              params.append(\n                QUERY_PARAM_KEY,\n                [filter.column, filter.operator, filterValue, filter.key].join(VALUE_SEPARATOR),\n              );\n            });\n          }\n\n          return params;\n        },\n        { replace },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [filters, setFilters] as const;\n};\n","import { isNil } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\nimport { useLocalStorage } from '@databricks/web-shared/hooks';\n\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  SOURCE_COLUMN_ID,\n  STATE_COLUMN_ID,\n  TRACE_NAME_COLUMN_ID,\n} from './useTableColumns';\nimport type { TracesTableColumn } from '../types';\nimport { TracesTableColumnType } from '../types';\n\nexport interface GenAITracesUIState {\n  /**\n   * A map of column ids to boolean values.\n   * If a column id is present in the map, the column is hidden if the value is false, and visible if the value is true.\n   */\n  columnOverrides: Record<string, boolean>;\n}\n\nconst DEFAULT_MAX_VISIBLE_COLUMNS = 10;\n\nconst LOCAL_STORAGE_KEY = 'genaiTracesUIState-columns';\nconst LOCAL_STORAGE_VERSION = 1;\n\nconst toVisibleColumnsFromHiddenColumns = (hiddenColumns: string[], allColumns: TracesTableColumn[]) => {\n  return allColumns.filter((col) => !hiddenColumns.includes(col.id));\n};\n\nconst toHiddenColumnsFromVisibleColumns = (visibleColumns: TracesTableColumn[], allColumns: TracesTableColumn[]) => {\n  return allColumns.filter((col) => !visibleColumns.includes(col)).map((col) => col.id);\n};\n\n// This function adjusts the hidden columns to ensure that the number of visible columns is at most DEFAULT_MAX_VISIBLE_COLUMNS\n// If over the limit, it removes assessment columns until the limit is met.\nconst adjustHiddenColumns = (hiddenColumns: string[], allColumns: TracesTableColumn[]): string[] => {\n  let visibleColumns = toVisibleColumnsFromHiddenColumns(hiddenColumns, allColumns);\n  if (visibleColumns.length > DEFAULT_MAX_VISIBLE_COLUMNS) {\n    const assessmentColumns = visibleColumns.filter((col) => col.type === TracesTableColumnType.ASSESSMENT);\n    const nonAssessmentColumns = visibleColumns.filter((col) => col.type !== TracesTableColumnType.ASSESSMENT);\n\n    // Calculate how many assessment columns we need to remove\n    const columnsToRemove = visibleColumns.length - DEFAULT_MAX_VISIBLE_COLUMNS;\n    const assessmentColumnsToKeep = Math.max(0, assessmentColumns.length - columnsToRemove);\n\n    // Keep the first N assessment columns and all non-assessment columns\n    visibleColumns = [...nonAssessmentColumns, ...assessmentColumns.slice(0, assessmentColumnsToKeep)];\n  }\n  return toHiddenColumnsFromVisibleColumns(visibleColumns, allColumns);\n};\n\nconst getDefaultHiddenColumns = (\n  allColumns: TracesTableColumn[],\n  defaultSelectedColumns?: (allColumns: TracesTableColumn[]) => TracesTableColumn[],\n): string[] => {\n  if (defaultSelectedColumns) {\n    return adjustHiddenColumns(\n      toHiddenColumnsFromVisibleColumns(defaultSelectedColumns(allColumns), allColumns),\n      allColumns,\n    );\n  }\n\n  return adjustHiddenColumns(\n    [TRACE_NAME_COLUMN_ID, SOURCE_COLUMN_ID, EXECUTION_DURATION_COLUMN_ID, STATE_COLUMN_ID],\n    allColumns,\n  );\n};\n\nexport const useGenAITracesUIStateColumns = (\n  experimentId: string,\n  allColumns: TracesTableColumn[],\n  defaultSelectedColumns?: (allColumns: TracesTableColumn[]) => TracesTableColumn[],\n  runUuid?: string,\n): {\n  hiddenColumns: string[];\n  toggleColumns: (cols: TracesTableColumn[]) => void;\n} => {\n  const [columnState, setColumnState] = useLocalStorage<GenAITracesUIState | undefined>({\n    key: `${LOCAL_STORAGE_KEY}-${experimentId}-${runUuid}`,\n    version: LOCAL_STORAGE_VERSION,\n    initialValue: undefined,\n  });\n\n  const defaultHidden = useMemo(() => {\n    return getDefaultHiddenColumns(allColumns, defaultSelectedColumns);\n  }, [allColumns, defaultSelectedColumns]);\n\n  const hiddenColumns = useMemo(() => {\n    const hidden = new Set(defaultHidden);\n\n    if (!columnState?.columnOverrides) {\n      return defaultHidden;\n    }\n\n    Object.entries(columnState.columnOverrides).forEach(([id, show]) => {\n      if (show) {\n        hidden.delete(id);\n      } else {\n        hidden.add(id);\n      }\n    });\n\n    return [...hidden];\n  }, [columnState, defaultHidden]);\n\n  const toggleColumns = useCallback(\n    (cols: TracesTableColumn[]) => {\n      if (!cols.length) return;\n\n      setColumnState((prev) => {\n        const prevOverrides = prev?.columnOverrides ?? {};\n        const nextOverrides = { ...prevOverrides };\n        let changed = false;\n\n        cols.forEach((col) => {\n          /* derive current visibility:  true = hidden, false = visible */\n          const currentlyHidden =\n            col.id in prevOverrides\n              ? !prevOverrides[col.id] // invert, because stored flag is *show*\n              : defaultHidden.includes(col.id);\n\n          const newShow = currentlyHidden;\n          if (nextOverrides[col.id] !== newShow) {\n            nextOverrides[col.id] = newShow;\n            changed = true;\n          }\n        });\n\n        return changed ? { ...prev, columnOverrides: nextOverrides } : prev;\n      });\n    },\n    [setColumnState, defaultHidden],\n  );\n\n  return { hiddenColumns, toggleColumns };\n};\n\n/**\n * This hook is used to manage the selected columns for the GenAITracesTable.\n * It uses the useGenAITracesUIStateColumns hook to manage the hidden columns, and then filters the allColumns to get the selected columns.\n * It also provides a function to set the selected columns, which will toggle the columns to be visible or hidden.\n * @returns selectedColumns: The selected columns\n * @returns toggleColumns: A function to toggle the columns\n * @returns setSelectedColumns: A function to set the selected columns - can use to do bulk updates to selected columns\n */\nexport const useSelectedColumns = (\n  experimentId: string,\n  allColumns: TracesTableColumn[],\n  defaultSelectedColumns?: (cols: TracesTableColumn[]) => TracesTableColumn[],\n  runUuid?: string,\n) => {\n  const { hiddenColumns, toggleColumns } = useGenAITracesUIStateColumns(\n    experimentId,\n    allColumns,\n    defaultSelectedColumns,\n    runUuid,\n  );\n\n  const selectedColumns = useMemo(\n    () => allColumns.filter((c) => !hiddenColumns.includes(c.id)),\n    [allColumns, hiddenColumns],\n  );\n\n  const setSelectedColumns = useCallback(\n    (nextSelected: TracesTableColumn[]) => {\n      if (isNil(nextSelected)) return;\n\n      const wantSelected = new Set(nextSelected.map((c) => c.id));\n      const toToggle: TracesTableColumn[] = [];\n\n      allColumns.forEach((col) => {\n        const isSelectedNow = !hiddenColumns.includes(col.id);\n        const willBeSelected = wantSelected.has(col.id);\n\n        if (isSelectedNow !== willBeSelected) {\n          // only flip what actually changes\n          toToggle.push(col);\n        }\n      });\n\n      if (toToggle.length) {\n        toggleColumns(toToggle);\n      }\n    },\n    [allColumns, hiddenColumns, toggleColumns],\n  );\n\n  return { selectedColumns, toggleColumns, setSelectedColumns };\n};\n"],"names":["useDeleteTracesMutation","queryClient","useQueryClient","useMutation","mutationFn","async","experimentId","traceRequestIds","chunks","i","length","push","slice","deletePromises","map","chunk","MlflowService","deleteTracesV3","traces_deleted","Promise","all","reduce","sum","result","onSuccess","invalidateMlflowSearchTracesCache","GenAiTraceEvaluationArtifactFile","KnownEvaluationResultAssessmentMetadataFields","KnownEvaluationResultAssessmentName","isEvaluationResultOverallAssessment","assessmentEntry","_assessmentEntry$meta","metadata","IS_OVERALL_ASSESSMENT","isEvaluationResultPerRetrievalChunkAssessment","_assessmentEntry$meta2","isNumber","CHUNK_INDEX","isRetrievedContext","value","Array","isArray","every","v","isPlainObject","getFirstRetrievedContextValue","record","Object","values","find","extractRetrievalChunks","outputs","targets","perChunkAssessments","retrievedContext","expectedRetrievedContext","index","target","assessments","filter","assessment","retrievalAssessmentsByName","groupBy","keys","forEach","key","orderBy","docUrl","doc_uri","content","parseRawTableArtifact","artifactData","columns","data","filename","SyntaxError","normalizedColumns","column","row","zipObject","INPUT_MESSAGES_KEY","DEFAULT_ASSESSMENTS_SORT_ORDER","OVERALL_ASSESSMENT","CORRECTNESS","GLOBAL_GUIDELINE_ADHERENCE","GUIDELINE_ADHERENCE","GUIDELINES","RELEVANCE_TO_QUERY","CONTEXT_SUFFICIENCY","RETRIEVAL_SUFFICIENCY","CHUNK_RELEVANCE","RETRIEVAL_RELEVANCE","GROUNDEDNESS","RETRIEVAL_GROUNDEDNESS","SAFETY","KnownEvaluationResultAssessmentStringValue","getAssessmentValueLabel","intl","theme","assessmentInfo","dtype","YES","formatMessage","id","defaultMessage","icon","_jsx","css","_css","color","getEvaluationResultIconColor","stringValue","svg","width","height","children","CheckCircleIcon","backgroundColor","getEvaluationResultAssessmentBackgroundColor","borderRadius","NO","XCircleIcon","UNKNOWN","WarningIcon","KnownEvaluationResultAssessmentOutputLabel","response","defineMessage","EXPECTED_FACTS_FIELD_NAME","KnownEvaluationResultAssessmentTargetLabel","expected_response","KnownEvaluationResultAssessmentValueLabel","KnownEvaluationResultAssessmentValueMissingTooltip","KnownEvaluationResultAssessmentValueDescription","KnownEvaluationResultAssessmentValueMapping","isAssessmentAiGenerated","_assessment$source","source","sourceType","getEvaluationResultTitle","evaluation","_title","title","getEvaluationResultInputTitle","isNil","inputs","stringifyValue","evaluationId","inputKey","_input$INPUT_MESSAGES","_input$","inputsTitle","JSON","stringify","input","_input$INPUT_MESSAGES2","undefined","_input","getEvaluationResultAssessmentValue","_ref","_assessment$stringVal","numericValue","booleanValue","withAlpha","hexColor","opacity","startsWithHash","startsWith","Math","round","min","max","toString","toUpperCase","KnownEvaluationResponseAssessmentNames","KnownEvaluationRetrievalAssessmentNames","createDraftEvaluationResultAssessmentObject","name","isOverallAssessment","rationale","_getUser","sourceId","getUser","timestamp","Date","now","isDraft","isDraftAssessment","getOrderedAssessments","assessmentsByName","entries","indexInKnownNames","indexOf","_assessments$timestam","_assessments","isEvaluationResultReviewedAlready","evaluationResult","_evaluationResult$ove","_evaluationResult$ove2","overallAssessments","some","hasBeenEditedByHuman","_assessment$source2","_assessment$metadata","IS_COPIED_FROM_AI","getEvaluationResultAssessmentChunkIndex","_assessment$metadata2","isAssessmentMissing","hasRationale","Boolean","hasValue","hasErrorMessage","errorMessage","AGGREGATE_SCORE_CHANGE_BACKGROUND_COLORS","CURRENT_RUN_COLOR","COMPARE_TO_RUN_COLOR","PASS_BARCHART_BAR_COLOR","FAIL_BARCHART_BAR_COLOR","TAG_PASS_COLOR","isDarkMode","colors","green400","green600","red400","red600","textValidationWarning","grey400","iconOnly","red800","red200","getAssessmentValueBarBackgroundColor","assessmentValue","isError","grey800","grey200","useSearchParams","useSearchParamsDirect","Link","LinkDirect","QUERY_PARAM_KEY","serializedStringToAssessmentValueV2","serializedStringToAssessmentValue","assessmentValueToSerializedString","useTableSort","selectedColumns","initialTableSort","tableSort","setTableSort","useState","c","useMemo","GenAITracesTableContext","createContext","table","setTable","selectedRowIds","setSelectedRowIds","GenAITracesTableProvider","Provider","GenAiDeleteTraceModal","experimentIds","visible","selectedTraces","handleClose","deleteTraces","useIntl","setErrorMessage","isLoading","setIsLoading","tracesToDelete","trace","_jsxs","Modal","componentId","FormattedMessage","count","onCancel","okText","onOk","handleOk","_experimentIds$","e","submitDeleteTraces","okButtonProps","loading","danger","Typography","Paragraph","Text","bold","getEvalTabTotalTracesLimit","FilterOperator","TracesTableColumnType","TracesTableColumnGroup","TracesTableColumnGroupToLabelMap","ASSESSMENT","TAG","INFO","USER_COLUMN_ID","SESSION_COLUMN_ID","RESPONSE_COLUMN_ID","TRACE_ID_COLUMN_ID","REQUEST_TIME_COLUMN_ID","EXECUTION_DURATION_COLUMN_ID","STATE_COLUMN_ID","SOURCE_COLUMN_ID","TAGS_COLUMN_ID","TRACE_NAME_COLUMN_ID","INPUTS_COLUMN_ID","RUN_NAME_COLUMN_ID","LOGGED_MODEL_COLUMN_ID","TOKENS_COLUMN_ID","CUSTOM_METADATA_COLUMN_ID","SORTABLE_INFO_COLUMNS","SERVER_SORTABLE_INFO_COLUMNS","EXCLUDED_ASSESSMENT_NAMES","TOTAL_INPUT_TOKEN_COUNT","TOTAL_OUTPUT_TOKEN_COUNT","TOTAL_TOKEN_COUNT","DOCUMENT_RECALL","DOCUMENT_RATINGS","createAssessmentColumnId","assessmentName","useTableColumns","currentEvaluationResults","assessmentInfos","runUuid","otherEvaluationResults","isTraceInfoV3Override","isTraceInfoV3","shouldUseTraceInfoV3","inputCols","label","type","INPUT","group","inputKeys","Set","traceInfoColumns","traceInfo","assessmentColumns","displayName","isRetrievalAssessment","includes","infoCols","TRACE_INFO","allResults","customMetadataColumns","_result$traceInfo","traceMetadata","trace_metadata","MLFLOW_INTERNAL_PREFIX","createCustomMetadataColumnId","tagColumnRecords","_result$traceInfo2","tags","tag","createTagColumnId","tagColumns","requestTime","INTERNAL_MONITOR_REQUEST_TIME","col","MLFLOW_SOURCE_RUN_KEY","getRowIdFromTrace","trace_id","getCustomMetadataKeyFromColumnId","columnId","split","pop","tagKey","metadataKey","getTracesTagKeys","traces","uniq","flat","convertTraceInfoV3ToModelTraceInfo","_trace$client_request","obj","request_id","client_request_id","evalResults","safelyParseValue","val","parse","getTraceInfoInputs","_traceInfo$trace_meta","request_preview","request","getTraceInfoOutputs","_traceInfo$trace_meta2","response_preview","LIST_TRACES_IGNORE_ASSESSMENTS","convertFeedbackAssessmentToRunEvalAssessment","_assessment$feedback","_assessment$feedback2","_assessment$metadata3","feedback","assessment_name","_assessment$source3","source_type","runEvalSourceType","source_id","convertAssessmentV3Source","error","errorCode","error_code","error_message","rootCauseAssessment","suggestedActions","convertTraceInfoV3ToRunEvalEntry","_traceInfo$assessment","responseAssessmentsByName","expectation","isExpectationAssessment","_assessment$expectati","_assessment$expectati2","_assessment$expectati3","serialized_value","processExpectationAssessment","evalResultAssessment","processFeedbackAssessment","rawInputs","rawOutputs","_messages$","messages","_messages","requestId","inputsId","metrics","applyTraceInfoV3ToEvalEntry","converted","getRetrievalAssessmentsByName","chunkIndex","fromEntries","_assessment$metadata4","Number","filteredAssessments","GenAITracesTableActions","props","traceActions","selectedTracesFromProps","traceInfos","setRowSelection","useContext","selectedTracesFromContext","rowId","TraceActionsDropdown","_traceActions$exportT","_traceActions$editTag","showDatasetModal","setShowDatasetModal","showLabelingSessionModal","setShowLabelingSessionModal","showDeleteModal","setShowDeleteModal","handleEditTags","useCallback","editTags","modelTrace","showEditTagsModalForTrace","handleDeleteTraces","traceIds","_traceActions$deleteT","deleteTracesAction","hasExportAction","exportToEvals","getTrace","hasEditTagsAction","hasDeleteAction","isEditTagsDisabled","noTracesSelected","ActionButton","Button","disabled","endIcon","ChevronDownIcon","_Fragment","DropdownMenu","Root","open","Tooltip","Trigger","asChild","Content","Group","Item","onClick","EditTagsModal","GROUP_PRIORITY","INFO_COLUMN_PRIORITY","ASSESSMENT_COLUMN_PRIORITY","groupRank","grp","idx","infoColumnRank","assessmentColumnRank","sortGroupedColumns","isComparing","sort","colA","colB","_colA$group","_colB$group","groupA","groupB","groupComparison","_infoColumnRank$colA$","_infoColumnRank$colB$","rankA","Infinity","rankB","localeCompare","_assessmentColumnRank","_assessmentColumnRank2","sortColumns","a","b","getPriority","_selectedColumns$find","colType","diff","aCol","bCol","getTraceInfoValueWithColId","colId","_traceInfo$tags","Error","getUniqueInputRequests","evaluationResults","resultMap","Map","duplicateIndexMap","entry","has","newCount","get","set","computeEvaluationsComparison","currentRunEvalResults","otherRunEvalResults","currentRunValue","otherRunEvalResultsMap","currentRunEvalResultsMap","allRequestIds","from","otherRunValue","ErrorCell","useDesignSystemTheme","display","alignItems","gap","spacing","sm","DangerIcon","styles","NullCell","fontStyle","textSecondary","StackedComponents","first","second","marginY","flexDirection","legacyBorders","borderRadiusMd","marginTop","marginBottom","fetchFn","fetch","makeRequest","path","method","body","options","headers","getDefaultHeaders","document","cookie","ok","matchPredefinedError","errorMessageFromResponse","json","message","MlflowUtils","getEntryPointName","runTags","entryPointTag","getSourceType","sourceTypeTag","dropExtension","replace","baseName","pieces","formatSource","sourceName","getSourceName","entryPointName","res","jobIdTag","jobRunIdTag","jobId","jobRunId","getDefaultJobRunName","runId","workspaceId","sourceNameTag","getGitHubRegex","getGitLabRegex","getBitbucketRegex","getRunPageRoute","getLoggedModelPageRoute","loggedModelId","getGitRegex","getGitRepoUrl","branchName","gitHubMatch","match","gitLabMatch","bitbucketMatch","gitMatch","url","baseUrl","repoDir","fileDir","getNotebookRevisionId","revisionIdTag","getNotebookId","notebookIdTag","isCurrentWorkspace","getDefaultNotebookRevisionName","notebookId","revisionId","ensureUrlScheme","defaultScheme","setQueryParams","queryParams","urlObj","URL","search","getNotebookSourceUrl","workspaceUrl","window","location","origin","renderNotebookSource","nameOverride","href","addQueryParams","currentQueryParams","newQueryParams","urlSearchParams","URLSearchParams","getJobSourceUrl","renderJobSource","jobName","reformatJobName","renderSource","gitRepoUrlOrNull","workspaceIdTag","workspaceUrlTag","notebookQueryParams","o","jobQueryParams","renderSourceFromMetadata","traceInfoV3","_traceInfoV3$trace_me","_traceInfoV3$trace_me2","_traceInfoV3$trace_me3","_traceInfoV3$trace_me4","_traceInfoV3$trace_me5","gitRepoUrl","gitBranch","gitCommit","httpsUrl","ref","filePath","rel","_traceInfoV3$trace_me6","_traceInfoV3$trace_me7","_traceInfoV3$trace_me8","_traceInfoV3$trace_me9","_traceInfoV3$trace_me0","_traceInfoV3$trace_me1","_traceInfoV3$trace_me10","_traceInfoV3$trace_me11","runNameTag","LoggedModelCell","_currentTraceInfo$tra","_otherTraceInfo$trace","currentTraceInfo","otherTraceInfo","currentModelId","otherModelId","LoggedModelComponent","modelId","_ref2","_ref3","_data$info","useLoggedModelName","modelName","info","ParagraphSkeleton","Tag","to","xs","maxWidth","ModelsIcon","textPrimary","fontSize","isFetching","refetch","useQuery","queryKey","queryFn","getAjaxUrl","cacheTime","staleTime","refetchOnMount","retry","enabled","model","RunName","_data$runs","_data$runs$","_data$runs$$info","useRunName","runName","runs","run_name","experiment_ids","SourceType","ExperimentSourceTypeIcon","className","NOTEBOOK","NotebookIcon","LOCAL","HomeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","SourceCellRenderer","_props$traceInfo$trac","sourceLink","disableLinks","pointerEvents","textDecoration","cursor","ExperimentViewTracesStatusLabels","STATE_UNSPECIFIED","IN_PROGRESS","OK","ERROR","getIcon","state","ClockIcon","textValidationSuccess","textValidationDanger","StatusCellRenderer","original","labelDescriptor","KeyValueTagFullViewModal","React","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundPrimary","whiteSpace","wordBreak","tagValue","md","CopyActionButton","copyText","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","KeyValueTag","isClosable","onClose","enableFullViewModal","charLimit","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","closable","LegacyTooltip","TagsCellRenderer","onAddEditTags","baseComponentId","visibleTagList","containsTags","flexWrap","columnGap","rowGap","size","PencilIcon","TokensCell","TokenComponent","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","tokenUsage","parsedTokenUsage","totalTokens","total_tokens","inputTokens","input_tokens","outputTokens","output_tokens","HoverCard","trigger","ERROR_KEY","doesAssessmentContainErrors","getCustomMetricNameAndAssessment","assessmentPath","splits","metricName","join","PASS_FAIL_VALUES","getAssessmentInfos","_assessmentInfos$Know","assessmentDtypes","assessmentNames","_result$retrievalChun","overallAssessmentsByName","retrievalChunks","add","_result$retrievalChun2","_","_assessment$source4","isCustomMetric","isKnown","customMetricName","customAssessmentName","docsLink","missingTooltip","description","uniqueValues","isOverall","isEditable","containsErrors","_assessment$source5","_assessment$source6","seenOverallAssessmentValues","sortAssessmentInfos","orderA","orderB","getAssessmentNumericAggregates","numericValues","numericAggregateCounts","bucketSize","maxCount","lower","upper","bucket","counts","getNumericAggregate","flatMap","evalResult","getAssessmentRunValueCounts","valueCounts","valueCountsBySourceId","getUniqueValueCountsBySourceId","keysToCount","uniqueValue","valueCountBySourceId","valueCount","getAssessmentRunNumericValues","getRootCauseAssessmentCount","numRootCause","_overallAssessment$ro","overallAssessment","getAssessmentAggregates","allAssessmentFilters","currentEvalResults","otherEvalResults","currentAssessmentAggregates","otherAssessmentAggregates","currentNumericAggregates","assessmentFilters","currentCounts","otherCounts","currentNumericValues","otherNumericValues","currentNumericAggregate","currentNumRootCause","otherNumRootCause","getAssessmentAggregateOverallFraction","assessmentRunCounts","total","passCount","isAssessmentPassing","getAssessmentBarChartValueBarItem","toggleAssessmentFilter","numEvals","isErrorOrNull","numValue","fraction","isSelected","filterValue","run","toggleFilter","tooltip","getBarChartKeys","uniqueValuesArray","sortOrder","getSortedUniqueValues","getAssessmentBarChartValueText","errorAssessments","validAssessments","assessmentsWithValue","latestAssessment","displayPercentage","numDecimalsDisplayPercentage","toFixed","displayFloat","numDecimals","multiplier","pow","getDisplayScoreChange","scoreChange","asPercentage","changeDirection","timeSinceStr","date","referenceDate","seconds","floor","interval","timeSince","escapeCssSpecialCharacters","str","prettySizeWithUnit","bytes","fractionDigits","divisor","units","isNaN","isFinite","unit","greatestDivisor","formatNumber","prettyNumberWithUnit","MarkdownConverterProviderContext","makeHTML","markdown","MarkdownConverterProvider","makeHtml","useMarkdownConverter","EvaluationsReviewAssessmentTag","onEdit","active","disableJudgeTypeIcon","showRationaleInTooltip","showPassFailText","hideAssessmentName","disableTooltip","isRootCauseAssessment","_assessmentInfo$sourc","isPassing","iconColor","textColor","getEvaluationResultTextColor","knownValueLabel","assessmentTitle","learnMoreLink","rationaleHTML","isString","editedByHuman","tagText","fullTagText","errorDisplayValue","nullDisplayValue","displayValueText","XCircleFillIcon","knownMapping","_knownMapping$value$t","messageDescriptor","roundedValue","valueElement","String","getAssessmentTagDisplayValue","tagContent","tagElement","EvaluationsReviewTag","sourceIcon","BracketsXIcon","UserIcon","SparkleDoubleIcon","disableSourceTypeIcon","side","overflowWrap","Title","InfoSmallIcon","Hint","dangerouslySetInnerHTML","__html","svgSize","justifyContent","padding","boxShadow","borderAccessible","typography","fontSizeSm","actionDefaultTextHover","RunColorCircle","hidden","style","assessmentCellRenderer","comparisonEntry","_comparisonEntry$curr","_comparisonEntry$othe","_comparisonEntry$curr2","_comparisonEntry$curr3","_comparisonEntry$curr4","_comparisonEntry$curr5","_comparisonEntry$othe2","_comparisonEntry$othe3","_comparisonEntry$othe4","_comparisonEntry$curr6","_assessment$currentVa","_comparisonEntry$othe5","_assessment$currentVa2","_comparisonEntry$curr7","currentValue","otherValue","uniqueValueCounts","currentIsAssessmentRootCause","otherIsAssessmentRootCause","assessmentComparison","aString","bString","compareAssessmentValues","assessmentChanged","ArrowRightIcon","transform","uniqueValueCount","_ref0","_ref1","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","formatResponseTitle","outputsTitle","_choices$","_choices$$message","choices","_choices$2","_choices$2$message","getColumnConfig","evaluationInputs","onChangeEvaluationId","onTraceTagsEdit","baseColConfig","header","accessorFn","originalRow","sortingFn","_aValue$currentRunVal","_aValue$otherRunValue","_aValue$currentRunVal2","_aValue$otherRunValue2","_bValue$currentRunVal","_bValue$otherRunValue","_bValue$currentRunVal2","_bValue$otherRunValue2","aValue","getValue","bValue","aSortValue","evalId","bSortValue","minSize","cell","_cell$table$options$m","inputColumnCellRenderer","inputColumn","getRunColor","_value$currentRunValu","_value$otherRunValue","_value$currentRunValu2","_value$currentRunValu3","_value$currentRunValu4","_value$otherRunValue2","_value$otherRunValue3","_value$otherRunValue4","currentRunUuid","otherRunUuid","currentRunColor","otherRunColor","currentInputColumnTitle","otherInputColumnTitle","inputColumnTitle","meta","_aValue$currentRunVal3","_aValue$currentRunVal4","_aValue$otherRunValue3","_aValue$otherRunValue4","_bValue$currentRunVal3","_bValue$currentRunVal4","_bValue$otherRunValue3","_bValue$otherRunValue4","aAssessment","bAssessment","aCurrentValue","bCurrentValue","aOtherValue","bOtherValue","aIsPassToFail","bIsPassToFail","aIsFailToPass","bIsFailToPass","aIsFailToFail","bIsFailToFail","aIsPassToPass","bIsPassToPass","aIsPassing","bIsPassing","sortPassFailAssessments","sortCompareAssessments","maxSize","_aValue$currentRunVal5","_bValue$currentRunVal5","traceInfoSortingFn","traceInfoA","traceInfoB","_getTraceInfoValueWit","_getTraceInfoValueWit2","aVal","bVal","numeric","traceInfoCellRenderer","_comparisonEntry$curr8","_comparisonEntry$othe6","request_time","otherDate","toLocaleString","navigator","language","timeZoneName","tagsArr","otherTagsArr","_currentTraceInfo$tag","_otherTraceInfo$tags","otherTagValue","_comparisonEntry$curr9","_currentTraceInfo$tag2","_otherTraceInfo$tags2","_currentTraceInfo$tag3","_currentTraceInfo$tag4","currentTraceName","otherTraceName","_currentTraceInfo$tra2","_currentTraceInfo$tag5","_otherTraceInfo$tags3","_currentTraceInfo$tra3","_otherTraceInfo$trace2","_currentTraceInfo$tra4","_otherTraceInfo$trace3","_originalRow$currentR","GenAiTracesTableBodyRows","rows","enableRowSelection","virtualItems","virtualizerTotalSize","virtualizerMeasureElement","position","virtualRow","exportableTrace","node","start","willChange","GenAiTracesTableBodyRow","getIsSelected","MemoizedGenAiTracesTableBodyRows","cells","getVisibleCells","TableRow","TableRowSelectCell","checked","onChange","getToggleSelectedHandler","isDisabled","GenAiTracesTableBodyRowCell","TableCell","flex","flexRender","columnDef","getContext","EvaluationsRcaStats","overallAssessmentInfo","assessmentNameToAggregates","compareToRunUuid","rcaData","isCompareToRun","currentRunDisplayName","otherRunDisplayName","_sortedAssessmentAggr","_sortedAssessmentAggr2","assessmentDisplayInfo","sortedAssessmentAggregates","x","maxNumRootCause","_KnownEvaluationResul","numPassing","numFailing","numMissing","otherNumEvals","otherRootCauseFraction","currentPercentage","otherPercentage","currentInfo","percentage","currentRun","filterType","otherInfo","getRcaData","fontWeight","typographyBoldFontWeight","RcaPills","runColor","item","runDisplayInfoCount","border","general","borderRadiusBase","toLocaleLowerCase","EvaluationsAssessmentHoverCard","_assessmentInfo$sourc2","paddingBottom","borderBottom","NumbersIcon","BinaryIcon","level","marginRight","CategoricalAggregateChart","assessmentAggregates","compareToRunDisplayName","barChartData","displayInfoCounts","showCompareData","barItems","currentBarItem","otherBarItem","current","other","getBarChartData","sortedBarChartData","originalIndex","aIsBottomEntry","bIsBottomEntry","_b$current","_a$current","valueComparison","visibleItems","MAX_VISIBLE_ITEMS","hiddenItems","hasMoreItems","hoverBarColor","actionDefaultBackgroundHover","selectedBarColor","actionDefaultBackgroundPress","barData","ChartRow","colSpan","Popover","actionLinkDefault","align","isNull","borderTopLeftRadius","borderBottomLeftRadius","paddingLeft","paddingTop","lineHeight","textAlign","verticalAlign","borderTopRightRadius","borderBottomRightRadius","paddingRight","flexShrink","transition","NumericAggregateChart","numericAggregate","minHeight","blue400","AssessmentColumnSummary","collapsedHeader","dtypeAggregateLabel","displayScore","displayScoreChange","currentAverage","NaN","otherAverage","abs","aggregateType","scoreFraction","numUniqueValues","getDisplayOverallScoreAndChange","textPlaceholder","fontSizeLg","fontSizeMd","GenAiTracesTableHeader","enableGrouping","selectedAssessmentInfos","runDisplayName","disableAssessmentTooltips","setCollapsedHeader","headerGroups","allRowSelected","someRowSelected","toggleAllRowsSelectedHandler","setColumnSizing","isChevronHovered","setIsChevronHovered","borderCss","top","left","right","borderTop","headerGroup","depth","isHeader","zIndex","blue500","indeterminate","checkboxLabel","noCheckbox","isPlaceholder","titleElement","TableHeader","background","onMouseEnter","onMouseLeave","borderColor","HeaderCellRenderer","groupId","visibleCount","totalCount","groupName","EvaluationsReviewAssessmentDetailedHistory","history","alwaysExpanded","setReferenceDate","useEffect","updateDateInterval","setInterval","clearInterval","transitions","next","previous","rationaleHtml","_first","_first2","_first3","_first4","Spacer","getMappedValue","_next$source","_next$source2","prevValue","nextValue","isSameValue","when","user","EvaluationsReviewAssessmentTooltip","assessmentHistory","disable","getTitle","mostRecentEntry","_getEvaluationResultA","_mostRecentEntry$sour2","previousRecentEntry","previousRecentValue","_mostRecentEntry$sour","mappedValue","displayedPreviousValue","placement","EvaluationsReviewAssessmentUpsertForm","editedAssessment","valueSuggestions","onSave","readOnly","_formValue$label","setRationale","inputValue","setInputValue","formValue","setFormValue","_valueSuggestions$fin","showAllSuggestions","setShowAllSuggestions","filteredSuggestions","toLowerCase","visibleSuggestions","displayCombobox","comboboxState","useComboboxState","allItems","items","setItems","multiSelect","allowNewValue","itemToString","initialSelectedItem","initialInputValue","formOnChange","onIsOpenChange","isOpen","addNewElementLabel","TypeaheadComboboxRoot","TypeaheadComboboxInput","placeholder","onKeyUp","highlightedIndex","closeMenu","TypeaheadComboboxMenu","emptyText","matchTriggerWidth","TypeaheadComboboxMenuItem","Input","TextArea","autoSize","_formValue$rootAssess","targetAssessmentName","rootAssessmentName","useEditAssessmentFormState","editingAssessment","setEditingAssessment","showUpsertForm","setShowUpsertForm","suggestions","setSuggestions","setFormState","isEditing","getAssessmentValueSuggestions","originalAssessment","mapping","editAssessment","addAssessment","closeForm","ExpandedAssessment","assessmentsType","onUpsertAssessment","allowEditing","intlLabel","suggestedActionHtml","_assessment$rootCause","suggestedAction","assessmentToEdit","BugIcon","AssistantIcon","defaultAssessmentName","ExpandedAssessments","allowMoreThanOne","nonEmptyAssessments","assessmentList","_key","containsAssessments","showAddAssessmentButton","PlusIcon","CompactAssessments","EvaluationsReviewAssessments","isExpandedView","setIsExpandedView","showExpandedView","filteredAssessmentsByName","ChevronUpIcon","ChevronRightIcon","mode","EvaluationsReviewAssessmentsConfirmButton","toBeReviewed","containsOverallAssessment","isNextResultAvailable","overridingExistingReview","hasPendingAssessments","onClickNext","onCancelOverride","VerticalBar","EvaluationsReviewSingleRunAssessmentsSection","onSavePendingAssessments","onResetPendingAssessments","isNextAvailable","pendingAssessments","setOverridingExistingReview","isReadOnly","_currentOverallAssess","currentOverallAssessment","rootCauseAssessmentName","reopenReviewTooltip","backgroundSecondary","zIndexBase","pendingCount","EvaluationsReviewAssessmentsSection","otherEvaluationResult","EvaluationTraceDataDrawer","withoutMargins","Drawer","modal","onOpenChange","expandContentToFullHeight","renderContent","containsSpans","spans","Empty","marginLeft","lg","onWheel","stopPropagation","ModelTraceExplorer","EvaluationsReviewSingleRunHeaderSection","exportToEvalsInstanceEnabled","traceQueryResult","_evaluationResult$tra","_evaluationResult$tra2","selectedTraceDetailsRequestId","setSelectedTraceDetailsRequestId","droppedSpanSize","prettySizeString","prettySize","delayDuration","EvaluationsReviewHeaderSection","compareToTraceQueryResult","EvaluationsReviewCopyButton","showLabel","buttonProps","showTooltip","setShowTooltip","dangerouslySetAntdProps","handleClick","clipboard","writeText","setTimeout","handleMouseLeave","EvaluationsReviewExpandedJSONValueCell","structuredJSONValue","objectData","fontFamily","EvaluationsReviewTextBox","fieldName","showCopyIcon","htmlContent","jsonContent","CopyIcon","fact","EvaluationsReviewSingleRunInputSection","inputsEntries","noValues","EvaluationsReviewInputSection","inputsAreTheSame","EvaluationsReviewSingleRunResponseSection","outputEntries","targetEntries","output","mappedTitle","EvaluationsReviewResponseSection","EvaluationsReviewListItemIndicator","chunkRelevanceAssessmentInfo","QuestionMarkIcon","isValidHttpUrl","protocol","err","RetrievedChunkHeader","ellipsis","openInNewTab","strong","EvaluationsReviewSingleRunRetrievalSection","selectedIndex","setSelectedIndex","evaluationRetrievalChunks","_retrievalSpans$at","_retrievalSpans$at$at","docUriKey","retrieverInfos","retrievalSpans","span","_span$attributes","_span$attributes2","attributes","ModelTraceSpanType","RETRIEVER","spanOutputs","at","doc","_doc$metadata","page_content","getRetrievedContextFromTrace","selectedEntryHtmlContent","_evaluationRetrievalC","noRetrievalFound","selectedChunk","sectionTitle","role","TableSkeleton","lines","maxHeight","minWidth","borderRight","_chunk$content","_chunk$retrievalAsses","actionIconBackgroundHover","lineHeightLg","EvaluationsReviewRetrievalSection","EvaluationsReviewDetailsHeader","EvaluationsReviewDetails","draftEvaluationResult","upsertAssessment","resetPendingAssessments","dispatch","useReducer","action","existingPendingAssessment","payload","overallAssessmentList","pendingOverallAssessment","responseAssessmentMap","allAssessmentNames","pendingAssessmentForType","retrievalChunksWithDraftAssessments","_evaluationResult$ret","pendingAssessmentForChunk","existingAssessments","usePendingAssessmentEntries","hasErrorCode","showAlert","alertExpanded","setAlertExpanded","Alert","toggleAlertExpanded","GenAiEvaluationTracesReview","otherEvaluation","selectNextEval","saveAssessmentsQuery","handleSavePendingAssessments","assessmentsToSave","shouldRepeatExistingOriginalOverallAiAssessment","sourceEvaluationResult","pendingAssessmentEntries","repeatedOverallAssessment","_getUser2","firstAiOverallAssessment","copyAiOverallAssessmentAsHumanAssessment","unshift","savePendingAssessments","reviewDetailsRef","useRef","_reviewDetailsRef$cur","scrollTo","isSaving","inset","overlayOverlay","Spinner","inheritColor","getDefaultConfig","_shouldEnableRunEvalu","enableRunEvaluationWriteFeatures","GenAITracesTableConfigContext","GenAITracesTableConfigProvider","config","defaultConfig","mergedConfig","merge","useGetTrace","traceId","resolve","refetchOnWindowFocus","keepPreviousData","GenAiEvaluationTracesReviewModal","evaluations","selectedEvaluationId","_evaluation$currentRu","_evaluation$currentRu2","_evaluation$currentRu3","_evaluation$otherRunV","_evaluation$otherRunV2","_evaluation$otherRunV3","_nextEvaluation$curre","_nextEvaluation$curre2","_nextEvaluation$curre3","_previousEvaluation$c","_previousEvaluation$c2","_previousEvaluation$c3","_evaluation$currentRu4","classNamePrefix","findEval","_entry$currentRunValu","_entry$otherRunValue","previousEvaluationIdx","findIndex","isPreviousAvailable","nextEvaluationIdx","selectPreviousEval","_evaluations$previous","_evaluations$previous2","_evaluations$previous3","_evaluations$previous4","newEvalId","_evaluations$nextEval","_evaluations$nextEval2","_evaluations$nextEval3","_evaluations$nextEval4","nextEvaluation","previousEvaluation","tracesTableConfig","isSingleTraceView","currentTraceQueryResult","onKeyDown","verticalSizing","footer","GenericSkeleton","ModelTraceExplorerModalBody","traceData","ChevronLeftIcon","GenAiTracesTableBody","rowSelection","allColumns","columnsList","groupColumns","topLevelColumns","useReactTable","getCoreRowModel","getSortedRowModel","enableColumnResizing","columnResizeMode","enableMultiSort","onRowSelectionChange","getRowId","getRowIdFromEvaluation","getIsAllRowsSelected","getIsSomeRowsSelected","getSelectedRowModel","r","emptyDescription","emptyComponent","image","SearchIcon","setSorting","desc","asc","getRowModel","tableContainerRef","rowVirtualizer","useVirtualizer","estimateSize","getScrollElement","measureElement","userAgent","element","getBoundingClientRect","overscan","getVirtualItems","tableHeaderGroups","getHeaderGroups","columnSizeVars","tableWidth","colSizes","getSize","overflowY","overflowX","Table","empty","someRowsSelected","getToggleAllRowsSelectedHandler","getTotalSize","rowSelectionState","GenAiTracesTableSearchInput","searchQuery","setSearchQuery","pendingUserQuery","setPendingUserQuery","timeout","clearTimeout","TableFilterInput","COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID","FILTER_DROPDOWN_COMPONENT_ID","COLUMN_SELECTOR_DROPDOWN_COMPONENT_ID","EvaluationsOverviewColumnSelector","setSelectedColumns","setSelectedColumnsWithHiddenColumns","DialogCombobox","DialogComboboxCustomButtonTriggerWrapper","ColumnsIcon","DialogComboboxContent","DialogComboboxOptionList","DialogComboboxOptionListCheckboxItem","newColumn","handleChange","EvaluationsOverviewSortDropdown","isMetadataLoading","metadataError","setOpen","sortOptions","assessmentLabelPrefix","sortedColumns","assessmentLabel","sortableAssessmentCol","inputLabelPrefix","infoColumn","currentSortSelectLabel","sortOption","option","sortOptionLabel","_tableSort$key","extractedKeyName","sortMessage","SortAscendingIcon","SortDescendingIcon","SortUnsortedIcon","EvaluationsOverviewSortDropdownBodyGrouped","onOptionSelected","orderByAsc","EvaluationsOverviewSortDropdownBody","inputRef","firstOptionRef","setFilter","filtered","opt","grouped","m","_opt$group","_tableSort$asc","setOrder","_sortOptions$find","requestAnimationFrame","_inputRef$current","focus","prefix","_firstOptionRef$curre","preventDefault","ToggleButton","pressed","ArrowDownIcon","ArrowUpIcon","opts","gi","Label","CheckboxItem","ItemIndicator","inputElementRef","firstElementRef","filteredSortOptions","orderByKey","orderByKeyOption","ascending","_inputElementRef$curr","autoFocus","_firstElementRef$curr","GenAiEvaluationBadge","borders","useActiveEvaluation","_searchParams$get","searchParams","setSearchParams","setSelectedEvaluationId","params","delete","filterEvaluationResults","filters","includeEval","_runValue$overallAsse","_runValue$responseAss","runValue","_runValue$overallAsse2","_runValue$overallAsse3","filterEval","_entry$currentRunValu2","searchQueryLower","currentInputsContainSearchQuery","inputsIdEqualsToSearchQuery","SampledInfoBadge","totalRowCount","sampledInfo","maxAllowedCount","evalResultsCount","logCountLoading","sampledCount","ANY_VALUE","AssessmentsFilterSelector","assessmentFilter","updateAssessmentFilter","removeAssessmentFilter","selectedValue","SegmentedControlGroup","event","SegmentedControlButton","GenAiTracesTable","oldEvalResults","compareToEvaluationResults","oldCompareToEvalResults","compareToRunLoading","defaultSortOption","initialSelectedColumns","fullTraceActions","exportToEvalAction","enableTableRowSelection","useEvaluationsSearchQuery","setAssessmentFilters","_searchParams$getAll","getAll","urlFilter","filterValueString","append","useAssessmentFilters","displayEvaluationResults","overallAssessmentCol","initialSort","getAssessmentFilter","clearFilters","hasActiveFilters","selectedEvaluationIds","totalEvaluationResults","LegacySkeleton","flexGrow","TableFilterLayout","actionDefaultBorderFocus","FilterIcon","numFilters","grey600","numFilteredEvals","useGenAiExperimentRunsForComparison","getQueryKey","requestError","runInfos","_run$info","_run$info2","run_uuid","artifactFile","then","allArtifactFiles","Assessments","Evaluations","Metrics","useGenAiTraceEvaluationArtifacts","artifacts","isAnyArtifactRetrievalEnabled","queriesResult","useQueries","queries","query","parsedAssessments","parsedEvaluations","parsedMetrics","mergedData","metricsByEvaluation","acc","evaluation_id","assessmentsByEvaluation","_entry$source$metadat","_entry$source","_entry$source2","_entry$source3","boolean_value","numeric_value","string_value","_entry$outputs","_entry$targets","allAssessmentsSorted","_assessment$rationale","_match$","_match$2","_match$3","trim","newRationale","perRetrievalChunkAssessments","responseAssessments","difference","inputs_id","mergeMetricsAndAssessmentsWithEvaluations","SEARCH_MLFLOW_TRACES_QUERY_KEY","invalidateQueries","useMlflowTracesTableMetadata","timeRange","filterByLoggedModelId","sqlWarehouseId","networkFilters","createMlflowSearchFilter","isInnerLoading","useSearchMlflowTracesInner","locations","mlflow_experiment","experiment_id","otherFilter","otherTraces","isOtherInnerLoading","otherError","evaluatedTraces","otherEvaluatedTraces","isOtherLoading","tableFilterOptions","sourceMap","renderValue","isEmpty","useSearchMlflowTraces","pageSize","limit","clientFilters","getNetworkAndClientFilters","createMlflowSearchOrderBy","isInnerFetching","refetchMlflowTraces","evalTraceComparisonEntries","filteredTraces","pageSizeProp","limitProp","rest","_x$mlflow_experiment","signal","pageToken","allTraces","tracesLimit","max_results","order_by","model_id","sql_warehouse_id","page_token","concat","next_page_token","timestampField","startTime","endTime","networkFilter","tagField","operator","executionField","statusField","TableFilterItemTypeahead","canSearchCustomValue","searchValue","setSearchValue","displayOptions","_query$data","optionValues","DialogComboboxTrigger","withInlineLabel","renderDisplayedValue","_item$renderValue","allowClear","DialogComboboxOptionListSearch","onSearch","DialogComboboxOptionListSelectItem","TableFilterItemValueInput","tableFilter","localValue","setLocalValue","onValueBlur","runsQuery","runNameQuery","_runsQuery$runInfos","_runsQuery$runInfos$f","versionsDataQuery","useExperimentVersionsQuery","requestBody","models","versionsQuery","_versionsDataQuery$da","loggedModel","stateOptions","_runNameQuery$data","_versionsQuery$data","sourceOptions","onBlur","FILTERABLE_INFO_COLUMNS","TableFilterItem","onDelete","assessmentKeyOptions","columnOptions","FormUI","htmlFor","EQUALS","SimpleSelect","contentProps","op","SimpleSelectOption","CloseSmallIcon","GenAiTracesTableFilter","setFilters","FilterForm","filterForm","useForm","defaultValues","useFilterForm","setValue","watch","localFilters","FormProvider","newFilter","newFilters","splice","getGroupLabel","EvaluationsOverviewColumnSelectorGrouped","toggleColumns","setSearch","sortedGroupedColumns","_col$group","filteredGroupedColumns","needle","out","cols","groupMatches","hits","OPTION_HEIGHT","controlledValue","setControlledValue","DialogComboboxSectionHeader","newSelection","gc","handleSelectAllInGroup","groupLabel","GenAITracesTableToolbar","countInfo","onSortChange","currentCount","GenAITracesTableBodyContainer","currentTraceInfoV3","compareToTraceInfoV3","handleAssessmentFilterToggle","useFilters","urlOperator","toHiddenColumnsFromVisibleColumns","visibleColumns","adjustHiddenColumns","hiddenColumns","toVisibleColumnsFromHiddenColumns","nonAssessmentColumns","columnsToRemove","assessmentColumnsToKeep","useGenAITracesUIStateColumns","defaultSelectedColumns","columnState","setColumnState","useLocalStorage","version","initialValue","defaultHidden","getDefaultHiddenColumns","columnOverrides","show","prev","_prev$columnOverrides","prevOverrides","nextOverrides","changed","newShow","useSelectedColumns","nextSelected","wantSelected","toToggle"],"sourceRoot":""}