{"version":3,"file":"static/js/2149.2b521c18.chunk.js","mappings":"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","sources":["experiment-tracking/components/run-page/hooks/useUnifiedRegisteredModelVersionsSummariesForRun.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageData.tsx","experiment-tracking/components/run-page/useRunDetailsPageDataLegacy.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDatasetButton.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails.tsx","shared/web-shared/metrics/UserActionErrorHandler.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelSourceBox.tsx","experiment-tracking/components/run-page/hooks/useGetRunQuery.tsx","shared/web-shared/browse/TimeAgo.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableDateCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelStatusIndicator.tsx","common/hooks/useSafeDeferredValue.ts"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport type { ReduxState } from '../../../../redux-types';\nimport { ModelRegistryRoutes } from '../../../../model-registry/routes';\nimport { shouldEnableGraphQLModelVersionsForRunDetails } from '../../../../common/utils/FeatureUtils';\nimport { UseGetRunQueryResponse } from './useGetRunQuery';\nimport type { LoggedModelProto } from '../../../types';\n\n/**\n * A unified model version summary that can be used to display model versions on the run page.\n */\nexport type RunPageModelVersionSummary = {\n  displayedName: string | null;\n  version: string | null;\n  link: string;\n  status: string | null;\n  source: string | null;\n  sourceLoggedModel?: LoggedModelProto;\n};\n\n/**\n * We're currently using multiple ways to get model versions on the run page,\n * we also differentiate between UC and workspace registry models.\n *\n * This hook is intended to unify the way we get model versions on the run page to be displayed in overview and register model dropdown.\n */\nexport const useUnifiedRegisteredModelVersionsSummariesForRun = ({\n  queryResult,\n  runUuid,\n}: {\n  runUuid: string;\n  queryResult?: UseGetRunQueryResponse;\n}): RunPageModelVersionSummary[] => {\n  const { registeredModels: registeredModelsFromStore } = useSelector(({ entities }: ReduxState) => ({\n    registeredModels: entities.modelVersionsByRunUuid[runUuid],\n  }));\n\n  if (shouldEnableGraphQLModelVersionsForRunDetails()) {\n    const result: RunPageModelVersionSummary[] = [];\n    if (queryResult?.data && 'modelVersions' in queryResult.data) {\n      queryResult.data?.modelVersions?.forEach((modelVersion) => {\n        result.push({\n          displayedName: modelVersion.name,\n          version: modelVersion.version,\n          link:\n            modelVersion.name && modelVersion.version\n              ? ModelRegistryRoutes.getModelVersionPageRoute(modelVersion.name, modelVersion.version)\n              : '',\n          status: modelVersion.status,\n          source: modelVersion.source,\n        });\n      });\n    }\n    return result;\n  }\n\n  if (registeredModelsFromStore) {\n    return registeredModelsFromStore.map((modelVersion) => {\n      const name = modelVersion.name;\n      const link = ModelRegistryRoutes.getModelVersionPageRoute(name, modelVersion.version);\n      return {\n        displayedName: modelVersion.name,\n        version: modelVersion.version,\n        link,\n        status: modelVersion.status,\n        source: modelVersion.source,\n      };\n    });\n  }\n\n  return [];\n};\n","import { isEmpty, keyBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { useRunDetailsPageDataLegacy } from '../useRunDetailsPageDataLegacy';\nimport {\n  type UseGetRunQueryResponseExperiment,\n  useGetRunQuery,\n  UseGetRunQueryDataApiError,\n  UseGetRunQueryResponseDataMetrics,\n  UseGetRunQueryResponseDatasetInputs,\n  type UseGetRunQueryResponseInputs,\n  type UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './useGetRunQuery';\nimport {\n  RunDatasetWithTags,\n  type ExperimentEntity,\n  type MetricEntitiesByName,\n  type MetricEntity,\n  type RunInfoEntity,\n} from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport {\n  shouldEnableGraphQLModelVersionsForRunDetails,\n  shouldEnableGraphQLRunDetailsPage,\n} from '../../../../common/utils/FeatureUtils';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { useDispatch } from 'react-redux';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport { pickBy } from 'lodash';\nimport {\n  type RunPageModelVersionSummary,\n  useUnifiedRegisteredModelVersionsSummariesForRun,\n} from './useUnifiedRegisteredModelVersionsSummariesForRun';\n\n// Internal util: transforms an array of objects into a keyed object by the `key` field\nconst transformToKeyedObject = <Output, Input = any>(inputArray: Input[]) =>\n  // TODO: fix this type error\n  // @ts-expect-error: Conversion of type 'Dictionary<Input>' to type 'Record<string, Output>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\n  keyBy(inputArray, 'key') as Record<string, Output>;\n\n// Internal util: transforms an array of metric values into an array of MetricEntity objects\n// GraphQL uses strings for steps and timestamp so we cast them to numbers\nconst transformMetricValues = (inputArray: UseGetRunQueryResponseDataMetrics): MetricEntity[] =>\n  inputArray\n    .filter(({ key, value, step, timestamp }) => key !== null && value !== null && step !== null && timestamp !== null)\n    .map(({ key, value, step, timestamp }: any) => ({\n      key,\n      value,\n      step: Number(step),\n      timestamp: Number(timestamp),\n    }));\n\n// Internal util: transforms an array of dataset inputs into an array of RunDatasetWithTags objects\nexport const transformDatasets = (inputArray?: UseGetRunQueryResponseDatasetInputs): RunDatasetWithTags[] | undefined =>\n  inputArray?.map((datasetInput) => ({\n    dataset: {\n      digest: datasetInput.dataset?.digest ?? '',\n      name: datasetInput.dataset?.name ?? '',\n      profile: datasetInput.dataset?.profile ?? '',\n      schema: datasetInput.dataset?.schema ?? '',\n      source: datasetInput.dataset?.source ?? '',\n      sourceType: datasetInput.dataset?.sourceType ?? '',\n    },\n    tags:\n      datasetInput.tags\n        ?.map((tag) => ({\n          key: tag.key ?? '',\n          value: tag.value ?? '',\n        }))\n        .filter((tag) => !isEmpty(tag.key)) ?? [],\n  }));\n\ninterface UseRunDetailsPageDataResult {\n  experiment?: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  error: Error | ErrorWrapper | undefined | ApolloError;\n\n  latestMetrics: MetricEntitiesByName;\n  loading: boolean;\n  params: Record<string, KeyValueEntity>;\n  refetchRun: any;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  datasets?: RunDatasetWithTags[];\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n\n  // Only present in legacy implementation\n  runFetchError?: Error | ErrorWrapper | undefined;\n  experimentFetchError?: Error | ErrorWrapper | undefined;\n\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n\n  // Only present in graphQL implementation\n  apiError?: UseGetRunQueryDataApiError;\n}\n\n/**\n * An updated version of the `useRunDetailsPageData` hook that either uses the REST API-based implementation\n * or the GraphQL-based implementation to fetch run details, based on the `shouldEnableGraphQLRunDetailsPage` flag.\n */\nexport const useRunDetailsPageData = ({\n  runUuid,\n  experimentId,\n}: {\n  runUuid: string;\n  experimentId: string;\n}): UseRunDetailsPageDataResult => {\n  const usingGraphQL = shouldEnableGraphQLRunDetailsPage();\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  // If GraphQL flag is enabled, use the graphQL query to fetch the run data.\n  // We can safely disable the eslint rule since feature flag evaluation is stable\n  /* eslint-disable react-hooks/rules-of-hooks */\n  if (usingGraphQL) {\n    const graphQLQuery = () =>\n      useGetRunQuery({\n        runUuid,\n      });\n\n    const detailsPageGraphqlResponse = graphQLQuery();\n\n    // If model versions are colocated in the GraphQL response, we don't need to make an additional API call\n    useEffect(() => {\n      if (shouldEnableGraphQLModelVersionsForRunDetails()) {\n        return;\n      }\n      dispatch(searchModelVersionsApi({ run_id: runUuid }));\n    }, [dispatch, runUuid]);\n\n    const { latestMetrics, tags, params, datasets } = useMemo(() => {\n      // Filter out tags, metrics, and params that are entirely whitespace\n      return {\n        latestMetrics: pickBy(\n          transformToKeyedObject<MetricEntity>(\n            transformMetricValues(detailsPageGraphqlResponse.data?.data?.metrics ?? []),\n          ),\n          (metric) => metric.key.trim().length > 0,\n        ),\n        tags: pickBy(\n          transformToKeyedObject<KeyValueEntity>(detailsPageGraphqlResponse.data?.data?.tags ?? []),\n          (tag) => tag.key.trim().length > 0,\n        ),\n        params: pickBy(\n          transformToKeyedObject<KeyValueEntity>(detailsPageGraphqlResponse.data?.data?.params ?? []),\n          (param) => param.key.trim().length > 0,\n        ),\n        datasets: transformDatasets(detailsPageGraphqlResponse.data?.inputs?.datasetInputs),\n      };\n    }, [detailsPageGraphqlResponse.data]);\n\n    const registeredModelVersionSummaries = useUnifiedRegisteredModelVersionsSummariesForRun({\n      runUuid,\n      queryResult: detailsPageGraphqlResponse,\n    });\n\n    return {\n      runInfo: detailsPageGraphqlResponse.data?.info ?? undefined,\n      experiment: detailsPageGraphqlResponse.data?.experiment ?? undefined,\n      loading: detailsPageGraphqlResponse.loading,\n      error: detailsPageGraphqlResponse.apolloError,\n      apiError: detailsPageGraphqlResponse.apiError,\n      refetchRun: detailsPageGraphqlResponse.refetchRun,\n      runInputs: detailsPageGraphqlResponse.data?.inputs,\n      runOutputs: detailsPageGraphqlResponse.data?.outputs,\n      registeredModelVersionSummaries,\n      datasets,\n      latestMetrics,\n      tags,\n      params,\n    };\n  }\n\n  // If GraphQL flag is disabled, use the legacy implementation to fetch the run data.\n  const detailsPageResponse = useRunDetailsPageDataLegacy(runUuid, experimentId);\n  const error = detailsPageResponse.errors.runFetchError || detailsPageResponse.errors.experimentFetchError;\n\n  const registeredModelVersionSummaries = useUnifiedRegisteredModelVersionsSummariesForRun({\n    runUuid,\n  });\n\n  return {\n    runInfo: detailsPageResponse.data?.runInfo,\n    latestMetrics: detailsPageResponse.data?.latestMetrics,\n    tags: detailsPageResponse.data?.tags,\n    experiment: detailsPageResponse.data?.experiment,\n    params: detailsPageResponse.data?.params,\n    datasets: detailsPageResponse.data?.datasets,\n    loading: detailsPageResponse.loading,\n    error,\n    runFetchError: detailsPageResponse.errors.runFetchError,\n    experimentFetchError: detailsPageResponse.errors.experimentFetchError,\n    refetchRun: detailsPageResponse.refetchRun,\n    registeredModelVersionSummaries,\n  };\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../redux-types';\nimport { getExperimentApi, getRunApi } from '../../actions';\nimport { searchModelVersionsApi } from '../../../model-registry/actions';\nimport { pickBy } from 'lodash';\nimport Utils from '../../../common/utils/Utils';\n\n/**\n * Hook fetching data for the run page: both run and experiment entities.\n * The initial fetch action is omitted if entities are already in the store.\n */\nexport const useRunDetailsPageDataLegacy = (runUuid: string, experimentId: string) => {\n  const [runRequestId, setRunRequestId] = useState('');\n  const [experimentRequestId, setExperimentRequestId] = useState('');\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  // Get the necessary data from the store\n\n  const { runInfo, tags, latestMetrics, experiment, params, datasets } = useSelector((state: ReduxState) => ({\n    runInfo: state.entities.runInfosByUuid[runUuid],\n    // Filter out tags, metrics, and params that are entirely whitespace\n    tags: pickBy(state.entities.tagsByRunUuid[runUuid], (tag) => tag.key.trim().length > 0),\n    latestMetrics: pickBy(state.entities.latestMetricsByRunUuid[runUuid], (metric) => metric.key.trim().length > 0),\n    params: pickBy(state.entities.paramsByRunUuid[runUuid], (param) => param.key.trim().length > 0),\n    experiment: state.entities.experimentsById[experimentId],\n    datasets: state.entities.runDatasetsByUuid[runUuid],\n  }));\n\n  const fetchRun = useCallback(() => {\n    const action = getRunApi(runUuid);\n    setRunRequestId(action.meta.id);\n    return dispatch(action);\n  }, [dispatch, runUuid]);\n\n  const fetchExperiment = useCallback(() => {\n    const action = getExperimentApi(experimentId);\n    setExperimentRequestId(action.meta.id);\n    return dispatch(action);\n  }, [dispatch, experimentId]);\n\n  const fetchModelVersions = useCallback(() => {\n    dispatch(searchModelVersionsApi({ run_id: runUuid }));\n  }, [dispatch, runUuid]);\n\n  // Do the initial run & experiment fetch only if it's not in the store already\n  useEffect(() => {\n    if (!runInfo) {\n      fetchRun().catch((e) => Utils.logErrorAndNotifyUser(e));\n    }\n    fetchModelVersions();\n  }, [runInfo, fetchRun, fetchModelVersions]);\n\n  useEffect(() => {\n    if (!experiment) {\n      fetchExperiment().catch((e) => Utils.logErrorAndNotifyUser(e));\n    }\n  }, [experiment, fetchExperiment]);\n\n  // Check the \"apis\" store for the requests status\n  const { loading: runLoading, error: runFetchError } = useSelector((state: ReduxState) => ({\n    loading: !runRequestId || Boolean(state.apis?.[runRequestId]?.active),\n    error: state.apis?.[runRequestId]?.error,\n  }));\n\n  const { loading: experimentLoading, error: experimentFetchError } = useSelector((state: ReduxState) => ({\n    loading: !runRequestId || Boolean(state.apis?.[experimentRequestId]?.active),\n    error: state.apis?.[experimentRequestId]?.error,\n  }));\n\n  const loading = runLoading || experimentLoading;\n\n  return {\n    loading,\n    data: {\n      runInfo,\n      tags,\n      params,\n      latestMetrics,\n      experiment,\n      datasets,\n    },\n    refetchRun: fetchRun,\n    errors: { runFetchError, experimentFetchError },\n  };\n};\n","import { Button, Spinner, TableIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { useExperimentLoggedModelOpenDatasetDetails } from './hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { useUserActionErrorHandler } from '@databricks/web-shared/metrics';\n\nexport const ExperimentLoggedModelDatasetButton = ({\n  datasetName,\n  datasetDigest,\n  runId,\n}: {\n  datasetName: string;\n  datasetDigest: string;\n  runId: string | null;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [loadingDatasetDetails, setLoadingDatasetDetails] = useState(false);\n  const { onDatasetClicked } = useExperimentLoggedModelOpenDatasetDetails();\n  const { handleError } = useUserActionErrorHandler();\n\n  const handleDatasetClick = (datasetName: string, datasetDigest: string, runId: string | null) => {\n    if (runId) {\n      setLoadingDatasetDetails(true);\n      onDatasetClicked?.({ datasetName, datasetDigest, runId })\n        .catch((error) => {\n          handleError(error);\n        })\n        .finally(() => setLoadingDatasetDetails(false));\n    }\n  };\n\n  return (\n    <Button\n      type=\"link\"\n      icon={loadingDatasetDetails ? <Spinner size=\"small\" css={{ marginRight: theme.spacing.sm }} /> : <TableIcon />}\n      key={[datasetName, datasetDigest].join('.')}\n      componentId=\"mlflow.logged_model.dataset\"\n      onClick={() => handleDatasetClick(datasetName, datasetDigest, runId)}\n    >\n      {datasetName} (#{datasetDigest})\n    </Button>\n  );\n};\n","import { createContext, useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport {\n  type DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { useLazyGetRunQuery } from '../../run-page/hooks/useGetRunQuery';\nimport { transformDatasets as transformGraphQLResponseDatasets } from '../../run-page/hooks/useRunDetailsPageData';\nimport { keyBy } from 'lodash';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { ErrorLogType, ErrorName, PredefinedError } from '@databricks/web-shared/errors';\nimport { ErrorCodes } from '../../../../common/constants';\nimport { FormattedMessage } from 'react-intl';\n\nclass DatasetRunNotFoundError extends PredefinedError {\n  errorLogType = ErrorLogType.UnexpectedSystemStateError;\n  errorName = ErrorName.DatasetRunNotFoundError;\n  isUserError = true;\n  displayMessage = (\n    <FormattedMessage\n      defaultMessage=\"The run containing the dataset could not be found.\"\n      description=\"Error message displayed when the run for the dataset is not found\"\n    />\n  );\n}\n\ntype ExperimentLoggedModelOpenDatasetDetailsContextType = {\n  onDatasetClicked: (params: { datasetName: string; datasetDigest: string; runId: string }) => Promise<void>;\n};\n\nexport const ExperimentLoggedModelOpenDatasetDetailsContext =\n  createContext<ExperimentLoggedModelOpenDatasetDetailsContextType>({\n    onDatasetClicked: () => Promise.resolve(),\n  });\n\n/**\n * Creates a context provider that allows opening the dataset details drawer from the logged model page.\n * Uses the `useGetRunQuery` GraphQL to fetch the run info for the dataset.\n */\nexport const ExperimentLoggedModelOpenDatasetDetailsContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState<boolean>(false);\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType>();\n\n  const [getRunInfo] = useLazyGetRunQuery();\n\n  // Store the current promise's reject function\n  const rejectCurrentPromiseFn = useRef<((reason?: any) => void) | null>(null);\n\n  const onDatasetClicked = useCallback(\n    async (params: { datasetName: string; datasetDigest: string; runId: string }) =>\n      new Promise<void>((resolve, reject) => {\n        // If there's a promise in flight, reject it to remove previous loading state\n        rejectCurrentPromiseFn.current?.();\n\n        return getRunInfo({\n          onError: reject,\n          onCompleted(data) {\n            // If there's an API error in the response, reject the promise\n            if (data.mlflowGetRun?.apiError) {\n              // Special case: if the run is not found, show a different error message\n              const error =\n                data.mlflowGetRun.apiError.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n                  ? new DatasetRunNotFoundError()\n                  : data.mlflowGetRun.apiError;\n              reject(error);\n              return;\n            }\n            // Transform the datasets into a format that can be used by the drawer UI\n            const datasets = transformGraphQLResponseDatasets(data.mlflowGetRun?.run?.inputs?.datasetInputs);\n\n            // Ensure that the datasets and run info are present\n            if (!datasets || !data.mlflowGetRun?.run?.info) {\n              resolve();\n              return;\n            }\n\n            // Find the dataset that matches the dataset name and digest\n            const matchingDataset = datasets?.find(\n              (datasetInput) =>\n                datasetInput.dataset?.digest === params.datasetDigest &&\n                datasetInput.dataset.name === params.datasetName,\n            );\n\n            // If the dataset is not found, return early\n            if (!matchingDataset) {\n              resolve();\n              return;\n            }\n            const { info, data: runData } = data.mlflowGetRun.run;\n\n            // Convert tags into a dictionary for easier access\n            const tagsDictionary = keyBy(runData?.tags?.filter((tag) => tag.key && tag.value) ?? [], 'key') as Record<\n              string,\n              KeyValueEntity\n            >;\n\n            // Open the drawer using the dataset and run info\n            setIsDrawerOpen(true);\n            setSelectedDatasetWithRun({\n              datasetWithTags: {\n                dataset: matchingDataset.dataset,\n                tags: matchingDataset.tags,\n              },\n              runData: {\n                datasets: datasets,\n                runUuid: info.runUuid ?? '',\n                experimentId: info.experimentId ?? '',\n                runName: info.runName ?? '',\n                tags: tagsDictionary,\n              },\n            });\n\n            // Resolve the promise\n            resolve();\n            rejectCurrentPromiseFn.current = null;\n          },\n          variables: { data: { runId: params.runId } },\n        });\n      }),\n    [getRunInfo],\n  );\n\n  const contextValue = useMemo(() => ({ onDatasetClicked }), [onDatasetClicked]);\n\n  return (\n    <ExperimentLoggedModelOpenDatasetDetailsContext.Provider value={contextValue}>\n      {children}\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setIsOpen={setIsDrawerOpen}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </ExperimentLoggedModelOpenDatasetDetailsContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelOpenDatasetDetails = () =>\n  useContext(ExperimentLoggedModelOpenDatasetDetailsContext);\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  type PropsWithChildren,\n  type SyntheticEvent,\n} from 'react';\n\nimport { matchPredefinedError } from '../errors';\nimport type { HandleableError, PredefinedError } from '../errors';\n\nexport type UserActionError = PredefinedError | null;\n\ntype UserActionErrorHandlerContextProps = {\n  currentUserActionError: UserActionError;\n  handleError: (error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => void;\n  handlePromise: (promise: Promise<any>) => void;\n  clearUserActionError: () => void;\n};\n\nconst UserActionErrorHandlerContext = createContext<UserActionErrorHandlerContextProps>({\n  currentUserActionError: null,\n  handleError: () => {},\n  handlePromise: () => {},\n  clearUserActionError: () => {},\n});\n\ntype UserActionErrorHandlerProps = {\n  errorFilter?: (error: any) => boolean;\n};\n\nexport const UserActionErrorHandler = ({ children, errorFilter }: PropsWithChildren<UserActionErrorHandlerProps>) => {\n  const [currentUserActionError, setCurrentUserActionError] = useState<UserActionError>(null);\n\n  const handleError = useCallback(\n    (error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => {\n      if (!errorFilter?.(error)) {\n        const predefinedError = matchPredefinedError(error);\n\n        setCurrentUserActionError(predefinedError);\n\n        if (onErrorCallback) {\n          onErrorCallback(predefinedError);\n        }\n      }\n    },\n    [setCurrentUserActionError, errorFilter],\n  );\n\n  const handlePromise = useCallback(\n    (promise: Promise<any>) => {\n      promise.catch((error: HandleableError) => {\n        handleError(error);\n      });\n    },\n    [handleError],\n  );\n\n  const clearUserActionError = useCallback(() => {\n    setCurrentUserActionError(null);\n  }, [setCurrentUserActionError]);\n\n  return (\n    <UserActionErrorHandlerContext.Provider\n      value={useMemo(\n        () => ({\n          currentUserActionError,\n          handleError,\n          handlePromise,\n          clearUserActionError,\n        }),\n        [clearUserActionError, currentUserActionError, handleError, handlePromise],\n      )}\n    >\n      {children}\n    </UserActionErrorHandlerContext.Provider>\n  );\n};\n\nexport type UserErrorActionHandlerHook = {\n  currentUserActionError: UserActionError;\n  handleError: (error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => void;\n  /** @deprecated Use handleError instead, or get permission from #product-analytics to use */\n  handleErrorWithEvent: (\n    event: SyntheticEvent | Event,\n    error: HandleableError,\n    onErrorCallback?: (err: UserActionError) => void,\n  ) => void;\n  handlePromise: (promise: Promise<any>) => void;\n  clearUserActionError: () => void;\n};\n\nexport const useUserActionErrorHandler = (): UserErrorActionHandlerHook => {\n  const { currentUserActionError, handleError, handlePromise, clearUserActionError } =\n    useContext(UserActionErrorHandlerContext);\n\n  const handleErrorWithEventImpl = useCallback(\n    (event: SyntheticEvent | Event, error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => {\n      handleError(error, onErrorCallback);\n    },\n    [handleError],\n  );\n\n  return useMemo(\n    () => ({\n      currentUserActionError,\n      handleError,\n      handleErrorWithEvent: handleErrorWithEventImpl,\n      handlePromise,\n      clearUserActionError,\n    }),\n    [clearUserActionError, handleError, handlePromise, currentUserActionError, handleErrorWithEventImpl],\n  );\n};\n\nexport function withUserActionErrorHandler<P>(\n  Component: React.ComponentType<P>,\n  errorFilter?: (error: any) => boolean,\n): React.ComponentType<P> {\n  return function UserActionErrorHandlerWrapper(props: P) {\n    return (\n      <UserActionErrorHandler errorFilter={errorFilter}>\n        {/* @ts-expect-error Generics don't play well with WithConditionalCSSProp type coming @emotion/react jsx typing to validate css= prop values typing. More details here: emotion-js/emotion#2169 */}\n        <Component {...props} />\n      </UserActionErrorHandler>\n    );\n  };\n}\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n  Popover,\n} from '@databricks/design-system';\nimport Utils from '../../../common/utils/Utils';\nimport type { LoggedModelKeyValueProto, LoggedModelProto } from '../../types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../ExperimentSourceTypeIcon';\nimport { useMemo } from 'react';\nimport { useSearchParams } from '../../../common/utils/RoutingUtils';\n\nexport const ExperimentLoggedModelSourceBox = ({\n  loggedModel,\n  displayDetails,\n  className,\n}: {\n  loggedModel: LoggedModelProto;\n  /**\n   * Set to true to display the branch name and commit hash.\n   */\n  displayDetails?: boolean;\n  className?: string;\n}) => {\n  const [searchParams] = useSearchParams();\n\n  const tagsByKey = useMemo(\n    () =>\n      loggedModel?.info?.tags?.reduce((acc, tag) => {\n        if (!tag.key) {\n          return acc;\n        }\n        acc[tag.key] = tag;\n        return acc;\n      }, {} as Record<string, LoggedModelKeyValueProto>) ?? {},\n    [loggedModel?.info?.tags],\n  );\n\n  const branchName = tagsByKey?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tagsByKey?.[Utils.gitCommitTag]?.value;\n\n  const runSource = useMemo(() => {\n    try {\n      return Utils.renderSource(tagsByKey, searchParams.toString(), undefined, branchName);\n    } catch (e) {\n      return undefined;\n    }\n  }, [tagsByKey, searchParams, branchName]);\n\n  const sourceTypeValue = tagsByKey[Utils.sourceTypeTag]?.value;\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: displayDetails ? 'wrap' : undefined,\n      }}\n      className={className}\n    >\n      {sourceTypeValue && (\n        <ExperimentSourceTypeIcon\n          sourceType={sourceTypeValue}\n          css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n        />\n      )}\n      {runSource}{' '}\n      {displayDetails && branchName && (\n        <Tooltip componentId=\"mlflow.logged_model.details.source.branch_tooltip\" content={branchName}>\n          <Tag componentId=\"mlflow.logged_model.details.source.branch\" css={{ marginRight: 0 }}>\n            <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </Tooltip>\n      )}\n      {displayDetails && commitHash && (\n        <Popover.Root componentId=\"mlflow.logged_model.details.source.commit_hash_popover\">\n          <Popover.Trigger asChild>\n            <Tag\n              componentId=\"mlflow.logged_model.details.source.commit_hash\"\n              css={{ marginRight: 0, '&>div': { paddingRight: 0 } }}\n            >\n              <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap', alignContent: 'center' }}>\n                <GitCommitIcon />\n                {commitHash.slice(0, 7)}\n              </div>\n            </Tag>\n          </Popover.Trigger>\n          <Popover.Content align=\"start\">\n            <Popover.Arrow />\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton showLabel={false} size=\"small\" type=\"tertiary\" copyText={commitHash} icon={<CopyIcon />} />\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import { type ApolloError, type ApolloQueryResult, gql } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport type { GetRun, GetRunVariables } from '../../../../graphql/__generated__/graphql';\nimport { useQuery, useLazyQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\nconst GET_RUN_QUERY = gql`\n  query GetRun($data: MlflowGetRunInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetRun(input: $data) {\n      apiError {\n        helpUrl\n        code\n        message\n      }\n      run {\n        info {\n          runName\n          status\n          runUuid\n          experimentId\n          artifactUri\n          endTime\n          lifecycleStage\n          startTime\n          userId\n        }\n        experiment {\n          experimentId\n          name\n          tags {\n            key\n            value\n          }\n          artifactLocation\n          lifecycleStage\n          lastUpdateTime\n        }\n        modelVersions {\n          status\n          version\n          name\n          source\n        }\n        data {\n          metrics {\n            key\n            value\n            step\n            timestamp\n          }\n          params {\n            key\n            value\n          }\n          tags {\n            key\n            value\n          }\n        }\n        inputs {\n          datasetInputs {\n            dataset {\n              digest\n              name\n              profile\n              schema\n              source\n              sourceType\n            }\n            tags {\n              key\n              value\n            }\n          }\n          modelInputs {\n            modelId\n          }\n        }\n        outputs {\n          modelOutputs {\n            modelId\n            step\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetRunQueryResponseRunInfo = NonNullable<NonNullable<UseGetRunQueryDataResponse>['info']>;\nexport type UseGetRunQueryResponseDatasetInputs = NonNullable<\n  NonNullable<UseGetRunQueryDataResponse>['inputs']\n>['datasetInputs'];\nexport type UseGetRunQueryResponseInputs = NonNullable<UseGetRunQueryDataResponse>['inputs'];\nexport type UseGetRunQueryResponseOutputs = NonNullable<UseGetRunQueryDataResponse>['outputs'];\nexport type UseGetRunQueryResponseExperiment = NonNullable<NonNullable<UseGetRunQueryDataResponse>['experiment']>;\nexport type UseGetRunQueryResponseDataMetrics = NonNullable<\n  NonNullable<NonNullable<UseGetRunQueryDataResponse>['data']>['metrics']\n>;\n\nexport type UseGetRunQueryDataResponse = NonNullable<GetRun['mlflowGetRun']>['run'];\nexport type UseGetRunQueryDataApiError = NonNullable<GetRun['mlflowGetRun']>['apiError'];\nexport type UseGetRunQueryResponse = {\n  data?: UseGetRunQueryDataResponse;\n  loading: boolean;\n  apolloError?: ApolloError;\n  apiError?: UseGetRunQueryDataApiError;\n  refetchRun: () => Promise<ApolloQueryResult<GetRun>>;\n};\n\nexport const useGetRunQuery = ({\n  runUuid,\n  disabled = false,\n}: {\n  runUuid: string;\n  disabled?: boolean;\n}): UseGetRunQueryResponse => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<GetRun, GetRunVariables>(GET_RUN_QUERY, {\n    variables: {\n      data: {\n        runId: runUuid,\n      },\n    },\n    skip: disabled,\n  });\n\n  return {\n    loading,\n    data: data?.mlflowGetRun?.run,\n    refetchRun: refetch,\n    apolloError,\n    apiError: data?.mlflowGetRun?.apiError,\n  } as const;\n};\n\nexport const useLazyGetRunQuery = () => useLazyQuery<GetRun, GetRunVariables>(GET_RUN_QUERY);\n","import React from 'react';\n\nimport { Tooltip } from '@databricks/design-system';\nimport type { IntlShape } from 'react-intl';\nimport { useIntl } from 'react-intl';\n\n// Time intervals in seconds\nconst SECOND = 1;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst MONTH = 30 * DAY;\nconst YEAR = 365 * DAY;\n\ntype Interval = {\n  seconds: number;\n  timeAgoMessage: (count: number) => string;\n};\n\nconst getIntervals = (intl: IntlShape): Interval[] => [\n  {\n    seconds: YEAR,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 year} other {# years}} ago',\n          description: 'Time duration in years',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: MONTH,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 month} other {# months}} ago',\n          description: 'Time duration in months',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: DAY,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 day} other {# days}} ago',\n          description: 'Time duration in days',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: HOUR,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 hour} other {# hours}} ago',\n          description: 'Time duration in hours',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: MINUTE,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 minute} other {# minutes}} ago',\n          description: 'Time duration in minutes',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: SECOND,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 second} other {# seconds}} ago',\n          description: 'Time duration in seconds',\n        },\n        { count },\n      ),\n  },\n];\n\nexport interface TimeAgoProps {\n  date: Date;\n  tooltipFormatOptions?: DateTooltipOptionsType;\n}\n\ntype DateTooltipOptionsType = Intl.DateTimeFormatOptions;\n\nconst DateTooltipOptions: DateTooltipOptionsType = {\n  timeZoneName: 'short',\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nexport const getTimeAgoStrings = ({\n  date,\n  intl,\n  tooltipFormatOptions = DateTooltipOptions,\n}: TimeAgoProps & { intl: IntlShape }): { displayText: string; tooltipTitle: string } => {\n  const now = new Date();\n  const seconds = Math.round((now.getTime() - date.getTime()) / 1000);\n\n  const locale = navigator.language || 'en-US';\n  let tooltipTitle = '';\n  try {\n    tooltipTitle = Intl.DateTimeFormat(locale, tooltipFormatOptions).format(date);\n  } catch (e) {\n    // ES-1357574 Do nothing; this is not a critical path, let's just not throw an error\n  }\n\n  for (const interval of getIntervals(intl)) {\n    const count = Math.floor(seconds / interval.seconds);\n    if (count >= 1) {\n      return { displayText: interval.timeAgoMessage(count), tooltipTitle };\n    }\n  }\n\n  return {\n    displayText: intl.formatMessage({\n      defaultMessage: 'just now',\n      description: 'Indicates a time duration that just passed',\n    }),\n    tooltipTitle,\n  };\n};\n\nexport const TimeAgo: React.FC<TimeAgoProps> = ({ date, tooltipFormatOptions = DateTooltipOptions }) => {\n  const intl = useIntl();\n  const { displayText, tooltipTitle } = getTimeAgoStrings({ date, intl, tooltipFormatOptions });\n  return (\n    <Tooltip componentId=\"web-shared.time-ago\" content={tooltipTitle}>\n      <span>{displayText}</span>\n    </Tooltip>\n  );\n};\n","import React from 'react';\n\nimport { TimeAgo } from '@databricks/web-shared/browse';\n\nexport const ExperimentLoggedModelTableDateCell = ({ value }: { value?: string | number | null }) => {\n  const date = new Date(Number(value));\n\n  if (isNaN(date as any)) {\n    return null;\n  }\n\n  return <TimeAgo date={date} />;\n};\n","import {\n  CheckCircleIcon,\n  ClockIcon,\n  Tag,\n  Typography,\n  useDesignSystemTheme,\n  XCircleIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { LoggedModelStatusProtoEnum, type LoggedModelProto } from '../../types';\n\nconst LoggedModelStatusIcon = ({ status }: { status: LoggedModelStatusProtoEnum }) => {\n  if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_READY) {\n    return <CheckCircleIcon color=\"success\" />;\n  }\n\n  if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_UPLOAD_FAILED) {\n    return <XCircleIcon color=\"danger\" />;\n  }\n\n  if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_PENDING) {\n    return <ClockIcon color=\"warning\" />;\n  }\n\n  return null;\n};\n\nexport const ExperimentLoggedModelStatusIndicator = ({ data }: { data: LoggedModelProto }) => {\n  const { theme } = useDesignSystemTheme();\n  const status = data.info?.status ?? LoggedModelStatusProtoEnum.LOGGED_MODEL_STATUS_UNSPECIFIED;\n\n  const getTagColor = () => {\n    if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_READY) {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_UPLOAD_FAILED) {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_PENDING) {\n      return theme.isDarkMode ? theme.colors.yellow800 : theme.colors.yellow100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_READY) {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage defaultMessage=\"Ready\" description=\"Label for ready state of a experiment logged model\" />\n        </Typography.Text>\n      );\n    }\n\n    if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_UPLOAD_FAILED) {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Label for upload failed state of a experiment logged model\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_PENDING) {\n      return (\n        <Typography.Text color=\"warning\">\n          <FormattedMessage\n            defaultMessage=\"Pending\"\n            description=\"Label for pending state of a experiment logged model\"\n          />\n        </Typography.Text>\n      );\n    }\n\n    return status;\n  };\n\n  if (status === LoggedModelStatusProtoEnum.LOGGED_MODEL_STATUS_UNSPECIFIED) {\n    return null;\n  }\n\n  return (\n    <Tag componentId=\"mlflow.logged_model.status\" css={{ backgroundColor: getTagColor() }}>\n      {status && <LoggedModelStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { identity, isFunction } from 'lodash';\nimport React from 'react';\n\n/**\n * A safe version of `useDeferredValue` that falls back to identity (A->A) if `useDeferredValue` is not supported\n * by current React version.\n */\nexport const useSafeDeferredValue: <T>(value: T) => T =\n  'useDeferredValue' in React && isFunction(React.useDeferredValue) ? React.useDeferredValue : identity;\n"],"names":["useUnifiedRegisteredModelVersionsSummariesForRun","queryResult","runUuid","registeredModels","registeredModelsFromStore","useSelector","entities","modelVersionsByRunUuid","shouldEnableGraphQLModelVersionsForRunDetails","result","_queryResult$data","_queryResult$data$mod","data","modelVersions","forEach","modelVersion","push","displayedName","name","version","link","ModelRegistryRoutes","getModelVersionPageRoute","status","source","map","transformToKeyedObject","inputArray","keyBy","transformDatasets","datasetInput","_datasetInput$dataset","_datasetInput$dataset2","_datasetInput$dataset3","_datasetInput$dataset4","_datasetInput$dataset5","_datasetInput$dataset6","_datasetInput$dataset7","_datasetInput$dataset8","_datasetInput$dataset9","_datasetInput$dataset0","_datasetInput$dataset1","_datasetInput$dataset10","_datasetInput$tags$ma","_datasetInput$tags","dataset","digest","profile","schema","sourceType","tags","tag","_tag$key","_tag$value","key","value","filter","isEmpty","useRunDetailsPageData","experimentId","_detailsPageResponse$","_detailsPageResponse$2","_detailsPageResponse$3","_detailsPageResponse$4","_detailsPageResponse$5","_detailsPageResponse$6","usingGraphQL","shouldEnableGraphQLRunDetailsPage","dispatch","useDispatch","_detailsPageGraphqlRe10","_detailsPageGraphqlRe11","_detailsPageGraphqlRe12","_detailsPageGraphqlRe13","_detailsPageGraphqlRe14","_detailsPageGraphqlRe15","detailsPageGraphqlResponse","graphQLQuery","useGetRunQuery","useEffect","searchModelVersionsApi","run_id","latestMetrics","params","datasets","useMemo","_detailsPageGraphqlRe","_detailsPageGraphqlRe2","_detailsPageGraphqlRe3","_detailsPageGraphqlRe4","_detailsPageGraphqlRe5","_detailsPageGraphqlRe6","_detailsPageGraphqlRe7","_detailsPageGraphqlRe8","_detailsPageGraphqlRe9","_detailsPageGraphqlRe0","_detailsPageGraphqlRe1","pickBy","metrics","step","timestamp","Number","metric","trim","length","param","inputs","datasetInputs","registeredModelVersionSummaries","runInfo","info","undefined","experiment","loading","error","apolloError","apiError","refetchRun","runInputs","runOutputs","outputs","detailsPageResponse","useRunDetailsPageDataLegacy","runRequestId","setRunRequestId","useState","experimentRequestId","setExperimentRequestId","state","runInfosByUuid","tagsByRunUuid","latestMetricsByRunUuid","paramsByRunUuid","experimentsById","runDatasetsByUuid","fetchRun","useCallback","action","getRunApi","meta","id","fetchExperiment","getExperimentApi","fetchModelVersions","catch","e","Utils","logErrorAndNotifyUser","runLoading","runFetchError","_state$apis","_state$apis$runReques","_state$apis2","_state$apis2$runReque","Boolean","apis","active","experimentLoading","experimentFetchError","_state$apis3","_state$apis3$experime","_state$apis4","_state$apis4$experime","errors","ExperimentLoggedModelDatasetButton","datasetName","datasetDigest","runId","theme","useDesignSystemTheme","loadingDatasetDetails","setLoadingDatasetDetails","onDatasetClicked","useExperimentLoggedModelOpenDatasetDetails","handleError","useUserActionErrorHandler","_jsxs","Button","type","icon","_jsx","Spinner","size","css","_css","marginRight","spacing","sm","TableIcon","componentId","onClick","handleDatasetClick","finally","children","join","DatasetRunNotFoundError","PredefinedError","constructor","args","errorLogType","ErrorLogType","UnexpectedSystemStateError","errorName","ErrorName","isUserError","displayMessage","FormattedMessage","defaultMessage","ExperimentLoggedModelOpenDatasetDetailsContext","createContext","Promise","resolve","ExperimentLoggedModelOpenDatasetDetailsContextProvider","isDrawerOpen","setIsDrawerOpen","selectedDatasetWithRun","setSelectedDatasetWithRun","getRunInfo","useLazyGetRunQuery","rejectCurrentPromiseFn","useRef","async","reject","_rejectCurrentPromise","current","call","onError","onCompleted","_data$mlflowGetRun","_data$mlflowGetRun2","_data$mlflowGetRun2$r","_data$mlflowGetRun2$r2","_data$mlflowGetRun3","_data$mlflowGetRun3$r","_runData$tags$filter","_runData$tags","_info$runUuid","_info$experimentId","_info$runName","mlflowGetRun","code","ErrorCodes","RESOURCE_DOES_NOT_EXIST","transformGraphQLResponseDatasets","run","matchingDataset","find","runData","tagsDictionary","datasetWithTags","runName","variables","contextValue","Provider","ExperimentViewDatasetDrawer","isOpen","setIsOpen","useContext","UserActionErrorHandlerContext","currentUserActionError","handlePromise","clearUserActionError","UserActionErrorHandler","errorFilter","setCurrentUserActionError","onErrorCallback","predefinedError","matchPredefinedError","promise","handleErrorWithEventImpl","event","handleErrorWithEvent","_ref","styles","_ref2","ExperimentLoggedModelSourceBox","loggedModel","displayDetails","className","_loggedModel$info2","_tagsByKey$MLFLOW_RUN","_tagsByKey$Utils$gitC","_tagsByKey$Utils$sour","searchParams","useSearchParams","tagsByKey","_loggedModel$info$tag","_loggedModel$info","_loggedModel$info$tag2","reduce","acc","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","toString","sourceTypeValue","sourceTypeTag","display","alignItems","gap","paddingTop","paddingBottom","flexWrap","ExperimentSourceTypeIcon","color","colors","actionPrimaryBackgroundDefault","Tooltip","content","Tag","xs","whiteSpace","BranchIcon","Popover","Root","Trigger","asChild","alignContent","GitCommitIcon","slice","Content","align","Arrow","CopyButton","showLabel","copyText","CopyIcon","Typography","Hint","GET_RUN_QUERY","gql","disabled","refetch","useQuery","skip","useLazyQuery","DAY","DateTooltipOptions","timeZoneName","year","month","day","hour","minute","getTimeAgoStrings","date","intl","tooltipFormatOptions","now","Date","seconds","Math","round","getTime","locale","navigator","language","tooltipTitle","Intl","DateTimeFormat","format","interval","timeAgoMessage","count","formatMessage","getIntervals","floor","displayText","TimeAgo","useIntl","ExperimentLoggedModelTableDateCell","isNaN","LoggedModelStatusIcon","LoggedModelStatusProtoEnum","LOGGED_MODEL_READY","CheckCircleIcon","LOGGED_MODEL_UPLOAD_FAILED","XCircleIcon","LOGGED_MODEL_PENDING","ClockIcon","ExperimentLoggedModelStatusIndicator","_data$info$status","_data$info","LOGGED_MODEL_STATUS_UNSPECIFIED","backgroundColor","isDarkMode","green800","green100","red800","red100","yellow800","yellow100","Text","marginLeft","useSafeDeferredValue","isFunction","React","identity"],"sourceRoot":""}