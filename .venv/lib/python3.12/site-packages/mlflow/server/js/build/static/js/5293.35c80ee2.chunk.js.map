{"version":3,"file":"static/js/5293.35c80ee2.chunk.js","mappings":"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","sources":["experiment-tracking/components/runs-charts/components/RunsChartsGlobalChartSettingsDropdown.tsx","common/hooks/useIsTabActive.tsx","experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBox.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/pages/prompts/hooks/usePromptVersionsForRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredPromptsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsTable.tsx","experiment-tracking/hooks/logged-models/useCombinedRunInputsOutputsModels.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBoxV2.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageOverviewSectionsV2.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRunV2.tsx","experiment-tracking/components/evaluations/hooks/useCompareToRunUuid.tsx","experiment-tracking/components/evaluations/EvaluationRunCompareSelector.tsx","experiment-tracking/components/evaluations/hooks/useRunLoggedTraceTableArtifacts.tsx","experiment-tracking/components/run-page/hooks/useSearchRunsQuery.tsx","experiment-tracking/components/evaluations/RunViewEvaluationsTabArtifacts.tsx","experiment-tracking/components/evaluations/RunViewEvaluationsTab.tsx","experiment-tracking/components/run-page/RunPage.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRun.tsx","graphql/get-graphql-error.ts","experiment-tracking/components/modals/DeleteRunModal.tsx","shared/web-shared/unified-tagging/components/TagAssignmentUI/TagAssignmentRowContainer.tsx","shared/web-shared/unified-tagging/context/TagAssignmentContextProvider.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRoot.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRow.tsx","shared/web-shared/unified-tagging/components/TagAssignmentLabel.tsx","shared/web-shared/unified-tagging/components/TagAssignmentField/TagAssignmentInput.tsx","shared/web-shared/unified-tagging/components/TagAssignmentKey.tsx","shared/web-shared/unified-tagging/components/TagAssignmentValue.tsx","shared/web-shared/unified-tagging/components/TagAssignmentUI/TagAssignmentRemoveButtonUI.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRemoveButton.tsx","shared/web-shared/unified-tagging/hooks/useTagAssignmentFieldArray.ts","shared/web-shared/unified-tagging/hooks/useTagAssignmentForm.tsx","common/components/UnifiedTaggingForm.tsx","common/hooks/useTagAssignmentModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFilterInput.tsx","common/components/PageContainer.tsx","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/components/NotFoundPage.tsx","experiment-tracking/hooks/logged-models/useGetLoggedModelsQuery.tsx"],"sourcesContent":["import { Button, CheckIcon, DropdownMenu, GearIcon, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useCallback } from 'react';\nimport { LineSmoothSlider } from '../../LineSmoothSlider';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RunsChartsUIConfigurationSetter } from '../hooks/useRunsChartsUIConfiguration';\n\nexport const RunsChartsGlobalChartSettingsDropdown = ({\n  globalLineChartConfig,\n  metricKeyList,\n  updateUIState,\n}: {\n  metricKeyList: string[];\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  updateUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = globalLineChartConfig || {};\n\n  const updateGlobalLineChartSettings = useCallback(\n    (newSettings: Partial<RunsChartsGlobalLineChartConfig>) =>\n      updateUIState((state) => ({\n        ...state,\n        globalLineChartConfig: {\n          ...state.globalLineChartConfig,\n          ...newSettings,\n        },\n      })),\n    [updateUIState],\n  );\n\n  const isUsingGlobalMetricXaxis = xAxisKey === RunsChartsLineChartXAxisType.METRIC;\n\n  const label = intl.formatMessage({\n    defaultMessage: 'Configure charts',\n    description: 'Experiment page > view controls > global settings for line chart view > dropdown button label',\n  });\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <Tooltip\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_44\"\n        content={label}\n      >\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"mlflow.charts.controls.global_chart_setup_dropdown\"\n            icon={<GearIcon />}\n            aria-label={label}\n          />\n        </DropdownMenu.Trigger>\n      </Tooltip>\n      <DropdownMenu.Content align=\"end\" css={{ minWidth: 300 }}>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'X-axis',\n            description:\n              'Experiment page > view controls > global settings for line chart view > settings for x-axis section label',\n          })}\n        >\n          <DropdownMenu.Label css={{ display: 'flex', gap: 8 }}>\n            <FormattedMessage\n              defaultMessage=\"X-axis\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis section label\"\n            />\n          </DropdownMenu.Label>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_68\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.STEP}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.STEP })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use step axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_78\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use wall time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_88\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME_RELATIVE })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use relative time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.Sub>\n            <DropdownMenu.SubTrigger\n              css={{\n                paddingLeft: theme.spacing.xs + theme.spacing.sm,\n              }}\n            >\n              <DropdownMenu.IconWrapper>\n                <CheckIcon\n                  css={{\n                    visibility: isUsingGlobalMetricXaxis ? 'visible' : 'hidden',\n                  }}\n                />\n              </DropdownMenu.IconWrapper>\n              <FormattedMessage\n                defaultMessage=\"Metric\"\n                description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use metric axis in all charts\"\n              />\n            </DropdownMenu.SubTrigger>\n            <DropdownMenu.SubContent css={{ maxHeight: 300, overflow: 'auto' }}>\n              {metricKeyList.map((metricKey) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_118\"\n                  key={metricKey}\n                  checked={selectedXAxisMetricKey === metricKey && isUsingGlobalMetricXaxis}\n                  onClick={() =>\n                    updateGlobalLineChartSettings({\n                      xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n                      selectedXAxisMetricKey: metricKey,\n                    })\n                  }\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {metricKey}\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.SubContent>\n          </DropdownMenu.Sub>\n        </DropdownMenu.Group>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Line smoothing',\n            description:\n              'Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.',\n          })}\n        >\n          <DropdownMenu.Label>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </DropdownMenu.Label>\n\n          <div css={{ padding: theme.spacing.sm }}>\n            <LineSmoothSlider\n              min={0}\n              max={100}\n              onChange={(lineSmoothness) => updateGlobalLineChartSettings({ lineSmoothness })}\n              value={lineSmoothness ? lineSmoothness : 0}\n            />\n          </div>\n        </DropdownMenu.Group>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../../common/types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  experimentId,\n  runOutputs,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        runOutputs={runOutputs}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n        experimentId={experimentId}\n      />\n    </div>\n  );\n};\n","import { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { InfoPopover, LegacyTabs, useDesignSystemTheme, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  const getLegacyTracesTabLink = () => {\n    return (\n      <LegacyTabs.TabPane\n        tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n        key={RunPageTabName.TRACES}\n      />\n    );\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      {getLegacyTracesTabLink()}\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport Routes from '../../routes';\nimport { ModelVersionInfoEntity } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\nimport { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}\n\nfunction LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModelSummary = first(model.registeredModelVersionSummaries);\n          if (!registeredModelSummary) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, displayedName, version, link } = registeredModelSummary;\n\n          return (\n            <Link target=\"_blank\" to={link} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : status ? ModelVersionStatusIcons[status] : null}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {displayedName}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredModelVersionSummaries.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredModelVersionSummaries:\n            registeredModelVersionSummaries?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredModelVersionSummaries[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersionSummaries, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersionSummary = first(singleModel.registeredModelVersionSummaries);\n\n  if (registeredModelVersionSummary) {\n    return (\n      <Link to={registeredModelVersionSummary.link} target=\"_blank\" css={{ marginLeft: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes, { PageId as ExperimentTrackingPageId } from '../../routes';\nimport type { ExperimentEntity } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment } from './hooks/useGetRunQuery';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { shouldEnableExperimentPageHeaderV2 } from '../../../common/utils/FeatureUtils';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n  isLoading,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoading?: boolean;\n}) => {\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={Routes.getExperimentPageRoute(experiment?.experimentId ?? '')} data-testid=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n  if (shouldEnableExperimentPageHeaderV2() && experiment.experimentId) {\n    breadcrumbs.push(\n      <Link\n        to={Routes.getExperimentPageTabRoute(experiment.experimentId, ExperimentPageTabName.Runs)}\n        data-testid=\"experiment-observatory-link-runs\"\n      >\n        <FormattedMessage\n          defaultMessage=\"Runs\"\n          description=\"Breadcrumb nav item to link to the list of runs on the parent experiment\"\n        />\n      </Link>,\n    );\n  }\n\n  const renderRegisterModelButton = () => {\n    return (\n      <RunViewHeaderRegisterModelButton\n        runUuid={runUuid}\n        experimentId={experiment?.experimentId ?? ''}\n        runTags={runTags}\n        artifactRootUri={artifactRootUri}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n      />\n    );\n  };\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-testid=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        {renderRegisterModelButton()}\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  Overflow,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { LoggedModelProto, MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { compact, flatMap, groupBy, isEmpty, keyBy, mapValues, sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { RunPageTabName } from '../../../constants';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport { ColumnDef, Table as TableDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\ninterface MetricEntityWithLoggedModels extends MetricEntity {\n  loggedModels?: LoggedModelProto[];\n}\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntityWithLoggedModels[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntityWithLoggedModels>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }, ...otherColumns] = table.getLeafHeaders();\n\n  const valueColumn = otherColumns.find((column) => column.id === 'value')?.column;\n\n  const anyRowHasModels = metricsList.some(({ loggedModels }) => !isEmpty(loggedModels));\n  const modelColumn = otherColumns.find((column) => column.id === 'models')?.column;\n\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n          loggedModels,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flex: keyColumn.getCanResize() ? keyColumn.getSize() / 100 : undefined,\n              }}\n            >\n              <Link\n                to={Routes.getRunPageTabRoute(\n                  runInfo.experimentId ?? '',\n                  runInfo.runUuid ?? '',\n                  RunPageTabName.MODEL_METRIC_CHARTS,\n                )}\n              >\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flex: valueColumn?.getCanResize() ? valueColumn.getSize() / 100 : undefined,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n            {anyRowHasModels && (\n              <TableCell\n                css={{\n                  flex: modelColumn?.getCanResize() ? modelColumn.getSize() / 100 : undefined,\n                }}\n              >\n                {!isEmpty(loggedModels) ? (\n                  <Overflow>\n                    {loggedModels?.map((model) => (\n                      <Link\n                        key={model.info?.model_id}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        to={Routes.getExperimentLoggedModelDetailsPage(\n                          model.info?.experiment_id ?? '',\n                          model.info?.model_id ?? '',\n                        )}\n                      >\n                        {model.info?.name}\n                      </Link>\n                    ))}\n                  </Overflow>\n                ) : (\n                  '-'\n                )}\n              </TableCell>\n            )}\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n  loggedModels,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModels?: LoggedModelProto[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const {\n    detailsPageTableStyles,\n    detailsPageNoEntriesStyles,\n    detailsPageNoResultsWrapperStyles,\n    usingUnifiedDetailsLayout,\n  } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  /**\n   * Aggregate logged models by metric key.\n   * This is used to display the models associated with each metric in the table.\n   */\n  const loggedModelsByMetricKey = useMemo(() => {\n    if (!loggedModels) {\n      return {};\n    }\n    const metricsWithModels = compact(\n      flatMap(loggedModels, (model) => model.data?.metrics?.map(({ key }) => ({ key, model }))),\n    );\n    const groupedMetrics = groupBy(metricsWithModels, 'key');\n    return mapValues(groupedMetrics, (group) => group.map(({ model }) => model));\n  }, [loggedModels]);\n\n  /**\n   * Enrich the metric list with related logged models.\n   */\n  const metricValues = useMemo<MetricEntityWithLoggedModels[]>(() => {\n    const metricList = values(latestMetrics);\n\n    if (isEmpty(loggedModelsByMetricKey)) {\n      return metricList;\n    }\n    return metricList.map((metric) => ({\n      ...metric,\n      loggedModels: loggedModelsByMetricKey[metric.key] ?? [],\n    }));\n  }, [latestMetrics, loggedModelsByMetricKey]);\n\n  const anyRowHasModels = metricValues.some(({ loggedModels }) => !isEmpty(loggedModels));\n\n  const modelColumnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = useMemo(\n    () => [\n      {\n        id: 'models',\n        header: intl.formatMessage({\n          defaultMessage: 'Models',\n          description: 'Run page > Overview > Metrics table > Models column header',\n        }),\n        accessorKey: 'models',\n        enableResizing: true,\n      },\n    ],\n    [intl],\n  );\n\n  const columns = useMemo(() => {\n    const columnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: true,\n      },\n    ];\n\n    if (anyRowHasModels) {\n      columnDefs.push(...modelColumnDefs);\n    }\n\n    return columnDefs;\n  }, [anyRowHasModels, modelColumnDefs]);\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={detailsPageNoResultsWrapperStyles}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the run details page details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flex: header.column.getCanResize() ? header.column.getSize() / 100 : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div\n      css={{\n        flex: usingUnifiedDetailsLayout ? '0 0 auto' : 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import type { RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { Button, DropdownMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport { useState } from 'react';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Renders single dataset, either in overview table cell or within a dropdown\n */\nconst DatasetEntry = ({ dataset, onClick }: { dataset: RunDatasetWithTags; onClick: () => void }) => {\n  return (\n    <Typography.Link\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_16\"\n      role=\"link\"\n      css={{\n        textAlign: 'left',\n      }}\n      onClick={onClick}\n    >\n      <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink css={{ margin: 0 }} />\n    </Typography.Link>\n  );\n};\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBox = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const { theme } = useDesignSystemTheme();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const firstDataset = datasets[0];\n  const remainingDatasets = datasets.slice(1);\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      <DatasetEntry dataset={firstDataset} onClick={() => datasetClicked(firstDataset)} />\n      {remainingDatasets.length ? (\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_70\"\n              size=\"small\"\n            >\n              +{remainingDatasets.length}\n            </Button>\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content>\n            {remainingDatasets.map((datasetWithTags) => {\n              return (\n                <DropdownMenu.Item\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_81\"\n                  key={datasetWithTags.dataset.digest}\n                >\n                  <DatasetEntry dataset={datasetWithTags} onClick={() => datasetClicked(datasetWithTags)} />\n                </DropdownMenu.Item>\n              );\n            })}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      ) : null}\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { shouldUseSharedTaggingUI } from '../../../../common/utils/FeatureUtils';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { useTagAssignmentModal } from '../../../../common/hooks/useTagAssignmentModal';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi, saveRunTagsApi } from '../../../actions';\nimport { useMemo, useState } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const sharedTaggingUIEnabled = shouldUseSharedTaggingUI();\n\n  const [isSavingTags, setIsSavingTags] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const tagsKeyValueMap: KeyValueEntity[] = visibleTagEntities.map(({ key, value }) => ({ key, value }));\n\n  const { TagAssignmentModal, showTagAssignmentModal } = useTagAssignmentModal({\n    componentIdPrefix: 'mlflow.run-view-tags-box',\n    initialTags: tagsKeyValueMap,\n    isLoading: isSavingTags,\n    onSubmit: (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]) => {\n      setIsSavingTags(true);\n      return dispatch(saveRunTagsApi(runUuid, newTags, deletedTags)).then(() => {\n        setIsSavingTags(false);\n      });\n    },\n    onSuccess: onTagsUpdated,\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    if (sharedTaggingUIEnabled) {\n      showTagAssignmentModal();\n      return;\n    }\n\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {tagsKeyValueMap.length < 1 ? (\n        <Button\n          componentId=\"mlflow.run_details.overview.tags.add_button\"\n          size=\"small\"\n          type=\"tertiary\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Run page > Overview > Tags cell > 'Add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {tagsKeyValueMap.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal css={{ marginRight: 0 }} />\n          ))}\n          <Tooltip componentId=\"mlflow.run_details.overview.tags.edit_button.tooltip\" content={editTagsLabel}>\n            <Button\n              componentId=\"mlflow.run_details.overview.tags.edit_button\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </Tooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {/** Old modal for editing tags */}\n      {EditTagsModal}\n      {/** New modal for editing tags, using shared tagging UI */}\n      {TagAssignmentModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from '../hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModelVersionSummaries,\n}: {\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModelVersionSummaries?.map((modelSummary) => (\n        <Link\n          key={modelSummary.displayedName}\n          to={modelSummary.link}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {modelSummary.displayedName}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{modelSummary.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { QueryFunctionContext, useQuery, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { PromptVersionsForRunResponse, RegisteredPromptDetailsResponse, RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptVersionsForRunQueryKey>) => {\n  const [, { runUuid }] = queryKey;\n  return RegisteredPromptsApi.getPromptVersionsForRun(runUuid);\n};\n\ntype PromptVersionsForRunQueryKey = ['run_uuid', { runUuid: string }];\n\nexport const usePromptVersionsForRunQuery = (\n  { runUuid }: { runUuid: string },\n  options: UseQueryOptions<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  >(['run_uuid', { runUuid }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '@mlflow/mlflow/src/common/types';\n\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { usePromptVersionsForRunQuery } from '../../../pages/prompts/hooks/usePromptVersionsForRunQuery';\nimport Routes from '../../../routes';\nimport { parseLinkedPromptsFromRunTags } from '../../../pages/prompts/utils';\n\nexport const RunViewRegisteredPromptsBox = ({\n  tags,\n  runUuid,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  // This part is for supporting prompt versions created using mlflow < 3.1.0\n  const { data, error, isLoading } = usePromptVersionsForRunQuery({ runUuid });\n  const promptVersionsFromPromptTags = data?.model_versions || [];\n  const promptVersionsFromRunTags = parseLinkedPromptsFromRunTags(tags);\n  const promptVersions = [...promptVersionsFromPromptTags, ...promptVersionsFromRunTags];\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error || !promptVersions || promptVersions.length === 0) {\n    return <Typography.Hint>—</Typography.Hint>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n        flexWrap: 'wrap',\n        padding: `${theme.spacing.sm}px 0px`,\n      }}\n    >\n      {promptVersions.map((promptVersion, index) => {\n        const to = Routes.getPromptDetailsPageRoute(encodeURIComponent(promptVersion.name));\n        const displayText = `${promptVersion.name} (v${promptVersion.version})`;\n        return (\n          <Typography.Text key={displayText} css={{ whiteSpace: 'nowrap' }}>\n            <Link to={to}>{displayText}</Link>\n            {index < promptVersions.length - 1 && ','}\n          </Typography.Text>\n        );\n      })}\n    </div>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { RunInfoEntity } from '../../../types';\nimport { type LoggedModelProto } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  loggedModelsV3,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n      {loggedModelsV3.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId ?? '', model.info?.model_id ?? '')}\n            key={model.info?.model_id ?? index}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>{model.info?.name}</div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n  Popover,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n  className,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n  className?: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n      className={className}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <Popover.Root componentId=\"mlflow.run_details.overview.source.commit_hash_popover\">\n          <Popover.Trigger asChild>\n            <Tag\n              componentId=\"mlflow.run_details.overview.source.commit_hash\"\n              css={{ marginRight: 0, '&>div': { paddingRight: 0 } }}\n            >\n              <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap', alignContent: 'center' }}>\n                <GitCommitIcon />\n                {commitHash.slice(0, 7)}\n              </div>\n            </Tag>\n          </Popover.Trigger>\n          <Popover.Content align=\"start\">\n            <Popover.Arrow />\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton showLabel={false} size=\"small\" type=\"tertiary\" copyText={commitHash} icon={<CopyIcon />} />\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ColumnsIcon,\n  getShadowScrollStyles,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useCombinedRunInputsOutputsModels } from '../../../hooks/logged-models/useCombinedRunInputsOutputsModels';\nimport { LoggedModelProto, RunInfoEntity } from '../../../types';\nimport { ExperimentLoggedModelListPageTable } from '../../experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../hooks/useGetRunQuery';\nimport { ExperimentLoggedModelListPageColumnSelector } from '../../experiment-logged-models/ExperimentLoggedModelListPageColumnSelector';\n\nconst supportedAttributeColumnKeys = [\n  ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n  ExperimentLoggedModelListPageKnownColumns.Step,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\nexport const RunViewLoggedModelsTable = ({\n  inputs,\n  outputs,\n  runInfo,\n  loggedModelsV3,\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n}: {\n  inputs?: UseGetRunQueryResponseInputs;\n  outputs?: UseGetRunQueryResponseOutputs;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { models: loggedModels } = useCombinedRunInputsOutputsModels(inputs, outputs, runInfo, loggedModelsV3);\n\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({});\n\n  const { columnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels: loggedModels,\n    columnVisibility,\n    disablePinnedColumns: true,\n    disableOrderBy: true,\n    supportedAttributeColumnKeys,\n  });\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Title level={4} css={{ flexShrink: 0 }}>\n          <FormattedMessage\n            defaultMessage=\"Logged models ({length})\"\n            description=\"A header for a table of logged models displayed on the run page. The 'length' variable is being replaced with the number of displayed logged models.\"\n            values={{ length: loggedModels.length }}\n          />\n        </Typography.Title>\n        <ExperimentLoggedModelListPageColumnSelector\n          columnDefs={columnDefs}\n          onUpdateColumns={setColumnVisibility}\n          columnVisibility={columnVisibility}\n          customTrigger={<Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} />}\n        />\n      </div>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {loggedModelsError instanceof Error && loggedModelsError.message && (\n          <>\n            <Alert\n              type=\"error\"\n              description={loggedModelsError.message}\n              message={\n                <FormattedMessage\n                  defaultMessage=\"Error loading logged models\"\n                  description=\"Error message displayed in the experiment run details page when loading logged models fails\"\n                />\n              }\n              closable={false}\n              componentId=\"mlflow.run_page.logged_model.list.error\"\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n          <ExperimentLoggedModelListPageTable\n            columnDefs={columnDefs}\n            loggedModels={loggedModels}\n            columnVisibility={columnVisibility}\n            isLoading={isLoadingLoggedModels}\n            isLoadingMore={false}\n            moreResultsAvailable={false}\n            disableLoadMore\n            css={getTableTheme(theme)}\n            displayShowExampleButton={false}\n          />\n        </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst getTableTheme = (theme: Theme) => ({\n  '&.ag-theme-balham': {\n    '--ag-border-color': theme.colors.border,\n    '--ag-row-border-color': theme.colors.border,\n    '--ag-foreground-color': theme.colors.textPrimary,\n    '--ag-background-color': 'transparent',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-hover-color': theme.colors.actionDefaultBackgroundHover,\n    '--ag-selected-row-background-color': theme.colors.actionDefaultBackgroundPress,\n    '--ag-header-foreground-color': theme.colors.textPrimary,\n    '--ag-header-background-color': theme.colors.backgroundPrimary,\n    '--ag-modal-overlay-background-color': theme.colors.overlayOverlay,\n    '.ag-header-row.ag-header-row-column-group': {\n      '--ag-header-foreground-color': theme.colors.textPrimary,\n    },\n    borderTop: 0,\n    fontSize: theme.typography.fontSizeBase,\n    '.ag-center-cols-viewport': {\n      ...getShadowScrollStyles(theme, {\n        orientation: 'horizontal',\n      }),\n    },\n  },\n});\n","import { compact, uniq, uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../../components/run-page/hooks/useGetRunQuery';\nimport type { LoggedModelProto, RunInfoEntity } from '../../types';\n\ntype LoggedModelProtoWithRunDirection = LoggedModelProto & { direction: 'input' | 'output'; step?: string };\n\nconst filterMetricsByMatchingRunId = (runUuid?: string | null) => (loggedModel: LoggedModelProtoWithRunDirection) => {\n  if (loggedModel.data?.metrics) {\n    return {\n      ...loggedModel,\n      data: {\n        ...loggedModel.data,\n        metrics: loggedModel.data.metrics.filter((metric) => !runUuid || metric.run_id === runUuid),\n      },\n    };\n  }\n  return loggedModel;\n};\n\nexport const useCombinedRunInputsOutputsModels = (\n  inputs?: UseGetRunQueryResponseInputs,\n  outputs?: UseGetRunQueryResponseOutputs,\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo,\n  loggedModelsV3?: LoggedModelProto[],\n) => {\n  const inputLoggedModels = useMemo(() => {\n    const inputModelIds = compact(uniq(inputs?.modelInputs?.map((modelInput) => modelInput.modelId)));\n    return inputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n      if (!model) return undefined;\n      return { ...model, direction: 'input' as const };\n    });\n  }, [inputs?.modelInputs, loggedModelsV3]);\n\n  const outputLoggedModels = useMemo(() => {\n    const outputModelIds = compact(uniq(outputs?.modelOutputs?.map((modelOutput) => modelOutput.modelId)));\n    return outputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n\n      const correspondingOutputEntry = outputs?.modelOutputs?.find(({ modelId }) => modelId === model?.info?.model_id);\n\n      if (!model) return undefined;\n      return { ...model, direction: 'output' as const, step: correspondingOutputEntry?.step ?? undefined };\n    });\n  }, [outputs?.modelOutputs, loggedModelsV3]);\n\n  const modelsWithDirection = useMemo(() => {\n    return (\n      uniqBy(\n        compact([...inputLoggedModels, ...outputLoggedModels]).map(filterMetricsByMatchingRunId(runInfo?.runUuid)),\n        (modelData) => modelData.info?.model_id,\n      ) ?? []\n    );\n  }, [inputLoggedModels, outputLoggedModels, runInfo]);\n\n  return { models: modelsWithDirection };\n};\n","import { Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport type { RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBoxV2 = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Overflow>\n        {datasets.map((datasetWithTags) => (\n          // eslint-disable-next-line react/jsx-key\n          <Typography.Link\n            componentId=\"mlflow.run_details.datasets_box.dataset_link\"\n            css={{\n              textAlign: 'left',\n              '.anticon': {\n                fontSize: theme.general.iconFontSize,\n              },\n            }}\n            onClick={() => datasetClicked(datasetWithTags)}\n          >\n            <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink css={{ margin: 0 }} />\n          </Typography.Link>\n        ))}\n      </Overflow>\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </>\n  );\n};\n","import { Button, FileIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueProperty, NoneCell, AsideSections } from '@databricks/web-shared/utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { LoggedModelProto, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { UseGetRunQueryResponseRunInfo } from './useGetRunQuery';\nimport Utils from '../../../../common/utils/Utils';\nimport { RunViewTagsBox } from '../overview/RunViewTagsBox';\nimport { RunViewUserLinkBox } from '../overview/RunViewUserLinkBox';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { RunViewStatusBox } from '../overview/RunViewStatusBox';\nimport { RunViewParentRunBox } from '../overview/RunViewParentRunBox';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../../experiment-page/utils/experimentPage.common-utils';\nimport { RunViewDatasetBoxV2 } from '../overview/RunViewDatasetBoxV2';\nimport { RunViewSourceBox } from '../overview/RunViewSourceBox';\nimport { Link, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RunViewLoggedModelsBox } from '../overview/RunViewLoggedModelsBox';\nimport { useMemo } from 'react';\nimport { RunPageModelVersionSummary } from './useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { RunViewRegisteredModelsBox } from '../overview/RunViewRegisteredModelsBox';\nimport Routes from '../../../routes';\n\nenum RunDetailsPageMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  TAGS = 'TAGS',\n  REGISTERED_MODELS = 'REGISTERED_MODELS',\n}\n\nexport const useRunDetailsPageOverviewSectionsV2 = ({\n  runUuid,\n  runInfo,\n  tags,\n  onTagsUpdated,\n  datasets,\n  shouldRenderLoggedModelsBox,\n  loggedModelsV3,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n  datasets?: RunDatasetWithTags[];\n  shouldRenderLoggedModelsBox?: boolean;\n  loggedModelsV3: LoggedModelProto[];\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}): AsideSections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n\n  const detailsContent = runInfo && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Run page > Overview > Run start time section label',\n        })}\n        value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <NoneCell />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Run page > Overview > Run author section label',\n        })}\n        value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Experiment ID',\n          description: 'Run page > Overview > experiment ID section label',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={runInfo?.experimentId ?? ''}\n            element={\n              runInfo?.experimentId ? (\n                <Link to={Routes.getExperimentPageRoute(runInfo.experimentId)}>{runInfo?.experimentId}</Link>\n              ) : undefined\n            }\n          />\n        }\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Run page > Overview > Run status section label',\n        })}\n        value={<RunViewStatusBox status={runInfo.status} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Run ID',\n          description: 'Run page > Overview > Run ID section label',\n        })}\n        value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Duration',\n          description: 'Run page > Overview > Run duration section label',\n        })}\n        value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n      />\n\n      {parentRunIdTag && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Parent run',\n            description: 'Run page > Overview > Parent run',\n          })}\n          value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Source',\n          description: 'Run page > Overview > Run source section label',\n        })}\n        value={\n          <RunViewSourceBox\n            tags={tags}\n            search={search}\n            runUuid={runUuid}\n            css={{\n              paddingTop: theme.spacing.xs,\n              paddingBottom: theme.spacing.xs,\n            }}\n          />\n        }\n      />\n      {shouldRenderLoggedModelsBox && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Logged models',\n            description: 'Run page > Overview > Run models section label',\n          })}\n          value={\n            <RunViewLoggedModelsBox\n              // Pass the run info and logged models\n              runInfo={runInfo}\n              loggedModels={loggedModelsFromTags}\n              loggedModelsV3={loggedModelsV3}\n            />\n          }\n        />\n      )}\n    </>\n  );\n\n  return [\n    {\n      id: RunDetailsPageMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this run',\n        description: 'Title for the details/metadata section on the run details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: RunDetailsPageMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Title for the datasets section on the run details page',\n      }),\n      content: datasets?.length ? (\n        <RunViewDatasetBoxV2 tags={tags} runInfo={runInfo} datasets={datasets} />\n      ) : (\n        <NoneCell />\n      ),\n    },\n    {\n      id: RunDetailsPageMetadataSections.TAGS,\n      title: intl.formatMessage({\n        defaultMessage: 'Tags',\n        description: 'Title for the tags section on the run details page',\n      }),\n      content: <RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onTagsUpdated} />,\n    },\n    {\n      id: RunDetailsPageMetadataSections.REGISTERED_MODELS,\n      title: intl.formatMessage({\n        defaultMessage: 'Registered models',\n        description: 'Title for the registered models section on the run details page',\n      }),\n      content:\n        registeredModelVersionSummaries?.length > 0 ? (\n          <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n        ) : (\n          <NoneCell />\n        ),\n    },\n  ];\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Spacer, Spinner, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport type { ReduxState } from '../../../redux-types';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewRegisteredPromptsBox } from './overview/RunViewRegisteredPromptsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport type { LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelRegisteredVersions } from '../experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './hooks/useGetRunQuery';\nimport type { MetricEntitiesByName, RunDatasetWithTags } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { type RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { isEmpty, uniqBy } from 'lodash';\nimport { RunViewLoggedModelsTable } from './overview/RunViewLoggedModelsTable';\nimport { isRunPageLoggedModelsTableEnabled } from '../../../common/utils/FeatureUtils';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useRunDetailsPageOverviewSectionsV2 } from './hooks/useRunDetailsPageOverviewSectionsV2';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n  runInputs,\n  runOutputs,\n  registeredModelVersionSummaries: registeredModelVersionSummariesForRun,\n  loggedModelsV3 = [],\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  loggedModelsV3?: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { usingUnifiedDetailsLayout } = useExperimentTrackingDetailsPageLayoutStyles();\n  const { search } = useLocation();\n  const intl = useIntl();\n\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n  const containsLoggedModelsFromInputsOutputs = !isEmpty(runInputs?.modelInputs) || !isEmpty(runOutputs?.modelOutputs);\n  const shouldRenderLoggedModelsBox = !isRunPageLoggedModelsTableEnabled() || !containsLoggedModelsFromInputsOutputs;\n\n  // We have two flags for controlling the visibility of the \"logged models\" section:\n  // - `shouldRenderLoggedModelsBox` determines if \"logged models\" section should be rendered.\n  //   It is hidden if any IAv3 logged models are detected in inputs/outputs, in this case we're\n  //   displaying a big table instead.\n  // - `shouldDisplayContentsOfLoggedModelsBox` determines if the contents of the \"logged models\"\n  //   section should be displayed. It is hidden if there are no logged models to display.\n  const shouldDisplayContentsOfLoggedModelsBox = loggedModelsFromTags?.length > 0 || loggedModelsV3?.length > 0;\n  const { modelVersions: loggedModelsV3RegisteredModels } = useExperimentLoggedModelRegisteredVersions({\n    loggedModels: loggedModelsV3,\n  });\n\n  /**\n   * We have to query multiple sources for registered model versions (logged models API, models API, UC)\n   * and it's possible to end up with duplicates.\n   * We can dedupe them using `link` field, which should be unique for each model.\n   */\n  const registeredModelVersionSummaries = uniqBy(\n    [...registeredModelVersionSummariesForRun, ...loggedModelsV3RegisteredModels],\n    (model) => model?.link,\n  );\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <DetailsOverviewMetadataRow\n        title={\n          <FormattedMessage\n            defaultMessage=\"Registered prompts\"\n            description=\"Run page > Overview > Run prompts section label\"\n          />\n        }\n        value={<RunViewRegisteredPromptsBox tags={tags} runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        {shouldRenderLoggedModelsBox && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Logged models\"\n                description=\"Run page > Overview > Run models section label\"\n              />\n            }\n            value={\n              isLoadingLoggedModels ? (\n                <Spinner />\n              ) : shouldDisplayContentsOfLoggedModelsBox ? (\n                <RunViewLoggedModelsBox\n                  // Pass the run info and logged models\n                  runInfo={runInfo}\n                  loggedModels={loggedModelsFromTags}\n                  // Provide loggedModels from IA v3\n                  loggedModelsV3={loggedModelsV3}\n                />\n              ) : (\n                <EmptyValue />\n              )\n            }\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModelVersionSummaries?.length > 0 ? (\n              <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        {renderPromptMetadataRow()}\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  const detailsSectionsV2 = useRunDetailsPageOverviewSectionsV2({\n    runUuid,\n    runInfo,\n    tags,\n    onTagsUpdated: onRunDataUpdated,\n    datasets,\n    loggedModelsV3,\n    shouldRenderLoggedModelsBox,\n    registeredModelVersionSummaries,\n  });\n  const usingSidebarLayout = usingUnifiedDetailsLayout;\n  return (\n    <DetailsPageLayout\n      css={{ flex: 1, alignSelf: 'flex-start' }}\n      //\n      // Enable sidebar layout based on feature flag\n      usingSidebarLayout={usingSidebarLayout}\n      secondarySections={detailsSectionsV2}\n    >\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      {!usingSidebarLayout && (\n        <>\n          <Typography.Title level={4}>\n            <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n          </Typography.Title>\n          {renderDetails()}\n        </>\n      )}\n      <div\n        // Use different grid setup for unified details page layout\n        css={[\n          usingSidebarLayout ? { flexDirection: 'column' } : { minHeight: 360, maxHeight: 760 },\n          { display: 'flex', gap: theme.spacing.lg, overflow: 'hidden' },\n        ]}\n      >\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} loggedModels={loggedModelsV3} />\n        {renderParams()}\n      </div>\n      {isRunPageLoggedModelsTableEnabled() && containsLoggedModelsFromInputsOutputs && (\n        <>\n          <Spacer />\n          <div css={{ minHeight: 360, maxHeight: 760, overflow: 'hidden', display: 'flex' }}>\n            <RunViewLoggedModelsTable\n              loggedModelsV3={loggedModelsV3}\n              isLoadingLoggedModels={isLoadingLoggedModels}\n              inputs={runInputs}\n              outputs={runOutputs}\n              runInfo={runInfo}\n              loggedModelsError={loggedModelsError}\n            />\n          </div>\n        </>\n      )}\n      {!usingSidebarLayout && <Spacer />}\n    </DetailsPageLayout>\n  );\n};\n","import Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport function RunNotFoundView({ runId }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Run ID ${runId} does not exist`}\n      fallbackHomePageReactRoute={Routes.rootRoute}\n    />\n  );\n}\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\nimport { Spacer, Typography } from '@databricks/design-system';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n  const intl = useIntl();\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp, intl)}\n        </div>\n      )}\n      {value && (\n        <div>\n          <Typography.Text bold>{metricKey}</Typography.Text>\n          <Spacer size=\"xs\" />\n          <Typography.Text>{value}</Typography.Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { TableSkeleton, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../redux-types';\nimport type { MetricEntitiesByName, RunInfoEntity } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n} from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport { shouldEnableRunDetailsPageAutoRefresh } from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsProps {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nconst RunViewMetricChartsImpl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsProps & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  // Determine if run contains images logged by `mlflow.log_image()`\n  const containsLoggedImages = Boolean(tags[LOG_IMAGE_TAG_INDICATOR]);\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: containsLoggedImages,\n  });\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        <RunsChartsGlobalChartSettingsDropdown\n          metricKeyList={metricKeys}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n          updateUIState={updateChartsUIState}\n        />\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={chartsSearchFilter ?? ''}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricCharts = (props: RunViewMetricChartsProps) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsImpl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n\nconst RunViewMetricChartsSkeleton = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n      }}\n      className={className}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport { useGetLoggedModelsQuery } from '../../../hooks/logged-models/useGetLoggedModelsQuery';\nimport { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRunV2 = ({\n  runInputs,\n  runOutputs,\n  enabled = true,\n}: {\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  enabled?: boolean;\n}) => {\n  const modelIds = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return modelIds;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && !isEmpty(modelIds);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useGetLoggedModelsQuery(\n    {\n      modelIds,\n    },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return { models: loggedModelsData, isLoading: isHookEnabled && isLoading, error };\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'compareToRunUuid';\n\n/**\n * Query param-powered hook that returns the compare to run uuid when comparison is enabled.\n */\nexport const useCompareToRunUuid = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const compareToRunUuid = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setCompareToRunUuid = useCallback(\n    (compareToRunId: string | undefined) => {\n      setSearchParams((params) => {\n        if (compareToRunId === undefined) {\n          params.delete(QUERY_PARAM_KEY);\n          return params;\n        }\n        params.set(QUERY_PARAM_KEY, compareToRunId);\n        return params;\n      });\n    },\n    [setSearchParams],\n  );\n\n  return [compareToRunUuid, setCompareToRunUuid] as const;\n};\n","import {\n  Typography,\n  useDesignSystemTheme,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxCustomButtonTriggerWrapper,\n  Button,\n  ChevronDownIcon,\n  XCircleFillIcon,\n} from '@databricks/design-system';\nimport { useCallback, useMemo } from 'react';\nimport { useGetExperimentRunColor } from '../experiment-page/hooks/useExperimentRunColor';\nimport { useIntl } from '@databricks/i18n';\nimport Routes from '../../routes';\nimport {\n  useGenAiExperimentRunsForComparison,\n  COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID,\n} from '@databricks/web-shared/genai-traces-table';\nimport { RunColorPill } from '../experiment-page/components/RunColorPill';\n\nexport const EvaluationRunCompareSelector = ({\n  experimentId,\n  currentRunUuid,\n  setCompareToRunUuid,\n  compareToRunUuid,\n  setCurrentRunUuid: setCurrentRunUuidProp,\n}: {\n  experimentId: string;\n  currentRunUuid?: string;\n  setCompareToRunUuid?: (runUuid: string | undefined) => void;\n  compareToRunUuid?: string;\n  // used in evaluation runs tab\n  setCurrentRunUuid?: (runUuid: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const getRunColor = useGetExperimentRunColor();\n\n  const { runInfos: experimentRunInfos } = useGenAiExperimentRunsForComparison(experimentId);\n\n  const currentRunOptions = useMemo(() => {\n    if (!experimentRunInfos) return undefined;\n    return experimentRunInfos\n      .map((runInfo) => ({\n        key: runInfo.runUuid,\n        value: runInfo.runName ?? runInfo.runUuid,\n      }))\n      .filter((result) => result.key) as {\n      key: string;\n      value: string;\n    }[];\n  }, [experimentRunInfos]);\n\n  const compareToRunOptions = useMemo(() => {\n    if (!experimentRunInfos) return undefined;\n    return experimentRunInfos\n      .filter((runInfo) => runInfo.runUuid !== currentRunUuid)\n      .map((runInfo) => ({\n        key: runInfo.runUuid,\n        value: runInfo.runName ?? runInfo.runUuid,\n      }))\n      .filter((result) => Boolean(result.key)) as {\n      key: string;\n      value: string;\n    }[];\n  }, [experimentRunInfos, currentRunUuid]);\n\n  const currentRunInfo = experimentRunInfos?.find((runInfo) => runInfo.runUuid === currentRunUuid);\n  const compareToRunInfo = experimentRunInfos?.find((runInfo) => runInfo.runUuid === compareToRunUuid);\n\n  const defaultSetCurrentRunUuid = useCallback(\n    (runUuid: string) => {\n      const link = Routes.getRunPageRoute(experimentId, runUuid) + '/evaluations';\n      // Propagate all the current URL query params.\n      const currentParams = new URLSearchParams(window.location.search);\n\n      const newUrl = new URL(link, window.location.origin);\n      currentParams.forEach((value, key) => {\n        newUrl.searchParams.set(key, value);\n      });\n\n      window.location.href = newUrl.toString();\n    },\n    [experimentId],\n  );\n\n  const setCurrentRunUuid = setCurrentRunUuidProp ?? defaultSetCurrentRunUuid;\n\n  if (!currentRunUuid) {\n    return <></>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'flex-start',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <DialogCombobox\n          componentId={COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID}\n          id=\"compare-to-run-combobox\"\n          value={currentRunUuid ? [currentRunUuid] : undefined}\n        >\n          <DialogComboboxCustomButtonTriggerWrapper>\n            <Button\n              endIcon={<ChevronDownIcon />}\n              componentId=\"mlflow.evaluations_review.table_ui.compare_to_run_button\"\n              css={{\n                justifyContent: 'flex-start !important',\n              }}\n            >\n              <div\n                css={{\n                  display: 'flex',\n                  gap: theme.spacing.sm,\n                  alignItems: 'center',\n                  fontSize: `${theme.typography.fontSizeSm}px !important`,\n                }}\n              >\n                <RunColorPill color={getRunColor(currentRunUuid)} />\n                {currentRunInfo?.runName ? (\n                  <Typography.Hint>{currentRunInfo?.runName}</Typography.Hint>\n                ) : (\n                  // eslint-disable-next-line formatjs/enforce-description\n                  intl.formatMessage({ defaultMessage: 'Select baseline run' })\n                )}\n              </div>\n            </Button>\n          </DialogComboboxCustomButtonTriggerWrapper>\n          <DialogComboboxContent>\n            <DialogComboboxOptionList>\n              {(currentRunOptions || []).map((item, i) => (\n                <DialogComboboxOptionListSelectItem\n                  key={i}\n                  value={item.value}\n                  onChange={(e) => setCurrentRunUuid(item.key)}\n                  checked={item.key === currentRunUuid}\n                >\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.sm,\n                      alignItems: 'center',\n                    }}\n                  >\n                    <RunColorPill color={getRunColor(item.key)} />\n                    {item.value}\n                  </div>\n                </DialogComboboxOptionListSelectItem>\n              ))}\n            </DialogComboboxOptionList>\n          </DialogComboboxContent>\n        </DialogCombobox>\n      </div>\n      <span css={{}}>\n        {intl.formatMessage({\n          defaultMessage: 'compare to',\n          description: 'Label for \"to\" in compare to, which is split between two dropdowns of two runs to compare',\n        })}\n      </span>\n      {setCompareToRunUuid && (\n        <div\n          css={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n            }}\n          >\n            <DialogCombobox\n              componentId={COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID}\n              id=\"compare-to-run-combobox\"\n              value={compareToRunUuid ? [compareToRunUuid] : undefined}\n            >\n              <DialogComboboxCustomButtonTriggerWrapper>\n                <Button\n                  endIcon={<ChevronDownIcon />}\n                  componentId=\"mlflow.evaluations_review.table_ui.compare_to_run_button\"\n                  css={{\n                    justifyContent: 'flex-start !important',\n                  }}\n                >\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.sm,\n                      alignItems: 'center',\n                      fontSize: `${theme.typography.fontSizeSm}px !important`,\n                    }}\n                  >\n                    {compareToRunInfo?.runName ? (\n                      <>\n                        <RunColorPill color={getRunColor(compareToRunUuid)} />\n                        <Typography.Hint>{compareToRunInfo?.runName}</Typography.Hint>\n                      </>\n                    ) : (\n                      <span\n                        css={{\n                          color: theme.colors.textPlaceholder,\n                        }}\n                      >\n                        {/* eslint-disable-next-line formatjs/enforce-description */}\n                        {intl.formatMessage({ defaultMessage: 'baseline run' })}\n                      </span>\n                    )}\n                  </div>\n                </Button>\n              </DialogComboboxCustomButtonTriggerWrapper>\n              <DialogComboboxContent>\n                <DialogComboboxOptionList>\n                  {(compareToRunOptions || []).map((item, i) => (\n                    <DialogComboboxOptionListSelectItem\n                      key={i}\n                      value={item.value}\n                      onChange={(e) => setCompareToRunUuid(item.key)}\n                      checked={item.key === compareToRunUuid}\n                    >\n                      <div\n                        css={{\n                          display: 'flex',\n                          gap: theme.spacing.sm,\n                          alignItems: 'center',\n                        }}\n                      >\n                        <RunColorPill color={getRunColor(item.key)} />\n                        {item.value}\n                      </div>\n                    </DialogComboboxOptionListSelectItem>\n                  ))}\n                </DialogComboboxOptionList>\n              </DialogComboboxContent>\n            </DialogCombobox>\n            {compareToRunInfo?.runName && (\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.sm,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n                role=\"button\"\n                onClick={() => {\n                  setCompareToRunUuid(undefined);\n                }}\n                onPointerDownCapture={(e) => {\n                  // Prevents the dropdown from opening when clearing\n                  e.stopPropagation();\n                }}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { intersection } from 'lodash';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { extractLoggedTablesFromRunTags } from '../../../utils/ArtifactUtils';\nimport { GenAiTraceEvaluationArtifactFile } from '@databricks/web-shared/genai-traces-table';\nimport { useMemo } from 'react';\n\n/**\n * Returns the list of known evaluation table artifacts that are logged for a run based on its tags.\n */\nexport const useRunLoggedTraceTableArtifacts = (runTags?: Record<string, KeyValueEntity>) =>\n  useMemo(() => {\n    if (!runTags) {\n      return [];\n    }\n    return intersection(extractLoggedTablesFromRunTags(runTags), [\n      GenAiTraceEvaluationArtifactFile.Evaluations,\n      GenAiTraceEvaluationArtifactFile.Metrics,\n      GenAiTraceEvaluationArtifactFile.Assessments,\n    ]) as GenAiTraceEvaluationArtifactFile[];\n  }, [runTags]);\n","import { type ApolloError, type ApolloQueryResult, gql } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { first } from 'lodash';\nimport { SearchRuns } from '../../../../graphql/__generated__/graphql';\n\nconst SEARCH_RUNS_QUERY = gql`\n  query SearchRuns($data: MlflowSearchRunsInput!) {\n    mlflowSearchRuns(input: $data) {\n      apiError {\n        helpUrl\n        code\n        message\n      }\n      runs {\n        info {\n          runName\n          status\n          runUuid\n          experimentId\n          artifactUri\n          endTime\n          lifecycleStage\n          startTime\n          userId\n        }\n        experiment {\n          experimentId\n          name\n          tags {\n            key\n            value\n          }\n          artifactLocation\n          lifecycleStage\n          lastUpdateTime\n        }\n        data {\n          metrics {\n            key\n            value\n            step\n            timestamp\n          }\n          params {\n            key\n            value\n          }\n          tags {\n            key\n            value\n          }\n        }\n        inputs {\n          datasetInputs {\n            dataset {\n              digest\n              name\n              profile\n              schema\n              source\n              sourceType\n            }\n            tags {\n              key\n              value\n            }\n          }\n          modelInputs {\n            modelId\n          }\n        }\n        outputs {\n          modelOutputs {\n            modelId\n            step\n          }\n        }\n        modelVersions {\n          version\n          name\n          creationTimestamp\n          status\n          source\n        }\n      }\n    }\n  }\n`;\n\nexport type UseSearchRunsQueryResponseDataMetrics = NonNullable<\n  NonNullable<NonNullable<UseSearchRunsQueryDataResponseSingleRun>['data']>['metrics']\n>;\nexport type UseSearchRunsQueryDataResponseSingleRun = NonNullable<\n  NonNullable<SearchRuns['mlflowSearchRuns']>['runs']\n>[0];\nexport type UseSearchRunsQueryDataApiError = NonNullable<SearchRuns['mlflowSearchRuns']>['apiError'];\nexport type UseSearchRunsQueryResponse = {\n  data?: UseSearchRunsQueryDataResponseSingleRun;\n  loading: boolean;\n  apolloError?: ApolloError;\n  apiError?: UseSearchRunsQueryDataApiError;\n  refetchRun: () => Promise<ApolloQueryResult<SearchRuns>>;\n};\n\nexport const useSearchRunsQuery = ({\n  filter,\n  experimentIds,\n  disabled = false,\n}: {\n  filter?: string;\n  experimentIds: string[];\n  disabled?: boolean;\n}): UseSearchRunsQueryResponse => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<any, any>(SEARCH_RUNS_QUERY, {\n    variables: {\n      data: {\n        filter,\n        experimentIds,\n      },\n    },\n    skip: disabled,\n  });\n\n  return {\n    loading,\n    data: first(data?.mlflowSearchRuns?.runs ?? []),\n    refetchRun: refetch,\n    apolloError,\n    apiError: data?.mlflowSearchRuns?.apiError,\n  } as const;\n};\n","import { isNil } from 'lodash';\nimport { Empty, LegacySkeleton } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { type KeyValueEntity } from '../../../common/types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useCompareToRunUuid } from './hooks/useCompareToRunUuid';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { EvaluationRunCompareSelector } from './EvaluationRunCompareSelector';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  GenAiTraceEvaluationArtifactFile,\n  GenAiTracesTable,\n  GenAiTracesMarkdownConverterProvider,\n  STATE_COLUMN_ID,\n  TAGS_COLUMN_ID,\n  TracesTableColumn,\n  TracesTableColumnType,\n  RunEvaluationTracesDataEntry,\n  useGenAiTraceEvaluationArtifacts,\n} from '@databricks/web-shared/genai-traces-table';\nimport { useMarkdownConverter } from '../../../common/utils/MarkdownUtils';\nimport { useSearchRunsQuery } from '../run-page/hooks/useSearchRunsQuery';\nimport { useRunLoggedTraceTableArtifacts } from './hooks/useRunLoggedTraceTableArtifacts';\n\nasync function getTrace(requestId?: string, traceId?: string): Promise<ModelTrace | undefined> {\n  const [traceInfo, traceData] = await Promise.all([\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    MlflowService.getExperimentTraceInfo(requestId!).then((response) => response.trace_info || {}),\n    // get-trace-artifact is only currently supported in mlflow 2.0 apis\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    MlflowService.getExperimentTraceData(requestId!),\n  ]);\n  return traceData\n    ? {\n        info: traceInfo,\n        data: traceData,\n      }\n    : undefined;\n}\n\nexport const RunViewEvaluationsTabArtifacts = ({\n  experimentId,\n  runUuid,\n  runTags,\n  runDisplayName,\n  data,\n}: {\n  experimentId: string;\n  runUuid: string;\n  runTags?: Record<string, KeyValueEntity>;\n  runDisplayName: string;\n  data: RunEvaluationTracesDataEntry[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Determine which tables are logged in the run\n  const traceTablesLoggedInRun = useRunLoggedTraceTableArtifacts(runTags);\n\n  const noEvaluationTablesLogged = data?.length === 0;\n\n  const [compareToRunUuid, setCompareToRunUuid] = useCompareToRunUuid();\n\n  const makeHtmlFromMarkdown = useMarkdownConverter();\n\n  const {\n    data: compareToRunData,\n    displayName: compareToRunDisplayName,\n    loading: compareToRunLoading,\n  } = useGetCompareToDataWithArtifacts(experimentId, compareToRunUuid, traceTablesLoggedInRun);\n\n  if (compareToRunLoading) {\n    // TODO: Implement proper skeleton for this page\n    return <LegacySkeleton />;\n  }\n\n  const initialSelectedColumns = (allColumns: TracesTableColumn[]) => {\n    return allColumns.filter(\n      (col) =>\n        col.type === TracesTableColumnType.ASSESSMENT ||\n        col.type === TracesTableColumnType.INPUT ||\n        (col.type === TracesTableColumnType.TRACE_INFO &&\n          [EXECUTION_DURATION_COLUMN_ID, STATE_COLUMN_ID, TAGS_COLUMN_ID].includes(col.id)),\n    );\n  };\n\n  /**\n   * Determine whether to render the component from the shared codebase (GenAiTracesTable)\n   * or the legacy one from the local codebase (EvaluationsOverview).\n   */\n  const getOverviewTableComponent = () => {\n    const componentProps = {\n      experimentId,\n      currentRunDisplayName: runDisplayName,\n      currentEvaluationResults: data || [],\n      compareToEvaluationResults: compareToRunData,\n      runUuid,\n      compareToRunUuid,\n      compareToRunDisplayName,\n      compareToRunLoading,\n      getTrace,\n      initialSelectedColumns,\n    } as const;\n    return (\n      <GenAiTracesMarkdownConverterProvider makeHtml={makeHtmlFromMarkdown}>\n        <GenAiTracesTable {...componentProps} />\n      </GenAiTracesMarkdownConverterProvider>\n    );\n  };\n\n  if (noEvaluationTablesLogged) {\n    return (\n      <div css={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No evaluation tables logged\"\n              description=\"Run page > Evaluations tab > No evaluation tables logged\"\n            />\n          }\n          description={null}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.sm,\n        width: '100%',\n        overflowY: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          width: '100%',\n          padding: `${theme.spacing.xs}px 0`,\n        }}\n      >\n        <EvaluationRunCompareSelector\n          experimentId={experimentId}\n          currentRunUuid={runUuid}\n          compareToRunUuid={compareToRunUuid}\n          setCompareToRunUuid={setCompareToRunUuid}\n        />\n      </div>\n      {getOverviewTableComponent()}\n    </div>\n  );\n};\n\nconst useGetCompareToDataWithArtifacts = (\n  experimentId: string,\n  compareToRunUuid: string | undefined,\n  traceTablesLoggedInRun: GenAiTraceEvaluationArtifactFile[],\n): {\n  data: RunEvaluationTracesDataEntry[] | undefined;\n  displayName: string;\n  loading: boolean;\n} => {\n  const { data, isLoading: loading } = useGenAiTraceEvaluationArtifacts(\n    {\n      runUuid: compareToRunUuid || '',\n      artifacts: traceTablesLoggedInRun,\n    },\n    { disabled: isNil(compareToRunUuid) },\n  );\n\n  const { data: runData, loading: runDetailsLoading } = useSearchRunsQuery({\n    experimentIds: [experimentId],\n    filter: `attributes.runId = \"${compareToRunUuid}\"`,\n    disabled: isNil(compareToRunUuid),\n  });\n\n  return {\n    data,\n    displayName: Utils.getRunDisplayName(runData?.info, compareToRunUuid),\n    loading: loading || runDetailsLoading,\n  };\n};\n","import { isNil } from 'lodash';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { type KeyValueEntity } from '../../../common/types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useCompareToRunUuid } from './hooks/useCompareToRunUuid';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { EvaluationRunCompareSelector } from './EvaluationRunCompareSelector';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { ModelTrace } from '@databricks/web-shared/model-trace-explorer';\nimport { getEvalTabTotalTracesLimit } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  GenAiTracesMarkdownConverterProvider,\n  RUN_EVALUATION_RESULTS_TAB_COMPARE_RUNS,\n  RUN_EVALUATION_RESULTS_TAB_SINGLE_RUN,\n  getTracesTagKeys,\n  STATE_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  TracesTableColumn,\n  TracesTableColumnType,\n  useMlflowTracesTableMetadata,\n  useSelectedColumns,\n  useSearchMlflowTraces,\n  TraceActions,\n  GenAITracesTableToolbar,\n  GenAITracesTableProvider,\n  GenAITracesTableBodyContainer,\n  TraceInfoV3,\n  useGenAiTraceEvaluationArtifacts,\n  useFilters,\n  useTableSort,\n  TOKENS_COLUMN_ID,\n  invalidateMlflowSearchTracesCache,\n} from '@databricks/web-shared/genai-traces-table';\nimport { useRunLoggedTraceTableArtifacts } from './hooks/useRunLoggedTraceTableArtifacts';\nimport { useMarkdownConverter } from '../../../common/utils/MarkdownUtils';\nimport { useSearchRunsQuery } from '../run-page/hooks/useSearchRunsQuery';\nimport { useEditExperimentTraceTags } from '../traces/hooks/useEditExperimentTraceTags';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useDeleteTracesMutation } from './hooks/useDeleteTraces';\nimport { RunViewEvaluationsTabArtifacts } from './RunViewEvaluationsTabArtifacts';\nimport { useGetExperimentRunColor } from '../experiment-page/hooks/useExperimentRunColor';\nimport { useQueryClient } from '@databricks/web-shared/query-client';\n\nasync function getTrace(requestId?: string, traceId?: string): Promise<ModelTrace | undefined> {\n  const [traceInfo, traceData] = await Promise.all([\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    MlflowService.getExperimentTraceInfoV3(requestId!).then((response) => response.trace?.trace_info || {}),\n    // get-trace-artifact is only currently supported in mlflow 2.0 apis\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    MlflowService.getExperimentTraceData(requestId!),\n  ]);\n  return traceData\n    ? {\n        info: traceInfo,\n        data: traceData,\n      }\n    : undefined;\n}\n\nconst RunViewEvaluationsTabInner = ({\n  experimentId,\n  runUuid,\n  runTags,\n  runDisplayName,\n  setCurrentRunUuid,\n}: {\n  experimentId: string;\n  runUuid: string;\n  runTags?: Record<string, KeyValueEntity>;\n  runDisplayName: string;\n  setCurrentRunUuid?: (runUuid: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const makeHtmlFromMarkdown = useMarkdownConverter();\n\n  const [compareToRunUuid, setCompareToRunUuid] = useCompareToRunUuid();\n\n  // Get table metadata\n  const {\n    assessmentInfos,\n    allColumns,\n    totalCount,\n    isLoading: isTableMetadataLoading,\n    error: tableMetadataError,\n    tableFilterOptions,\n  } = useMlflowTracesTableMetadata({\n    experimentId,\n    runUuid,\n    otherRunUuid: compareToRunUuid,\n  });\n\n  // Setup table states\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filters, setFilters] = useFilters();\n  const getRunColor = useGetExperimentRunColor();\n  const queryClient = useQueryClient();\n\n  const defaultSelectedColumns = useCallback((columns: TracesTableColumn[]) => {\n    return columns.filter(\n      (col) =>\n        col.type === TracesTableColumnType.ASSESSMENT ||\n        col.type === TracesTableColumnType.INPUT ||\n        (col.type === TracesTableColumnType.TRACE_INFO &&\n          [EXECUTION_DURATION_COLUMN_ID, RESPONSE_COLUMN_ID, STATE_COLUMN_ID, TOKENS_COLUMN_ID].includes(col.id)),\n    );\n  }, []);\n\n  const { selectedColumns, toggleColumns, setSelectedColumns } = useSelectedColumns(\n    experimentId,\n    allColumns,\n    defaultSelectedColumns,\n    runUuid,\n  );\n\n  const [tableSort, setTableSort] = useTableSort(selectedColumns);\n\n  // Get traces data\n  const {\n    data: traceInfos,\n    isLoading: traceInfosLoading,\n    error: traceInfosError,\n    refetchMlflowTraces,\n  } = useSearchMlflowTraces({\n    experimentId,\n    currentRunDisplayName: runDisplayName,\n    searchQuery,\n    filters,\n    runUuid,\n    tableSort,\n  });\n\n  const deleteTracesMutation = useDeleteTracesMutation();\n\n  const {\n    data: compareToRunData,\n    displayName: compareToRunDisplayName,\n    loading: compareToRunLoading,\n  } = useGetCompareToData(experimentId, compareToRunUuid);\n\n  const countInfo = useMemo(() => {\n    return {\n      currentCount: traceInfos?.length,\n      logCountLoading: traceInfosLoading,\n      totalCount: totalCount,\n      maxAllowedCount: getEvalTabTotalTracesLimit(),\n    };\n  }, [traceInfos, traceInfosLoading, totalCount]);\n\n  // TODO: We should update this to use web-shared/unified-tagging components for the\n  // tag editor and react-query mutations for the apis.\n  const { showEditTagsModalForTrace, EditTagsModal } = useEditExperimentTraceTags({\n    onSuccess: () => invalidateMlflowSearchTracesCache({ queryClient }),\n    existingTagKeys: getTracesTagKeys(traceInfos || []),\n    useV3Apis: true,\n  });\n\n  const traceActions: TraceActions = useMemo(() => {\n    return {\n      deleteTracesAction: {\n        deleteTraces: (experimentId: string, traceIds: string[]) =>\n          deleteTracesMutation.mutateAsync({ experimentId, traceRequestIds: traceIds }),\n      },\n      exportToEvals: {\n        exportToEvalsInstanceEnabled: true,\n        getTrace,\n      },\n      editTags: {\n        showEditTagsModalForTrace,\n        EditTagsModal,\n      },\n    };\n  }, [deleteTracesMutation, showEditTagsModalForTrace, EditTagsModal]);\n\n  const isTableLoading = traceInfosLoading || compareToRunLoading;\n\n  if (isTableMetadataLoading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (tableMetadataError) {\n    return (\n      <div>\n        <pre>{String(tableMetadataError)}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.sm,\n        width: '100%',\n        overflowY: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          width: '100%',\n          padding: `${theme.spacing.xs}px 0`,\n        }}\n      >\n        <EvaluationRunCompareSelector\n          experimentId={experimentId}\n          currentRunUuid={runUuid}\n          compareToRunUuid={compareToRunUuid}\n          setCompareToRunUuid={setCompareToRunUuid}\n          setCurrentRunUuid={setCurrentRunUuid}\n        />\n      </div>\n      <GenAITracesTableProvider>\n        <div\n          css={{\n            overflowY: 'hidden',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <GenAITracesTableToolbar\n            experimentId={experimentId}\n            searchQuery={searchQuery}\n            setSearchQuery={setSearchQuery}\n            filters={filters}\n            setFilters={setFilters}\n            assessmentInfos={assessmentInfos}\n            countInfo={countInfo}\n            traceActions={traceActions}\n            tableSort={tableSort}\n            setTableSort={setTableSort}\n            allColumns={allColumns}\n            selectedColumns={selectedColumns}\n            setSelectedColumns={setSelectedColumns}\n            toggleColumns={toggleColumns}\n            traceInfos={traceInfos}\n            tableFilterOptions={tableFilterOptions}\n          />\n          {isTableLoading ? (\n            <LoadingSkeleton />\n          ) : traceInfosError ? (\n            <div>\n              <pre>{String(traceInfosError)}</pre>\n            </div>\n          ) : (\n            <GenAiTracesMarkdownConverterProvider makeHtml={makeHtmlFromMarkdown}>\n              <GenAITracesTableBodyContainer\n                experimentId={experimentId}\n                currentRunDisplayName={runDisplayName}\n                compareToRunDisplayName={compareToRunDisplayName}\n                compareToRunUuid={compareToRunUuid}\n                getTrace={getTrace}\n                getRunColor={getRunColor}\n                assessmentInfos={assessmentInfos}\n                setFilters={setFilters}\n                filters={filters}\n                selectedColumns={selectedColumns}\n                allColumns={allColumns}\n                tableSort={tableSort}\n                currentTraceInfoV3={traceInfos || []}\n                compareToTraceInfoV3={compareToRunData}\n                onTraceTagsEdit={showEditTagsModalForTrace}\n              />\n            </GenAiTracesMarkdownConverterProvider>\n          )}\n          {EditTagsModal}\n        </div>\n      </GenAITracesTableProvider>\n    </div>\n  );\n};\n\nexport const RunViewEvaluationsTab = ({\n  experimentId,\n  runUuid,\n  runTags,\n  runDisplayName,\n  setCurrentRunUuid,\n}: {\n  experimentId: string;\n  runUuid: string;\n  runTags?: Record<string, KeyValueEntity>;\n  runDisplayName: string;\n  // used in evaluation runs tab\n  setCurrentRunUuid?: (runUuid: string) => void;\n}) => {\n  // Determine which tables are logged in the run\n  const traceTablesLoggedInRun = useRunLoggedTraceTableArtifacts(runTags);\n  const isArtifactCallEnabled = Boolean(runUuid);\n\n  const { data: artifactData, isLoading: isArtifactLoading } = useGenAiTraceEvaluationArtifacts(\n    {\n      runUuid: runUuid || '',\n      ...{ artifacts: traceTablesLoggedInRun ? traceTablesLoggedInRun : undefined },\n    },\n    { disabled: !isArtifactCallEnabled },\n  );\n\n  if (isArtifactLoading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (!isNil(artifactData) && artifactData.length > 0) {\n    return (\n      <RunViewEvaluationsTabArtifacts\n        experimentId={experimentId}\n        runUuid={runUuid}\n        runDisplayName={runDisplayName}\n        data={artifactData}\n        runTags={runTags}\n      />\n    );\n  }\n\n  return (\n    <RunViewEvaluationsTabInner\n      experimentId={experimentId}\n      runUuid={runUuid}\n      runDisplayName={runDisplayName}\n      setCurrentRunUuid={setCurrentRunUuid}\n    />\n  );\n};\n\nconst LoadingSkeleton = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'block', marginTop: theme.spacing.md, height: '100%', width: '100%' }}>\n      {[...Array(10).keys()].map((i) => (\n        <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n      ))}\n    </div>\n  );\n};\n\nconst useGetCompareToData = (\n  experimentId: string,\n  compareToRunUuid: string | undefined,\n): {\n  data: TraceInfoV3[] | undefined;\n  displayName: string;\n  loading: boolean;\n} => {\n  const { data: traceInfos, isLoading: traceInfosLoading } = useSearchMlflowTraces({\n    experimentId,\n    currentRunDisplayName: undefined,\n    runUuid: compareToRunUuid,\n    disabled: isNil(compareToRunUuid),\n  });\n\n  const { data: runData, loading: runDetailsLoading } = useSearchRunsQuery({\n    experimentIds: [experimentId],\n    filter: `attributes.runId = \"${compareToRunUuid}\"`,\n    disabled: isNil(compareToRunUuid),\n  });\n\n  return {\n    data: traceInfos,\n    displayName: Utils.getRunDisplayName(runData?.info, compareToRunUuid),\n    loading: traceInfosLoading || runDetailsLoading,\n  };\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport {\n  shouldEnableGraphQLRunDetailsPage,\n  shouldUseGetLoggedModelsBatchAPI,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { RunViewTracesTab } from './RunViewTracesTab';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\nimport { useLoggedModelsForExperimentRun } from '../experiment-page/hooks/useLoggedModelsForExperimentRun';\nimport { useLoggedModelsForExperimentRunV2 } from '../experiment-page/hooks/useLoggedModelsForExperimentRunV2';\nimport { RunViewEvaluationsTab } from '../evaluations/RunViewEvaluationsTab';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n    runInputs,\n    runOutputs,\n    registeredModelVersionSummaries,\n  } = useRunDetailsPageData({\n    experimentId,\n    runUuid,\n  });\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const isUsingGetLoggedModelsApi = shouldUseGetLoggedModelsBatchAPI();\n\n  const loggedModelsForRun = useLoggedModelsForExperimentRun(\n    experimentId,\n    runUuid,\n    runInputs,\n    runOutputs,\n    !isUsingGetLoggedModelsApi,\n  );\n  const loggedModelsForRunV2 = useLoggedModelsForExperimentRunV2({\n    runInputs,\n    runOutputs,\n    enabled: isUsingGetLoggedModelsApi,\n  });\n\n  const {\n    error: loggedModelsError,\n    isLoading: isLoadingLoggedModels,\n    models: loggedModelsV3,\n  } = isUsingGetLoggedModelsApi ? loggedModelsForRunV2 : loggedModelsForRun;\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"model\"\n            mode=\"model\"\n            metricKeys={modelMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"system\"\n            mode=\"system\"\n            metricKeys={systemMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={runUuid}\n            runTags={tags}\n            runOutputs={runOutputs}\n            experimentId={experimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        return (\n          <RunViewEvaluationsTab\n            runUuid={runUuid}\n            runTags={tags}\n            experimentId={experimentId}\n            runDisplayName={Utils.getRunDisplayName(runInfo, runUuid)}\n          />\n        );\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={runUuid}\n        onRunDataUpdated={refetchRun}\n        runInputs={runInputs}\n        runOutputs={runOutputs}\n        datasets={datasets}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n        loggedModelsV3={loggedModelsV3}\n        isLoadingLoggedModels={isLoadingLoggedModels}\n        loggedModelsError={loggedModelsError ?? undefined}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={runUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (shouldEnableGraphQLRunDetailsPage() && (error || apiError)) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, runUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={runUuid}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n          registeredModelVersionSummaries={registeredModelVersionSummaries}\n          isLoading={loading || isLoadingLoggedModels}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={runUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[runUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(experimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","import { useMemo } from 'react';\nimport { useSearchLoggedModelsQuery } from '../../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRun = (\n  experimentId: string,\n  runId: string,\n  runInputs?: UseGetRunQueryResponseInputs,\n  runOutputs?: UseGetRunQueryResponseOutputs,\n  enabled = true,\n) => {\n  const searchQuery = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return `attributes.model_id IN (${modelIds.map((id) => `'${id}'`).join(',')})`;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && Boolean(searchQuery);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useSearchLoggedModelsQuery(\n    { experimentIds: [experimentId], searchQuery },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return {\n    // We explicitly check if the hook is supposed to be enabled before returning data,\n    // otherwise react-query might erroneously return data from the cache.\n    models: isHookEnabled ? loggedModelsData : undefined,\n    // Same goes for `isLoading` which sometimes returns `true` despite the hook being disabled.\n    isLoading: isHookEnabled && isLoading,\n    error,\n  };\n};\n","import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport { IntlShape, injectIntl } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n};\n\nexport class DeleteRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const deletePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n                params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function TagAssignmentRowContainer({ children }: { children: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n  return <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>{children}</div>;\n}\n","import invariant from 'invariant';\nimport { createContext, useContext } from 'react';\nimport type { FieldValues, ArrayPath, FieldArray } from 'react-hook-form';\n\nimport type { UseTagAssignmentFormReturn } from '../hooks/useTagAssignmentForm';\n\nexport const TagAssignmentContext = createContext<UseTagAssignmentFormReturn | null>(null);\n\nexport function TagAssignmentContextProvider<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ children, ...props }: { children: React.ReactNode } & UseTagAssignmentFormReturn<T, K, V>) {\n  return <TagAssignmentContext.Provider value={props as any}>{children}</TagAssignmentContext.Provider>;\n}\n\nexport function useTagAssignmentContext<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>() {\n  const context = useContext(TagAssignmentContext as React.Context<UseTagAssignmentFormReturn<T, K, V> | null>);\n  invariant(context, 'useTagAssignmentContext must be used within a TagAssignmentRoot');\n  return context;\n}\n","import invariant from 'invariant';\nimport type { ArrayPath, FieldArray, FieldValues } from 'react-hook-form';\nimport { FormProvider, useFormContext } from 'react-hook-form';\n\nimport { TagAssignmentRowContainer } from './TagAssignmentUI/TagAssignmentRowContainer';\nimport { TagAssignmentContextProvider } from '../context/TagAssignmentContextProvider';\nimport type { UseTagAssignmentFormReturn } from '../hooks/useTagAssignmentForm';\n\nexport function TagAssignmentRoot<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ children, ...props }: { children: React.ReactNode } & UseTagAssignmentFormReturn<T, K, V>) {\n  const formCtx = useFormContext();\n\n  const Component = (\n    <TagAssignmentContextProvider {...props}>\n      <TagAssignmentRowContainer>{children}</TagAssignmentRowContainer>\n    </TagAssignmentContextProvider>\n  );\n\n  if (formCtx) {\n    return Component;\n  }\n\n  invariant(props.form, 'Nest your component on a FormProvider or pass a form prop');\n\n  return <FormProvider {...props.form}>{Component}</FormProvider>;\n}\n","import invariant from 'invariant';\nimport React from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function TagAssignmentRow({ children }: { children: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n\n  const stableChildren = React.Children.toArray(children);\n  invariant(stableChildren.length <= 3, 'TagAssignmentRow must have 3 children or less');\n\n  const parsedChildren = Array(3)\n    .fill(null)\n    .map((_, i) => stableChildren[i] ?? <span key={i} style={{ width: theme.general.heightSm }} />); // Sync width with only icon button width\n\n  return (\n    <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr min-content', gap: theme.spacing.sm }}>\n      {parsedChildren}\n    </div>\n  );\n}\n","import { Typography } from '@databricks/design-system';\n\nexport function TagAssignmentLabel({ children }: { children: React.ReactNode }) {\n  return <Typography.Text bold>{children}</Typography.Text>;\n}\n","import { forwardRef } from 'react';\n\nimport type { InputProps, InputRef } from '@databricks/design-system';\nimport { FormUI, Input } from '@databricks/design-system';\n\ninterface TagAssignmentInputProps extends InputProps {\n  errorMessage?: string;\n}\n\nexport const TagAssignmentInput: React.ForwardRefExoticComponent<\n  TagAssignmentInputProps & React.RefAttributes<InputRef>\n> = forwardRef<InputRef, TagAssignmentInputProps>(({ errorMessage, ...otherProps }: TagAssignmentInputProps, ref) => {\n  return (\n    <div css={{ flex: 1 }}>\n      <Input validationState={errorMessage ? 'error' : 'info'} {...otherProps} ref={ref} />\n      {errorMessage && <FormUI.Message message={errorMessage} type=\"error\" />}\n    </div>\n  );\n});\n","// Do not modify this file\n\nimport React from 'react';\nimport type { ControllerProps, FieldValues, Path, UseControllerProps } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport { TagAssignmentInput } from './TagAssignmentField/TagAssignmentInput';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\ninterface TagAssignmentKeyProps<T extends FieldValues> {\n  index: number;\n  rules?: UseControllerProps<T>['rules'];\n  render?: ControllerProps<T>['render'];\n}\n\nexport function TagAssignmentKey<T extends FieldValues>({ index, rules, render }: TagAssignmentKeyProps<T>) {\n  const { name, keyProperty, getTagsValues, emptyValue, appendIfPossible } = useTagAssignmentContext<T>();\n\n  return (\n    <Controller\n      name={`${name}.${index}.${keyProperty}` as Path<T>}\n      rules={rules}\n      render={({ field, fieldState, formState }) => {\n        const legacyChange = field.onChange;\n\n        function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n          legacyChange(e);\n\n          const tags = getTagsValues();\n          if (!tags?.at(-1)?.[keyProperty]) return;\n          appendIfPossible(emptyValue, { shouldFocus: false });\n        }\n        field.onChange = handleChange;\n\n        if (render) {\n          return render({ field, fieldState, formState });\n        }\n\n        return (\n          <TagAssignmentInput\n            componentId=\"TagAssignmentKey.Default.Input\"\n            errorMessage={fieldState.error?.message}\n            {...field}\n          />\n        );\n      }}\n    />\n  );\n}\n","// Do not modify this file\n\nimport type { ControllerProps, FieldValues, Path } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport { TagAssignmentInput } from './TagAssignmentField/TagAssignmentInput';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\ninterface TagAssignmentValueProps<T extends FieldValues> {\n  rules?: ControllerProps<T>['rules'];\n  index: number;\n  render?: ControllerProps<T>['render'];\n}\n\nexport function TagAssignmentValue<T extends FieldValues>({ rules, index, render }: TagAssignmentValueProps<T>) {\n  const { name, valueProperty } = useTagAssignmentContext<T>();\n\n  return (\n    <Controller\n      rules={rules}\n      name={`${name}.${index}.${valueProperty}` as Path<T>}\n      render={({ field, fieldState, formState }) => {\n        if (render) {\n          return render({ field, fieldState, formState });\n        }\n\n        return (\n          <TagAssignmentInput\n            componentId=\"TagAssignmentValue.Default.Input\"\n            errorMessage={fieldState.error?.message}\n            {...field}\n          />\n        );\n      }}\n    />\n  );\n}\n","import type { ButtonProps } from '@databricks/design-system';\nimport { Button, TrashIcon } from '@databricks/design-system';\n\nexport function TagAssignmentRemoveButtonUI(props: Omit<ButtonProps, 'icon'>) {\n  return <Button icon={<TrashIcon />} {...props} />;\n}\n","import type { ButtonProps } from '@databricks/design-system';\n\nimport { TagAssignmentRemoveButtonUI } from './TagAssignmentUI/TagAssignmentRemoveButtonUI';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\nexport interface TagAssignmentRemoveButtonProps extends Omit<ButtonProps, 'onClick' | 'icon'> {\n  index: number;\n}\n\nexport function TagAssignmentRemoveButton({ index, ...props }: TagAssignmentRemoveButtonProps) {\n  const { removeOrUpdate } = useTagAssignmentContext();\n\n  return <TagAssignmentRemoveButtonUI onClick={() => removeOrUpdate(index)} {...props} />;\n}\n","import invariant from 'invariant';\nimport { useCallback, useState } from 'react';\nimport type { ArrayPath, FieldArray, FieldArrayMethodProps, FieldValues, Path } from 'react-hook-form';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { useIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\n\nimport type { UseTagAssignmentProps } from './useTagAssignmentForm';\n\nfunction getTagAssignmentRules(maxLength: number | undefined, intl: IntlShape) {\n  if (maxLength === undefined) return undefined;\n  if (maxLength === 0) {\n    invariant(false, 'maxLength must be greater than 0');\n  }\n  return {\n    maxLength: {\n      value: maxLength,\n      message: intl.formatMessage(\n        {\n          defaultMessage: `You can set a maximum of {maxLength} values`,\n          description:\n            'Error message when trying to submit a key-value pair form with more than the maximum allowed values',\n        },\n        {\n          maxLength,\n        },\n      ),\n    },\n  };\n}\n\ntype UseTagAssignmentFieldArrayProps<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = Pick<UseTagAssignmentProps<T, K, V>, 'name' | 'maxLength' | 'emptyValue' | 'form' | 'keyProperty'>;\n\n/**\n * Alternative to useTagAssignmentForm that only provides a wrapper around RHF's useFieldArray without any\n * side effects to initialize the form state.\n *\n * As with useFieldArray, the caller is expected to manage the form state themselves using these methods.\n * For conformance to the unified tagging pattern, there are 2 key things you are responsible for:\n *   1. Initialize the form state with an empty tag\n *   2. Call appendIfPossible when the user inputs something into the last tag key field\n */\nexport function useTagAssignmentFieldArray<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ name, maxLength, emptyValue, form, keyProperty }: UseTagAssignmentFieldArrayProps<T, K, V>) {\n  const intl = useIntl();\n\n  const formCtx = useFormContext<T>();\n  const shouldUseFormContext = Boolean(formCtx) && !form;\n  const internalForm = shouldUseFormContext ? formCtx : form;\n\n  invariant(internalForm, 'Nest your component on a FormProvider or pass a form prop');\n\n  const [_emptyValue] = useState(emptyValue);\n  const {\n    append: originalAppend,\n    update,\n    remove: originalRemove,\n    ...fieldArrayMethods\n  } = useFieldArray<T, K>({\n    name,\n    control: internalForm.control,\n    rules: getTagAssignmentRules(maxLength, intl),\n  });\n\n  const { getValues } = internalForm;\n\n  const getTagsValues = useCallback(() => {\n    return getValues(name as Path<T>) as V[] | undefined;\n  }, [getValues, name]);\n\n  const appendIfPossible = useCallback(\n    (value: V | V[], options: FieldArrayMethodProps) => {\n      const tags = getTagsValues();\n      if (maxLength && tags && tags.length >= maxLength) return;\n      originalAppend(value, options);\n    },\n    [getTagsValues, maxLength, originalAppend],\n  );\n\n  const removeOrUpdate = useCallback(\n    (index: number) => {\n      const tags = getTagsValues();\n      if (tags && index === tags.length - 1) {\n        return update(index, _emptyValue);\n      }\n      const lastTag = tags?.at(-1);\n      if (lastTag?.[keyProperty]) {\n        originalRemove(index);\n        originalAppend(_emptyValue, { shouldFocus: false });\n        return;\n      }\n      originalRemove(index);\n    },\n    [_emptyValue, getTagsValues, keyProperty, originalAppend, originalRemove, update],\n  );\n\n  return {\n    form: internalForm,\n    ...fieldArrayMethods,\n    originalAppend,\n    update,\n    originalRemove,\n    appendIfPossible,\n    removeOrUpdate,\n    getTagsValues,\n  };\n}\n\nexport type UseTagAssignmentFieldArrayReturn<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = ReturnType<typeof useTagAssignmentFieldArray<T, K, V>>;\n","import invariant from 'invariant';\nimport { useEffect, useState } from 'react';\nimport type { ArrayPath, FieldArray, FieldValues, Path, PathValue, UseFormReturn } from 'react-hook-form';\nimport { useFormContext } from 'react-hook-form';\n\nimport { useTagAssignmentFieldArray } from './useTagAssignmentFieldArray';\n\nexport interface UseTagAssignmentProps<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> {\n  name: K;\n  maxLength?: number;\n  emptyValue: V;\n  loading?: boolean;\n  defaultValues?: V[];\n  form?: UseFormReturn<T>;\n  keyProperty: keyof V extends string ? keyof V : never;\n  valueProperty: keyof V extends string ? keyof V : never;\n}\n\nexport function useTagAssignmentForm<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({\n  name,\n  maxLength,\n  emptyValue,\n  defaultValues,\n  loading,\n  form,\n  keyProperty,\n  valueProperty,\n}: UseTagAssignmentProps<T, K, V>) {\n  const [_emptyValue] = useState(emptyValue);\n\n  const formCtx = useFormContext<T>();\n  const shouldUseFormContext = Boolean(formCtx) && !form;\n  const internalForm = shouldUseFormContext ? formCtx : form;\n\n  invariant(internalForm, 'Nest your component on a FormProvider or pass a form prop');\n  invariant(!(defaultValues && shouldUseFormContext), 'Define defaultValues at form context level');\n\n  const { setValue } = internalForm;\n\n  const fieldArrayMethods = useTagAssignmentFieldArray({\n    name,\n    maxLength,\n    emptyValue,\n    form: internalForm,\n    keyProperty,\n  });\n  const getTagsValues = fieldArrayMethods.getTagsValues;\n\n  useEffect(() => {\n    if (loading) return;\n    if (defaultValues) {\n      const newValues = [...defaultValues];\n      if (!maxLength || (maxLength && newValues.length < maxLength)) {\n        newValues.push(_emptyValue);\n      }\n      setValue(name as Path<T>, newValues as PathValue<T, Path<T>>);\n      return;\n    }\n\n    if (shouldUseFormContext) {\n      const existentValues = getTagsValues() ?? [];\n      if (!maxLength || (maxLength && existentValues.length < maxLength)) {\n        existentValues.push(_emptyValue);\n      }\n      setValue(name as Path<T>, existentValues as PathValue<T, Path<T>>);\n      return;\n    }\n\n    setValue(name as Path<T>, [_emptyValue] as PathValue<T, Path<T>>);\n  }, [defaultValues, setValue, loading, maxLength, name, _emptyValue, shouldUseFormContext, getTagsValues]);\n\n  return {\n    ...fieldArrayMethods,\n    form: internalForm,\n    maxLength,\n    emptyValue,\n    name,\n    keyProperty,\n    valueProperty,\n  };\n}\n\nexport type UseTagAssignmentFormReturn<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = ReturnType<typeof useTagAssignmentForm<T, K, V>>;\n","import {\n  useTagAssignmentForm,\n  TagAssignmentRoot,\n  TagAssignmentRow,\n  TagAssignmentLabel,\n  TagAssignmentKey,\n  TagAssignmentValue,\n  TagAssignmentRemoveButton,\n} from '@databricks/web-shared/unified-tagging';\nimport { UseFormReturn } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { KeyValueEntity } from '../types';\n\nconst keyProperty = 'key';\nconst valueProperty = 'value';\n\ninterface Props {\n  name: string;\n  form: UseFormReturn<any>;\n  initialTags?: KeyValueEntity[];\n}\n\n/**\n * A component used for displaying the unified tagging form.\n */\nexport const UnifiedTaggingForm = ({ form, name, initialTags }: Props) => {\n  const intl = useIntl();\n\n  const tagsForm = useTagAssignmentForm({\n    name,\n    emptyValue: { key: '', value: '' },\n    keyProperty,\n    valueProperty,\n    form,\n    defaultValues: initialTags,\n  });\n\n  return (\n    <TagAssignmentRoot {...tagsForm}>\n      <TagAssignmentRow>\n        <TagAssignmentLabel>\n          <FormattedMessage defaultMessage=\"Key\" description=\"Tag assignment modal > Key label\" />\n        </TagAssignmentLabel>\n        <TagAssignmentLabel>\n          <FormattedMessage defaultMessage=\"Value\" description=\"Tag assignment modal > Value label\" />\n        </TagAssignmentLabel>\n      </TagAssignmentRow>\n\n      {tagsForm.fields.map((field, index) => {\n        return (\n          <TagAssignmentRow key={field.id}>\n            <TagAssignmentKey\n              index={index}\n              rules={{\n                validate: {\n                  unique: (value) => {\n                    const tags = tagsForm.getTagsValues();\n                    if (tags?.findIndex((tag) => tag[keyProperty] === value) !== index) {\n                      return intl.formatMessage({\n                        defaultMessage: 'Key must be unique',\n                        description: 'Error message for unique key in tag assignment modal',\n                      });\n                    }\n                    return true;\n                  },\n                  required: (value) => {\n                    const tags = tagsForm.getTagsValues();\n                    if (tags?.at(index)?.[valueProperty] && !value) {\n                      return intl.formatMessage({\n                        defaultMessage: 'Key is required if value is present',\n                        description: 'Error message for required key in tag assignment modal',\n                      });\n                    }\n                    return true;\n                  },\n                },\n              }}\n            />\n            <TagAssignmentValue index={index} />\n            <TagAssignmentRemoveButton index={index} componentId=\"endpoint-tags-section.remove-button\" />\n          </TagAssignmentRow>\n        );\n      })}\n    </TagAssignmentRoot>\n  );\n};\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Modal, Button, Alert, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { FieldValues } from 'react-hook-form';\nimport { KeyValueEntity } from '../types';\nimport { UnifiedTaggingForm } from '../components/UnifiedTaggingForm';\n\ninterface Params {\n  componentIdPrefix: string;\n  title?: React.ReactNode;\n  isLoading?: boolean;\n  visible?: boolean;\n  initialTags?: KeyValueEntity[];\n  error?: string;\n  onSubmit: (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]) => Promise<any>;\n  onSuccess?: () => void;\n  onClose?: () => void;\n}\n\nconst keyProperty = 'key' as const;\nconst valueProperty = 'value' as const;\nconst formName = 'tags';\n\nconst emptyValue = { key: '', value: '' };\n\nexport const useTagAssignmentModal = ({\n  componentIdPrefix,\n  title,\n  visible,\n  initialTags,\n  isLoading = false,\n  error,\n  onSubmit,\n  onSuccess,\n  onClose,\n}: Params) => {\n  const baseComponentId = `${componentIdPrefix}.tag-assignment-modal`;\n\n  const [isVisible, setIsVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n  const form = useForm<{ tags: KeyValueEntity[] }>({ mode: 'onChange' });\n\n  const showTagAssignmentModal = () => {\n    setIsVisible(true);\n  };\n\n  const hideTagAssignmentModal = () => {\n    setIsVisible(false);\n    form.reset({ [formName]: [emptyValue] });\n    onClose?.();\n  };\n\n  const handleSubmit = (data: FieldValues) => {\n    const tags: KeyValueEntity[] = data[formName].filter((tag: FieldValues) => Boolean(tag[keyProperty]));\n    const newTags =\n      tags.filter(\n        (tag) =>\n          !initialTags?.some((t) => t[keyProperty] === tag[keyProperty] && t[valueProperty] === tag[valueProperty]),\n      ) ?? [];\n    const deletedTags =\n      initialTags?.filter(\n        (tag) => !tags.some((t) => t[keyProperty] === tag[keyProperty] && t[valueProperty] === tag[valueProperty]),\n      ) ?? [];\n\n    onSubmit(newTags, deletedTags).then(() => {\n      hideTagAssignmentModal();\n      onSuccess?.();\n    });\n  };\n\n  const defaultTitleNode = (\n    <FormattedMessage defaultMessage=\"Add tags\" description=\"Tag assignment modal > Title of the add tags modal\" />\n  );\n\n  const TagAssignmentModal = (\n    <Modal\n      componentId={`${baseComponentId}`}\n      title={title ?? defaultTitleNode}\n      visible={visible ?? isVisible}\n      destroyOnClose\n      onCancel={hideTagAssignmentModal}\n      footer={\n        <>\n          <Button\n            componentId={`${baseComponentId}.submit-button`}\n            onClick={hideTagAssignmentModal}\n            disabled={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Cancel\" description=\"Tag assignment modal > Cancel button\" />\n          </Button>\n          <Button\n            componentId={`${baseComponentId}.submit-button`}\n            type=\"primary\"\n            onClick={form.handleSubmit(handleSubmit)}\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Save\" description=\"Tag assignment modal > Save button\" />\n          </Button>\n        </>\n      }\n    >\n      {error && (\n        <Alert\n          type=\"error\"\n          message={error}\n          componentId={`${baseComponentId}.error`}\n          closable={false}\n          css={{ marginBottom: theme.spacing.sm }}\n        />\n      )}\n      <UnifiedTaggingForm name={formName} form={form} initialTags={initialTags} />\n    </Modal>\n  );\n\n  return {\n    TagAssignmentModal,\n    showTagAssignmentModal,\n    hideTagAssignmentModal,\n  };\n};\n\nexport type { Params as TagAssignmentModalParams };\n","import { useCallback, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { useIntl } from 'react-intl';\nimport { Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const RunsChartsFilterInput = ({ chartsSearchFilter }: { chartsSearchFilter?: string }) => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  const { theme } = useDesignSystemTheme();\n\n  const [inputValue, setInputValue] = useState(() => chartsSearchFilter ?? '');\n  const [searching, setSearching] = useState(false);\n\n  const { formatMessage } = useIntl();\n\n  const updateChartFilter = useCallback(\n    (value: string) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        chartsSearchFilter: value,\n      }));\n      setSearching(false);\n    },\n    [updateChartsUIState],\n  );\n\n  const updateChartFilterDebounced = useDebouncedCallback(updateChartFilter, 150);\n\n  return (\n    <Input\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfilterinput.tsx_30\"\n      role=\"searchbox\"\n      prefix={\n        <div css={{ width: theme.general.iconFontSize, lineHeight: 0 }}>\n          {searching ? <Spinner size=\"small\" /> : <SearchIcon />}\n        </div>\n      }\n      value={inputValue}\n      allowClear\n      onChange={(e) => {\n        setInputValue(e.target.value);\n        setSearching(true);\n        updateChartFilterDebounced(e.target.value);\n      }}\n      placeholder={formatMessage({\n        defaultMessage: 'Search metric charts',\n        description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n      })}\n    />\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: 'calc(100% - 60px)', // 60px comes from header height\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IntlShape, injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: () => void;\n  updateRunApi: (runId: string, newName: string, id: string) => any;\n  intl: IntlShape;\n  onSuccess?: () => void;\n};\n\nclass RenameRunModalImpl extends Component<Props> {\n  formRef = React.createRef();\n\n  handleRenameRun = (values: Record<string, string>) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen = false, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          innerRef={this.formRef}\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { listImagesApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from '@mlflow/mlflow/src/experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n","import {\n  type QueryFunctionContext,\n  useQuery,\n  type UseQueryOptions,\n} from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { LoggedModelProto } from '../../types';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { chunk } from 'lodash';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nconst LOGGED_MODEL_BY_ID_BATCH_LIMIT = 100; // API supports batch size of 100\n\ntype QueryResult = {\n  models?: LoggedModelProto[];\n};\n\ntype QueryKey = ['GET_LOGGED_MODELS', string[]];\n\nconst getQueryKey = (loggedModelIds: string[]): QueryKey => ['GET_LOGGED_MODELS', loggedModelIds] as const;\n\nconst queryFn = async ({ queryKey: [, loggedModelIds] }: QueryFunctionContext<QueryKey>): Promise<QueryResult[]> => {\n  const modelIdChunks = chunk(loggedModelIds, LOGGED_MODEL_BY_ID_BATCH_LIMIT);\n  return Promise.all<QueryResult>(\n    modelIdChunks.map((chunkedIds) => {\n      const queryParams = new URLSearchParams();\n      for (const id of chunkedIds) {\n        queryParams.append('model_ids', id);\n      }\n      return loggedModelsDataRequest(\n        getAjaxUrl(`ajax-api/2.0/mlflow/logged-models:batchGet?${queryParams.toString()}`),\n        'GET',\n      );\n    }),\n  );\n};\n\n/**\n * Retrieve many logged model from API based on IDs\n */\nexport const useGetLoggedModelsQuery = (\n  {\n    modelIds,\n  }: {\n    modelIds?: string[];\n  },\n  options: UseQueryOptions<QueryResult[], Error, LoggedModelProto[], QueryKey>,\n) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<QueryResult[], Error, LoggedModelProto[], QueryKey>({\n    queryKey: getQueryKey(modelIds ?? []),\n    queryFn,\n    select: (results) => results?.flatMap((result) => result?.models || []),\n    retry: false,\n    ...options,\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data,\n    refetch,\n    error,\n  } as const;\n};\n"],"names":["_ref","name","styles","_ref2","_ref3","RunsChartsGlobalChartSettingsDropdown","globalLineChartConfig","metricKeyList","updateUIState","theme","useDesignSystemTheme","intl","useIntl","lineSmoothness","selectedXAxisMetricKey","xAxisKey","updateGlobalLineChartSettings","useCallback","newSettings","state","isUsingGlobalMetricXaxis","RunsChartsLineChartXAxisType","METRIC","label","formatMessage","id","defaultMessage","_jsxs","DropdownMenu","Root","modal","children","_jsx","Tooltip","componentId","content","Trigger","asChild","Button","icon","GearIcon","Content","align","css","Group","role","Label","FormattedMessage","CheckboxItem","checked","STEP","onClick","ItemIndicator","TIME","TIME_RELATIVE","Sub","SubTrigger","_css","paddingLeft","spacing","xs","sm","IconWrapper","CheckIcon","visibility","SubContent","map","metricKey","padding","LineSmoothSlider","min","max","onChange","value","useIsTabActive","isTabActive","setIsTabActive","useState","document","visibilityState","useEffect","addEventListener","x","RunViewArtifactTab","runTags","experimentId","runOutputs","artifactUri","runUuid","useFullHeightPage","useMediaQuery","responsive","breakpoints","flex","overflow","display","paddingBottom","md","position","ArtifactPage","useAutoHeight","artifactRootUri","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","TRACES","match","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","EVALUATIONS","RunViewModeSwitch","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","includes","LegacyTabs","activeKey","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","title","sectionModels","model","registeredModelSummary","first","registeredModelVersionSummaries","Item","marginRight","last","path","split","HintColumn","Link","target","to","type","size","e","stopPropagation","endIcon","NewWindowIcon","absolutePath","status","displayedName","version","link","RegisteredModelOkIcon","ModelVersionStatusIcons","Tag","registeredModels","filter","length","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","loggedModelPaths","useMemo","Utils","getLoggedModelsFromTags","artifactPath","orderBy","source","_model$registeredMode","parseInt","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","RegisterModel","modelPath","modelRelativePath","disabled","showButton","modalVisible","onCloseModal","LegacyTooltip","placement","values","registeredCount","loggedCount","ChevronDownIcon","singleModel","registeredModelVersionSummary","marginLeft","buttonType","RunViewHeader","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","isLoading","breadcrumbs","_experiment$experimen","getCompareExperimentsPageRoute","numExperiments","getExperimentPageRoute","getExperimentPageLink","shouldEnableExperimentPageHeaderV2","push","getExperimentPageTabRoute","ExperimentPageTabName","Runs","PageHeader","OverflowMenu","menu","itemName","renderRegisterModelButton","_experiment$experimen2","RunViewStatusBox","backgroundColor","isDarkMode","colors","green800","green100","red800","red100","blue800","blue100","RunStatusIcon","Typography","Text","color","RunViewUserLinkBox","runInfo","tags","_runInfo$experimentId","user","getUser","searchRunsByUser","systemMetricsLabel","modelMetricsLabel","defineMessages","metricKeyMatchesFilter","key","toLowerCase","RunViewMetricsTableSection","metricsList","header","table","_otherColumns$find","_otherColumns$find2","column","keyColumn","otherColumns","getLeafHeaders","valueColumn","find","anyRowHasModels","some","loggedModels","isEmpty","modelColumn","TableRow","TableCell","backgroundSecondary","bold","_runInfo$runUuid","style","getCanResize","getSize","undefined","toString","Overflow","_model$info","_model$info$experimen","_model$info2","_model$info$model_id","_model$info3","_model$info4","rel","getExperimentLoggedModelDetailsPage","info","experiment_id","model_id","RunViewMetricsTable","latestMetrics","detailsPageTableStyles","detailsPageNoEntriesStyles","detailsPageNoResultsWrapperStyles","usingUnifiedDetailsLayout","useExperimentTrackingDetailsPageLayoutStyles","setFilter","loggedModelsByMetricKey","metricsWithModels","compact","flatMap","_model$data","_model$data$metrics","data","metrics","groupedMetrics","groupBy","mapValues","group","metricValues","metricList","metric","_loggedModelsByMetric","modelColumnDefs","accessorKey","enableResizing","columns","columnDefs","metricSegments","systemMetrics","isSystemMetricKey","modelMetrics","useReactTable","getCoreRowModel","getRowId","row","enableColumnResizing","columnResizeMode","flexDirection","Title","level","border","borderDecorative","borderRadius","general","borderRadiusBase","renderTableContent","Empty","description","areAllResultsFiltered","sum","marginBottom","Input","prefix","SearchIcon","placeholder","allowClear","Table","scrollable","empty","isHeader","TableHeader","setColumnSizing","isResizing","getIsResizing","flexRender","columnDef","getContext","segment","index","DatasetEntry","dataset","ExperimentViewDatasetWithContext","datasetWithTags","displayTextAsLink","RunViewDatasetBox","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","firstDataset","remainingDatasets","slice","datasetClicked","_runInfo$runName","runData","runName","gap","alignItems","digest","ExperimentViewDatasetDrawer","isOpen","setIsOpen","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","useSelector","entities","runInfosByUuid","parentRunInfoGraphql","useGetRunQuery","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","getRunApi","ParagraphSkeleton","loading","RunViewTagsBox","onTagsUpdated","sharedTaggingUIEnabled","shouldUseSharedTaggingUI","isSavingTags","setIsSavingTags","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","tagsKeyValueMap","TagAssignmentModal","showTagAssignmentModal","useTagAssignmentModal","componentIdPrefix","initialTags","onSubmit","newTags","deletedTags","saveRunTagsApi","then","onSuccess","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","allAvailableTags","saveTagsHandler","async","_","existingTags","setRunTagsBulkApi","showEditModal","editTagsLabel","paddingTop","flexWrap","tag","KeyValueTag","enableFullViewModal","PencilIcon","Spinner","RunViewDescriptionBox","onDescriptionChanged","_tags$NOTE_CONTENT_TA","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","Hint","EditableNote","defaultMarkdown","markdown","setTagApi","onCancel","handleCancelEditNote","showEditor","RunViewRegisteredModelsBox","modelSummary","queryFn","queryKey","RegisteredPromptsApi","getPromptVersionsForRun","RunViewRegisteredPromptsBox","error","usePromptVersionsForRunQuery","options","_queryResult$error","queryResult","useQuery","retry","refetch","promptVersions","model_versions","parseLinkedPromptsFromRunTags","promptVersion","getPromptDetailsPageRoute","encodeURIComponent","displayText","RunViewLoggedModelsBox","loggedModelsV3","getModelFlavorName","flavors","shouldDisplayArtifactPaths","Set","cursor","height","heightBase","heightSm","ModelsIcon","_model$info$model_id2","getExperimentLoggedModelDetailsPageRoute","RunViewSourceBox","search","className","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","Popover","whiteSpace","alignContent","GitCommitIcon","Arrow","CopyButton","showLabel","copyText","CopyIcon","supportedAttributeColumnKeys","ExperimentLoggedModelListPageKnownColumns","RelationshipType","Step","Name","Status","CreationTime","RegisteredModels","Dataset","RunViewLoggedModelsTable","inputs","outputs","isLoadingLoggedModels","loggedModelsError","useCombinedRunInputsOutputsModels","inputLoggedModels","_inputs$modelInputs","uniq","modelInputs","modelInput","modelId","direction","outputLoggedModels","_outputs$modelOutputs","modelOutputs","modelOutput","_outputs$modelOutputs2","_correspondingOutputE","correspondingOutputEntry","step","_uniqBy","uniqBy","loggedModel","_loggedModel$data","run_id","modelData","_modelData$info","columnVisibility","setColumnVisibility","useExperimentLoggedModelListPageTableColumns","disablePinnedColumns","disableOrderBy","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","customTrigger","ColumnsIcon","Spacer","shrinks","Error","message","Alert","closable","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","disableLoadMore","getTableTheme","displayShowExampleButton","textPrimary","actionDefaultBackgroundHover","actionDefaultBackgroundPress","backgroundPrimary","overlayOverlay","borderTop","fontSize","typography","fontSizeBase","getShadowScrollStyles","orientation","RunViewDatasetBoxV2","textAlign","iconFontSize","RunDetailsPageMetadataSections","EmptyValue","RunViewOverview","onRunDataUpdated","params","runInputs","registeredModelVersionSummariesForRun","useLocation","loggedModelsFromTags","parentRunIdTag","EXPERIMENT_PARENT_ID_TAG","containsLoggedModelsFromInputsOutputs","shouldRenderLoggedModelsBox","isRunPageLoggedModelsTableEnabled","shouldDisplayContentsOfLoggedModelsBox","modelVersions","loggedModelsV3RegisteredModels","useExperimentLoggedModelRegisteredVersions","detailsSectionsV2","useRunDetailsPageOverviewSectionsV2","_runInfo$runUuid2","detailsContent","KeyValueProperty","keyValue","startTime","formatTimestamp","NoneCell","DetailsOverviewCopyableIdBox","element","getDuration","endTime","DETAILS","DATASETS","TAGS","REGISTERED_MODELS","usingSidebarLayout","DetailsPageLayout","secondarySections","renderDetails","DetailsOverviewMetadataTable","DetailsOverviewMetadataRow","minHeight","maxHeight","lg","DetailsOverviewParamsTable","RunNotFoundView","runId","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewChartTooltipBody","contextData","metricsForRun","hoverData","chartData","isHovering","mode","_metricsForRun$metric","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","metricContainsHistory","isSystemMetric","displayTimestamp","isUndefined","displayStep","valueField","textOverflow","RunViewMetricChartsImpl","metricKeys","chartUIState","updateChartsUIState","_runInfo$runUuid4","setSearch","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","chart","deleted","fullScreenChart","setFullScreenChart","sampledMetricsByRunUuid","metricsByRange","metricsHistory","flat","tooltipContextValue","imagesByRunUuid","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","_runInfo$runUuid3","displayName","images","metricHistory","uuid","primary","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","runsData","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","current","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","containsLoggedImages","Boolean","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","enabled","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","RunsChartsTooltipWrapper","component","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricCharts","props","persistenceIdentifier","localStore","LocalStorageUtils","getStoreForComponent","defaultChartState","persistedChartState","getItem","JSON","parse","setItem","stringify","RunsChartsUIConfigurationContextProvider","QUERY_PARAM_KEY","useCompareToRunUuid","_searchParams$get","searchParams","setSearchParams","useSearchParams","get","compareToRunId","delete","set","_ref4","_ref5","EvaluationRunCompareSelector","currentRunUuid","setCompareToRunUuid","compareToRunUuid","setCurrentRunUuid","setCurrentRunUuidProp","getRunColor","useGetExperimentRunColor","runInfos","experimentRunInfos","useGenAiExperimentRunsForComparison","currentRunOptions","result","compareToRunOptions","_runInfo$runName2","currentRunInfo","compareToRunInfo","defaultSetCurrentRunUuid","currentParams","URLSearchParams","window","location","newUrl","URL","origin","forEach","href","justifyContent","DialogCombobox","COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID","DialogComboboxCustomButtonTriggerWrapper","fontSizeSm","RunColorPill","DialogComboboxContent","DialogComboboxOptionList","item","i","DialogComboboxOptionListSelectItem","textPlaceholder","XCircleFillIcon","actionTertiaryTextHover","onPointerDownCapture","useRunLoggedTraceTableArtifacts","intersection","extractLoggedTablesFromRunTags","GenAiTraceEvaluationArtifactFile","Evaluations","Metrics","Assessments","SEARCH_RUNS_QUERY","gql","useSearchRunsQuery","experimentIds","_data$mlflowSearchRun","_data$mlflowSearchRun2","_data$mlflowSearchRun3","apolloError","variables","skip","mlflowSearchRuns","runs","refetchRun","apiError","getTrace","requestId","traceId","traceInfo","traceData","Promise","all","MlflowService","getExperimentTraceInfo","response","trace_info","getExperimentTraceData","RunViewEvaluationsTabArtifacts","traceTablesLoggedInRun","noEvaluationTablesLogged","makeHtmlFromMarkdown","useMarkdownConverter","compareToRunData","compareToRunDisplayName","compareToRunLoading","useGetCompareToDataWithArtifacts","LegacySkeleton","initialSelectedColumns","allColumns","col","TracesTableColumnType","ASSESSMENT","INPUT","TRACE_INFO","EXECUTION_DURATION_COLUMN_ID","STATE_COLUMN_ID","TAGS_COLUMN_ID","marginTop","width","overflowY","getOverviewTableComponent","componentProps","currentRunDisplayName","currentEvaluationResults","compareToEvaluationResults","GenAiTracesMarkdownConverterProvider","makeHtml","GenAiTracesTable","useGenAiTraceEvaluationArtifacts","artifacts","isNil","runDetailsLoading","getRunDisplayName","getExperimentTraceInfoV3","_response$trace","trace","RunViewEvaluationsTabInner","assessmentInfos","totalCount","isTableMetadataLoading","tableMetadataError","tableFilterOptions","useMlflowTracesTableMetadata","otherRunUuid","searchQuery","setSearchQuery","filters","setFilters","useFilters","queryClient","useQueryClient","defaultSelectedColumns","RESPONSE_COLUMN_ID","TOKENS_COLUMN_ID","selectedColumns","toggleColumns","setSelectedColumns","useSelectedColumns","tableSort","setTableSort","useTableSort","traceInfos","traceInfosLoading","traceInfosError","refetchMlflowTraces","useSearchMlflowTraces","deleteTracesMutation","useDeleteTracesMutation","useGetCompareToData","countInfo","currentCount","logCountLoading","maxAllowedCount","getEvalTabTotalTracesLimit","showEditTagsModalForTrace","useEditExperimentTraceTags","invalidateMlflowSearchTracesCache","existingTagKeys","getTracesTagKeys","useV3Apis","traceActions","deleteTracesAction","deleteTraces","traceIds","mutateAsync","traceRequestIds","exportToEvals","exportToEvalsInstanceEnabled","editTags","isTableLoading","LoadingSkeleton","String","GenAITracesTableProvider","GenAITracesTableToolbar","GenAITracesTableBodyContainer","currentTraceInfoV3","compareToTraceInfoV3","onTraceTagsEdit","RunViewEvaluationsTab","isArtifactCallEnabled","artifactData","isArtifactLoading","Array","seed","RunPageLoadingState","PageContainer","TitleSkeleton","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","experimentFetchError","runFetchError","useRunDetailsPageData","modelMetricKeys","systemMetricKeys","Object","comparedExperiments","activeTab","isUsingGetLoggedModelsApi","shouldUseGetLoggedModelsBatchAPI","loggedModelsForRun","useLoggedModelsForExperimentRun","_runInputs$modelInput","_runOutputs$modelOutp","allModels","modelIds","join","isHookEnabled","loggedModelsData","useSearchLoggedModelsQuery","loggedModelsForRunV2","useLoggedModelsForExperimentRunV2","useGetLoggedModelsQuery","initialLoading","ErrorWrapper","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","getGraphQLErrorMessage","NotFoundPage","image","DangerIcon","usesFullHeight","renderActiveTab","_runInfo$artifactUri","RenameRunModal","onClose","DeleteRunModal","selectedRunIds","ApolloError","graphQLErrors","DeleteRunModalImpl","Component","constructor","super","this","handleSubmit","bind","deletePromises","deleteRunApi","catch","errorModalContent","openErrorModal","_this$props$onSuccess","_this$props","call","render","number","ConfirmModal","pluralize","helpText","confirmButtonText","mapDispatchToProps","connect","injectIntl","TagAssignmentRowContainer","TagAssignmentContext","createContext","TagAssignmentContextProvider","Provider","useTagAssignmentContext","context","useContext","TagAssignmentRoot","formCtx","useFormContext","form","FormProvider","TagAssignmentRow","stableChildren","React","toArray","parsedChildren","fill","_stableChildren$i","gridTemplateColumns","TagAssignmentLabel","TagAssignmentInput","forwardRef","errorMessage","otherProps","ref","validationState","FormUI","Message","TagAssignmentKey","rules","keyProperty","getTagsValues","emptyValue","appendIfPossible","Controller","field","fieldState","formState","_fieldState$error","legacyChange","_tags$at","at","shouldFocus","TagAssignmentValue","valueProperty","TagAssignmentRemoveButtonUI","TrashIcon","TagAssignmentRemoveButton","removeOrUpdate","getTagAssignmentRules","maxLength","useTagAssignmentForm","defaultValues","_emptyValue","shouldUseFormContext","internalForm","setValue","fieldArrayMethods","append","originalAppend","update","remove","originalRemove","useFieldArray","control","getValues","lastTag","useTagAssignmentFieldArray","newValues","_getTagsValues","existentValues","UnifiedTaggingForm","tagsForm","fields","validate","unique","findIndex","required","formName","visible","baseComponentId","isVisible","setIsVisible","useForm","hideTagAssignmentModal","reset","defaultTitleNode","Modal","destroyOnClose","footer","_tags$filter","_initialTags$filter","t","useUpdateRunsChartsUIConfiguration","inputValue","setInputValue","searching","setSearching","updateChartFilter","updateChartFilterDebounced","useDebouncedCallback","lineHeight","restProps","PageWrapper","useFullHeightLayout","wrapper","fixedSpacer","container","defaultProps","flexGrow","flexShrink","RenameRunModalImpl","args","formRef","handleRenameRun","newRunName","NEW_NAME_FIELD","updateRunRequestId","getUUID","updateRunApi","GenericInputModal","okText","RenameForm","innerRef","validator","trim","RenameRunModalWithIntl","runUuidsSerialized","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","listImagesApi","refreshTimeoutRef","useRef","autoRefreshEnabledRef","runUuidsIsActiveSerialized","hookUnmounted","fetchImagesFn","activeRunUuids","autoRefresh","scheduleRefresh","logErrorAndNotifyUser","clearTimeout","setTimeout","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","loggedModelIds","modelIdChunks","chunk","chunkedIds","queryParams","loggedModelsDataRequest","getAjaxUrl","isFetching","select","results"],"sourceRoot":""}