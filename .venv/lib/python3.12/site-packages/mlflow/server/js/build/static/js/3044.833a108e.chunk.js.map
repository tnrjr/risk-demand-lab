{"version":3,"file":"static/js/3044.833a108e.chunk.js","mappings":"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","sources":["experiment-tracking/components/ExperimentListTableTagsCell.tsx","experiment-tracking/components/ExperimentListTable.tsx","experiment-tracking/components/modals/BulkDeleteExperimentModal.tsx","experiment-tracking/components/experiment-page/hooks/useTagsFilter.tsx","experiment-tracking/components/experiment-page/components/ExperimentListViewTagsFilter.tsx","experiment-tracking/components/ExperimentListView.tsx","experiment-tracking/components/experiment-page/hooks/useSearchFilter.tsx","experiment-tracking/components/experiment-page/hooks/useUpdateExperimentTags.tsx","experiment-tracking/components/modals/ConfirmModal.tsx"],"sourcesContent":["import { Button, PencilIcon } from '@databricks/design-system';\nimport 'react-virtualized/styles.css';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { KeyValueTag } from '../../common/components/KeyValueTag';\nimport { isUserFacingTag } from '../../common/utils/TagUtils';\nimport { ExperimentTableColumnDef, ExperimentTableMetadata } from './ExperimentListTable';\n\nexport const ExperimentListTableTagsCell: ExperimentTableColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const intl = useIntl();\n\n  const { onEditTags } = meta as ExperimentTableMetadata;\n\n  const visibleTagList = original?.tags?.filter((tag) => isUserFacingTag(tag.key)) || [];\n  const containsTags = visibleTagList.length > 0;\n\n  return (\n    <div css={{ display: 'flex' }}>\n      <div css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', display: 'flex' }}>\n        {visibleTagList?.map((tag) => (\n          <KeyValueTag key={tag.key} tag={tag} />\n        ))}\n      </div>\n      <Button\n        componentId=\"mlflow.experiment.list.tag.add\"\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={() => onEditTags?.(original)}\n        aria-label={intl.formatMessage({\n          defaultMessage: 'Edit tags',\n          description: 'Label for the edit tags button in the experiment list table',\n        })}\n        css={{\n          flexShrink: 0,\n          opacity: 0,\n          '[role=row]:hover &': {\n            opacity: 1,\n          },\n          '[role=row]:focus-within &': {\n            opacity: 1,\n          },\n        }}\n        type=\"tertiary\"\n      >\n        {!containsTags ? (\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Label for the add tags button in the experiment list table\"\n          />\n        ) : undefined}\n      </Button>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport {\n  Checkbox,\n  useDesignSystemTheme,\n  Empty,\n  NoIcon,\n  Table,\n  CursorPagination,\n  TableRow,\n  TableHeader,\n  TableCell,\n  CursorPaginationProps,\n  TableSkeletonRows,\n} from '@databricks/design-system';\nimport 'react-virtualized/styles.css';\nimport { ExperimentEntity } from '../types';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  OnChangeFn,\n  RowSelectionState,\n  SortingState,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { isEmpty } from 'lodash';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from '../../common/utils/Utils';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport { ExperimentListTableTagsCell } from './ExperimentListTableTagsCell';\n\nexport type ExperimentTableColumnDef = ColumnDef<ExperimentEntity>;\n\nexport type ExperimentTableMetadata = { onEditTags: (editedEntity: ExperimentEntity) => void };\n\nconst useExperimentsTableColumns = () => {\n  const intl = useIntl();\n  return useMemo(() => {\n    const resultColumns: ExperimentTableColumnDef[] = [\n      {\n        header: ({ table }) => (\n          <Checkbox\n            componentId=\"mlflow.experiment_list_view.check_all_box\"\n            isChecked={table.getIsSomeRowsSelected() ? null : table.getIsAllRowsSelected()}\n            onChange={(_, event) => table.getToggleAllRowsSelectedHandler()(event)}\n          />\n        ),\n        id: 'select',\n        cell: ExperimentListCheckbox,\n        enableSorting: false,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Name',\n          description: 'Header for the name column in the experiments table',\n        }),\n        accessorKey: 'name',\n        id: 'name',\n        cell: ExperimentListTableCell,\n        enableSorting: true,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Time created',\n          description: 'Header for the time created column in the experiments table',\n        }),\n        id: 'creation_time',\n        accessorFn: ({ creationTime }) => Utils.formatTimestamp(creationTime, intl),\n        enableSorting: true,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Last modified',\n          description: 'Header for the last modified column in the experiments table',\n        }),\n        id: 'last_update_time',\n        accessorFn: ({ lastUpdateTime }) => Utils.formatTimestamp(lastUpdateTime, intl),\n        enableSorting: true,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Description',\n          description: 'Header for the description column in the experiments table',\n        }),\n        id: 'description',\n        accessorFn: ({ tags }) => tags?.find(({ key }) => key === 'mlflow.note.content')?.value ?? '-',\n        enableSorting: false,\n      },\n      {\n        header: intl.formatMessage({\n          defaultMessage: 'Tags',\n          description: 'Header for the tags column in the experiments table',\n        }),\n        id: 'tags',\n        accessorKey: 'tags',\n        enableSorting: false,\n        cell: ExperimentListTableTagsCell,\n      },\n    ];\n\n    return resultColumns;\n  }, [intl]);\n};\n\nexport const ExperimentListTable = ({\n  experiments,\n  isFiltered,\n  isLoading,\n  rowSelection,\n  setRowSelection,\n  cursorPaginationProps,\n  sortingProps: { sorting, setSorting },\n  onEditTags,\n}: {\n  experiments?: ExperimentEntity[];\n  isFiltered?: boolean;\n  isLoading: boolean;\n  rowSelection: RowSelectionState;\n  setRowSelection: OnChangeFn<RowSelectionState>;\n  cursorPaginationProps: Omit<CursorPaginationProps, 'componentId'>;\n  sortingProps: { sorting: SortingState; setSorting: OnChangeFn<SortingState> };\n  onEditTags: (editedEntity: ExperimentEntity) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const columns = useExperimentsTableColumns();\n\n  const table = useReactTable({\n    data: experiments ?? [],\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.experimentId,\n    enableRowSelection: true,\n    enableMultiRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    state: { rowSelection, sorting },\n    meta: { onEditTags } satisfies ExperimentTableMetadata,\n  });\n\n  const getEmptyState = () => {\n    const isEmptyList = !isLoading && isEmpty(experiments);\n    if (isEmptyList && isFiltered) {\n      return (\n        <Empty\n          image={<NoIcon />}\n          title={\n            <FormattedMessage\n              defaultMessage=\"No experiments found\"\n              description=\"Label for the empty state in the experiments table when no experiments are found\"\n            />\n          }\n          description={null}\n        />\n      );\n    }\n    if (isEmptyList) {\n      return (\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No experiments created\"\n              description=\"A header for the empty state in the experiments table\"\n            />\n          }\n          description={\n            <FormattedMessage\n              defaultMessage='Use \"Create experiment\" button in order to create a new experiment'\n              description=\"Guidelines for the user on how to create a new experiment in the experiments list page\"\n            />\n          }\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const selectColumnStyles = { flex: 'none', height: theme.general.heightBase };\n\n  return (\n    <Table\n      scrollable\n      pagination={<CursorPagination {...cursorPaginationProps} componentId=\"mlflow.experiment_list_view.pagination\" />}\n      empty={getEmptyState()}\n    >\n      <TableRow isHeader>\n        {table.getLeafHeaders().map((header) => (\n          <TableHeader\n            componentId=\"mlflow.experiment_list_view.table.header\"\n            key={header.id}\n            css={header.column.id === 'select' ? selectColumnStyles : undefined}\n            sortable={header.column.getCanSort()}\n            sortDirection={header.column.getIsSorted() || 'none'}\n            onToggleSort={header.column.getToggleSortingHandler()}\n          >\n            {flexRender(header.column.columnDef.header, header.getContext())}\n          </TableHeader>\n        ))}\n      </TableRow>\n      {isLoading ? (\n        <TableSkeletonRows table={table} />\n      ) : (\n        table.getRowModel().rows.map((row) => (\n          <TableRow key={row.id} css={{ height: theme.general.buttonHeight }} data-testid=\"experiment-list-item\">\n            {row.getAllCells().map((cell) => (\n              <TableCell\n                key={cell.id}\n                css={{ alignItems: 'center', ...(cell.column.id === 'select' ? selectColumnStyles : undefined) }}\n              >\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))\n      )}\n    </Table>\n  );\n};\n\nconst ExperimentListTableCell: ExperimentTableColumnDef['cell'] = ({ row: { original } }) => {\n  return (\n    <Link\n      className=\"experiment-link\"\n      css={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', flex: 1 }}\n      to={Routes.getExperimentPageRoute(original.experimentId)}\n      title={original.name}\n      data-testid=\"experiment-list-item-link\"\n    >\n      {original.name}\n    </Link>\n  );\n};\n\nconst ExperimentListCheckbox: ExperimentTableColumnDef['cell'] = ({ row }) => {\n  return (\n    <Checkbox\n      componentId=\"mlflow.experiment_list_view.check_box\"\n      id={row.original.experimentId}\n      key={row.original.experimentId}\n      data-testid=\"experiment-list-item-check-box\"\n      isChecked={row.getIsSelected()}\n      disabled={!row.getCanSelect()}\n      onChange={row.getToggleSelectedHandler()}\n    />\n  );\n};\n","import { Typography } from '@databricks/design-system';\nimport { ExperimentEntity } from '../../types';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteExperimentApi } from '../../actions';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  experiments: Pick<ExperimentEntity, 'experimentId' | 'name'>[];\n  onExperimentsDeleted: () => void;\n};\n\nexport const BulkDeleteExperimentModal = ({ isOpen, onClose, experiments, onExperimentsDeleted }: Props) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmit = () => {\n    return Promise.all(experiments.map((experiment) => dispatch(deleteExperimentApi(experiment.experimentId))))\n      .then(onExperimentsDeleted)\n      .catch((e: any) => Utils.logErrorAndNotifyUser(e));\n  };\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      onClose={onClose}\n      handleSubmit={handleSubmit}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Delete {count, plural, one {# Experiment} other {# Experiments}}\"\n          description=\"Experiments page list, delete bulk experiments modal title\"\n          values={{\n            count: experiments.length,\n          }}\n        />\n      }\n      helpText={\n        <div>\n          <Typography.Paragraph>The following experiments will be deleted:</Typography.Paragraph>\n          <Typography.Paragraph>\n            <ul>\n              {experiments.map((experiment) => (\n                <li key={experiment.experimentId}>\n                  <Typography.Text>\n                    {experiment.name} (ID: {experiment.experimentId})\n                  </Typography.Text>\n                </li>\n              ))}\n            </ul>\n          </Typography.Paragraph>\n        </div>\n      }\n      confirmButtonText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"Experiments page list, delete bulk experiments modal primary button\"\n        />\n      }\n      confirmButtonProps={{ danger: true }}\n    />\n  );\n};\n","import { useSearchParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport { useState } from 'react';\n\nexport const OPERATORS = ['IS', 'IS NOT', 'CONTAINS'] as const;\ntype Operator = typeof OPERATORS[number];\nexport type TagFilter = { key: string; operator: Operator; value: string };\n\nfunction isOperator(value: string): value is Operator {\n  return (OPERATORS as readonly string[]).includes(value);\n}\n\nfunction serialize(tagFilter: TagFilter) {\n  return [tagFilter.key, tagFilter.operator, tagFilter.value].join('-');\n}\n\nfunction deserialize(value: string) {\n  const split = value.split('-');\n  if (split.length >= 3 && isOperator(split[1])) {\n    // NOTE: key may not have dashes in it, but value may, so we'll join the rest\n    const [key, operator, ...valueParts] = split;\n    return { key, operator, value: valueParts.join('-') } satisfies TagFilter;\n  } else {\n    return null;\n  }\n}\n\nexport function useTagsFilter() {\n  const [isTagsFilterOpen, setIsTagsFilterOpen] = useState(false);\n\n  const name = 'experimentTagsFilter';\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const tagsFilter = (searchParams.getAll(name) ?? []).map(deserialize).filter((tagFilter) => tagFilter !== null);\n\n  function setTagsFilter(tagsFilter: TagFilter[]) {\n    searchParams.delete(name);\n\n    const filtered = tagsFilter.filter((tagFilter) => tagFilter.key !== '' && tagFilter.value !== '');\n\n    if (filtered.length !== 0) {\n      for (const tagFilter of filtered) {\n        searchParams.append(name, serialize(tagFilter));\n      }\n    }\n    setSearchParams(searchParams);\n    setIsTagsFilterOpen(false);\n  }\n\n  return { tagsFilter, setTagsFilter, isTagsFilterOpen, setIsTagsFilterOpen };\n}\n","import { useFieldArray, useForm } from 'react-hook-form';\nimport { OPERATORS, TagFilter } from '../hooks/useTagsFilter';\nimport { Button, CloseIcon, PlusIcon, RHFControlledComponents, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Interpolation, Theme } from '@emotion/react';\nimport { Fragment } from 'react';\n\nconst EMPTY_TAG = { key: '', value: '', operator: 'IS' } satisfies TagFilter;\n\ntype Props = {\n  tagsFilter: TagFilter[];\n  setTagsFilter: (_: TagFilter[]) => void;\n};\n\nexport function ExperimentListViewTagsFilter({ tagsFilter, setTagsFilter }: Props) {\n  const { control, handleSubmit } = useForm<{ tagsFilter: TagFilter[] }>({\n    defaultValues: { tagsFilter: tagsFilter.length === 0 ? [EMPTY_TAG] : tagsFilter },\n  });\n  const { fields, append, remove } = useFieldArray({ control, name: 'tagsFilter' });\n  const { theme } = useDesignSystemTheme();\n  const { formatMessage } = useIntl();\n\n  const labelStyles: Interpolation<Theme> = {\n    fontWeight: theme.typography.typographyBoldFontWeight,\n  };\n\n  const labels = {\n    key: formatMessage({\n      defaultMessage: 'Key',\n      description: 'Tag filter input for key field in the tags filter popover for experiments page search by tags',\n    }),\n    operator: formatMessage({\n      defaultMessage: 'Operator',\n      description: 'Tag filter input for operator field in the tags filter popover for experiments page search by tags',\n    }),\n    value: formatMessage({\n      defaultMessage: 'Value',\n      description: 'Tag filter input for value field in the tags filter popover for experiments page search by tags',\n    }),\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit((data) => setTagsFilter(data.tagsFilter))}\n      css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.md, padding: theme.spacing.md }}\n    >\n      <fieldset\n        css={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(4, auto)',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <label htmlFor={`${fields[0].id}-key`} css={labelStyles}>\n          {labels.key}\n        </label>\n        <label htmlFor={`${fields[0].id}-op`} css={labelStyles}>\n          {labels.operator}\n        </label>\n        <label htmlFor={`${fields[0].id}-value`} css={labelStyles}>\n          {labels.value}\n        </label>\n        <label />\n        {fields.map((field, index) => (\n          <Fragment key={field.id}>\n            <RHFControlledComponents.Input\n              id={`${field.id}-key`}\n              componentId={`mlflow.experiment_list_view.tag_filter.key_input_${index}`}\n              name={`tagsFilter.${index}.key`}\n              control={control}\n              aria-label={labels.key}\n              placeholder={labels.key}\n              required\n            />\n            <RHFControlledComponents.LegacySelect\n              id={`${field.id}-op`}\n              name={`tagsFilter.${index}.operator`}\n              control={control}\n              options={OPERATORS.map((op) => ({ key: op, value: op }))}\n              aria-label={labels.operator}\n              css={{ minWidth: '14ch' }}\n            />\n            <RHFControlledComponents.Input\n              id={`${field.id}-value`}\n              componentId={`mlflow.experiment_list_view.tag_filter.value_input_${index}`}\n              name={`tagsFilter.${index}.value`}\n              control={control}\n              aria-label={labels.value}\n              placeholder={labels.value}\n              required\n            />\n            <Button\n              componentId={`mlflow.experiment_list_view.tag_filter.remove_filter_button_${index}`}\n              type=\"tertiary\"\n              onClick={() => remove(index)}\n              disabled={fields.length === 1}\n              aria-label={formatMessage({\n                defaultMessage: 'Remove filter',\n                description: 'Button to remove a filter in the tags filter popover for experiments page search by tags',\n              })}\n            >\n              <CloseIcon />\n            </Button>\n          </Fragment>\n        ))}\n      </fieldset>\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Button\n          componentId=\"mlflow.experiment_list_view.tag_filter.add_filter_button\"\n          onClick={() => append(EMPTY_TAG)}\n          icon={<PlusIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add filter\"\n            description=\"Button to add a new filter in the tags filter popover for experiments page search by tags\"\n          />\n        </Button>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <Button\n            componentId=\"mlflow.experiment_list_view.tag_filter.clear_filters_button\"\n            onClick={() => setTagsFilter([])}\n          >\n            <FormattedMessage\n              defaultMessage=\"Clear filters\"\n              description=\"Button to clear filters in the tags filter popover for experiments page search by tags\"\n            />\n          </Button>\n          <Button\n            htmlType=\"submit\"\n            componentId=\"mlflow.experiment_list_view.tag_filter.apply_filters_button\"\n            type=\"primary\"\n          >\n            <FormattedMessage\n              defaultMessage=\"Apply filters\"\n              description=\"Button to apply filters in the tags filter popover for experiments page search by tags\"\n            />\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { Interpolation, Theme } from '@emotion/react';\nimport {\n  Button,\n  TableFilterLayout,\n  TableFilterInput,\n  Spacer,\n  Header,\n  Alert,\n  useDesignSystemTheme,\n  Popover,\n  FilterIcon,\n  ChevronDownIcon,\n} from '@databricks/design-system';\nimport 'react-virtualized/styles.css';\nimport Routes from '../routes';\nimport { CreateExperimentModal } from './modals/CreateExperimentModal';\nimport { useExperimentListQuery, useInvalidateExperimentList } from './experiment-page/hooks/useExperimentListQuery';\nimport { RowSelectionState } from '@tanstack/react-table';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ScrollablePageWrapper } from '../../common/components/ScrollablePageWrapper';\nimport { ExperimentListTable } from './ExperimentListTable';\nimport { useNavigate } from '../../common/utils/RoutingUtils';\nimport { BulkDeleteExperimentModal } from './modals/BulkDeleteExperimentModal';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { useUpdateExperimentTags } from './experiment-page/hooks/useUpdateExperimentTags';\nimport { useSearchFilter } from './experiment-page/hooks/useSearchFilter';\nimport { TagFilter, useTagsFilter } from './experiment-page/hooks/useTagsFilter';\nimport { ExperimentListViewTagsFilter } from './experiment-page/components/ExperimentListViewTagsFilter';\n\nexport const ExperimentListView = () => {\n  const [searchFilter, setSearchFilter] = useSearchFilter();\n  const { tagsFilter, setTagsFilter, isTagsFilterOpen, setIsTagsFilterOpen } = useTagsFilter();\n\n  const {\n    data: experiments,\n    isLoading,\n    error,\n    hasNextPage,\n    hasPreviousPage,\n    onNextPage,\n    onPreviousPage,\n    pageSizeSelect,\n    sorting,\n    setSorting,\n  } = useExperimentListQuery({ searchFilter, tagsFilter });\n  const invalidateExperimentList = useInvalidateExperimentList();\n\n  const { EditTagsModal, showEditExperimentTagsModal } = useUpdateExperimentTags({\n    onSuccess: invalidateExperimentList,\n  });\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n  const [searchInput, setSearchInput] = useState('');\n  const [showCreateExperimentModal, setShowCreateExperimentModal] = useState(false);\n  const [showBulkDeleteExperimentModal, setShowBulkDeleteExperimentModal] = useState(false);\n\n  const handleSearchInputChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setSearchInput(event.target.value);\n  };\n\n  const handleSearchSubmit = () => {\n    setSearchFilter(searchInput);\n  };\n\n  const handleSearchClear = () => {\n    setSearchFilter('');\n  };\n\n  const handleCreateExperiment = () => {\n    setShowCreateExperimentModal(true);\n  };\n\n  const handleCloseCreateExperimentModal = () => {\n    setShowCreateExperimentModal(false);\n  };\n\n  const pushExperimentRoute = () => {\n    const route = Routes.getCompareExperimentsPageRoute(checkedKeys);\n    navigate(route);\n  };\n\n  const checkedKeys = Object.entries(rowSelection)\n    .filter(([_, value]) => value)\n    .map(([key, _]) => key);\n\n  const { theme } = useDesignSystemTheme();\n  const navigate = useNavigate();\n  const intl = useIntl();\n\n  return (\n    <ScrollablePageWrapper css={{ overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <Spacer shrinks={false} />\n      <Header\n        title={<FormattedMessage defaultMessage=\"Experiments\" description=\"Header title for the experiments page\" />}\n        buttons={\n          <>\n            <Button\n              componentId=\"mlflow.experiment_list_view.new_experiment_button\"\n              type=\"primary\"\n              onClick={handleCreateExperiment}\n              data-testid=\"create-experiment-button\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Create\"\n                description=\"Label for the create experiment action on the experiments list page\"\n              />\n            </Button>\n            <Button\n              componentId=\"mlflow.experiment_list_view.compare_experiments_button\"\n              onClick={pushExperimentRoute}\n              data-testid=\"compare-experiment-button\"\n              disabled={checkedKeys.length < 2}\n            >\n              <FormattedMessage\n                defaultMessage=\"Compare\"\n                description=\"Label for the compare experiments action on the experiments list page\"\n              />\n            </Button>\n            <Button\n              componentId=\"mlflow.experiment_list_view.bulk_delete_button\"\n              onClick={() => setShowBulkDeleteExperimentModal(true)}\n              data-testid=\"delete-experiments-button\"\n              disabled={checkedKeys.length < 1}\n              danger\n            >\n              <FormattedMessage\n                defaultMessage=\"Delete\"\n                description=\"Label for the delete experiments action on the experiments list page\"\n              />\n            </Button>\n          </>\n        }\n      />\n      <Spacer shrinks={false} />\n      {error && (\n        <Alert\n          css={{ marginBlockEnd: theme.spacing.sm }}\n          type=\"error\"\n          message={\n            error instanceof ErrorWrapper\n              ? error.getMessageField()\n              : error.message || (\n                  <FormattedMessage\n                    defaultMessage=\"A network error occurred.\"\n                    description=\"Error message for generic network error\"\n                  />\n                )\n          }\n          componentId=\"mlflow.experiment_list_view.error\"\n          closable={false}\n        />\n      )}\n      <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n        <TableFilterLayout>\n          <TableFilterInput\n            data-testid=\"search-experiment-input\"\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Filter experiments by name',\n              description: 'Placeholder text inside experiments search bar',\n            })}\n            componentId=\"mlflow.experiment_list_view.search\"\n            defaultValue={searchFilter}\n            onChange={handleSearchInputChange}\n            onSubmit={handleSearchSubmit}\n            onClear={handleSearchClear}\n            showSearchButton\n          />\n          <Popover.Root\n            componentId=\"mlflow.experiment_list_view.tag_filter\"\n            open={isTagsFilterOpen}\n            onOpenChange={setIsTagsFilterOpen}\n          >\n            <Popover.Trigger asChild>\n              <Button\n                componentId=\"mlflow.experiment_list_view.tag_filter.trigger\"\n                icon={<FilterIcon />}\n                endIcon={<ChevronDownIcon />}\n                type={tagsFilter.length > 0 ? 'primary' : undefined}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Tag filter\"\n                  description=\"Button to open the tags filter popover in the experiments page\"\n                />\n              </Button>\n            </Popover.Trigger>\n            <Popover.Content>\n              <ExperimentListViewTagsFilter tagsFilter={tagsFilter} setTagsFilter={setTagsFilter} />\n            </Popover.Content>\n          </Popover.Root>\n        </TableFilterLayout>\n        <ExperimentListTable\n          experiments={experiments}\n          isLoading={isLoading}\n          isFiltered={Boolean(searchFilter)}\n          rowSelection={rowSelection}\n          setRowSelection={setRowSelection}\n          cursorPaginationProps={{\n            hasNextPage,\n            hasPreviousPage,\n            onNextPage,\n            onPreviousPage,\n            pageSizeSelect,\n          }}\n          sortingProps={{ sorting, setSorting }}\n          onEditTags={showEditExperimentTagsModal}\n        />\n      </div>\n      <CreateExperimentModal\n        isOpen={showCreateExperimentModal}\n        onClose={handleCloseCreateExperimentModal}\n        onExperimentCreated={invalidateExperimentList}\n      />\n      <BulkDeleteExperimentModal\n        experiments={(experiments ?? []).filter(({ experimentId }) => checkedKeys.includes(experimentId))}\n        isOpen={showBulkDeleteExperimentModal}\n        onClose={() => setShowBulkDeleteExperimentModal(false)}\n        onExperimentsDeleted={() => {\n          invalidateExperimentList();\n          setRowSelection({});\n        }}\n      />\n      {EditTagsModal}\n    </ScrollablePageWrapper>\n  );\n};\n\nexport default ExperimentListView;\n","import { useSearchParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\n\nexport function useSearchFilter() {\n  const name = 'experimentSearchFilter';\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchFilter = searchParams.get(name) ?? '';\n\n  function setSearchFilter(searchFilter: string) {\n    if (!searchFilter) {\n      searchParams.delete(name);\n    } else {\n      searchParams.set(name, searchFilter);\n    }\n    setSearchParams(searchParams);\n  }\n\n  return [searchFilter, setSearchFilter] as const;\n}\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { ExperimentEntity } from '../../../types';\n\ntype UpdateTagsPayload = {\n  experimentId: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdateExperimentTags = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdateTagsPayload>({\n    mutationFn: async ({ toAdd, toDelete, experimentId }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) => MlflowService.setExperimentTag({ experiment_id: experimentId, key, value })),\n        ...toDelete.map(({ key }) => MlflowService.deleteExperimentTag({ experiment_id: experimentId, key })),\n      ]);\n    },\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal<\n    Pick<ExperimentEntity, 'experimentId' | 'name' | 'tags'>\n  >({\n    valueRequired: true,\n    saveTagsHandler: (experiment, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!experiment) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            experimentId: experiment.experimentId,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditExperimentTagsModal = useCallback(\n    (experiment: ExperimentEntity) =>\n      showEditTagsModal({\n        experimentId: experiment.experimentId,\n        name: experiment.name,\n        tags: experiment.tags.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditTagsModal, showEditExperimentTagsModal, isLoading };\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal, ModalProps } from '@databricks/design-system';\n\ntype Props = {\n  isOpen: boolean;\n  handleSubmit: (...args: any[]) => any;\n  onClose: (...args: any[]) => any;\n  title: React.ReactNode;\n  helpText: React.ReactNode;\n  confirmButtonText: React.ReactNode;\n  confirmButtonProps?: ModalProps['okButtonProps'];\n};\n\ntype State = any;\n\nexport class ConfirmModal extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onRequestCloseHandler = this.onRequestCloseHandler.bind(this);\n    this.handleSubmitWrapper = this.handleSubmitWrapper.bind(this);\n  }\n\n  state = {\n    isSubmitting: false,\n  };\n\n  onRequestCloseHandler() {\n    if (!this.state.isSubmitting) {\n      this.props.onClose();\n    }\n  }\n\n  handleSubmitWrapper() {\n    this.setState({ isSubmitting: true });\n    return this.props.handleSubmit().finally(() => {\n      this.props.onClose();\n      this.setState({ isSubmitting: false });\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        data-testid=\"confirm-modal\"\n        title={this.props.title}\n        visible={this.props.isOpen}\n        onOk={this.handleSubmitWrapper}\n        okText={this.props.confirmButtonText}\n        okButtonProps={this.props.confirmButtonProps}\n        confirmLoading={this.state.isSubmitting}\n        onCancel={this.onRequestCloseHandler}\n        // @ts-expect-error TS(2322): Type '{ children: Element; \"data-testid\": string; ... Remove this comment to see the full error message\n        centered\n      >\n        <div className=\"modal-explanatory-text\">{this.props.helpText}</div>\n      </Modal>\n    );\n  }\n}\n"],"names":["_ref","name","styles","_ref2","_ref3","ExperimentListTableTagsCell","row","original","table","options","meta","_original$tags","intl","useIntl","onEditTags","visibleTagList","tags","filter","tag","isUserFacingTag","key","containsTags","length","_jsxs","css","children","_jsx","map","KeyValueTag","Button","componentId","size","icon","PencilIcon","undefined","onClick","formatMessage","id","defaultMessage","type","FormattedMessage","ExperimentListTable","experiments","isFiltered","isLoading","rowSelection","setRowSelection","cursorPaginationProps","sortingProps","sorting","setSorting","theme","useDesignSystemTheme","columns","useExperimentsTableColumns","useMemo","header","Checkbox","isChecked","getIsSomeRowsSelected","getIsAllRowsSelected","onChange","_","event","getToggleAllRowsSelectedHandler","cell","ExperimentListCheckbox","enableSorting","accessorKey","ExperimentListTableCell","accessorFn","creationTime","Utils","formatTimestamp","lastUpdateTime","_tags$find$value","_tags$find","find","value","useReactTable","data","getCoreRowModel","getRowId","experimentId","enableRowSelection","enableMultiRowSelection","onRowSelectionChange","onSortingChange","state","selectColumnStyles","flex","height","general","heightBase","Table","scrollable","pagination","CursorPagination","empty","getEmptyState","isEmptyList","isEmpty","Empty","image","NoIcon","title","description","TableRow","isHeader","getLeafHeaders","TableHeader","column","sortable","getCanSort","sortDirection","getIsSorted","onToggleSort","getToggleSortingHandler","flexRender","columnDef","getContext","TableSkeletonRows","getRowModel","rows","_css","buttonHeight","getAllCells","TableCell","alignItems","Link","className","to","Routes","getExperimentPageRoute","getIsSelected","disabled","getCanSelect","getToggleSelectedHandler","BulkDeleteExperimentModal","isOpen","onClose","onExperimentsDeleted","dispatch","useDispatch","ConfirmModal","handleSubmit","Promise","all","experiment","deleteExperimentApi","then","catch","e","logErrorAndNotifyUser","values","count","helpText","Typography","Paragraph","Text","confirmButtonText","confirmButtonProps","danger","OPERATORS","serialize","tagFilter","operator","join","deserialize","split","includes","isOperator","valueParts","EMPTY_TAG","ExperimentListViewTagsFilter","tagsFilter","setTagsFilter","control","useForm","defaultValues","fields","append","remove","useFieldArray","labelStyles","fontWeight","typography","typographyBoldFontWeight","labels","onSubmit","display","flexDirection","gap","spacing","md","padding","gridTemplateColumns","sm","htmlFor","field","index","Fragment","RHFControlledComponents","Input","placeholder","required","LegacySelect","op","CloseIcon","PlusIcon","htmlType","ExperimentListView","searchFilter","setSearchFilter","_searchParams$get","searchParams","setSearchParams","useSearchParams","get","set","delete","useSearchFilter","isTagsFilterOpen","setIsTagsFilterOpen","_searchParams$getAll","useState","getAll","filtered","useTagsFilter","error","hasNextPage","hasPreviousPage","onNextPage","onPreviousPage","pageSizeSelect","useExperimentListQuery","invalidateExperimentList","useInvalidateExperimentList","EditTagsModal","showEditExperimentTagsModal","useUpdateExperimentTags","onSuccess","updateMutation","useMutation","mutationFn","async","toAdd","toDelete","MlflowService","setExperimentTag","experiment_id","deleteExperimentTag","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","saveTagsHandler","currentTags","newTags","addedOrModifiedTags","deletedTags","diffCurrentAndNewTags","resolve","reject","mutate","onError","useCallback","searchInput","setSearchInput","showCreateExperimentModal","setShowCreateExperimentModal","showBulkDeleteExperimentModal","setShowBulkDeleteExperimentModal","checkedKeys","Object","entries","navigate","useNavigate","ScrollablePageWrapper","Spacer","shrinks","Header","buttons","_Fragment","handleCreateExperiment","pushExperimentRoute","route","getCompareExperimentsPageRoute","Alert","marginBlockEnd","message","ErrorWrapper","getMessageField","closable","TableFilterLayout","TableFilterInput","defaultValue","target","handleSearchSubmit","onClear","handleSearchClear","showSearchButton","Popover","Root","open","onOpenChange","Trigger","asChild","FilterIcon","endIcon","ChevronDownIcon","Content","Boolean","CreateExperimentModal","handleCloseCreateExperimentModal","onExperimentCreated","Component","constructor","props","super","isSubmitting","this","onRequestCloseHandler","bind","handleSubmitWrapper","setState","finally","render","Modal","visible","onOk","okText","okButtonProps","confirmLoading","onCancel","centered"],"sourceRoot":""}