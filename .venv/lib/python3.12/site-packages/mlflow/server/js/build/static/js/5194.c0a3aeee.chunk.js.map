{"version":3,"file":"static/js/5194.c0a3aeee.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/components/traces-v3/utils/dateUtils.ts","experiment-tracking/hooks/useMonitoringConfig.tsx","experiment-tracking/hooks/useMonitoringFilters.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3DateSelector.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3EmptyState.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3Logs.tsx","experiment-tracking/components/experiment-page/components/traces-v3/hooks/useSetInitialTimeFilter.ts","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3PageWrapper.tsx","experiment-tracking/hooks/useMonitoringViewState.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3View.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewTraces.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsModeSwitch.tsx"],"sourcesContent":["import { START_TIME_LABEL } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { IntlShape } from 'react-intl';\n\nexport type TimeBucket = 'SECOND' | 'MINUTE' | 'HOUR' | 'DAY' | 'WEEK' | 'MONTH';\n\nexport interface NamedDateFilter {\n  key: START_TIME_LABEL;\n  label: string;\n}\n\nexport function getNamedDateFilters(intl: IntlShape): NamedDateFilter[] {\n  return [\n    {\n      key: 'LAST_HOUR',\n      label: intl.formatMessage({\n        defaultMessage: 'Last hour',\n        description: 'Option for the start select dropdown to filter runs from the last hour',\n      }),\n    },\n    {\n      key: 'LAST_24_HOURS',\n      label: intl.formatMessage({\n        defaultMessage: 'Last 24 hours',\n        description: 'Option for the start select dropdown to filter runs from the last 24 hours',\n      }),\n    },\n    {\n      key: 'LAST_7_DAYS',\n      label: intl.formatMessage({\n        defaultMessage: 'Last 7 days',\n        description: 'Option for the start select dropdown to filter runs from the last 7 days',\n      }),\n    },\n    {\n      key: 'LAST_30_DAYS',\n      label: intl.formatMessage({\n        defaultMessage: 'Last 30 days',\n        description: 'Option for the start select dropdown to filter runs from the last 30 days',\n      }),\n    },\n    {\n      key: 'LAST_YEAR',\n      label: intl.formatMessage({\n        defaultMessage: 'Last year',\n        description: 'Option for the start select dropdown to filter runs since the last 1 year',\n      }),\n    },\n    {\n      key: 'ALL',\n      label: intl.formatMessage({\n        defaultMessage: 'All',\n        description: 'Option for the start select dropdown to filter runs from the beginning of time',\n      }),\n    },\n    {\n      key: 'CUSTOM',\n      label: intl.formatMessage({\n        defaultMessage: 'Custom',\n        description: 'Option for the start select dropdown to filter runs with a custom time range',\n      }),\n    },\n  ];\n}\n","import { merge } from 'lodash';\nimport type { ReactNode } from 'react';\nimport React, { createContext, useContext } from 'react';\n\n// A global config that is used as a context for monitoring components.\nexport interface MonitoringConfig {\n  dateNow: Date;\n  setDateNow: (date: Date) => void;\n}\n\n// Define a default configuration\nconst getDefaultConfig = (): MonitoringConfig => {\n  return {\n    dateNow: new Date(),\n    setDateNow: (date: Date) => {},\n  };\n};\n\n// Create the context with a default value\nconst MonitoringConfigContext = createContext<MonitoringConfig>(getDefaultConfig());\n\ninterface MonitoringConfigProviderProps {\n  config?: Partial<MonitoringConfig>;\n  children: ReactNode;\n}\n\nexport const MonitoringConfigProvider: React.FC<MonitoringConfigProviderProps> = ({ config, children }) => {\n  const defaultConfig = getDefaultConfig();\n  // Remove undefined values from the config object\n\n  const mergedConfig: MonitoringConfig = merge({}, defaultConfig, config);\n\n  const [dateNow, setDateNow] = React.useState(mergedConfig.dateNow);\n\n  return (\n    <MonitoringConfigContext.Provider\n      value={{\n        ...mergedConfig,\n        dateNow,\n        setDateNow,\n      }}\n    >\n      {children}\n    </MonitoringConfigContext.Provider>\n  );\n};\n\nexport const useMonitoringConfig = (): MonitoringConfig => {\n  const context = useContext(MonitoringConfigContext);\n\n  if (!context) {\n    return getDefaultConfig(); // Fallback to defaults if no provider is found\n  }\n\n  return context;\n};\n","import { useCallback, useMemo } from 'react';\nimport { useSearchParams } from '../../common/utils/RoutingUtils';\nimport { useMonitoringConfig } from './useMonitoringConfig';\n\nexport const START_TIME_LABEL_QUERY_PARAM_KEY = 'startTimeLabel';\nconst START_TIME_QUERY_PARAM_KEY = 'startTime';\nconst END_TIME_QUERY_PARAM_KEY = 'endTime';\n\nexport type START_TIME_LABEL =\n  | 'LAST_HOUR'\n  | 'LAST_24_HOURS'\n  | 'LAST_7_DAYS'\n  | 'LAST_30_DAYS'\n  | 'LAST_YEAR'\n  | 'ALL'\n  | 'CUSTOM';\nexport const DEFAULT_START_TIME_LABEL: START_TIME_LABEL = 'LAST_7_DAYS';\n\nexport interface MonitoringFilters {\n  startTimeLabel?: START_TIME_LABEL;\n  startTime?: string;\n  endTime?: string;\n}\n\n/**\n * Query param-powered hook that returns the monitoring filters from the URL.\n */\nexport const useMonitoringFilters = () => {\n  const monitoringConfig = useMonitoringConfig();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const startTimeLabel =\n    (searchParams.get(START_TIME_LABEL_QUERY_PARAM_KEY) as START_TIME_LABEL | undefined) || DEFAULT_START_TIME_LABEL;\n  let startTime = searchParams.get(START_TIME_QUERY_PARAM_KEY) || undefined;\n  let endTime = searchParams.get(END_TIME_QUERY_PARAM_KEY) ?? undefined;\n  if (startTimeLabel !== 'CUSTOM') {\n    const absoluteStartEndTime = getAbsoluteStartEndTime(monitoringConfig.dateNow, { startTimeLabel });\n    startTime = absoluteStartEndTime.startTime;\n    endTime = absoluteStartEndTime.endTime;\n  } else {\n    startTime = searchParams.get(START_TIME_QUERY_PARAM_KEY) || undefined;\n    endTime = searchParams.get(END_TIME_QUERY_PARAM_KEY) ?? undefined;\n  }\n\n  const monitoringFilters = useMemo<MonitoringFilters>(\n    () => ({\n      startTimeLabel,\n      startTime,\n      endTime,\n    }),\n    [startTimeLabel, startTime, endTime],\n  );\n\n  const setMonitoringFilters = useCallback(\n    (monitoringFilters: MonitoringFilters | undefined, replace = false) => {\n      setSearchParams(\n        (params) => {\n          if (monitoringFilters?.startTime === undefined) {\n            params.delete(START_TIME_QUERY_PARAM_KEY);\n          } else if (monitoringFilters.startTimeLabel === 'CUSTOM') {\n            params.set(START_TIME_QUERY_PARAM_KEY, monitoringFilters.startTime);\n          }\n          if (monitoringFilters?.endTime === undefined) {\n            params.delete(END_TIME_QUERY_PARAM_KEY);\n          } else if (monitoringFilters.startTimeLabel === 'CUSTOM') {\n            params.set(END_TIME_QUERY_PARAM_KEY, monitoringFilters.endTime);\n          }\n          if (monitoringFilters?.startTimeLabel === undefined) {\n            params.delete(START_TIME_LABEL_QUERY_PARAM_KEY);\n          } else {\n            params.set(START_TIME_LABEL_QUERY_PARAM_KEY, monitoringFilters.startTimeLabel);\n          }\n          return params;\n        },\n        { replace },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [monitoringFilters, setMonitoringFilters] as const;\n};\n\nexport function getAbsoluteStartEndTime(\n  dateNow: Date,\n  monitoringFilters: MonitoringFilters,\n): {\n  startTime: string | undefined;\n  endTime: string | undefined;\n} {\n  if (monitoringFilters.startTimeLabel && monitoringFilters.startTimeLabel !== 'CUSTOM') {\n    return startTimeLabelToStartEndTime(dateNow, monitoringFilters.startTimeLabel);\n  }\n  return {\n    startTime: monitoringFilters.startTime,\n    endTime: monitoringFilters.endTime,\n  };\n}\n\nexport function startTimeLabelToStartEndTime(\n  dateNow: Date,\n  startTimeLabel: START_TIME_LABEL,\n): {\n  startTime: string | undefined;\n  endTime: string | undefined;\n} {\n  switch (startTimeLabel) {\n    case 'LAST_HOUR':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCHours(new Date().getUTCHours() - 1)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_24_HOURS':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCDate(new Date().getUTCDate() - 1)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_7_DAYS':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCDate(new Date().getUTCDate() - 7)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_30_DAYS':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCDate(new Date().getUTCDate() - 30)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_YEAR':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCFullYear(new Date().getUTCFullYear() - 1)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'ALL':\n      return {\n        startTime: undefined,\n        endTime: dateNow.toISOString(),\n      };\n    default:\n      throw new Error(`Unexpected start time label: ${startTimeLabel}`);\n  }\n}\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  FormUI,\n  RefreshIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\nimport { getNamedDateFilters } from './utils/dateUtils';\nimport {\n  DEFAULT_START_TIME_LABEL,\n  useMonitoringFilters,\n} from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { isNil } from 'lodash';\nimport { RangePicker } from '@databricks/design-system/development';\nimport { useMonitoringConfig } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringConfig';\n\nexport interface DateRange {\n  startDate: string;\n  endDate: string;\n}\n\nexport const TracesV3DateSelector = React.memo(() => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const [monitoringFilters, setMonitoringFilters] = useMonitoringFilters();\n\n  const namedDateFilters = useMemo(() => getNamedDateFilters(intl), [intl]);\n\n  // List of labels for \"start time\" filter\n  const currentStartTimeFilterLabel = intl.formatMessage({\n    defaultMessage: 'Time Range',\n    description: 'Label for the start range select dropdown for experiment runs view',\n  });\n\n  const monitoringConfig = useMonitoringConfig();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n      }}\n    >\n      <DialogCombobox\n        componentId=\"mlflow.experiment-evaluation-monitoring.date-selector\"\n        label={currentStartTimeFilterLabel}\n        value={monitoringFilters.startTimeLabel ? [monitoringFilters.startTimeLabel] : [DEFAULT_START_TIME_LABEL]}\n      >\n        <DialogComboboxTrigger\n          renderDisplayedValue={(value) => {\n            return namedDateFilters.find((namedDateFilter) => namedDateFilter.key === value)?.label;\n          }}\n          allowClear={\n            !isNil(monitoringFilters.startTimeLabel) && monitoringFilters.startTimeLabel !== DEFAULT_START_TIME_LABEL\n          }\n          onClear={() => {\n            setMonitoringFilters({ startTimeLabel: DEFAULT_START_TIME_LABEL });\n          }}\n          data-testid=\"time-range-select-dropdown\"\n        />\n        <DialogComboboxContent>\n          <DialogComboboxOptionList>\n            {namedDateFilters.map((namedDateFilter) => (\n              <DialogComboboxOptionListSelectItem\n                key={namedDateFilter.key}\n                checked={\n                  monitoringFilters.startTimeLabel === namedDateFilter.key ||\n                  (namedDateFilter.key === DEFAULT_START_TIME_LABEL && isNil(monitoringFilters.startTimeLabel))\n                }\n                title={namedDateFilter.label}\n                data-testid={`time-range-select-${namedDateFilter}`}\n                value={namedDateFilter.key}\n                onChange={() => {\n                  setMonitoringFilters({\n                    ...monitoringFilters,\n                    startTimeLabel: namedDateFilter.key,\n                  });\n                }}\n              >\n                {namedDateFilter.label}\n              </DialogComboboxOptionListSelectItem>\n            ))}\n          </DialogComboboxOptionList>\n        </DialogComboboxContent>\n      </DialogCombobox>\n      {monitoringFilters.startTimeLabel === 'CUSTOM' && (\n        <>\n          <RangePicker\n            id=\"date-picker-range\"\n            includeTime\n            selected={{\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n              from: new Date(monitoringFilters.startTime!),\n              to: monitoringFilters.endTime ? new Date(monitoringFilters.endTime) : monitoringConfig.dateNow,\n            }}\n            onChange={(e) => {\n              const date = e.target.value;\n              setMonitoringFilters({\n                ...monitoringFilters,\n                startTime: date?.from ? date.from.toISOString() : undefined,\n                endTime: date?.to ? date.to.toISOString() : undefined,\n              });\n            }}\n            startDatePickerProps={{\n              componentId: 'experiment-evaluation-monitoring-start-date-picker',\n              datePickerProps: {\n                disabled: {\n                  after: monitoringConfig.dateNow,\n                },\n              },\n              value: monitoringFilters.startTime ? new Date(monitoringFilters.startTime) : undefined,\n            }}\n            endDatePickerProps={{\n              componentId: 'experiment-evaluation-monitoring-end-date-picker',\n              datePickerProps: {\n                disabled: {\n                  after: monitoringConfig.dateNow,\n                },\n              },\n              value: monitoringFilters.endTime ? new Date(monitoringFilters.endTime) : undefined,\n            }}\n          />\n        </>\n      )}\n      <Tooltip\n        componentId=\"mlflow.experiment-evaluation-monitoring.trace-info-hover-request-time\"\n        content={intl.formatMessage(\n          {\n            defaultMessage: 'Showing data up to {date}.',\n            description: 'Tooltip for the refresh button showing the current date and time',\n          },\n          {\n            date: monitoringConfig.dateNow.toLocaleString(navigator.language, {\n              timeZoneName: 'short',\n            }),\n          },\n        )}\n      >\n        <Button\n          type=\"link\"\n          componentId=\"mlflow.experiment-evaluation-monitoring.refresh-date-button\"\n          onClick={() => monitoringConfig.setDateNow(new Date())}\n        >\n          <RefreshIcon />\n        </Button>\n      </Tooltip>\n    </div>\n  );\n});\n","import { useMonitoringFilters } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { useSearchMlflowTraces } from '@databricks/web-shared/genai-traces-table';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { Button, DangerIcon, Empty, ParagraphSkeleton, SearchIcon } from '@databricks/design-system';\nimport { getNamedDateFilters } from './utils/dateUtils';\nimport { useGetExperimentQuery } from '@mlflow/mlflow/src/experiment-tracking/hooks/useExperimentQuery';\nimport { useMemo } from 'react';\nimport { useIntl } from '@databricks/i18n';\nimport { getExperimentKindFromTags } from '@mlflow/mlflow/src/experiment-tracking/utils/ExperimentKindUtils';\nimport { ExperimentKind } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { TracesViewTableNoTracesQuickstart } from '../../../traces/quickstart/TracesViewTableNoTracesQuickstart';\n\nexport const TracesV3EmptyState = (props: { experimentIds: string[] }) => {\n  const { experimentIds } = props;\n\n  const intl = useIntl();\n\n  const {\n    data: traces,\n    isLoading,\n    error,\n  } = useSearchMlflowTraces({\n    experimentId: experimentIds[0],\n    pageSize: 1,\n    limit: 1,\n  });\n\n  // check experiment tags to see if it's genai or custom\n  const { data: experimentEntity, loading: isExperimentLoading } = useGetExperimentQuery({\n    experimentId: experimentIds[0],\n  });\n  const experiment = experimentEntity;\n  const experimentKind = getExperimentKindFromTags(experiment?.tags);\n\n  const isGenAIExperiment =\n    experimentKind === ExperimentKind.GENAI_DEVELOPMENT || experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED;\n\n  const hasMoreTraces = traces && traces.length > 0;\n\n  const [monitoringFilters, setMonitoringFilters] = useMonitoringFilters();\n\n  const namedDateFilters = useMemo(() => getNamedDateFilters(intl), [intl]);\n\n  const button = (\n    <Button componentId=\"traces-v3-empty-state-button\" onClick={() => setMonitoringFilters({ startTimeLabel: 'ALL' })}>\n      <FormattedMessage defaultMessage=\"View All\" description=\"View all traces button\" />\n    </Button>\n  );\n\n  if (isLoading || isExperimentLoading) {\n    return (\n      <>\n        {[...Array(10).keys()].map((i) => (\n          <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n        ))}\n      </>\n    );\n  }\n\n  if (error) {\n    return (\n      <Empty\n        image={<DangerIcon />}\n        title={\n          <FormattedMessage defaultMessage=\"Fetching traces failed\" description=\"Fetching traces failed message\" />\n        }\n        description={String(error)}\n      />\n    );\n  }\n\n  if (hasMoreTraces) {\n    const image = <SearchIcon />;\n    const description = (\n      <FormattedMessage\n        defaultMessage='Some traces are hidden by your time range filter: \"{filterLabel}\"'\n        description=\"Message shown when traces are hidden by time filter\"\n        values={{\n          filterLabel: (\n            <strong>\n              {namedDateFilters.find((namedDateFilter) => namedDateFilter.key === monitoringFilters.startTimeLabel)\n                ?.label || ''}\n            </strong>\n          ),\n        }}\n      />\n    );\n    return (\n      <Empty\n        title={<FormattedMessage defaultMessage=\"No traces found\" description=\"No traces found message\" />}\n        description={description}\n        button={button}\n        image={image}\n      />\n    );\n  }\n  return <TracesViewTableNoTracesQuickstart baseComponentId=\"mlflow.traces\" />;\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { Empty, ParagraphSkeleton, DangerIcon } from '@databricks/design-system';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  GenAiTracesMarkdownConverterProvider,\n  GenAITracesTableBodyContainer,\n  GenAITracesTableToolbar,\n  REQUEST_TIME_COLUMN_ID,\n  STATE_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  TracesTableColumn,\n  TracesTableColumnType,\n  useSearchMlflowTraces,\n  useSelectedColumns,\n  getEvalTabTotalTracesLimit,\n  GenAITracesTableProvider,\n  TraceActions,\n  useFilters,\n  getTracesTagKeys,\n  useTableSort,\n  useMlflowTracesTableMetadata,\n  TOKENS_COLUMN_ID,\n  invalidateMlflowSearchTracesCache,\n} from '@databricks/web-shared/genai-traces-table';\nimport { MlflowService } from '@mlflow/mlflow/src/experiment-tracking/sdk/MlflowService';\nimport { useMarkdownConverter } from '@mlflow/mlflow/src/common/utils/MarkdownUtils';\nimport { shouldEnableTraceInsights } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useDeleteTracesMutation } from '../../../evaluations/hooks/useDeleteTraces';\nimport { useEditExperimentTraceTags } from '../../../traces/hooks/useEditExperimentTraceTags';\nimport { useIntl } from '@databricks/i18n';\nimport { TracesV3EmptyState } from './TracesV3EmptyState';\nimport { useQueryClient } from '@databricks/web-shared/query-client';\nimport { useSetInitialTimeFilter } from './hooks/useSetInitialTimeFilter';\n\nexport const TracesV3Logs = React.memo(\n  ({\n    experimentId,\n    endpointName,\n    timeRange,\n    loggedModelId,\n  }: {\n    experimentId: string;\n    endpointName: string;\n    timeRange?: { startTime: string | undefined; endTime: string | undefined };\n    loggedModelId?: string;\n  }) => {\n    const makeHtmlFromMarkdown = useMarkdownConverter();\n    const intl = useIntl();\n    const enableTraceInsights = shouldEnableTraceInsights();\n\n    // Get metadata\n    const {\n      assessmentInfos,\n      allColumns,\n      totalCount,\n      isLoading: isMetadataLoading,\n      error: metadataError,\n      isEmpty,\n      tableFilterOptions,\n    } = useMlflowTracesTableMetadata({\n      experimentId,\n      timeRange,\n      filterByLoggedModelId: loggedModelId,\n    });\n\n    // Setup table states\n    const [searchQuery, setSearchQuery] = useState<string>('');\n    const [filters, setFilters] = useFilters();\n    const queryClient = useQueryClient();\n\n    const defaultSelectedColumns = useCallback((columns: TracesTableColumn[]) => {\n      return columns.filter(\n        (col) =>\n          col.type === TracesTableColumnType.ASSESSMENT ||\n          col.type === TracesTableColumnType.INPUT ||\n          (col.type === TracesTableColumnType.TRACE_INFO &&\n            [\n              EXECUTION_DURATION_COLUMN_ID,\n              RESPONSE_COLUMN_ID,\n              REQUEST_TIME_COLUMN_ID,\n              STATE_COLUMN_ID,\n              TOKENS_COLUMN_ID,\n            ].includes(col.id)) ||\n          col.type === TracesTableColumnType.INTERNAL_MONITOR_REQUEST_TIME,\n      );\n    }, []);\n\n    const { selectedColumns, toggleColumns, setSelectedColumns } = useSelectedColumns(\n      experimentId,\n      allColumns,\n      defaultSelectedColumns,\n    );\n\n    const [tableSort, setTableSort] = useTableSort(selectedColumns, {\n      key: REQUEST_TIME_COLUMN_ID,\n      type: TracesTableColumnType.TRACE_INFO,\n      asc: false,\n    });\n\n    // Set the initial time filter when there are no traces\n    const { isInitialTimeFilterLoading } = useSetInitialTimeFilter({\n      experimentId,\n      isTracesEmpty: isEmpty,\n      isTraceMetadataLoading: isMetadataLoading,\n    });\n\n    // Get traces data\n    const {\n      data: traceInfos,\n      isLoading: traceInfosLoading,\n      error: traceInfosError,\n    } = useSearchMlflowTraces({\n      experimentId,\n      currentRunDisplayName: endpointName,\n      searchQuery,\n      filters,\n      timeRange,\n      filterByLoggedModelId: loggedModelId,\n      tableSort,\n    });\n\n    // Get trace function\n    // Only traceId is used for trace v3\n    const getTrace = useCallback(async (requestId?: string, traceId?: string) => {\n      const [traceInfoResponse, traceData] = await Promise.all([\n        traceId ? MlflowService.getExperimentTraceInfoV3(traceId) : undefined,\n        traceId ? MlflowService.getExperimentTraceData(traceId) : undefined,\n      ]);\n      return traceData\n        ? {\n            info: traceInfoResponse?.trace?.trace_info || {},\n            data: traceData,\n          }\n        : undefined;\n    }, []);\n\n    const deleteTracesMutation = useDeleteTracesMutation();\n\n    // TODO: We should update this to use web-shared/unified-tagging components for the\n    // tag editor and react-query mutations for the apis.\n    const { showEditTagsModalForTrace, EditTagsModal } = useEditExperimentTraceTags({\n      onSuccess: () => invalidateMlflowSearchTracesCache({ queryClient }),\n      existingTagKeys: getTracesTagKeys(traceInfos || []),\n      useV3Apis: true,\n    });\n\n    const traceActions: TraceActions = useMemo(() => {\n      return {\n        deleteTracesAction: {\n          deleteTraces: (experimentId: string, traceIds: string[]) =>\n            deleteTracesMutation.mutateAsync({ experimentId, traceRequestIds: traceIds }),\n        },\n        exportToEvals: {\n          exportToEvalsInstanceEnabled: true,\n          getTrace,\n        },\n        editTags: {\n          showEditTagsModalForTrace,\n          EditTagsModal,\n        },\n      };\n    }, [getTrace, deleteTracesMutation, showEditTagsModalForTrace, EditTagsModal]);\n\n    const countInfo = useMemo(() => {\n      return {\n        currentCount: traceInfos?.length,\n        logCountLoading: traceInfosLoading,\n        totalCount: totalCount,\n        maxAllowedCount: getEvalTabTotalTracesLimit(),\n      };\n    }, [traceInfos, totalCount, traceInfosLoading]);\n\n    const isTableLoading = traceInfosLoading || isInitialTimeFilterLoading || isMetadataLoading;\n    const tableError = traceInfosError || metadataError;\n    const isTableEmpty = isEmpty && !isTableLoading && !tableError;\n\n    // Helper function to render the main content based on current state\n    const renderMainContent = () => {\n      // If isEmpty and not enableTraceInsights, show empty state without navigation\n      if (!enableTraceInsights && isTableEmpty) {\n        return <TracesV3EmptyState experimentIds={[experimentId]} />;\n      }\n      // Default traces view with optional navigation\n      return (\n        <div\n          css={{\n            display: 'flex',\n            flex: 1,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flex: 1,\n              overflow: 'hidden',\n            }}\n          >\n            {isTableLoading ? (\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  width: '100%',\n                  gap: '8px',\n                  padding: '16px',\n                }}\n              >\n                {[...Array(10).keys()].map((i) => (\n                  <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n                ))}\n              </div>\n            ) : tableError ? (\n              <div\n                css={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                }}\n              >\n                <Empty\n                  image={<DangerIcon />}\n                  title={intl.formatMessage({\n                    defaultMessage: 'Fetching traces failed',\n                    description: 'Evaluation review > evaluations list > error state title',\n                  })}\n                  description={tableError.message}\n                />\n              </div>\n            ) : (\n              <GenAiTracesMarkdownConverterProvider makeHtml={makeHtmlFromMarkdown}>\n                <GenAITracesTableBodyContainer\n                  experimentId={experimentId}\n                  allColumns={allColumns}\n                  currentTraceInfoV3={traceInfos || []}\n                  currentRunDisplayName={endpointName}\n                  getTrace={getTrace}\n                  assessmentInfos={assessmentInfos}\n                  setFilters={setFilters}\n                  filters={filters}\n                  selectedColumns={selectedColumns}\n                  tableSort={tableSort}\n                />\n              </GenAiTracesMarkdownConverterProvider>\n            )}\n          </div>\n        </div>\n      );\n    };\n\n    // Early return for empty state without insights\n    if (!enableTraceInsights && isTableEmpty) {\n      return <TracesV3EmptyState experimentIds={[experimentId]} />;\n    }\n\n    // Single unified layout with toolbar and content\n    return (\n      <GenAITracesTableProvider>\n        <div\n          css={{\n            overflowY: 'hidden',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <GenAITracesTableToolbar\n            experimentId={experimentId}\n            searchQuery={searchQuery}\n            setSearchQuery={setSearchQuery}\n            filters={filters}\n            setFilters={setFilters}\n            assessmentInfos={assessmentInfos}\n            traceInfos={traceInfos}\n            tableFilterOptions={tableFilterOptions}\n            countInfo={countInfo}\n            traceActions={traceActions}\n            tableSort={tableSort}\n            setTableSort={setTableSort}\n            allColumns={allColumns}\n            selectedColumns={selectedColumns}\n            toggleColumns={toggleColumns}\n            setSelectedColumns={setSelectedColumns}\n            isMetadataLoading={isMetadataLoading}\n            metadataError={metadataError}\n          />\n          {renderMainContent()}\n        </div>\n      </GenAITracesTableProvider>\n    );\n  },\n);\n","import { useEffect } from 'react';\nimport { useSearchParams } from '../../../../../../common/utils/RoutingUtils';\nimport { useSearchMlflowTraces } from '@databricks/web-shared/genai-traces-table';\nimport { REQUEST_TIME_COLUMN_ID, TracesTableColumnType } from '@databricks/web-shared/genai-traces-table';\nimport { useMonitoringFilters } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { START_TIME_LABEL_QUERY_PARAM_KEY } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\n\nconst DEFAULT_EMPTY_CHECK_PAGE_SIZE = 500;\n\n/**\n * Hook for setting the default time filter when there are no traces using the default time filter.\n */\nexport const useSetInitialTimeFilter = ({\n  experimentId,\n  isTracesEmpty,\n  isTraceMetadataLoading,\n}: {\n  experimentId: string;\n  isTracesEmpty: boolean;\n  isTraceMetadataLoading: boolean;\n}) => {\n  const [searchParams] = useSearchParams();\n  const [monitoringFilters, setMonitoringFilters] = useMonitoringFilters();\n\n  // Additional hook for fetching traces when there is no time range filters set in the\n  // url params and no traces.\n  const shouldFetchForEmptyCheck =\n    isTracesEmpty && !isTraceMetadataLoading && !searchParams.has(START_TIME_LABEL_QUERY_PARAM_KEY);\n\n  const { data: emptyCheckTraces, isLoading: emptyCheckLoading } = useSearchMlflowTraces({\n    experimentId,\n    tableSort: {\n      key: REQUEST_TIME_COLUMN_ID,\n      type: TracesTableColumnType.TRACE_INFO,\n      asc: false,\n    },\n    disabled: !shouldFetchForEmptyCheck,\n    limit: DEFAULT_EMPTY_CHECK_PAGE_SIZE,\n    pageSize: DEFAULT_EMPTY_CHECK_PAGE_SIZE,\n  });\n\n  // Set monitoring filters based on oldest trace from empty check\n  if (shouldFetchForEmptyCheck && emptyCheckTraces && emptyCheckTraces.length > 0 && !emptyCheckLoading) {\n    // Since traces are sorted in descending order (newest first), the oldest trace is the last one while newest is the first one\n    const oldestTrace = emptyCheckTraces[emptyCheckTraces.length - 1];\n\n    setMonitoringFilters({\n      startTimeLabel: 'CUSTOM',\n      startTime: oldestTrace.request_time,\n      endTime: new Date().toISOString(),\n    });\n  }\n\n  // Return loading state so component can show loading skeleton\n  const isInitialTimeFilterLoading = shouldFetchForEmptyCheck && emptyCheckLoading;\n\n  return {\n    isInitialTimeFilterLoading,\n  };\n};\n","import { ErrorBoundary } from 'react-error-boundary';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { PageWrapper, Empty, DangerIcon } from '@databricks/design-system';\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage defaultMessage=\"Error\" description=\"Title for error fallback component in Trace V3 page\" />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in Trace V3 page\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\nexport const TracesV3PageWrapper = ({ children }: { children: React.ReactNode }) => {\n  return <ErrorBoundary fallback={<PageFallback />}>{children}</ErrorBoundary>;\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '../../common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'viewState';\n\nexport type MonitoringViewState = 'charts' | 'logs' | 'insights';\n\n/**\n * Query param-powered hook that returns the view state from the URL.\n */\nexport const useMonitoringViewState = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const viewState = (searchParams.get(QUERY_PARAM_KEY) ?? 'logs') as MonitoringViewState;\n\n  const setViewState = useCallback(\n    (viewState: MonitoringViewState | undefined, replace = false) => {\n      setSearchParams(\n        (params) => {\n          if (viewState === undefined) {\n            params.delete(QUERY_PARAM_KEY);\n            return params;\n          }\n          params.set(QUERY_PARAM_KEY, viewState);\n          return params;\n        },\n        { replace },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [viewState, setViewState] as const;\n};\n","import { useMemo, useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesV3DateSelector } from './TracesV3DateSelector';\nimport { TracesV3Logs } from './TracesV3Logs';\nimport {\n  MonitoringConfigProvider,\n  useMonitoringConfig,\n} from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringConfig';\nimport { TracesV3PageWrapper } from './TracesV3PageWrapper';\nimport { useMonitoringViewState } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringViewState';\nimport {\n  getAbsoluteStartEndTime,\n  useMonitoringFilters,\n} from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { isExperimentEvalResultsMonitoringUIEnabled } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\n\nconst TracesV3Toolbar = () => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        borderBottom: `1px solid ${theme.colors.grey100}`,\n        paddingBottom: `${theme.spacing.sm}px`,\n      }}\n    >\n      <TracesV3DateSelector />\n    </div>\n  );\n};\n\ninterface TracesV3ContentProps {\n  viewState: string;\n  experimentId: string;\n  endpointName?: string;\n  timeRange: { startTime: string | undefined; endTime: string | undefined };\n}\n\nconst TracesV3Content = ({\n  // comment for copybara formatting\n  viewState,\n  experimentId,\n  endpointName,\n  timeRange,\n}: TracesV3ContentProps) => {\n  if (viewState === 'logs') {\n    return (\n      <TracesV3Logs\n        experimentId={experimentId || ''}\n        // TODO: Remove this once the endpointName is not needed\n        endpointName={endpointName || 'dummy-run'}\n        timeRange={timeRange}\n      />\n    );\n  }\n  return null;\n};\n\nconst TracesV3ViewImpl = ({ experimentIds }: { experimentIds: string[] }) => {\n  const { theme } = useDesignSystemTheme();\n  const [monitoringFilters, _setMonitoringFilters] = useMonitoringFilters();\n  const monitoringConfig = useMonitoringConfig();\n\n  // Traces view only works with one experiment\n  const experimentId = experimentIds[0];\n  const [viewState] = useMonitoringViewState();\n\n  const timeRange = useMemo(() => {\n    const { startTime, endTime } = getAbsoluteStartEndTime(monitoringConfig.dateNow, monitoringFilters);\n    return {\n      startTime: startTime ? new Date(startTime).getTime().toString() : undefined,\n      endTime: endTime ? new Date(endTime).getTime().toString() : undefined,\n    };\n  }, [monitoringConfig.dateNow, monitoringFilters]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        height: '100%',\n        overflowY: 'hidden',\n      }}\n    >\n      {isExperimentEvalResultsMonitoringUIEnabled() && (\n        // comment for copybara formatting\n        <TracesV3Toolbar />\n      )}\n      <TracesV3Content\n        // comment for copybara formatting\n        viewState={viewState}\n        experimentId={experimentId}\n        timeRange={timeRange}\n      />\n    </div>\n  );\n};\n\nexport const TracesV3View = ({ experimentIds }: { experimentIds: string[] }) => (\n  <TracesV3PageWrapper>\n    <MonitoringConfigProvider>\n      <TracesV3ViewImpl experimentIds={experimentIds} />\n    </MonitoringConfigProvider>\n  </TracesV3PageWrapper>\n);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesView } from '../../traces/TracesView';\nimport { ExperimentViewRunsModeSwitch } from './runs/ExperimentViewRunsModeSwitch';\nimport {\n  shouldEnableExperimentPageHeaderV2,\n  shouldEnableTracesV3View,\n  isExperimentEvalResultsMonitoringUIEnabled,\n} from '../../../../common/utils/FeatureUtils';\nimport { TracesV3View } from './traces-v3/TracesV3View';\n\nexport const ExperimentViewTraces = ({ experimentIds }: { experimentIds: string[] }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        minHeight: 225, // This is the exact height for displaying a minimum five rows and table header\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        flex: 1,\n        overflow: 'hidden',\n      }}\n    >\n      {shouldEnableExperimentPageHeaderV2() ? null : <ExperimentViewRunsModeSwitch hideBorder={false} />}\n      <TracesComponent experimentIds={experimentIds} />\n    </div>\n  );\n};\n\nconst TracesComponent = ({ experimentIds }: { experimentIds: string[] }) => {\n  if (shouldEnableTracesV3View() || isExperimentEvalResultsMonitoringUIEnabled()) {\n    return <TracesV3View experimentIds={experimentIds} />;\n  }\n  return <TracesView experimentIds={experimentIds} />;\n};\n","import { InfoPopover, LegacyTabs, LegacyTooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport type { ExperimentViewRunsCompareMode } from '../../../../types';\nimport { PreviewBadge } from '@mlflow/mlflow/src/shared/building_blocks/PreviewBadge';\nimport { FeatureBadge } from '@mlflow/mlflow/src/shared/building_blocks/FeatureBadge';\nimport { getExperimentPageDefaultViewMode, useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { shouldUseRenamedUnifiedTracesTab } from '../../../../../common/utils/FeatureUtils';\nimport { MONITORING_BETA_EXPIRATION_DATE } from '../../../../constants';\nimport { useExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\n\nexport interface ExperimentViewRunsModeSwitchProps {\n  viewState?: ExperimentPageViewState;\n  runsAreGrouped?: boolean;\n  hideBorder?: boolean;\n  explicitViewMode?: ExperimentViewRunsCompareMode;\n  experimentId?: string;\n}\n\n/**\n * Allows switching between various modes of the experiment page view.\n * Handles legacy part of the mode switching, based on \"compareRunsMode\" query parameter.\n * Modern part of the mode switching is handled by <ExperimentViewRunsModeSwitchV2> which works using route params.\n */\nexport const ExperimentViewRunsModeSwitch = ({\n  viewState,\n  runsAreGrouped,\n  hideBorder = true,\n}: ExperimentViewRunsModeSwitchProps) => {\n  const [, experimentIds] = useExperimentPageSearchFacets();\n  const { theme } = useDesignSystemTheme();\n  const [viewMode, setViewModeInURL] = useExperimentPageViewMode();\n  const { classNamePrefix } = useDesignSystemTheme();\n  const currentViewMode = viewMode || getExperimentPageDefaultViewMode();\n  const validRunsTabModes = shouldUseRenamedUnifiedTracesTab() ? ['TABLE', 'CHART', 'ARTIFACT'] : ['TABLE', 'CHART'];\n  const activeTab = validRunsTabModes.includes(currentViewMode) ? 'RUNS' : currentViewMode;\n\n  // Extract experiment ID from the URL but only if it's a single experiment.\n  // In case of multiple experiments (compare mode), the experiment ID is undefined.\n  const singleExperimentId = experimentIds.length === 1 ? experimentIds[0] : undefined;\n\n  return (\n    <LegacyTabs\n      dangerouslyAppendEmotionCSS={{\n        [`.${classNamePrefix}-tabs-nav`]: {\n          marginBottom: 0,\n          '::before': {\n            display: hideBorder ? 'none' : 'block',\n          },\n        },\n      }}\n      activeKey={activeTab}\n      onChange={(tabKey) => {\n        const newValue = tabKey as ExperimentViewRunsCompareMode | 'RUNS';\n\n        if (activeTab === newValue) {\n          return;\n        }\n\n        if (newValue === 'RUNS') {\n          return setViewModeInURL('TABLE');\n        }\n\n        setViewModeInURL(newValue, singleExperimentId);\n      }}\n    >\n      <LegacyTabs.TabPane\n        tab={\n          <span data-testid=\"experiment-runs-mode-switch-combined\">\n            <FormattedMessage\n              defaultMessage=\"Runs\"\n              description=\"A button enabling combined runs table and charts mode on the experiment page\"\n            />\n          </span>\n        }\n        key=\"RUNS\"\n      />\n      {/* Display the \"Models\" tab if we have only one experiment and the feature is enabled. */}\n      {singleExperimentId && (\n        <LegacyTabs.TabPane\n          key=\"MODELS\"\n          tab={\n            <span data-testid=\"experiment-runs-mode-switch-models\">\n              <FormattedMessage\n                defaultMessage=\"Models\"\n                description=\"A button navigating to logged models table on the experiment page\"\n              />\n              <PreviewBadge />\n            </span>\n          }\n        />\n      )}\n      <LegacyTabs.TabPane\n        disabled={shouldUseRenamedUnifiedTracesTab() || runsAreGrouped}\n        tab={\n          <LegacyTooltip\n            title={\n              !shouldUseRenamedUnifiedTracesTab() && runsAreGrouped ? (\n                <FormattedMessage\n                  defaultMessage=\"Unavailable when runs are grouped\"\n                  description=\"Experiment page > view mode switch > evaluation mode disabled tooltip\"\n                />\n              ) : undefined\n            }\n          >\n            <span\n              data-testid=\"experiment-runs-mode-switch-evaluation\"\n              css={\n                shouldUseRenamedUnifiedTracesTab() && {\n                  display: 'inline-flex',\n                  alignItems: 'center',\n                  gap: theme.spacing.xs,\n                }\n              }\n            >\n              <FormattedMessage\n                defaultMessage=\"Evaluation\"\n                description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n              />\n              {shouldUseRenamedUnifiedTracesTab() ? (\n                <InfoPopover popoverProps={{ maxWidth: 350 }} iconProps={{ style: { marginRight: 0 } }}>\n                  <FormattedMessage\n                    defaultMessage='Accessing artifact evaluation by \"Evaluation\" tab is being discontinued. In order to use this feature, use <link>\"Artifacts evaluation\" mode in Runs tab</link> instead.'\n                    description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n                    values={{\n                      link: (children) =>\n                        viewMode === 'ARTIFACT' ? (\n                          children\n                        ) : (\n                          <Typography.Link\n                            componentId=\"mlflow.experiment_page.evaluation_tab_migration_info_link\"\n                            onClick={() => setViewModeInURL('ARTIFACT', singleExperimentId)}\n                          >\n                            {children}\n                          </Typography.Link>\n                        ),\n                    }}\n                  />\n                </InfoPopover>\n              ) : (\n                <PreviewBadge />\n              )}\n            </span>\n          </LegacyTooltip>\n        }\n        key=\"ARTIFACT\"\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <span data-testid=\"experiment-runs-mode-switch-traces\">\n            <FormattedMessage\n              defaultMessage=\"Traces\"\n              description=\"A button enabling traces mode on the experiment page\"\n            />\n          </span>\n        }\n        key=\"TRACES\"\n      />\n    </LegacyTabs>\n  );\n};\n"],"names":["getNamedDateFilters","intl","key","label","formatMessage","id","defaultMessage","getDefaultConfig","dateNow","Date","setDateNow","date","MonitoringConfigContext","createContext","MonitoringConfigProvider","config","children","defaultConfig","mergedConfig","merge","React","_jsx","Provider","value","useMonitoringConfig","context","useContext","START_TIME_LABEL_QUERY_PARAM_KEY","START_TIME_QUERY_PARAM_KEY","END_TIME_QUERY_PARAM_KEY","DEFAULT_START_TIME_LABEL","useMonitoringFilters","_searchParams$get","monitoringConfig","searchParams","setSearchParams","useSearchParams","startTimeLabel","get","startTime","undefined","endTime","absoluteStartEndTime","getAbsoluteStartEndTime","_searchParams$get2","monitoringFilters","useMemo","setMonitoringFilters","useCallback","replace","params","delete","set","setUTCHours","getUTCHours","toISOString","setUTCDate","getUTCDate","setUTCFullYear","getUTCFullYear","Error","startTimeLabelToStartEndTime","TracesV3DateSelector","useIntl","theme","useDesignSystemTheme","namedDateFilters","currentStartTimeFilterLabel","_jsxs","css","_css","display","gap","spacing","sm","alignItems","DialogCombobox","componentId","DialogComboboxTrigger","renderDisplayedValue","_namedDateFilters$fin","find","namedDateFilter","allowClear","isNil","onClear","DialogComboboxContent","DialogComboboxOptionList","map","DialogComboboxOptionListSelectItem","checked","title","onChange","_Fragment","RangePicker","includeTime","selected","from","to","e","target","startDatePickerProps","datePickerProps","disabled","after","endDatePickerProps","Tooltip","content","toLocaleString","navigator","language","timeZoneName","Button","type","onClick","RefreshIcon","TracesV3EmptyState","props","experimentIds","data","traces","isLoading","error","useSearchMlflowTraces","experimentId","pageSize","limit","experimentEntity","loading","isExperimentLoading","useGetExperimentQuery","experiment","experimentKind","getExperimentKindFromTags","tags","hasMoreTraces","ExperimentKind","GENAI_DEVELOPMENT","GENAI_DEVELOPMENT_INFERRED","length","button","FormattedMessage","Array","keys","i","ParagraphSkeleton","seed","Empty","image","DangerIcon","description","String","SearchIcon","values","filterLabel","TracesViewTableNoTracesQuickstart","baseComponentId","_ref","name","styles","_ref2","_ref3","_ref4","_ref5","TracesV3Logs","endpointName","timeRange","loggedModelId","makeHtmlFromMarkdown","useMarkdownConverter","enableTraceInsights","shouldEnableTraceInsights","assessmentInfos","allColumns","totalCount","isMetadataLoading","metadataError","isEmpty","tableFilterOptions","useMlflowTracesTableMetadata","filterByLoggedModelId","searchQuery","setSearchQuery","useState","filters","setFilters","useFilters","queryClient","useQueryClient","defaultSelectedColumns","columns","filter","col","TracesTableColumnType","ASSESSMENT","INPUT","TRACE_INFO","EXECUTION_DURATION_COLUMN_ID","RESPONSE_COLUMN_ID","REQUEST_TIME_COLUMN_ID","STATE_COLUMN_ID","TOKENS_COLUMN_ID","includes","INTERNAL_MONITOR_REQUEST_TIME","selectedColumns","toggleColumns","setSelectedColumns","useSelectedColumns","tableSort","setTableSort","useTableSort","asc","isInitialTimeFilterLoading","useSetInitialTimeFilter","isTracesEmpty","isTraceMetadataLoading","shouldFetchForEmptyCheck","has","emptyCheckTraces","emptyCheckLoading","request_time","traceInfos","traceInfosLoading","traceInfosError","currentRunDisplayName","getTrace","async","requestId","traceId","_traceInfoResponse$tr","traceInfoResponse","traceData","Promise","all","MlflowService","getExperimentTraceInfoV3","getExperimentTraceData","info","trace","trace_info","deleteTracesMutation","useDeleteTracesMutation","showEditTagsModalForTrace","EditTagsModal","useEditExperimentTraceTags","onSuccess","invalidateMlflowSearchTracesCache","existingTagKeys","getTracesTagKeys","useV3Apis","traceActions","deleteTracesAction","deleteTraces","traceIds","mutateAsync","traceRequestIds","exportToEvals","exportToEvalsInstanceEnabled","editTags","countInfo","currentCount","logCountLoading","maxAllowedCount","getEvalTabTotalTracesLimit","isTableLoading","tableError","isTableEmpty","GenAITracesTableProvider","GenAITracesTableToolbar","message","GenAiTracesMarkdownConverterProvider","makeHtml","GenAITracesTableBodyContainer","currentTraceInfoV3","PageFallback","_error$message","PageWrapper","TracesV3PageWrapper","ErrorBoundary","fallback","QUERY_PARAM_KEY","TracesV3Toolbar","width","borderBottom","colors","grey100","paddingBottom","TracesV3Content","viewState","TracesV3ViewImpl","_setMonitoringFilters","useMonitoringViewState","setViewState","getTime","toString","flexDirection","height","overflowY","isExperimentEvalResultsMonitoringUIEnabled","TracesV3View","ExperimentViewTraces","minHeight","flex","overflow","shouldEnableExperimentPageHeaderV2","ExperimentViewRunsModeSwitch","hideBorder","TracesComponent","shouldEnableTracesV3View","TracesView","runsAreGrouped","useExperimentPageSearchFacets","viewMode","setViewModeInURL","useExperimentPageViewMode","classNamePrefix","currentViewMode","getExperimentPageDefaultViewMode","activeTab","shouldUseRenamedUnifiedTracesTab","singleExperimentId","LegacyTabs","dangerouslyAppendEmotionCSS","marginBottom","activeKey","tabKey","newValue","TabPane","tab","PreviewBadge","LegacyTooltip","xs","InfoPopover","popoverProps","maxWidth","iconProps","style","marginRight","link","Typography","Link"],"sourceRoot":""}