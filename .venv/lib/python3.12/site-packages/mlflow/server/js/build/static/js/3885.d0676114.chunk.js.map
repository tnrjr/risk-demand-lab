{"version":3,"file":"static/js/3885.d0676114.chunk.js","mappings":"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","sources":["experiment-tracking/components/traces/hooks/useEditExperimentTraceTags.tsx","shared/web-shared/model-trace-explorer/FeatureUtils.ts","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.utils.tsx","shared/web-shared/model-trace-explorer/ModelTrace.types.ts","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { useCallback } from 'react';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../common/utils/TagUtils';\n\ntype EditedModelTrace = {\n  traceRequestId: string;\n  tags: KeyValueEntity[];\n};\n\nexport const useEditExperimentTraceTags = ({\n  onSuccess,\n  existingTagKeys = [],\n  useV3Apis,\n}: {\n  onSuccess?: () => void;\n  existingTagKeys?: string[];\n  useV3Apis?: boolean;\n}) => {\n  const { showEditTagsModal, EditTagsModal } = useEditKeyValueTagsModal<EditedModelTrace>({\n    saveTagsHandler: async (editedEntity, existingTags, newTags) => {\n      if (!editedEntity.traceRequestId) {\n        return;\n      }\n      const requestId = editedEntity.traceRequestId;\n      // First, determine new tags to be added\n      const addedOrModifiedTags = newTags.filter(\n        ({ key: newTagKey, value: newTagValue }) =>\n          !existingTags.some(\n            ({ key: existingTagKey, value: existingTagValue }) =>\n              existingTagKey === newTagKey && newTagValue === existingTagValue,\n          ),\n      );\n\n      // Next, determine those to be deleted\n      const deletedTags = existingTags.filter(\n        ({ key: existingTagKey }) => !newTags.some(({ key: newTagKey }) => existingTagKey === newTagKey),\n      );\n\n      // Fire all requests at once\n      const updateRequests = Promise.all([\n        ...addedOrModifiedTags.map(({ key, value }) =>\n          useV3Apis\n            ? MlflowService.setExperimentTraceTagV3(requestId, key, value)\n            : MlflowService.setExperimentTraceTag(requestId, key, value),\n        ),\n        ...deletedTags.map(({ key }) =>\n          useV3Apis\n            ? MlflowService.deleteExperimentTraceTagV3(requestId, key)\n            : MlflowService.deleteExperimentTraceTag(requestId, key),\n        ),\n      ]);\n\n      return updateRequests;\n    },\n    valueRequired: true,\n    allAvailableTags: existingTagKeys.filter((tagKey) => tagKey && !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX)),\n    onSuccess: onSuccess,\n  });\n\n  const showEditTagsModalForTrace = useCallback(\n    (trace: ModelTraceInfo) => {\n      if (!trace.request_id) {\n        return;\n      }\n      const visibleTags = trace.tags?.filter(({ key }) => key && !key.startsWith(MLFLOW_INTERNAL_PREFIX)) || [];\n      showEditTagsModal({\n        traceRequestId: trace.request_id,\n        tags: visibleTags || [],\n      });\n    },\n    [showEditTagsModal],\n  );\n\n  return {\n    showEditTagsModalForTrace,\n    EditTagsModal,\n  };\n};\n","export const shouldEnableAssessmentEditing = () => {\n  return true;\n};\nexport const shouldEnableSummaryView = () => {\n  return true;\n};\nexport const getIsMlflowTraceUIEnabled = () => {\n  return true;\n};\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { Control, useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import {\n  isNil,\n  omitBy,\n  mapValues,\n  isArray,\n  isString,\n  isNumber,\n  isBoolean,\n  escapeRegExp,\n  map,\n  every,\n  has,\n  compact,\n  keyBy,\n} from 'lodash';\n\nimport { ModelSpanType, ModelIconType, MLFLOW_TRACE_SCHEMA_VERSION_KEY } from './ModelTrace.types';\nimport type {\n  SearchMatch,\n  ModelTrace,\n  ModelTraceSpan,\n  ModelTraceSpanNode,\n  ModelTraceChatMessage,\n  ModelTraceChatResponse,\n  ModelTraceChatInput,\n  ModelTraceToolCall,\n  ModelTraceChatTool,\n  ModelTraceChatToolParamProperty,\n  RawModelTraceChatMessage,\n  ModelTraceContentType,\n  SpanFilterState,\n  ModelTraceSpanV3,\n  ModelTraceSpanV2,\n  ModelTraceInfoV3,\n  Assessment,\n  RetrieverDocument,\n  ModelTraceEvent,\n} from './ModelTrace.types';\nimport { ModelTraceExplorerIcon } from './ModelTraceExplorerIcon';\nimport {\n  normalizeAnthropicChatInput,\n  normalizeAnthropicChatOutput,\n  normalizeGeminiChatInput,\n  normalizeGeminiChatOutput,\n  normalizeOpenAIChatInput,\n  normalizeOpenAIChatResponse,\n  normalizeOpenAIResponsesInput,\n  normalizeOpenAIResponsesOutput,\n  normalizeLangchainChatInput,\n  normalizeLangchainChatResult,\n  normalizeLlamaIndexChatResponse,\n  normalizeDspyChatInput,\n  normalizeDspyChatOutput,\n} from './chat-utils';\nimport { normalizeLlamaIndexChatInput } from './chat-utils/llamaindex';\nimport { normalizeOpenAIAgentInput, normalizeOpenAIAgentOutput } from './chat-utils/openai';\nimport { normalizeAutogenChatInput, normalizeAutogenChatOutput } from './chat-utils/autogen';\nimport { normalizeBedrockChatInput, normalizeBedrockChatOutput } from './chat-utils/bedrock';\n\nexport const FETCH_TRACE_INFO_QUERY_KEY = 'model-trace-info-v3';\n\nexport const displayErrorNotification = (errorMessage: string) => {\n  // TODO: display error notification in OSS\n  return;\n};\n\nexport function getIconTypeForSpan(spanType: ModelSpanType | string): ModelIconType {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return ModelIconType.MODELS;\n    case ModelSpanType.CHAIN:\n      return ModelIconType.CHAIN;\n    case ModelSpanType.AGENT:\n      return ModelIconType.AGENT;\n    case ModelSpanType.TOOL:\n      return ModelIconType.WRENCH;\n    case ModelSpanType.CHAT_MODEL:\n      return ModelIconType.MODELS;\n    case ModelSpanType.RETRIEVER:\n      return ModelIconType.SEARCH;\n    case ModelSpanType.PARSER:\n      return ModelIconType.CODE;\n    case ModelSpanType.EMBEDDING:\n      return ModelIconType.NUMBERS;\n    case ModelSpanType.RERANKER:\n      return ModelIconType.SORT;\n    case ModelSpanType.MEMORY:\n      return ModelIconType.SAVE;\n    case ModelSpanType.FUNCTION:\n      return ModelIconType.FUNCTION;\n    case ModelSpanType.UNKNOWN:\n      return ModelIconType.UNKNOWN;\n    default:\n      return ModelIconType.FUNCTION;\n  }\n}\n\nexport function getDisplayNameForSpanType(spanType: ModelSpanType | string): string {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return 'LLM';\n    case ModelSpanType.CHAIN:\n      return 'Chain';\n    case ModelSpanType.AGENT:\n      return 'Agent';\n    case ModelSpanType.TOOL:\n      return 'Tool';\n    case ModelSpanType.CHAT_MODEL:\n      return 'Chat model';\n    case ModelSpanType.RETRIEVER:\n      return 'Retriever';\n    case ModelSpanType.PARSER:\n      return 'Parser';\n    case ModelSpanType.EMBEDDING:\n      return 'Embedding';\n    case ModelSpanType.RERANKER:\n      return 'Reranker';\n    case ModelSpanType.MEMORY:\n      return 'Memory';\n    case ModelSpanType.FUNCTION:\n      return 'Function';\n    case ModelSpanType.UNKNOWN:\n      return 'Unknown';\n    default:\n      return spanType;\n  }\n}\n\nexport function tryDeserializeAttribute(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nexport const getMatchesFromEvent = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  const events = span.events;\n  if (!events) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n  events.forEach((event, index) => {\n    const attributes = event.attributes;\n\n    if (!attributes) {\n      return;\n    }\n\n    Object.keys(attributes).forEach((attribute) => {\n      const isKeyMatch = attribute.toLowerCase().includes(searchFilter);\n      const key = getEventAttributeKey(event.name, index, attribute);\n\n      if (isKeyMatch) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      // event values can be arbitrary JSON\n      const value = JSON.stringify(attributes[attribute]).toLowerCase();\n      const numValueMatches = value.split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n\n  return matches;\n};\n\n/**\n * This function extracts all the matches from a span based on the search filter,\n * and appends some necessary metadata that is necessary for the jump-to-search\n * function.\n */\nexport const getMatchesFromSpan = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  // if search filter is empty, don't generate matches\n  // because there will be nothing to highlight anyway\n  if (!searchFilter) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n\n  const sections = {\n    inputs: span?.inputs,\n    outputs: span?.outputs,\n    attributes: span?.attributes,\n    events: span?.events,\n  };\n\n  map(sections, (section: any, label: 'inputs' | 'outputs' | 'attributes' | 'events') => {\n    if (label === 'events') {\n      matches.push(...getMatchesFromEvent(span, searchFilter));\n      return;\n    }\n\n    const sectionList = createListFromObject(section);\n    sectionList.forEach((item) => {\n      // NOTE: this ignores the fact that there might be multiple matches in a key\n      // for example, if the key is \"aaaaa\", and the search filter is \"a\". However,\n      // implementing support for this case would make the code needlessly complex.\n      // If we receive feedback that this is a problem, we can revisit this.\n      const isKeyMatch = item.key.toLowerCase().includes(searchFilter);\n      if (isKeyMatch) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      const numValueMatches = item.value.toLowerCase().split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n  return matches;\n};\n\nexport function searchTree(\n  rootNode: ModelTraceSpanNode,\n  searchFilter: string,\n  spanFilterState: SpanFilterState,\n): {\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matches: SearchMatch[];\n} {\n  const searchFilterLowercased = searchFilter.toLowerCase().trim();\n  const allSpanTypesSelected = Object.values(spanFilterState.spanTypeDisplayState).every(\n    (shouldDisplay) => shouldDisplay,\n  );\n  // if there is no search filter and all span types\n  // are selected, then we don't have to do any filtering.\n  if (searchFilterLowercased === '' && allSpanTypesSelected) {\n    return {\n      filteredTreeNodes: [rootNode],\n      matches: [],\n    };\n  }\n\n  const children = rootNode.children ?? [];\n  const filteredChildren: ModelTraceSpanNode[] = [];\n  const matches: SearchMatch[] = [];\n  children.forEach((child) => {\n    const { filteredTreeNodes: childNodes, matches: childMatches } = searchTree(\n      child,\n      searchFilterLowercased,\n      spanFilterState,\n    );\n\n    filteredChildren.push(...childNodes);\n    matches.push(...childMatches);\n  });\n\n  const spanName = ((rootNode.title as string) ?? '').toLowerCase();\n  const spanMatches = getMatchesFromSpan(rootNode, searchFilterLowercased);\n\n  // check if the span passes the text and type filters\n  const nodeMatchesSearch = spanMatches.length > 0 || spanName.includes(searchFilterLowercased);\n  const spanTypeIsDisplayed = rootNode.type ? spanFilterState.spanTypeDisplayState[rootNode.type] : true;\n  const nodePassesSpanFilters = nodeMatchesSearch && spanTypeIsDisplayed;\n\n  const hasMatchingChild = filteredChildren.length > 0;\n  const hasException = getSpanExceptionCount(rootNode) > 0;\n\n  const nodeShouldBeDisplayed =\n    nodePassesSpanFilters ||\n    // the `showParents` and `showExceptions` flags override the\n    // search filters, so we always show the node if they pass\n    (spanFilterState.showParents && hasMatchingChild) ||\n    (spanFilterState.showExceptions && hasException);\n\n  if (nodeShouldBeDisplayed) {\n    return {\n      filteredTreeNodes: [{ ...rootNode, children: filteredChildren }],\n      matches: spanMatches.concat(matches),\n    };\n  }\n\n  // otherwise cut the span out of the tree by returning the children directly\n  return {\n    filteredTreeNodes: filteredChildren,\n    matches,\n  };\n}\n\nexport function searchTreeBySpanId(\n  rootNode: ModelTraceSpanNode | null,\n  selectedSpanId?: string,\n): ModelTraceSpanNode | undefined {\n  if (isNil(selectedSpanId) || isNil(rootNode)) {\n    return undefined;\n  }\n\n  if (rootNode.key === selectedSpanId) {\n    return rootNode;\n  }\n\n  const children = rootNode.children ?? [];\n  for (const child of children) {\n    const matchedNode = searchTreeBySpanId(child, selectedSpanId);\n    if (matchedNode) {\n      return matchedNode;\n    }\n  }\n\n  return undefined;\n}\n\nconst getChatMessagesFromSpan = (\n  messagesAttributeValue: any,\n  inputs: any,\n  outputs: any,\n  spanAttributes?: Record<string, any>,\n): ModelTraceChatMessage[] | undefined => {\n  // if the `mlflow.chat.messages` attribute is provided\n  // and in the correct format, return it as-is\n  // we allow content type to be content part list for the `mlflow.chat.messages` attribute\n  if (Array.isArray(messagesAttributeValue) && messagesAttributeValue.every(isRawModelTraceChatMessage)) {\n    return compact(messagesAttributeValue.map(prettyPrintChatMessage));\n  }\n\n  // otherwise, attempt to parse messages from inputs and outputs\n  // this is to support rich rendering for older versions of MLflow\n  // before the `mlflow.chat.messages` attribute was introduced\n  const messagesFromInputs = normalizeConversation(inputs, spanAttributes?.['mlflow.message.format']) ?? [];\n  const messagesFromOutputs = normalizeConversation(outputs, spanAttributes?.['mlflow.message.format']) ?? [];\n\n  // when either input or output is not chat messages, we do not set the chat message fiels.\n  if (messagesFromInputs.length === 0 || messagesFromOutputs.length === 0) {\n    return undefined;\n  }\n\n  return messagesFromInputs.concat(messagesFromOutputs);\n};\n\nconst getChatToolsFromSpan = (toolsAttributeValue: any, inputs: any): ModelTraceChatTool[] | undefined => {\n  // if the `mlflow.chat.tools` attribute is provided\n  // and in the correct format, return it as-is\n  if (Array.isArray(toolsAttributeValue) && toolsAttributeValue.every(isModelTraceChatTool)) {\n    return toolsAttributeValue;\n  }\n\n  // otherwise, attempt to parse tools from inputs\n  // TODO: support langchain format for tool inputs\n  if (Array.isArray(inputs?.tools) && inputs?.tools?.every(isModelTraceChatTool)) {\n    return inputs.tools;\n  }\n\n  return undefined;\n};\n\nexport const normalizeNewSpanData = (\n  span: ModelTraceSpan,\n  rootStartTime: number,\n  rootEndTime: number,\n  children: ModelTraceSpanNode[],\n  assessmentMap: Record<string, Assessment[]>,\n  traceId: string,\n): ModelTraceSpanNode => {\n  const spanType = tryDeserializeAttribute(span.attributes?.['mlflow.spanType']);\n  const inputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanInputs']);\n  const outputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanOutputs']);\n  const parentId = getModelTraceSpanParentId(span);\n  const spanId = getModelTraceSpanId(span);\n\n  const assessments = assessmentMap[spanId] ?? [];\n  if (!parentId) {\n    // assessments that are not associated with a specific\n    // span should be displayed at the root.\n    assessments.push(...(assessmentMap[''] ?? []));\n  }\n\n  // data that powers the \"chat\" tab\n  const messagesAttributeValue = tryDeserializeAttribute(span.attributes?.['mlflow.chat.messages']);\n  const messageFormat = tryDeserializeAttribute(span.attributes?.['mlflow.message.format']);\n  const spanAttributesForChat = messageFormat ? { 'mlflow.message.format': messageFormat } : undefined;\n  const chatMessages = getChatMessagesFromSpan(messagesAttributeValue, inputs, outputs, spanAttributesForChat);\n  const chatTools = getChatToolsFromSpan(tryDeserializeAttribute(span.attributes?.['mlflow.chat.tools']), inputs);\n\n  // remove other private mlflow attributes\n  const attributes = mapValues(\n    omitBy(span.attributes, (_, key) => key.startsWith('mlflow.')),\n    (value) => tryDeserializeAttribute(value),\n  );\n  const events = span.events;\n  const start = (Number(getModelTraceSpanStartTime(span)) - rootStartTime) / 1000;\n  const end = (Number(getModelTraceSpanEndTime(span) ?? rootEndTime) - rootStartTime) / 1000;\n\n  return {\n    title: span.name,\n    icon: (\n      <ModelTraceExplorerIcon\n        type={getIconTypeForSpan(spanType)}\n        hasException={getSpanExceptionCount(span) > 0}\n        isRootSpan={!parentId}\n      />\n    ),\n    type: spanType,\n    key: spanId,\n    start,\n    end,\n    children,\n    inputs,\n    outputs,\n    attributes,\n    events,\n    chatMessages,\n    chatTools,\n    parentId,\n    assessments,\n    traceId,\n  };\n};\n\nconst base64ToHex = (base64: string): string => {\n  const binaryString = atob(base64);\n  const binaryLen = binaryString.length;\n  let hex = '';\n  for (let i = 0; i < binaryLen; i++) {\n    const charCode = binaryString.charCodeAt(i);\n    hex += charCode.toString(16).padStart(2, '0');\n  }\n  return hex;\n};\n\n// mlflow span ids are meant to be interpreted as hex strings\nexport const decodeSpanId = (spanId: string, isV3Span: boolean): string => {\n  if (isV3Span) {\n    // v3 span ids are base64 encoded\n    try {\n      return base64ToHex(spanId);\n    } catch (e) {\n      // if base64 decoding fails, just return the original spanId\n      return spanId;\n    }\n  }\n\n  // old V2 span ids (pre-March 2025) are in hex with a 0x prefix\n  if (spanId.startsWith('0x')) {\n    return spanId.slice(2);\n  }\n\n  // new V2 span ids have the prefix stripped\n  return spanId;\n};\n\nexport function isV3ModelTraceInfo(info: ModelTrace['info']): info is ModelTraceInfoV3 {\n  return 'trace_metadata' in info;\n}\n\nexport function isV3ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV3 {\n  return 'start_time_unix_nano' in span;\n}\n\nexport function isV2ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV2 {\n  return 'parent_id' in span;\n}\n\nexport function getModelTraceSpanId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span) ? decodeSpanId(span.span_id, true) : decodeSpanId(span.context?.span_id ?? '', false);\n}\n\nexport function getModelTraceSpanParentId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span)\n    ? decodeSpanId(span.parent_span_id ?? '', true)\n    : decodeSpanId(span.parent_id ?? '', false);\n}\n\nexport function getModelTraceSpanStartTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.start_time_unix_nano) : Number(span.start_time);\n}\n\nexport function getModelTraceSpanEndTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.end_time_unix_nano) : Number(span.end_time);\n}\n\nexport function getModelTraceId(trace: ModelTrace): string {\n  return isV3ModelTraceInfo(trace.info) ? trace.info.trace_id : trace.info.request_id ?? '';\n}\n\nexport function parseModelTraceToTree(trace: ModelTrace): ModelTraceSpanNode | null {\n  const traceId = getModelTraceId(trace);\n  const spans = trace.trace_data?.spans ?? trace.data.spans;\n  const spanMap: { [span_id: string]: ModelTraceSpan } = {};\n  const relationMap: { [span_id: string]: string[] } = {};\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    spanMap[spanId] = span;\n    relationMap[spanId] = [];\n  });\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    const parentId = getModelTraceSpanParentId(span);\n    if (parentId) {\n      if (!relationMap[parentId]) {\n        throw new Error('Tree structure is malformed!');\n      }\n      relationMap[parentId].push(spanId);\n    }\n  });\n\n  const rootSpan = spans.find((span) => !getModelTraceSpanParentId(span));\n  if (isNil(rootSpan)) {\n    return null;\n  }\n\n  const rootSpanId = getModelTraceSpanId(rootSpan);\n  function getSpanNodeFromData(span_id: string): ModelTraceSpanNode {\n    const span = spanMap[span_id];\n    // above we return if rootSpan is null, but for some\n    // reason typescript thinks it's still nullable here.\n    const rootStart = Number(getModelTraceSpanStartTime(rootSpan as ModelTraceSpan));\n    const rootEnd = Number(getModelTraceSpanEndTime(rootSpan as ModelTraceSpan));\n    const children = relationMap[span_id].map(getSpanNodeFromData);\n    const assessmentMap = getAssessmentMap(trace.info);\n\n    // not using `isV2Span` here because for legacy reasons,\n    // V1 and V2 are rolled into in the same type. \"parent_id\" is\n    // the way we distinguish between the two.\n    if (isV3ModelTraceSpan(span) || 'parent_id' in span) {\n      // reusing the same function for v2 and v3 as the changes are small\n      return normalizeNewSpanData(span, rootStart, rootEnd, children, assessmentMap, traceId);\n    }\n\n    // v1 spans\n    const spanType = span.span_type ?? ModelSpanType.UNKNOWN;\n    return {\n      title: span.name,\n      icon: <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />,\n      type: spanType as ModelSpanType,\n      key: span.context.span_id,\n      start: Number(span.start_time) - rootStart,\n      // default to the end of the root span if the span has no end time.\n      // this can happen if an exception was thrown in the span.\n      end: Number(span.end_time ?? rootEnd) - rootStart,\n      children: children,\n      inputs: span.inputs,\n      outputs: span.outputs,\n      attributes: span.attributes,\n      events: span.events,\n      parentId: span.parent_id ?? span.parent_span_id,\n      assessments: [],\n      traceId,\n    };\n  }\n\n  return getSpanNodeFromData(rootSpanId);\n}\n\n// returns a map of { [span_id: string] : Assessment[] }\nexport const getAssessmentMap = (traceInfo: ModelTrace['info']): Record<string, Assessment[]> => {\n  let assessments: Assessment[] = [];\n  if (isV3ModelTraceInfo(traceInfo)) {\n    assessments = traceInfo.assessments ?? [];\n  } else {\n    assessments = getAssessmentsFromTags(traceInfo.tags);\n  }\n\n  // hydrate the assessments with the overridden assessment objects\n  const assessmentsById = keyBy(assessments, 'assessment_id');\n  Object.values(assessmentsById).forEach((assessment) => {\n    if (assessment.overrides) {\n      const overriddenAssessment = assessmentsById[assessment.overrides];\n      assessment.overriddenAssessment = overriddenAssessment;\n    }\n  });\n\n  assessments = Object.values(assessmentsById);\n\n  // construct the map by reducing over the assessments\n  const assessmentMap = assessments.reduce((acc: Record<string, Assessment[]>, assessment: Assessment) => {\n    const spanId = assessment.span_id ?? '';\n    if (!acc[spanId]) {\n      acc[spanId] = [];\n    }\n    acc[spanId].push(assessment);\n    return acc;\n  }, {});\n\n  // sort the assessments by last_update_time\n  Object.keys(assessmentMap).forEach((spanId) => {\n    assessmentMap[spanId].sort(\n      (a, b) => new Date(b.last_update_time).getTime() - new Date(a.last_update_time).getTime(),\n    );\n  });\n\n  return assessmentMap;\n};\n\n// parses assessments out from the trace tags\nconst getAssessmentsFromTags = (tags: ModelTrace['info']['tags']): Assessment[] => {\n  if (!tags) {\n    return [];\n  }\n\n  const tagList = Array.isArray(tags) ? tags : Object.entries(tags).map(([key, value]) => ({ key, value }));\n\n  return tagList.filter(({ key }) => key.startsWith('mlflow.assessment.')).map(({ value }) => JSON.parse(value));\n};\n\n// this function attempts to extract the trace version from\n// a given source (either request_metadata or tags)\nexport function findTraceVersionByKey(\n  source: { [key: string]: string } | { key: string; value: string }[] | undefined,\n): string | undefined {\n  if (!source) {\n    return undefined;\n  }\n\n  if (isArray(source)) {\n    return source.find((tag) => tag.key === MLFLOW_TRACE_SCHEMA_VERSION_KEY)?.value;\n  }\n\n  return source[MLFLOW_TRACE_SCHEMA_VERSION_KEY];\n}\n\n// this function determines whether an object is a ModelTrace by asserting\n// that the object has the `data` and `info` fields, and that the\n// trace info contains the `mlflow.trace_schema.version` key\nexport const isModelTrace = (trace: any): trace is ModelTrace => {\n  const traceInfo = trace?.info;\n  const traceData = trace?.data;\n  if (!traceInfo || !traceData || !traceData?.spans) {\n    return false;\n  }\n\n  // request_metadata is for V2 traces, trace_metadata is for V3 traces\n  const metadata = traceInfo?.request_metadata ?? traceInfo?.trace_metadata;\n  if (metadata && findTraceVersionByKey(metadata)) {\n    return true;\n  }\n\n  const tags = traceInfo?.tags;\n  if (tags && findTraceVersionByKey(tags)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const createListFromObject = (\n  obj: { [key: string]: any } | string[] | string | boolean | number | undefined,\n) => {\n  if (isNil(obj)) {\n    return [];\n  }\n\n  if (Array.isArray(obj) || isString(obj) || isNumber(obj) || isBoolean(obj)) {\n    return [{ key: '', value: JSON.stringify(obj, null, 2) }];\n  }\n\n  return Object.entries(obj).map(([key, value]) => {\n    return { key, value: JSON.stringify(value, null, 2) };\n  });\n};\n\nexport const getHighlightedSpanComponents = ({\n  searchFilter,\n  data,\n  activeMatchBackgroundColor,\n  inactiveMatchBackgroundColor,\n  containsActiveMatch,\n  activeMatch,\n  scrollToActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatchBackgroundColor: string;\n  inactiveMatchBackgroundColor: string;\n  containsActiveMatch: boolean;\n  activeMatch: SearchMatch;\n  scrollToActiveMatch: (node: HTMLSpanElement) => void;\n}) => {\n  // splitting by regex retains the matches in the array,\n  // which makes it easier to handle stuff like preserving\n  // the original case of the match.\n  const regex = new RegExp(`(${escapeRegExp(searchFilter.trim())})`, 'gi');\n  const parts = data.split(regex);\n  const spans: React.ReactNode[] = [];\n  let matchIndex = 0;\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].toLowerCase().includes(searchFilter.toLowerCase().trim())) {\n      const isActiveMatch = containsActiveMatch && activeMatch.matchIndex === matchIndex;\n      const backgroundColor = isActiveMatch ? activeMatchBackgroundColor : inactiveMatchBackgroundColor;\n      const span = (\n        <span ref={isActiveMatch ? scrollToActiveMatch : null} key={i} css={{ backgroundColor, scrollMarginTop: 50 }}>\n          {parts[i]}\n        </span>\n      );\n      matchIndex++;\n      spans.push(span);\n    } else {\n      spans.push(parts[i]);\n    }\n  }\n\n  return spans;\n};\n\nexport const isRetrieverDocument = (document: any): document is RetrieverDocument => {\n  return has(document, 'page_content');\n};\n\nexport const isRenderableRetrieverSpan = (span: ModelTraceSpanNode): boolean => {\n  return (\n    span.type === ModelSpanType.RETRIEVER &&\n    Array.isArray(span.outputs) &&\n    span.outputs.length > 0 &&\n    every(span.outputs, isRetrieverDocument)\n  );\n};\n\nexport const getEventAttributeKey = (name: string, index: number, attribute: string): string => {\n  return `${name}-${index}-${attribute}`;\n};\n\nexport const getSpanExceptionEvents = (span: ModelTraceSpanNode | ModelTraceSpan): ModelTraceEvent[] => {\n  return (span.events ?? []).filter((event) => event.name === 'exception');\n};\n\nexport const getSpanExceptionCount = (span: ModelTraceSpanNode | ModelTraceSpan): number => {\n  return getSpanExceptionEvents(span).length;\n};\n\nexport const isModelTraceChatToolParamProperty = (obj: any): obj is ModelTraceChatToolParamProperty => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (!isNil(obj.type) && !isString(obj.type)) {\n    return false;\n  }\n\n  if (!isNil(obj.description) && !isString(obj.description)) {\n    return false;\n  }\n\n  if (!isNil(obj.enum) && !Array.isArray(obj.enum)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isModelTraceChatTool = (obj: any): obj is ModelTraceChatTool => {\n  if (isNil(obj) || obj.type !== 'function' || !has(obj, 'function.name')) {\n    return false;\n  }\n\n  // conditional validation for the `parameters` field\n  const parameters = obj.function?.parameters;\n  if (!isNil(parameters)) {\n    // if `required` is present, it must be a list of strings\n    const required = parameters.required;\n    if (!isNil(required) && (!Array.isArray(required) || !required.every(isString))) {\n      return false;\n    }\n\n    const properties = parameters.properties;\n    if (!isNil(properties) && !Object.values(properties).every(isModelTraceChatToolParamProperty)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const isModelTraceToolCall = (obj: any): obj is ModelTraceToolCall => {\n  return obj && isString(obj.id) && isString(obj.function?.arguments) && isString(obj.function?.name);\n};\n\nconst isContentPart = (part: any) => {\n  switch (part.type) {\n    case 'text':\n    case 'input_text':\n    case 'output_text':\n      return isString(part.text);\n    case 'image_url':\n      const { image_url } = part;\n      if (isNil(image_url)) {\n        return false;\n      }\n      return isString(image_url.url) && (isNil(image_url.detail) || ['auto', 'low', 'high'].includes(image_url.detail));\n    case 'input_audio':\n      const { input_audio } = part;\n      if (isNil(input_audio)) {\n        return false;\n      }\n      return isString(input_audio.data) && (isNil(input_audio.format) || ['wav', 'mp3'].includes(input_audio.format));\n    default:\n      return false;\n  }\n};\n\nconst isContentType = (content: any) => {\n  if (isNil(content) || isString(content)) {\n    return true;\n  }\n\n  if (isArray(content)) {\n    return content.every((part) => isContentPart(part));\n  }\n\n  return false;\n};\n\nexport const isModelTraceChatMessage = (message: any): message is ModelTraceChatMessage => {\n  if (!isRawModelTraceChatMessage(message)) {\n    return false;\n  }\n\n  return isNil(message.content) || isString(message.content);\n};\n\nexport const isRawModelTraceChatMessage = (message: any): message is RawModelTraceChatMessage => {\n  if (!message) {\n    return false;\n  }\n\n  if (message.tool_calls) {\n    if (!Array.isArray(message.tool_calls)) {\n      return false;\n    }\n\n    if (!message.tool_calls.every(isModelTraceToolCall)) {\n      return false;\n    }\n  }\n\n  if (message.type === 'reasoning') {\n    return true;\n  }\n\n  // verify if the message content is a valid content type or not\n  if (!isContentType(message.content)) {\n    return false;\n  }\n\n  return (\n    message.role === 'user' || message.role === 'assistant' || message.role === 'system' || message.role === 'tool'\n  );\n};\n\nexport const isModelTraceChatInput = (obj: any): obj is ModelTraceChatInput => {\n  return (\n    obj && Array.isArray(obj.messages) && obj.messages.length > 0 && obj.messages.every(isRawModelTraceChatMessage)\n  );\n};\n\nexport const isModelTraceChoices = (obj: any): obj is ModelTraceChatResponse['choices'] => {\n  return (\n    Array.isArray(obj) &&\n    obj.length > 0 &&\n    obj.every((choice: any) => has(choice, 'message') && isModelTraceChatMessage(choice.message))\n  );\n};\n\nexport const isModelTraceChatResponse = (obj: any): obj is ModelTraceChatResponse => {\n  return obj && isModelTraceChoices(obj.choices);\n};\n\n/**\n * Attempt to normalize a conversation, return null in case the format is unrecognized\n * TODO: move all chat parsing logic to the chat-utils folder to avoid cluttering this\n * utils file.\n *\n * Supported formats:\n *   1. Langchain chat inputs\n *   2. Langchain chat results\n *   3. OpenAI ChatCompletions inputs\n *   4. OpenAI ChatCompletions responses\n *   5. OpenAI Responses inputs\n *   6. OpenAI Responses output\n *   7. LlamaIndex chat responses\n *   8. DSPy chat inputs\n *   8. DSPy chat outputs\n *   9. Gemini inputs\n *  10. Gemini outputs\n *  11. Anthropic inputs\n *  12. Anthropic outputs\n */\nexport const normalizeConversation = (input: any, messageFormat?: string): ModelTraceChatMessage[] | null => {\n  // wrap in try/catch to avoid crashing the UI. we're doing a lot of type coercion\n  // and formatting, and it's possible that we miss some edge cases. in case of an error,\n  // simply return null to signify that the input is not a chat input.\n  try {\n    // if the input is already in the correct format, return it\n    if (Array.isArray(input) && input.length > 0 && input.every(isRawModelTraceChatMessage)) {\n      return compact(input.map(prettyPrintChatMessage));\n    }\n\n    switch (messageFormat) {\n      case 'langchain':\n        const langchainMessages = normalizeLangchainChatInput(input) ?? normalizeLangchainChatResult(input);\n        if (langchainMessages) return langchainMessages;\n        break;\n      case 'llamaindex':\n        const llamaIndexMessages = normalizeLlamaIndexChatInput(input) ?? normalizeLlamaIndexChatResponse(input);\n        if (llamaIndexMessages) return llamaIndexMessages;\n        break;\n      case 'openai':\n        const openAIMessages =\n          normalizeOpenAIChatInput(input) ??\n          normalizeOpenAIChatResponse(input) ??\n          normalizeOpenAIResponsesOutput(input) ??\n          normalizeOpenAIResponsesInput(input);\n        if (openAIMessages) return openAIMessages;\n        break;\n      case 'dspy':\n        const dspyMessages = normalizeDspyChatInput(input) ?? normalizeDspyChatOutput(input);\n        if (dspyMessages) return dspyMessages;\n        break;\n      case 'gemini':\n        const geminiMessages = normalizeGeminiChatInput(input) ?? normalizeGeminiChatOutput(input);\n        if (geminiMessages) return geminiMessages;\n        break;\n      case 'anthropic':\n        const anthropicMessages = normalizeAnthropicChatInput(input) ?? normalizeAnthropicChatOutput(input);\n        if (anthropicMessages) return anthropicMessages;\n        break;\n      case 'openai-agent':\n        const openAIAgentMessages = normalizeOpenAIAgentInput(input) ?? normalizeOpenAIAgentOutput(input);\n        if (openAIAgentMessages) return openAIAgentMessages;\n        break;\n      case 'autogen':\n        const autogenMessages = normalizeAutogenChatInput(input) ?? normalizeAutogenChatOutput(input);\n        if (autogenMessages) return autogenMessages;\n        break;\n      case 'bedrock':\n        const bedrockMessages = normalizeBedrockChatInput(input) ?? normalizeBedrockChatOutput(input);\n        if (bedrockMessages) return bedrockMessages;\n        break;\n      default:\n        // Fallback to OpenAI chat format\n        const chatMessages = normalizeOpenAIChatInput(input) ?? normalizeOpenAIChatResponse(input);\n        if (chatMessages) return chatMessages;\n        break;\n    }\n\n    return null;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const prettyPrintToolCall = (toolCall: ModelTraceToolCall): ModelTraceToolCall => {\n  // add some spacing to the arguments for better readability\n  let args = toolCall.function?.arguments;\n  try {\n    args = JSON.stringify(JSON.parse(args), null, 2);\n  } catch (e) {\n    // use original args\n  }\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: args,\n      name: toolCall.function.name,\n    },\n  };\n};\n\nconst formatChatContent = (content?: ModelTraceContentType | null): string | undefined | null => {\n  if (isNil(content) || isString(content)) {\n    return content;\n  }\n\n  const contentParts = content\n    // eslint-disable-next-line array-callback-return\n    .map((part) => {\n      switch (part.type) {\n        case 'text':\n        case 'input_text':\n        case 'output_text':\n          return part.text;\n        case 'image_url':\n          const url = part?.image_url?.url;\n          return url ? `![](${url})` : '[image]';\n        case 'input_audio':\n          // raw encoded audio content is not displayed in the UI\n          return '[audio]';\n      }\n    })\n    .filter((part) => part !== undefined);\n\n  // Join with double line breaks for better visual separation\n  return contentParts.join('\\n\\n');\n};\n\nexport const prettyPrintChatMessage = (message: RawModelTraceChatMessage): ModelTraceChatMessage | null => {\n  // TODO: support rich rendering of reasoning messages\n  // for now, just return null and compact it away in the caller\n  // this is because we want to still render the rest of the message\n  // outputs.\n  if (message.type === 'reasoning') {\n    return null;\n  }\n\n  return {\n    ...message,\n    content: formatChatContent(message.content),\n    tool_calls: message.tool_calls?.map(prettyPrintToolCall),\n  };\n};\n","import type { TimelineTreeNode } from './timeline-tree';\n\nexport const MLFLOW_TRACE_SCHEMA_VERSION_KEY = 'mlflow.trace_schema.version';\n\n// column name for mlflow trace data in inference tables\nexport const INFERENCE_TABLE_RESPONSE_COLUMN_KEY = 'response';\nexport const INFERENCE_TABLE_TRACE_COLUMN_KEY = 'trace';\n\nexport type ModelTraceExplorerRenderMode = 'default' | 'json';\n\nexport enum ModelSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  FUNCTION = 'FUNCTION',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  MEMORY = 'MEMORY',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport enum ModelIconType {\n  MODELS = 'models',\n  DOCUMENT = 'document',\n  CONNECT = 'connect',\n  SEARCH = 'search',\n  SORT = 'sort',\n  UNKNOWN = 'unknown',\n  FUNCTION = 'function',\n  CODE = 'code',\n  NUMBERS = 'numbers',\n  WRENCH = 'wrench',\n  AGENT = 'agent',\n  CHAIN = 'chain',\n  USER = 'user',\n  SYSTEM = 'system',\n  SAVE = 'save',\n}\n\n/**\n * Represents a single model trace span.\n * Based on https://github.com/mlflow/mlflow/blob/tracing/mlflow/entities/span.py\n *\n * TODO: clean up all deprecated fields after PrPr customers swap over to\n *       the latest version of mlflow tracing\n */\nexport type ModelTraceSpanV2 = {\n  context: {\n    span_id: string;\n    trace_id: string;\n  };\n  name: string;\n  /* deprecated, renamed to `parent_id` */\n  parent_span_id?: string | null;\n  parent_id?: string | null;\n  /* deprecated, contained in attributes['mlflow.spanType'] */\n  span_type?: ModelSpanType | string;\n  /* deprecated, migrated to `status_code` and `status_message` */\n  status?: ModelTraceStatus;\n  status_code?: string;\n  status_message?: string | null;\n  start_time: number;\n  end_time: number;\n  /* deprecated, contained in attributes['mlflow.spanInputs'] */\n  inputs?: any;\n  /* deprecated, contained in attributes['mlflow.spanOutputs'] */\n  outputs?: any;\n  attributes?: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpanV3 = {\n  trace_id: string;\n  span_id: string;\n  // can be empty\n  trace_state: string;\n  // can be empty or null\n  parent_span_id: string | null;\n  name: string;\n  start_time_unix_nano: string;\n  end_time_unix_nano: string;\n  status: {\n    code: ModelSpanStatusCode;\n    message?: string;\n  };\n  attributes: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpan = ModelTraceSpanV2 | ModelTraceSpanV3;\n\nexport type ModelTraceEvent = {\n  name: string;\n  /* deprecated as of v3, migrated to `time_unix_nano` */\n  timestamp?: number;\n  time_unix_nano?: number;\n  attributes?: Record<string, any>;\n};\n\nexport type ModelTraceData = {\n  spans: ModelTraceSpan[];\n};\n\n/**\n * Represents a single model trace object.\n * Based on https://github.com/mlflow/mlflow/blob/8e44d102e9568d09d9dc376136d13a5a5d1ab46f/mlflow/tracing/types/model.py#L11\n */\nexport type ModelTrace = {\n  /* deprecated, renamed to `data` */\n  trace_data?: ModelTraceData;\n  /* deprecated, renamed to `info` */\n  trace_info?: ModelTraceInfo;\n  data: ModelTraceData;\n  info: ModelTraceInfoV3 | ModelTraceInfo | NotebookModelTraceInfo;\n};\n\n/**\n * Represents the trace data saved in an inference table.\n * https://github.com/databricks/universe/blob/fb8a572602161aa6387ac32593aa24a91518cc32/rag/serving/python/databricks/rag/unpacking/schemas.py#L133-L141\n */\nexport type ModelTraceInferenceTableData = {\n  app_version_id: string;\n  start_timestamp: string;\n  end_timestamp: string;\n  is_truncated: boolean;\n  [MLFLOW_TRACE_SCHEMA_VERSION_KEY]: number;\n  spans: (Omit<ModelTraceSpan, 'attributes'> & {\n    attributes: string;\n  })[];\n};\n\nexport type ModelTraceInfo = {\n  request_id?: string;\n  experiment_id?: string;\n  timestamp_ms?: number;\n  execution_time_ms?: number;\n  status?: ModelTraceStatus['description'];\n  attributes?: Record<string, any>;\n  request_metadata?: { key: string; value: string }[];\n  tags?: { key: string; value: string }[];\n};\n\n// tags and request_metadata in the notebook view\n// (i.e. displayed directly from the python client)\n// are stored as an object rather than an array.\nexport type NotebookModelTraceInfo = Omit<ModelTraceInfo, 'tags' | 'request_metadata'> & {\n  tags?: { [key: string]: string };\n  request_metadata?: { [key: string]: string };\n};\n\nexport type ModelTraceLocationMlflowExperiment = {\n  type: 'MLFLOW_EXPERIMENT';\n  mlflow_experiment: {\n    experiment_id: string;\n  };\n};\n\nexport type ModelTraceLocationInferenceTable = {\n  type: 'INFERENCE_TABLE';\n  inference_table: {\n    full_table_name: string;\n  };\n};\n\nexport type ModelTraceLocation = ModelTraceLocationMlflowExperiment | ModelTraceLocationInferenceTable;\n\nexport type ModelTraceInfoV3 = {\n  trace_id: string;\n  client_request_id?: string;\n  trace_location: ModelTraceLocation;\n  request_preview?: string;\n  response_preview?: string;\n  // timestamp in a format like \"2025-02-19T09:52:23.140Z\"\n  request_time: string;\n  // formatted duration string like \"32.4s\"\n  execution_duration: string;\n  state: ModelTraceState;\n  trace_metadata: {\n    [key: string]: string;\n  };\n  assessments: Assessment[];\n  tags: {\n    [key: string]: string;\n  };\n};\n\nexport type ModelTraceState = 'STATE_UNSPECIFIED' | 'OK' | 'ERROR' | 'IN_PROGRESS';\n\nexport type ModelSpanStatusCode = 'STATUS_CODE_UNSET' | 'STATUS_CODE_OK' | 'STATUS_CODE_ERROR';\n\nexport type ModelTraceStatusUnset = {\n  description: 'UNSET';\n  status_code: 0;\n};\n\nexport type ModelTraceStatusOk = {\n  description: 'OK';\n  status_code: 1;\n};\n\nexport type ModelTraceStatusError = {\n  description: 'ERROR';\n  status_code: 2;\n};\n\nexport type ModelTraceStatusInProgress = {\n  description: 'IN_PROGRESS';\n  status_code: 3;\n};\n\nexport enum ModelTraceSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  MEMORY = 'MEMORY',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport type ModelTraceStatus =\n  | ModelTraceStatusUnset\n  | ModelTraceStatusOk\n  | ModelTraceStatusError\n  | ModelTraceStatusInProgress;\n\n/**\n * Represents a single node in the model trace tree.\n */\nexport interface ModelTraceSpanNode extends TimelineTreeNode, Pick<ModelTraceSpan, 'attributes' | 'type' | 'events'> {\n  assessments: Assessment[];\n  inputs?: any;\n  outputs?: any;\n  children?: ModelTraceSpanNode[];\n  chatMessages?: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n  parentId?: string | null;\n  traceId: string;\n}\n\nexport type ModelTraceExplorerTab = 'chat' | 'content' | 'attributes' | 'events';\n\nexport type SearchMatch = {\n  span: ModelTraceSpanNode;\n  section: 'inputs' | 'outputs' | 'attributes' | 'events';\n  key: string;\n  isKeyMatch: boolean;\n  matchIndex: number;\n};\n\nexport type SpanFilterState = {\n  // always show parents regardless of filter state\n  showParents: boolean;\n  // always show exceptions regardless of filter state\n  showExceptions: boolean;\n  // record of span_type: whether to show it\n  spanTypeDisplayState: Record<string, boolean>;\n};\n\nexport interface RetrieverDocument {\n  metadata: {\n    doc_uri: string;\n    chunk_id: string;\n    [key: string]: any;\n  };\n  page_content: string;\n  [key: string]: any;\n}\n\nexport enum CodeSnippetRenderMode {\n  JSON = 'json',\n  TEXT = 'text',\n  MARKDOWN = 'markdown',\n}\n\ntype ModelTraceTextContentPart = {\n  type: 'text' | 'input_text' | 'output_text';\n  text: string;\n};\n\ntype ModelTraceImageUrl = {\n  url: string;\n  detail?: 'auto' | 'low' | 'high';\n};\n\ntype ModelTraceImageContentPart = {\n  type: 'image_url';\n  image_url: ModelTraceImageUrl;\n};\n\ntype ModelTraceInputAudio = {\n  data: string;\n  format: 'wav' | 'mp3';\n};\n\ntype ModelTraceAudioContentPart = {\n  type: 'input_audio';\n  input_audio: ModelTraceInputAudio;\n};\n\nexport type ModelTraceContentParts =\n  | ModelTraceTextContentPart\n  | ModelTraceImageContentPart\n  | ModelTraceAudioContentPart;\n\nexport type ModelTraceContentType = string | ModelTraceContentParts[];\n\n// We treat content as string in the tracing UI.\nexport type ModelTraceChatMessage = {\n  role: 'system' | 'user' | 'assistant' | 'tool' | 'function' | 'developer';\n  name?: string;\n  content?: string | null;\n  tool_calls?: ModelTraceToolCall[];\n  tool_call_id?: string;\n};\n\n// The actual chat message schema of mlflow contains string, null and content part list.\nexport type RawModelTraceChatMessage = Omit<ModelTraceChatMessage, 'content'> & {\n  // there are other types, but we don't support them yet\n  type?: 'message' | 'reasoning';\n  content?: ModelTraceContentType | null;\n};\n\nexport type ModelTraceChatToolParamProperty = {\n  type?: string;\n  description?: string;\n  enum?: string[];\n};\n\nexport type ModelTraceChatTool = {\n  type: 'function';\n  function: {\n    name: string;\n    description?: string;\n    parameters?: {\n      properties: {\n        [key: string]: ModelTraceChatToolParamProperty;\n      };\n      required?: string[];\n    };\n  };\n};\n\nexport type ModelTraceToolCall = {\n  id: string;\n  function: {\n    arguments: string;\n    name: string;\n  };\n};\n\n// aligned to the OpenAI format\nexport type ModelTraceChatResponse = {\n  choices: {\n    message: ModelTraceChatMessage;\n  }[];\n};\n\nexport type ModelTraceChatInput = {\n  messages: RawModelTraceChatMessage[];\n};\n\nexport type AssessmentSourceType = 'SOURCE_TYPE_UNSPECIFIED' | 'HUMAN' | 'LLM_JUDGE' | 'CODE';\n\nexport interface AssessmentSource {\n  source_type: AssessmentSourceType;\n  // Identifier for the source. For example:\n  // - For a human source -> user name\n  // - For an LLM judge -> the judge source (databricks or custom)\n  // - For a code judge -> the function name\n  source_id: string;\n}\n\nexport interface AssessmentError {\n  error_code: string;\n  error_message?: string;\n  stack_trace?: string;\n}\n\nexport type AssessmentValue = string | number | boolean | null | string[];\n\nexport interface Feedback {\n  // can be null / undefined if error is present\n  value?: AssessmentValue;\n  error?: AssessmentError;\n}\n\nexport interface ExpectationValue {\n  value: AssessmentValue;\n}\n\nexport interface ExpectationSerializedValue {\n  serialized_value: {\n    value: string;\n    serialization_format: string;\n  };\n}\n\nexport type Expectation = ExpectationValue | ExpectationSerializedValue;\n\n// should be aligned with `mlflow/api/proto/service.proto`\nexport interface AssessmentBase {\n  assessment_id: string;\n  assessment_name: string;\n  trace_id: string;\n  source: AssessmentSource;\n  span_id?: string;\n\n  // the time fields are in the form of a string timestamp\n  // e.g. \"2025-04-18T04:01:20.159Z\"\n  create_time: string;\n  last_update_time: string;\n\n  rationale?: string;\n  metadata?: Record<string, string>;\n\n  // if false, the assessment is not valid and should not be displayed\n  // undefined and true should be considered valid.\n  valid?: boolean;\n\n  // the assessment_id of the assessment that this assessment overrides\n  overrides?: string;\n\n  // UI only field to store the overridden assessment object for easier display\n  overriddenAssessment?: Assessment;\n}\n\nexport interface FeedbackAssessment extends AssessmentBase {\n  feedback: Feedback;\n}\n\nexport interface ExpectationAssessment extends AssessmentBase {\n  expectation: Expectation;\n}\n\nexport type Assessment = FeedbackAssessment | ExpectationAssessment;\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["useEditExperimentTraceTags","onSuccess","existingTagKeys","useV3Apis","showEditTagsModal","EditTagsModal","useEditKeyValueTagsModal","saveTagsHandler","async","editedEntity","existingTags","newTags","traceRequestId","requestId","addedOrModifiedTags","filter","key","newTagKey","value","newTagValue","some","existingTagKey","existingTagValue","deletedTags","Promise","all","map","MlflowService","setExperimentTraceTagV3","setExperimentTraceTag","deleteExperimentTraceTagV3","deleteExperimentTraceTag","valueRequired","allAvailableTags","tagKey","startsWith","MLFLOW_INTERNAL_PREFIX","showEditTagsModalForTrace","useCallback","trace","_trace$tags","request_id","visibleTags","tags","shouldEnableAssessmentEditing","shouldEnableSummaryView","_ref","name","styles","getDropdownMenu","menu","intl","useIntl","theme","useDesignSystemTheme","searchValue","props","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","React","flattenOptions","data","disabled","style","color","colors","actionTertiaryTextDefault","actionDisabledText","children","_jsx","LegacyTooltip","title","undefined","formatMessage","id","defaultMessage","placement","_jsxs","css","PlusIcon","_css","marginRight","spacing","sm","groupOption","DropdownMenu","_ref2","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","useState","selectRef","useRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","visible","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","tag","Option","getTagsMap","Map","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","current","reset","saveTags","setIsLoading","Array","from","values","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","Modal","componentId","destroyOnClose","FormattedMessage","onCancel","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","onClick","UnsavedTagPopoverTrigger","onSaveTask","loading","type","onSubmit","handleSubmit","trim","newEntries","set","display","alignItems","gap","md","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","xs","flexWrap","marginTop","KeyValueTag","isClosable","onClose","handleTagDelete","currentFinalTags","delete","_ref3","fullTagDisplay","truncate","length","shownText","Popover","Root","Trigger","asChild","Content","align","Typography","Paragraph","Close","marginLeft","Arrow","FETCH_TRACE_INFO_QUERY_KEY","displayErrorNotification","getIconTypeForSpan","spanType","ModelSpanType","LLM","ModelIconType","MODELS","CHAIN","AGENT","TOOL","WRENCH","CHAT_MODEL","RETRIEVER","SEARCH","PARSER","CODE","EMBEDDING","NUMBERS","RERANKER","SORT","MEMORY","SAVE","FUNCTION","UNKNOWN","getDisplayNameForSpanType","tryDeserializeAttribute","JSON","parse","getMatchesFromSpan","span","searchFilter","matches","sections","inputs","outputs","attributes","events","section","label","push","getMatchesFromEvent","forEach","event","index","Object","keys","attribute","isKeyMatch","getEventAttributeKey","matchIndex","numValueMatches","stringify","split","i","createListFromObject","item","searchTree","rootNode","spanFilterState","_rootNode$children","searchFilterLowercased","allSpanTypesSelected","spanTypeDisplayState","every","shouldDisplay","filteredTreeNodes","filteredChildren","child","childNodes","childMatches","spanName","spanMatches","nodeMatchesSearch","spanTypeIsDisplayed","nodePassesSpanFilters","hasMatchingChild","hasException","getSpanExceptionCount","showParents","showExceptions","concat","searchTreeBySpanId","selectedSpanId","_rootNode$children2","isNil","matchedNode","normalizeNewSpanData","rootStartTime","rootEndTime","assessmentMap","traceId","_span$attributes","_span$attributes2","_span$attributes3","_assessmentMap$spanId","_span$attributes4","_span$attributes5","_span$attributes6","_getModelTraceSpanEnd","parentId","getModelTraceSpanParentId","spanId","getModelTraceSpanId","assessments","_assessmentMap$","messagesAttributeValue","messageFormat","chatMessages","getChatMessagesFromSpan","spanAttributes","_normalizeConversatio","_normalizeConversatio2","isArray","isRawModelTraceChatMessage","compact","prettyPrintChatMessage","messagesFromInputs","normalizeConversation","messagesFromOutputs","chatTools","getChatToolsFromSpan","toolsAttributeValue","_inputs$tools","isModelTraceChatTool","tools","mapValues","omitBy","_","start","Number","getModelTraceSpanStartTime","end","getModelTraceSpanEndTime","icon","ModelTraceExplorerIcon","isRootSpan","decodeSpanId","isV3Span","base64","binaryString","atob","binaryLen","hex","charCodeAt","toString","padStart","base64ToHex","slice","isV3ModelTraceInfo","info","isV3ModelTraceSpan","_span$context$span_id","_span$context","span_id","context","_span$parent_span_id","_span$parent_id","parent_span_id","parent_id","start_time_unix_nano","start_time","end_time_unix_nano","end_time","getModelTraceId","_trace$info$request_i","trace_id","parseModelTraceToTree","_trace$trace_data$spa","_trace$trace_data","spans","trace_data","spanMap","relationMap","Error","rootSpan","find","getSpanNodeFromData","_span$span_type","_span$end_time","_span$parent_id2","rootStart","rootEnd","getAssessmentMap","span_type","traceInfo","_traceInfo$assessment","getAssessmentsFromTags","assessmentsById","keyBy","assessment","overrides","overriddenAssessment","reduce","acc","_assessment$span_id","sort","a","b","Date","last_update_time","getTime","entries","obj","isString","isNumber","isBoolean","getHighlightedSpanComponents","activeMatchBackgroundColor","inactiveMatchBackgroundColor","containsActiveMatch","activeMatch","scrollToActiveMatch","regex","RegExp","escapeRegExp","parts","isActiveMatch","backgroundColor","scrollMarginTop","isRetrieverDocument","document","has","isRenderableRetrieverSpan","getSpanExceptionEvents","_span$events","isModelTraceChatToolParamProperty","description","enum","_obj$function","parameters","function","properties","isModelTraceToolCall","_obj$function2","_obj$function3","arguments","isContentType","content","part","text","image_url","url","detail","input_audio","format","isContentPart","tool_calls","role","isModelTraceChoices","choice","isModelTraceChatResponse","choices","_normalizeLangchainCh","_normalizeLlamaIndexC","_normalizeOpenAIChatI","_normalizeDspyChatInp","_normalizeGeminiChatI","_normalizeAnthropicCh","_normalizeOpenAIAgent","_normalizeAutogenChat","_normalizeBedrockChat","_normalizeOpenAIChatI2","langchainMessages","normalizeLangchainChatInput","normalizeLangchainChatResult","llamaIndexMessages","normalizeLlamaIndexChatInput","normalizeLlamaIndexChatResponse","openAIMessages","normalizeOpenAIChatInput","normalizeOpenAIChatResponse","normalizeOpenAIResponsesOutput","normalizeOpenAIResponsesInput","dspyMessages","normalizeDspyChatInput","normalizeDspyChatOutput","geminiMessages","normalizeGeminiChatInput","normalizeGeminiChatOutput","anthropicMessages","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","openAIAgentMessages","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","autogenMessages","normalizeAutogenChatInput","normalizeAutogenChatOutput","bedrockMessages","normalizeBedrockChatInput","normalizeBedrockChatOutput","prettyPrintToolCall","toolCall","_toolCall$function","args","formatChatContent","_part$image_url","join","_message$tool_calls","ModelTraceSpanType","CodeSnippetRenderMode","KeyValueTagFullViewModal","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundPrimary","whiteSpace","wordBreak","tagValue","CopyButton","copyText","showLabel","CopyIcon","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","enableFullViewModal","charLimit","maxWidth","className","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","closable","Text","bold"],"sourceRoot":""}