{"version":3,"file":"static/js/4173.cd85b491.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/hooks/useInferExperimentKind.tsx","experiment-tracking/components/traces/hooks/useExperimentContainsTraces.tsx","experiment-tracking/components/traces/hooks/useExperimentContainsTrainingRuns.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewInferredKindPopover.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderKindSelector.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewInferredKindModal.tsx","experiment-tracking/components/experiment-page/components/header/tab-selector-bar/TabSelectorBarConstants.tsx","experiment-tracking/components/experiment-page/components/header/tab-selector-bar/TabSelectorBar.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderV2.tsx","experiment-tracking/components/experiment-page/hooks/useGetExperimentPageActiveTabByRoute.tsx","shared/building_blocks/CopyBox.tsx","experiment-tracking/components/modals/GetLinkModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentGetShareLinkModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderShareButton.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewArtifactLocation.tsx","experiment-tracking/components/modals/DeleteExperimentModal.tsx","experiment-tracking/components/modals/RenameExperimentModal.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewManagementMenu.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeader.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentPageViewMode.tsx","experiment-tracking/components/experiment-page/hooks/useUpdateExperimentKind.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewDescriptionNotes.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyTitle.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyArtifactLocation.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyExperimentId.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useExperimentContainsTraces } from '../../traces/hooks/useExperimentContainsTraces';\nimport { ExperimentKind, ExperimentPageTabName } from '../../../constants';\nimport { useExperimentContainsTrainingRuns } from '../../traces/hooks/useExperimentContainsTrainingRuns';\nimport { isEditableExperimentKind } from '../../../utils/ExperimentKindUtils';\n\nexport const useInferExperimentKind = ({\n  experimentId,\n  isLoadingExperiment,\n  enabled = true,\n  experimentTags,\n  updateExperimentKind,\n}: {\n  experimentId?: string;\n  isLoadingExperiment: boolean;\n  enabled?: boolean;\n  experimentTags?: { key?: string | null; value?: string | null }[] | null;\n  updateExperimentKind: (params: { experimentId: string; kind: ExperimentKind }) => void;\n}) => {\n  const { containsTraces, isLoading: isTracesBeingDetermined } = useExperimentContainsTraces({\n    experimentId,\n    enabled,\n  });\n\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  const { containsRuns, isLoading: isTrainingRunsBeingDetermined } = useExperimentContainsTrainingRuns({\n    experimentId,\n    enabled,\n  });\n\n  const isLoading = enabled && (isLoadingExperiment || isTracesBeingDetermined || isTrainingRunsBeingDetermined);\n\n  const inferredExperimentKind = useMemo(() => {\n    if (!enabled || isLoading || isDismissed) {\n      return undefined;\n    }\n    if (containsTraces) {\n      return ExperimentKind.GENAI_DEVELOPMENT_INFERRED;\n    }\n    if (containsRuns) {\n      return ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED;\n    }\n    return ExperimentKind.NO_INFERRED_TYPE;\n  }, [\n    // prettier-ignore\n    enabled,\n    isDismissed,\n    isLoading,\n    containsTraces,\n    containsRuns,\n  ]);\n\n  const inferredExperimentPageTab = useMemo(() => {\n    if (inferredExperimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED) {\n      return ExperimentPageTabName.Traces;\n    }\n    if (inferredExperimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED) {\n      return ExperimentPageTabName.Runs;\n    }\n    return undefined;\n  }, [inferredExperimentKind]);\n\n  // automatically update the experiment type if it's not user-editable\n  useEffect(() => {\n    if (inferredExperimentKind && !isEditableExperimentKind(inferredExperimentKind)) {\n      updateExperimentKind({ experimentId: experimentId ?? '', kind: inferredExperimentKind });\n    }\n  }, [experimentId, inferredExperimentKind, updateExperimentKind]);\n\n  return {\n    isLoading,\n    inferredExperimentKind,\n    inferredExperimentPageTab,\n    dismiss: () => setIsDismissed(true),\n  };\n};\n","import { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { isEmpty } from 'lodash';\nimport invariant from 'invariant';\n\nconst QUERY_KEY = 'EXPERIMENT_CONTAINS_TRACES';\n\n/**\n * Hook for checking if there are any traces for a given experiment.\n * Returns `containsTraces` set to `true` if there's at least one trace, `false` otherwise.\n */\nexport const useExperimentContainsTraces = ({\n  experimentId,\n  enabled,\n}: {\n  experimentId?: string;\n  enabled?: boolean;\n}) => {\n  const { data, isLoading } = useQuery(\n    [QUERY_KEY, experimentId],\n    async () => {\n      invariant(experimentId, 'experimentId is required');\n      const experimentIds = [experimentId];\n\n      return MlflowService.getExperimentTraces(experimentIds, 'timestamp_ms DESC', undefined, undefined, 1);\n    },\n    {\n      enabled: enabled && Boolean(experimentId),\n    },\n  );\n\n  const containsTraces = !isLoading && !isEmpty(data?.traces);\n  return {\n    containsTraces,\n    isLoading: isLoading && enabled && Boolean(experimentId),\n  };\n};\n","import { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { isEmpty } from 'lodash';\nimport invariant from 'invariant';\nimport { useMemo } from 'react';\n\nconst QUERY_KEY = 'EXPERIMENT_CONTAINS_TRAINING_RUNS';\n\n/**\n * Hook for checking if there are any runs in a given experiment.\n * Returns `containsRuns` set to `true` if there's at least one run, `false` otherwise.\n */\nexport const useExperimentContainsTrainingRuns = ({\n  experimentId,\n  enabled,\n}: {\n  experimentId?: string;\n  enabled?: boolean;\n}) => {\n  const { data, isLoading, error } = useQuery(\n    [QUERY_KEY, experimentId],\n    async () => {\n      invariant(experimentId, 'experimentId is required');\n      const experimentIds = [experimentId];\n\n      const ret = await MlflowService.searchRuns({\n        experiment_ids: experimentIds,\n        max_results: 1,\n      });\n\n      return ret;\n    },\n    {\n      enabled: Boolean(experimentId) && enabled,\n    },\n  );\n\n  const containsRuns = useMemo(() => !isLoading && !isEmpty(data?.runs), [isLoading, data]);\n\n  return {\n    containsRuns,\n    isLoading: isLoading && enabled && Boolean(experimentId),\n  };\n};\n","import { Button, CloseIcon, Popover, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ExperimentKind } from '../../../../constants';\nimport { ExperimentKindDropdownLabels, ExperimentKindShortLabels } from '../../../../utils/ExperimentKindUtils';\n\nexport const ExperimentViewInferredKindPopover = ({\n  children,\n  inferredExperimentKind,\n  onConfirm,\n  onDismiss,\n  isInferredKindEditable = false,\n}: {\n  children: React.ReactNode;\n  inferredExperimentKind: ExperimentKind;\n  onConfirm?: () => void;\n  onDismiss?: () => void;\n  isInferredKindEditable?: boolean;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'block', position: 'relative' }}>\n      {children}\n      <Popover.Root componentId=\"mlflow.experiment_view.header.experiment_kind_inference_popover\" open modal={false}>\n        <Popover.Trigger asChild>\n          <div css={{ position: 'absolute', left: 0, bottom: 0, right: 0, height: 0 }} />\n        </Popover.Trigger>\n        <Popover.Content css>\n          <Popover.Arrow />\n          <div css={{ display: 'flex', alignItems: 'flex-start', gap: theme.spacing.sm }}>\n            <div css={{ flex: 1 }}>\n              <Typography.Paragraph css={{ maxWidth: 300 }}>\n                <FormattedMessage\n                  defaultMessage=\"We've automatically detected the experiment type to be ''{kindLabel}''. {isEditable, select, true {You can either confirm or change the type.} other {}}\"\n                  description=\"Popover message for inferred experiment kind\"\n                  values={{\n                    kindLabel: intl.formatMessage(ExperimentKindShortLabels[inferredExperimentKind]),\n                    isEditable: isInferredKindEditable,\n                  }}\n                />\n              </Typography.Paragraph>\n              <Button\n                componentId=\"mlflow.experiment_view.header.experiment_kind_inference_popover.confirm\"\n                onClick={onConfirm}\n                type=\"primary\"\n                size=\"small\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Confirm\"\n                  description=\"Button label to confirm the inferred experiment kind\"\n                />\n              </Button>\n            </div>\n            <Button\n              componentId=\"mlflow.experiment_view.header.experiment_kind_inference_popover.dismiss\"\n              onClick={onDismiss}\n              icon={<CloseIcon />}\n              size=\"small\"\n            />\n          </div>\n        </Popover.Content>\n      </Popover.Root>\n    </div>\n  );\n};\n","import { ChevronDownIcon, DropdownMenu, Popover, Spinner, Tag, Tooltip } from '@databricks/design-system';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { entries } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { defineMessage, FormattedMessage } from 'react-intl';\nimport { ExperimentKind } from '../../../../constants';\nimport {\n  ExperimentKindDropdownLabels,\n  getSelectableExperimentKinds,\n  isEditableExperimentKind,\n  normalizeInferredExperimentKind,\n} from '../../../../utils/ExperimentKindUtils';\nimport { ExperimentViewInferredKindPopover } from './ExperimentViewInferredKindPopover';\n\nconst getVisibleLabel = (kind: ExperimentKind, readOnly: boolean) => {\n  if (kind === ExperimentKind.NO_INFERRED_TYPE || kind === ExperimentKind.EMPTY) {\n    if (readOnly) {\n      // if the user does not have permission to edit the experiment kind, we show the \"None\" label\n      return ExperimentKindDropdownLabels[ExperimentKind.NO_INFERRED_TYPE];\n    }\n    return defineMessage({\n      defaultMessage: 'Select a type',\n      description: 'Label for the experiment type selector in the experiment view header',\n    });\n  }\n  return ExperimentKindDropdownLabels[kind];\n};\n\nexport const ExperimentViewHeaderKindSelector = ({\n  value,\n  inferredExperimentKind,\n  onChange,\n  isUpdating,\n  readOnly = false,\n}: {\n  value?: ExperimentKind;\n  inferredExperimentKind?: ExperimentKind;\n  onChange?: (kind: ExperimentKind) => void;\n  isUpdating?: boolean;\n  readOnly?: boolean;\n}) => {\n  const dropdownItems = useMemo(\n    () =>\n      entries(ExperimentKindDropdownLabels).filter(([key]) =>\n        getSelectableExperimentKinds().includes(key as ExperimentKind),\n      ),\n    [],\n  );\n\n  const currentValue = useMemo(() => {\n    if (inferredExperimentKind) {\n      return normalizeInferredExperimentKind(inferredExperimentKind);\n    }\n    return coerceToEnum(ExperimentKind, value, ExperimentKind.NO_INFERRED_TYPE);\n  }, [value, inferredExperimentKind]);\n\n  const visibleLabel = getVisibleLabel(currentValue, readOnly);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [displayInferencePopover, setDisplayInferencePopover] = useState(\n    Boolean(inferredExperimentKind && !readOnly && isEditableExperimentKind(inferredExperimentKind)),\n  );\n\n  // Determines if we should render a dropdown or just a tag.\n  const usingDropdown = isEditableExperimentKind(currentValue) && !readOnly;\n\n  const tagElement = (\n    <Tag\n      icon={isUpdating ? <Spinner size=\"small\" /> : null}\n      componentId=\"mlflow.experiment_view.header.experiment_kind_selector\"\n      css={{ marginRight: 0 }}\n      // Empty callback so <Tag /> renders its \"clickable\" UI style\n      onClick={!usingDropdown ? undefined : () => {}}\n    >\n      {visibleLabel && <FormattedMessage {...visibleLabel} />} {usingDropdown && <ChevronDownIcon />}\n    </Tag>\n  );\n\n  const tagElementWithTooltip = <ExperimentTypeTooltip>{tagElement}</ExperimentTypeTooltip>;\n\n  if (readOnly) {\n    return tagElementWithTooltip;\n  }\n\n  const dropdownElement = (\n    <DropdownMenu.Root\n      modal={false}\n      open={dropdownOpen}\n      onOpenChange={(open) => {\n        setDisplayInferencePopover(false);\n        setDropdownOpen(open);\n      }}\n    >\n      {/* Mixing dropdown with tooltip requires different ordering */}\n      <ExperimentTypeTooltip>\n        <DropdownMenu.Trigger asChild>{tagElement}</DropdownMenu.Trigger>\n      </ExperimentTypeTooltip>\n      <DropdownMenu.Content align=\"start\">\n        <DropdownMenu.Arrow />\n        <DropdownMenu.Label>\n          <FormattedMessage\n            defaultMessage=\"Experiment type\"\n            description=\"Label for the experiment type selector in the experiment view header\"\n          />\n        </DropdownMenu.Label>\n        {dropdownItems.map(([key, label]) => {\n          const isSelected = key === currentValue;\n          return (\n            <DropdownMenu.CheckboxItem\n              key={key}\n              componentId={`mlflow.experiment_view.header.experiment_kind_selector.${key}`}\n              onClick={() => onChange?.(key as ExperimentKind)}\n              checked={isSelected}\n            >\n              <DropdownMenu.ItemIndicator />\n              <FormattedMessage {...label} />\n            </DropdownMenu.CheckboxItem>\n          );\n        })}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n\n  if (displayInferencePopover && inferredExperimentKind) {\n    return (\n      <ExperimentViewInferredKindPopover\n        inferredExperimentKind={inferredExperimentKind}\n        onConfirm={async () => {\n          if (inferredExperimentKind) {\n            onChange?.(normalizeInferredExperimentKind(inferredExperimentKind));\n          }\n          setDisplayInferencePopover(false);\n        }}\n        onDismiss={() => setDisplayInferencePopover(false)}\n        isInferredKindEditable={isEditableExperimentKind(currentValue)}\n      >\n        {usingDropdown ? dropdownElement : tagElementWithTooltip}\n      </ExperimentViewInferredKindPopover>\n    );\n  }\n\n  return usingDropdown ? dropdownElement : tagElementWithTooltip;\n};\n\nconst ExperimentTypeTooltip = ({ children }: { children: React.ReactNode }) => (\n  <Tooltip\n    componentId=\"mlflow.experiment_view.header.experiment_kind_selector.tooltip\"\n    content={\n      <FormattedMessage\n        defaultMessage=\"Experiment type\"\n        description=\"Label for the experiment type selector in the experiment view header\"\n      />\n    }\n  >\n    {children}\n  </Tooltip>\n);\n","import { Modal, Radio, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentKind } from '../../../../constants';\nimport { ExperimentKindDropdownLabels } from '../../../../utils/ExperimentKindUtils';\n\nexport const ExperimentViewInferredKindModal = ({\n  onDismiss,\n  onConfirm,\n}: {\n  onDismiss?: () => void;\n  onConfirm: (kind: ExperimentKind) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [selectedKind, setSelectedKind] = useState<ExperimentKind>(ExperimentKind.CUSTOM_MODEL_DEVELOPMENT);\n\n  return (\n    <Modal\n      visible\n      componentId=\"mlflow.experiment_view.header.experiment_kind_inference_modal\"\n      onCancel={onDismiss}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Choose experiment type\"\n          description=\"A title for the modal displayed when the experiment type could not be inferred\"\n        />\n      }\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"I'll choose later\"\n          description=\"A label for the dismissal button in the modal displayed when the experiment type could not be inferred\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Confirm\"\n          description=\"A label for the confirmation button in the modal displayed when the experiment type could not be inferred\"\n        />\n      }\n      onOk={() => onConfirm(selectedKind)}\n    >\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"We support multiple experiment types, each with its own set of features. Please select the type you'd like to use. You can change this later if needed.\"\n          description=\"Popover message displayed when the experiment type could not not inferred\"\n        />\n      </Typography.Paragraph>\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginBottom: theme.spacing.sm }}>\n        <Radio\n          checked={selectedKind === ExperimentKind.GENAI_DEVELOPMENT}\n          onChange={() => setSelectedKind(ExperimentKind.GENAI_DEVELOPMENT)}\n        >\n          <FormattedMessage {...ExperimentKindDropdownLabels[ExperimentKind.GENAI_DEVELOPMENT]} />\n        </Radio>\n        <Radio\n          checked={selectedKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT}\n          onChange={() => setSelectedKind(ExperimentKind.CUSTOM_MODEL_DEVELOPMENT)}\n        >\n          <FormattedMessage {...ExperimentKindDropdownLabels[ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]} />\n        </Radio>\n      </div>\n    </Modal>\n  );\n};\n","import Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\n\nimport {\n  GearIcon,\n  ListBorderIcon,\n  ListIcon,\n  ModelsIcon,\n  PlusMinusSquareIcon,\n  UserIcon,\n  TextBoxIcon,\n} from '@databricks/design-system';\nimport { ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewRunsCompareMode } from '@mlflow/mlflow/src/experiment-tracking/types';\n\nexport type TabConfig = {\n  label: React.ReactNode;\n  icon: React.ReactNode;\n  getRoute: (experimentId: string) => string;\n};\n\nexport type TabConfigMap = Partial<Record<ExperimentViewRunsCompareMode | ExperimentPageTabName, TabConfig>>;\n\nconst RunsTabConfig = {\n  label: (\n    <FormattedMessage defaultMessage=\"Runs\" description=\"Label for the runs tab in the MLflow experiment navbar\" />\n  ),\n  icon: <ListIcon />,\n  getRoute: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Runs),\n};\n\nconst TracesTabConfig = {\n  label: (\n    <FormattedMessage defaultMessage=\"Traces\" description=\"Label for the traces tab in the MLflow experiment navbar\" />\n  ),\n  icon: <ListBorderIcon />,\n  getRoute: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Traces),\n};\n\nconst ModelsTabConfig = {\n  label: (\n    <FormattedMessage\n      defaultMessage=\"Versions\"\n      description=\"Label for the logged models tab in the MLflow experiment navbar\"\n    />\n  ),\n  icon: <ModelsIcon />,\n  getRoute: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models),\n};\n\nexport const GenAIExperimentTabConfigMap: TabConfigMap = {\n  [ExperimentPageTabName.Traces]: TracesTabConfig,\n  [ExperimentPageTabName.Models]: ModelsTabConfig,\n};\n\nexport const GenAIExperimentWithPromptsTabConfigMap = GenAIExperimentTabConfigMap;\n\nexport const CustomExperimentTabConfigMap: TabConfigMap = {\n  [ExperimentPageTabName.Runs]: RunsTabConfig,\n  [ExperimentPageTabName.Models]: {\n    ...ModelsTabConfig,\n    label: (\n      <FormattedMessage\n        defaultMessage=\"Models\"\n        description=\"Label for the logged models tab in the MLflow experiment navbar\"\n      />\n    ),\n  },\n  [ExperimentPageTabName.Traces]: TracesTabConfig,\n};\n\nexport const DefaultTabConfigMap: TabConfigMap = {\n  ...CustomExperimentTabConfigMap,\n};\n","import React from 'react';\nimport {\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  useDesignSystemTheme,\n  Tooltip,\n} from '@databricks/design-system';\n\nimport { ExperimentKind, ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useExperimentPageViewMode } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/hooks/useExperimentPageViewMode';\nimport { Link, useParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { shouldEnablePromptsTabOnDBPlatform } from '../../../../../../common/utils/FeatureUtils';\nimport {\n  TabConfigMap,\n  GenAIExperimentTabConfigMap,\n  GenAIExperimentWithPromptsTabConfigMap,\n  CustomExperimentTabConfigMap,\n  DefaultTabConfigMap,\n} from './TabSelectorBarConstants';\nimport { FormattedMessage } from 'react-intl';\nimport { useGetExperimentPageActiveTabByRoute } from '../../../hooks/useGetExperimentPageActiveTabByRoute';\n\nconst isRunsViewTab = (tabName: string) => ['TABLE', 'CHART', 'ARTIFACT'].includes(tabName);\nconst iTracesViewTab = (tabName: string) => ['TRACES'].includes(tabName);\n\nconst getExperimentTabsConfig = (experimentKind?: ExperimentKind): TabConfigMap => {\n  switch (experimentKind) {\n    case ExperimentKind.GENAI_DEVELOPMENT:\n    case ExperimentKind.GENAI_DEVELOPMENT_INFERRED:\n      return shouldEnablePromptsTabOnDBPlatform()\n        ? GenAIExperimentWithPromptsTabConfigMap\n        : GenAIExperimentTabConfigMap;\n    case ExperimentKind.CUSTOM_MODEL_DEVELOPMENT:\n    case ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED:\n    case ExperimentKind.FORECASTING:\n    case ExperimentKind.REGRESSION:\n    case ExperimentKind.AUTOML:\n    case ExperimentKind.CLASSIFICATION:\n      return CustomExperimentTabConfigMap;\n    default:\n      return DefaultTabConfigMap;\n  }\n};\n\nexport const TabSelectorBar = ({ experimentKind }: { experimentKind?: ExperimentKind }) => {\n  const { experimentId, tabName } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const [viewMode] = useExperimentPageViewMode();\n\n  // In the tab selector bar, we're interested in top-level tab names based on the current route\n  const { topLevelTabName: tabNameFromRoute } = useGetExperimentPageActiveTabByRoute();\n\n  let tabNameFromParams = coerceToEnum(ExperimentPageTabName, tabName, undefined);\n  if (tabNameFromParams === ExperimentPageTabName.Datasets) {\n    // datasets is a sub-tab of evaluation runs, so we\n    // should show the evaluation runs tab as active\n    tabNameFromParams = ExperimentPageTabName.EvaluationRuns;\n  }\n  if (tabNameFromParams === ExperimentPageTabName.LabelingSchemas) {\n    // labeling schemas is a sub-tab of labeling sessions, so we\n    // should show the labeling sessions tab as active\n    tabNameFromParams = ExperimentPageTabName.LabelingSessions;\n  }\n\n  const tabNameFromViewMode = (() => {\n    if (isRunsViewTab(viewMode)) {\n      return ExperimentPageTabName.Runs;\n    } else if (iTracesViewTab(viewMode)) {\n      return ExperimentPageTabName.Traces;\n    } else {\n      return viewMode;\n    }\n  })();\n\n  const activeTab = tabNameFromRoute ?? tabNameFromParams ?? tabNameFromViewMode;\n\n  const tabsConfig = getExperimentTabsConfig(experimentKind ?? ExperimentKind.NO_INFERRED_TYPE);\n\n  return (\n    <SegmentedControlGroup\n      value={activeTab}\n      name=\"tab-toggle-bar\"\n      componentId=\"mlflow.experiment-tracking.tab-toggle-bar\"\n      newStyleFlagOverride\n      css={{\n        justifySelf: 'center',\n        [theme.responsive.mediaQueries.xl]: {\n          '& .tab-icon-text': {\n            display: 'inline-flex',\n          },\n          '& .tab-icon-with-tooltip': {\n            display: 'none',\n          },\n        },\n      }}\n    >\n      {Object.entries(tabsConfig).map(([tabName, tabConfig]) => {\n        const isActive = tabName === activeTab;\n\n        return (\n          <React.Fragment key={tabName}>\n            <Link\n              css={{ display: 'none' }}\n              className=\"tab-icon-text\"\n              key={`${tabName}-text`}\n              to={tabConfig.getRoute(experimentId ?? '')}\n            >\n              <SegmentedControlButton\n                data-testid={`tab-selector-button-text-${tabName}-${isActive ? 'active' : 'inactive'}`}\n                className=\"tab-icon-text\"\n                value={tabName}\n                icon={tabConfig.icon}\n              >\n                <span>{tabConfig.label}</span>\n              </SegmentedControlButton>\n            </Link>\n            <Link\n              className=\"tab-icon-with-tooltip\"\n              key={`${tabName}-tooltip`}\n              to={tabConfig.getRoute(experimentId ?? '')}\n            >\n              <SegmentedControlButton\n                data-testid={`tab-selector-button-icon-${tabName}-${isActive ? 'active' : 'inactive'}`}\n                className=\"tab-icon-with-tooltip\"\n                value={tabName}\n                icon={\n                  <Tooltip\n                    delayDuration={0}\n                    content={\n                      <span>\n                        {/* comment for formatting */}\n                        {tabConfig.label}\n                      </span>\n                    }\n                    componentId={`mlflow.experiment-tracking.tab-selector-bar.${tabName}`}\n                  >\n                    <span>{tabConfig.icon}</span>\n                  </Tooltip>\n                }\n              />\n            </Link>\n          </React.Fragment>\n        );\n      })}\n    </SegmentedControlGroup>\n  );\n};\n","import React, { useMemo } from 'react';\nimport {\n  Breadcrumb,\n  ParagraphSkeleton,\n  TitleSkeleton,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentEntity } from '../../../../types';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewArtifactLocation } from '../ExperimentViewArtifactLocation';\nimport { ExperimentViewCopyExperimentId } from './ExperimentViewCopyExperimentId';\nimport { ExperimentViewCopyArtifactLocation } from './ExperimentViewCopyArtifactLocation';\nimport { InfoPopover } from '@databricks/design-system';\nimport { TabSelectorBar } from './tab-selector-bar/TabSelectorBar';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { getExperimentKindFromTags } from '../../../../utils/ExperimentKindUtils';\n\nimport { ExperimentKind } from '../../../../constants';\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeaderV2 = React.memo(\n  ({\n    experiment,\n    inferredExperimentKind,\n    searchFacetsState,\n    uiState,\n    setEditing,\n    experimentKindSelector,\n  }: {\n    experiment: ExperimentEntity;\n    inferredExperimentKind?: ExperimentKind;\n    searchFacetsState?: ExperimentPageSearchFacetsState;\n    uiState?: ExperimentPageUIState;\n    setEditing: (editing: boolean) => void;\n    experimentKindSelector?: React.ReactNode;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n    const experimentIds = useMemo(() => (experiment ? [experiment?.experimentId] : []), [experiment]);\n    // Extract the last part of the experiment name\n    const normalizedExperimentName = useMemo(() => experiment.name.split('/').pop(), [experiment.name]);\n\n    const getInfoTooltip = () => {\n      return (\n        <div style={{ display: 'flex', marginRight: theme.spacing.sm }}>\n          <InfoPopover iconTitle=\"Info\">\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: theme.spacing.xs,\n                flexWrap: 'nowrap',\n              }}\n              data-testid=\"experiment-view-header-info-tooltip-content\"\n            >\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Path\"\n                  description=\"Label for displaying the current experiment path\"\n                />\n                : {experiment.name + ' '}\n                <ExperimentViewCopyTitle experiment={experiment} size=\"md\" />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Experiment ID\"\n                  description=\"Label for displaying the current experiment in view\"\n                />\n                : {experiment.experimentId + ' '}\n                <ExperimentViewCopyExperimentId experiment={experiment} />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Artifact Location\"\n                  description=\"Label for displaying the experiment artifact location\"\n                />\n                : <ExperimentViewArtifactLocation artifactLocation={experiment.artifactLocation} />{' '}\n                <ExperimentViewCopyArtifactLocation experiment={experiment} />\n              </div>\n            </div>\n          </InfoPopover>\n        </div>\n      );\n    };\n\n    const experimentKind = inferredExperimentKind ?? getExperimentKindFromTags(experiment.tags);\n\n    return (\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs, marginBottom: theme.spacing.sm }}>\n        <Breadcrumb includeTrailingCaret>\n          {breadcrumbs.map((breadcrumb, index) => (\n            <Breadcrumb.Item key={index}>{breadcrumb}</Breadcrumb.Item>\n          ))}\n        </Breadcrumb>\n        <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr' }}>\n          <div\n            css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center', overflow: 'hidden', minWidth: 250 }}\n          >\n            <Tooltip\n              content={normalizedExperimentName}\n              componentId=\"mlflow.experiment_view.header.experiment-name-tooltip\"\n            >\n              <span\n                css={{\n                  maxWidth: '100%',\n                  overflow: 'hidden',\n                }}\n              >\n                <Typography.Title\n                  withoutMargins\n                  level={2}\n                  css={{\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    whiteSpace: 'nowrap',\n                  }}\n                >\n                  {normalizedExperimentName}\n                </Typography.Title>\n              </span>\n            </Tooltip>\n            {experimentKindSelector}\n            {getInfoTooltip()}\n          </div>\n          <TabSelectorBar experimentKind={experimentKind} />\n          <div\n            css={{ display: 'flex', gap: theme.spacing.sm, justifyContent: 'flex-end', marginLeft: theme.spacing.sm }}\n          >\n            <ExperimentViewHeaderShareButton\n              experimentIds={experimentIds}\n              searchFacetsState={searchFacetsState}\n              uiState={uiState}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport function ExperimentViewHeaderV2Skeleton() {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n      <ParagraphSkeleton css={{ width: 100 }} loading />\n      <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr' }}>\n        <TitleSkeleton css={{ width: 150, height: theme.general.heightSm }} loading />\n        <TitleSkeleton css={{ height: theme.general.heightSm, alignSelf: 'center' }} loading />\n        <TitleSkeleton css={{ width: theme.spacing.lg, height: theme.general.heightSm, alignSelf: 'right' }} loading />\n      </div>\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { shouldEnableExperimentPageChildRoutes } from '../../../../common/utils/FeatureUtils';\nimport { matchPath, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RoutePaths } from '../../../routes';\nimport { ExperimentPageTabName } from '../../../constants';\nimport { map } from 'lodash';\n\n// Maps experiment page route paths to enumerated tab names\nconst ExperimentPageRoutePathToTabNameMap = map(\n  {\n    [RoutePaths.experimentPageTabRuns]: ExperimentPageTabName.Runs,\n    [RoutePaths.experimentPageTabTraces]: ExperimentPageTabName.Traces,\n    [RoutePaths.experimentPageTabModels]: ExperimentPageTabName.Models,\n  },\n  (tabName, routePath) => ({ routePath, tabName }),\n);\n\n// Gets exact tab name based on given pathname\nconst getTabNameFromRoutePath = (pathname: string) =>\n  ExperimentPageRoutePathToTabNameMap\n    // Find the first route path that matches the given pathname\n    .find(({ routePath }) => Boolean(matchPath(routePath, pathname)))?.tabName;\n\n// Maps exact tab names to top-level tab names\nconst getTopLevelTab = (tabName?: ExperimentPageTabName) => {\n  return tabName;\n};\n\nexport const useGetExperimentPageActiveTabByRoute = () => {\n  const { pathname } = useLocation();\n\n  const tabNameFromRoute = useMemo(() => {\n    if (!shouldEnableExperimentPageChildRoutes()) {\n      return;\n    }\n    const tabName = getTabNameFromRoutePath(pathname);\n    return tabName;\n  }, [pathname]);\n  return {\n    tabName: tabNameFromRoute,\n    topLevelTabName: getTopLevelTab(tabNameFromRoute),\n  };\n};\n","import { Input } from '@databricks/design-system';\nimport { CopyButton } from './CopyButton';\n\ntype Props = {\n  copyText: string;\n};\n\nexport const CopyBox = ({ copyText }: Props) => (\n  <div css={{ display: 'flex', gap: 4 }}>\n    <Input\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_copybox.tsx_18\"\n      readOnly\n      value={copyText}\n      data-testid=\"copy-box\"\n    />\n    <CopyButton copyText={copyText} />\n  </div>\n);\n","import { FormattedMessage } from 'react-intl';\nimport { Modal } from '@databricks/design-system';\nimport { CopyBox } from '../../../shared/building_blocks/CopyBox';\n\ntype Props = {\n  visible: boolean;\n  onCancel: () => void;\n  link: string;\n};\n\nexport const GetLinkModal = ({ visible, onCancel, link }: Props) => {\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_modals_getlinkmodal.tsx_21\"\n      title={<FormattedMessage defaultMessage=\"Get Link\" description=\"Title text for get-link modal\" />}\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <CopyBox copyText={link} />\n    </Modal>\n  );\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GenericSkeleton, Input, Modal } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../../redux-types';\nimport { setExperimentTagApi } from '../../../../actions';\nimport Routes from '../../../../routes';\nimport { CopyButton } from '../../../../../shared/building_blocks/CopyButton';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { getStringSHA256, textCompressDeflate } from '../../../../../common/utils/StringUtils';\nimport Utils from '../../../../../common/utils/Utils';\nimport {\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX,\n  EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY,\n} from '../../../../constants';\nimport { shouldUseCompressedExperimentViewSharedState } from '../../../../../common/utils/FeatureUtils';\nimport {\n  EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY,\n  useExperimentPageViewMode,\n} from '../../hooks/useExperimentPageViewMode';\nimport type { ExperimentViewRunsCompareMode } from '../../../../types';\n\ntype GetShareLinkModalProps = {\n  onCancel: () => void;\n  visible: boolean;\n  experimentIds: string[];\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  uiState: ExperimentPageUIState;\n};\n\ntype ShareableViewState = ExperimentPageSearchFacetsState & ExperimentPageUIState;\n\n// Typescript-based test to ensure that the keys of the two states are disjoint.\n// If they are not disjoint, the state serialization will not work as expected.\nconst _arePersistedStatesDisjoint: [\n  keyof ExperimentPageSearchFacetsState & keyof ExperimentPageUIState extends never ? true : false,\n] = [true];\n\nconst serializePersistedState = async (state: ShareableViewState) => {\n  if (shouldUseCompressedExperimentViewSharedState()) {\n    return textCompressDeflate(JSON.stringify(state));\n  }\n  return JSON.stringify(state);\n};\n\nconst getShareableUrl = (experimentId: string, shareStateHash: string, viewMode?: ExperimentViewRunsCompareMode) => {\n  // As a start, get the route\n  const route = Routes.getExperimentPageRoute(experimentId);\n\n  // Begin building the query params\n  const queryParams = new URLSearchParams();\n\n  // Add the share state hash\n  queryParams.set(EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY, shareStateHash);\n\n  // If the view mode is set, add it to the query params\n  if (viewMode) {\n    queryParams.set(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, viewMode);\n  }\n\n  // In regular implementation, build the hash part of the URL\n  const params = queryParams.toString();\n  const hashParam = `${route}${params?.startsWith('?') ? '' : '?'}${params}`;\n  const shareURL = `${window.location.origin}${window.location.pathname}#${hashParam}`;\n  return shareURL;\n};\n\n/**\n * Modal that displays shareable link for the experiment page.\n * The shareable state is created by serializing the search facets and UI state and storing\n * it as a tag on the experiment.\n */\nexport const ExperimentGetShareLinkModal = ({\n  onCancel,\n  visible,\n  experimentIds,\n  searchFacetsState,\n  uiState,\n}: GetShareLinkModalProps) => {\n  const [sharedStateUrl, setSharedStateUrl] = useState<string>('');\n  const [linkInProgress, setLinkInProgress] = useState(true);\n  const [generatedState, setGeneratedState] = useState<ShareableViewState | null>(null);\n  const [viewMode] = useExperimentPageViewMode();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const stateToSerialize = useMemo(() => ({ ...searchFacetsState, ...uiState }), [searchFacetsState, uiState]);\n\n  const createSerializedState = useCallback(\n    async (state: ShareableViewState) => {\n      if (experimentIds.length > 1) {\n        setLinkInProgress(false);\n        setGeneratedState(state);\n        setSharedStateUrl(window.location.href);\n        return;\n      }\n      setLinkInProgress(true);\n      const [experimentId] = experimentIds;\n      try {\n        const data = await serializePersistedState(state);\n        const hash = await getStringSHA256(data);\n\n        const tagName = `${EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX}${hash}`;\n\n        await dispatch(setExperimentTagApi(experimentId, tagName, data));\n\n        setLinkInProgress(false);\n        setGeneratedState(state);\n\n        setSharedStateUrl(getShareableUrl(experimentId, hash, viewMode));\n      } catch (e) {\n        Utils.logErrorAndNotifyUser('Failed to create shareable link for experiment');\n        throw e;\n      }\n    },\n    [dispatch, experimentIds, viewMode],\n  );\n\n  useEffect(() => {\n    if (!visible || generatedState === stateToSerialize) {\n      return;\n    }\n    createSerializedState(stateToSerialize);\n  }, [visible, createSerializedState, generatedState, stateToSerialize]);\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentgetsharelinkmodal.tsx_101\"\n      title={\n        <FormattedMessage\n          defaultMessage=\"Get shareable link\"\n          description='Title text for the experiment \"Get link\" modal'\n        />\n      }\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <div css={{ display: 'flex', gap: 8 }}>\n        {linkInProgress ? (\n          <GenericSkeleton css={{ flex: 1 }} />\n        ) : (\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentgetsharelinkmodal.tsx_115\"\n            placeholder=\"Click button on the right to create shareable state\"\n            value={sharedStateUrl}\n            readOnly\n          />\n        )}\n        <CopyButton loading={linkInProgress} copyText={sharedStateUrl} data-testid=\"share-link-copy-button\" />\n      </div>\n    </Modal>\n  );\n};\n","import { Button } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GetLinkModal } from '../../../modals/GetLinkModal';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentGetShareLinkModal } from './ExperimentGetShareLinkModal';\n\n/**\n * Experiment page header part responsible for displaying button\n * that displays modal for sharing the link\n */\nexport const ExperimentViewHeaderShareButton = ({\n  searchFacetsState,\n  uiState,\n  experimentIds,\n}: {\n  searchFacetsState?: ExperimentPageSearchFacetsState;\n  uiState?: ExperimentPageUIState;\n  experimentIds?: string[];\n}) => {\n  const [showGetLinkModal, setShowGetLinkModal] = useState(false);\n\n  return (\n    <>\n      {searchFacetsState && uiState && experimentIds ? (\n        <ExperimentGetShareLinkModal\n          searchFacetsState={searchFacetsState}\n          uiState={uiState}\n          visible={showGetLinkModal}\n          onCancel={() => setShowGetLinkModal(false)}\n          experimentIds={experimentIds}\n        />\n      ) : (\n        <GetLinkModal\n          link={window.location.href}\n          visible={showGetLinkModal}\n          onCancel={() => setShowGetLinkModal(false)}\n        />\n      )}\n      {/* TODO: ensure that E2E tests are working after refactor is complete */}\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheadersharebutton.tsx_44\"\n        type=\"primary\"\n        onClick={() => setShowGetLinkModal(true)}\n        data-testid=\"share-button\"\n      >\n        <FormattedMessage defaultMessage=\"Share\" description=\"Text for share button on experiment view page header\" />\n      </Button>\n    </>\n  );\n};\n","import React from 'react';\n\nexport interface ExperimentViewArtifactLocationProps {\n  artifactLocation: string;\n}\n\nexport const ExperimentViewArtifactLocation = ({ artifactLocation }: ExperimentViewArtifactLocationProps) => {\n  return <>{artifactLocation}</>;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteExperimentApi } from '../../actions';\nimport Routes from '../../routes';\nimport Utils from '../../../common/utils/Utils';\nimport { connect } from 'react-redux';\nimport { NavigateFunction } from '../../../common/utils/RoutingUtils';\nimport { getUUID } from '../../../common/utils/ActionUtils';\nimport { withRouterNext } from '../../../common/utils/withRouterNext';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  activeExperimentIds?: string[];\n  experimentId: string;\n  experimentName: string;\n  deleteExperimentApi: (...args: any[]) => any;\n  onExperimentDeleted: () => void;\n  navigate: NavigateFunction;\n};\n\nexport class DeleteExperimentModalImpl extends Component<Props> {\n  handleSubmit = () => {\n    const { experimentId, activeExperimentIds } = this.props;\n    const deleteExperimentRequestId = getUUID();\n\n    const deletePromise = this.props\n      .deleteExperimentApi(experimentId, deleteExperimentRequestId)\n      .then(() => {\n        // reload the page if an active experiment was deleted\n        if (activeExperimentIds?.includes(experimentId)) {\n          if (activeExperimentIds.length === 1) {\n            // send it to root\n            this.props.navigate(Routes.rootRoute);\n          } else {\n            const experimentIds = activeExperimentIds.filter((eid) => eid !== experimentId);\n            const route =\n              experimentIds.length === 1\n                ? Routes.getExperimentPageRoute(experimentIds[0])\n                : Routes.getCompareExperimentsPageRoute(experimentIds);\n            this.props.navigate(route);\n          }\n        }\n      })\n      .then(() => this.props.onExperimentDeleted())\n      .catch((e: any) => {\n        Utils.logErrorAndNotifyUser(e);\n      });\n\n    return deletePromise;\n  };\n\n  render() {\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment \"${this.props.experimentName}\"`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                Experiment \"{this.props.experimentName}\" (Experiment ID: {this.props.experimentId}) will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted experiments are restorable for 30 days, after which they are purged along with their associated\n                runs, including metrics, params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteExperimentApi,\n};\n\nexport const DeleteExperimentModal = withRouterNext(connect(undefined, mapDispatchToProps)(DeleteExperimentModalImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\nimport { getExperimentNameValidator } from '../../../common/forms/validations';\n\nimport { updateExperimentApi, getExperimentApi } from '../../actions';\nimport { getExperiments } from '../../reducers/Reducers';\nimport Utils from '../../../common/utils/Utils';\n\ntype RenameExperimentModalImplProps = {\n  isOpen?: boolean;\n  experimentId?: string;\n  experimentName?: string;\n  experimentNames: string[];\n  onClose: (...args: any[]) => any;\n  updateExperimentApi: (...args: any[]) => any;\n  getExperimentApi: (...args: any[]) => any;\n  onExperimentRenamed: () => void;\n};\n\nclass RenameExperimentModalImpl extends Component<RenameExperimentModalImplProps> {\n  handleRenameExperiment = (values: any) => {\n    // get value of input field\n    const newExperimentName = values[NEW_NAME_FIELD];\n    const updateExperimentPromise = this.props\n      .updateExperimentApi(this.props.experimentId, newExperimentName)\n      .then(() => {\n        this.props.getExperimentApi(this.props.experimentId);\n        this.props.onExperimentRenamed();\n      })\n      .catch((e: any) => Utils.logErrorAndNotifyUser(e));\n\n    return updateExperimentPromise;\n  };\n\n  debouncedExperimentNameValidator = debounce(\n    getExperimentNameValidator(() => this.props.experimentNames),\n    400,\n  );\n\n  render() {\n    const { isOpen, experimentName } = this.props;\n    return (\n      <GenericInputModal\n        title=\"Rename Experiment\"\n        okText=\"Save\"\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameExperiment}\n        onClose={this.props.onClose}\n      >\n        {/* @ts-expect-error TS(2769): No overload matches this call. */}\n        <RenameForm\n          type=\"experiment\"\n          name={experimentName}\n          visible={isOpen}\n          validator={this.debouncedExperimentNameValidator}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  const experiments = getExperiments(state);\n  const experimentNames = experiments.map((e) => e.name);\n  return { experimentNames };\n};\n\nconst mapDispatchToProps = {\n  updateExperimentApi,\n  getExperimentApi,\n};\n\nexport const RenameExperimentModal = connect(mapStateToProps, mapDispatchToProps)(RenameExperimentModalImpl);\n","import { useCallback, useMemo, useState } from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { OverflowMenu } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentEntity } from '../../../../types';\nimport { getExperimentType } from '../../utils/experimentPage.common-utils';\nimport { shouldEnableExperimentPageHeaderV2 } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { getShareFeedbackOverflowMenuItem } from './ExperimentViewHeader.utils';\nimport { getExperimentKindFromTags } from '../../../../utils/ExperimentKindUtils';\nimport { ExperimentKind } from '../../../../constants';\nimport { useNavigate } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\nimport { DeleteExperimentModal } from '../../../modals/DeleteExperimentModal';\nimport { RenameExperimentModal } from '../../../modals/RenameExperimentModal';\nimport { useInvalidateExperimentList } from '../../hooks/useExperimentListQuery';\n\n/**\n * Experiment page header part responsible for displaying menu\n * with rename and delete buttons\n */\nexport const ExperimentViewManagementMenu = ({\n  experiment,\n  setEditing,\n  baseComponentId = 'mlflow.experiment_page.managementMenu',\n}: {\n  experiment: ExperimentEntity;\n  setEditing?: (editing: boolean) => void;\n  baseComponentId?: string;\n}) => {\n  const [showRenameExperimentModal, setShowRenameExperimentModal] = useState(false);\n  const [showDeleteExperimentModal, setShowDeleteExperimentModal] = useState(false);\n  const invalidateExperimentList = useInvalidateExperimentList();\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <OverflowMenu\n        menu={[\n          {\n            id: 'rename',\n            itemName: (\n              <FormattedMessage\n                defaultMessage=\"Rename\"\n                description=\"Text for rename button on the experiment view page header\"\n              />\n            ),\n            onClick: () => setShowRenameExperimentModal(true),\n          },\n          {\n            id: 'delete',\n            itemName: (\n              <FormattedMessage\n                defaultMessage=\"Delete\"\n                description=\"Text for delete button on the experiment view page header\"\n              />\n            ),\n            onClick: () => setShowDeleteExperimentModal(true),\n          },\n        ]}\n      />\n      <RenameExperimentModal\n        experimentId={experiment.experimentId}\n        experimentName={experiment.name}\n        isOpen={showRenameExperimentModal}\n        onClose={() => setShowRenameExperimentModal(false)}\n        onExperimentRenamed={invalidateExperimentList}\n      />\n      <DeleteExperimentModal\n        experimentId={experiment.experimentId}\n        experimentName={experiment.name}\n        isOpen={showDeleteExperimentModal}\n        onClose={() => setShowDeleteExperimentModal(false)}\n        onExperimentDeleted={() => {\n          invalidateExperimentList();\n          navigate(Routes.experimentsObservatoryRoute);\n        }}\n      />\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Button, GenericSkeleton, NewWindowIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\nimport { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { ExperimentViewArtifactLocation } from '../ExperimentViewArtifactLocation';\nimport { ExperimentViewCopyExperimentId } from './ExperimentViewCopyExperimentId';\nimport { ExperimentViewCopyArtifactLocation } from './ExperimentViewCopyArtifactLocation';\nimport { InfoSmallIcon, InfoPopover } from '@databricks/design-system';\nimport { Popover } from '@databricks/design-system';\nimport { EXPERIMENT_PAGE_FEEDBACK_URL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { Link } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\nimport { ExperimentViewManagementMenu } from './ExperimentViewManagementMenu';\n\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeader = React.memo(\n  ({\n    experiment,\n    searchFacetsState,\n    uiState,\n    showAddDescriptionButton,\n    setEditing,\n  }: {\n    experiment: ExperimentEntity;\n    searchFacetsState?: ExperimentPageSearchFacetsState;\n    uiState?: ExperimentPageUIState;\n    showAddDescriptionButton: boolean;\n    setEditing: (editing: boolean) => void;\n  }) => {\n    const breadcrumbs = useMemo(\n      () => [\n        <Link\n          key={Routes.experimentsObservatoryRoute}\n          to={Routes.experimentsObservatoryRoute}\n          data-testid=\"experiment-observatory-link\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Experiments\"\n            description=\"Breadcrumb nav item to link to the list of experiments page\"\n          />\n        </Link>,\n      ],\n      [],\n    );\n    const experimentIds = useMemo(() => (experiment ? [experiment?.experimentId] : []), [experiment]);\n\n    const { theme } = useDesignSystemTheme();\n\n    /**\n     * Extract the last part of the experiment name\n     */\n    const normalizedExperimentName = useMemo(() => experiment.name.split('/').pop(), [experiment.name]);\n\n    const feedbackFormUrl = EXPERIMENT_PAGE_FEEDBACK_URL;\n\n    const renderFeedbackForm = () => {\n      const feedbackLink = (\n        <Button\n          href={feedbackFormUrl}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheaderv2.tsx_100\"\n          css={{ marginLeft: theme.spacing.sm }}\n          type=\"link\"\n          size=\"small\"\n          endIcon={<NewWindowIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Provide Feedback\"\n            description=\"Link to a survey for users to give feedback\"\n          />\n        </Button>\n      );\n      return feedbackLink;\n    };\n\n    const getShareButton = () => {\n      const shareButtonElement = (\n        <ExperimentViewHeaderShareButton\n          experimentIds={experimentIds}\n          searchFacetsState={searchFacetsState}\n          uiState={uiState}\n        />\n      );\n      return shareButtonElement;\n    };\n\n    const getInfoTooltip = () => {\n      return (\n        <div style={{ display: 'flex' }}>\n          <InfoPopover iconTitle=\"Info\">\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: theme.spacing.xs,\n                flexWrap: 'nowrap',\n              }}\n              data-testid=\"experiment-view-header-info-tooltip-content\"\n            >\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Path\"\n                  description=\"Label for displaying the current experiment path\"\n                />\n                : {experiment.name + ' '}\n                <ExperimentViewCopyTitle experiment={experiment} size=\"md\" />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Experiment ID\"\n                  description=\"Label for displaying the current experiment in view\"\n                />\n                : {experiment.experimentId + ' '}\n                <ExperimentViewCopyExperimentId experiment={experiment} />\n              </div>\n              <div style={{ whiteSpace: 'nowrap' }}>\n                <FormattedMessage\n                  defaultMessage=\"Artifact Location\"\n                  description=\"Label for displaying the experiment artifact location\"\n                />\n                : <ExperimentViewArtifactLocation artifactLocation={experiment.artifactLocation} />{' '}\n                <ExperimentViewCopyArtifactLocation experiment={experiment} />\n              </div>\n            </div>\n          </InfoPopover>\n        </div>\n      );\n    };\n    const getAddDescriptionButton = () => {\n      return (\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_header_experimentviewheaderv2.tsx_271\"\n          size=\"small\"\n          onClick={() => {\n            setEditing(true);\n          }}\n          css={{\n            marginLeft: theme.spacing.sm,\n            background: `${theme.colors.backgroundSecondary} !important`,\n            border: 'none',\n          }}\n        >\n          <Typography.Text size=\"md\">Add Description</Typography.Text>\n        </Button>\n      );\n    };\n\n    return (\n      <PageHeader\n        title={\n          <div\n            css={{\n              [theme.responsive.mediaQueries.xs]: {\n                display: 'inline',\n                wordBreak: 'break-all',\n              },\n              [theme.responsive.mediaQueries.sm]: {\n                display: 'inline-block',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                verticalAlign: 'middle',\n              },\n            }}\n            title={normalizedExperimentName}\n          >\n            {normalizedExperimentName}\n          </div>\n        }\n        titleAddOns={[\n          getInfoTooltip(),\n          renderFeedbackForm(),\n          showAddDescriptionButton && getAddDescriptionButton(),\n        ].filter(Boolean)}\n        breadcrumbs={breadcrumbs}\n        spacerSize=\"sm\"\n        dangerouslyAppendEmotionCSS={{\n          [theme.responsive.mediaQueries.sm]: {\n            // Do not wrap the title and buttons on >= small screens\n            '& > div': {\n              flexWrap: 'nowrap',\n            },\n            // The title itself should display elements horizontally\n            h2: {\n              display: 'flex',\n              overflow: 'hidden',\n            },\n          },\n        }}\n      >\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          {/* Wrap the buttons in a flex element */}\n          <ExperimentViewManagementMenu experiment={experiment} />\n          {getShareButton()}\n        </div>\n      </PageHeader>\n    );\n  },\n);\n\nexport function ExperimentViewHeaderSkeleton() {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ height: 2 * theme.general.heightSm }}>\n      <div css={{ height: theme.spacing.lg }}>\n        <GenericSkeleton css={{ width: 100, height: theme.spacing.md }} loading />\n      </div>\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          <GenericSkeleton css={{ width: 160, height: theme.general.heightSm }} loading />\n        </div>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <GenericSkeleton css={{ width: 100, height: theme.general.heightSm }} loading />\n          <GenericSkeleton css={{ width: 60, height: theme.general.heightSm }} loading />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useNavigate, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport { ExperimentPageTabName } from '../../../constants';\nimport Routes from '../../../routes';\nimport { type ExperimentViewRunsCompareMode } from '../../../types';\n\nexport const EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY = 'compareRunsMode';\n\nexport const getExperimentPageDefaultViewMode = (): ExperimentViewRunsCompareMode => 'TABLE';\n\n// This map is being used to wire routes to certain view modes\nconst viewModeToRouteMap: Partial<Record<ExperimentViewRunsCompareMode, (experimentId: string) => void>> = {\n  MODELS: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models),\n};\n/**\n * Hook using search params to retrieve and update the current experiment page runs view mode.\n * Handles legacy part of the mode switching, based on \"compareRunsMode\" query parameter.\n * Modern part of the mode switching is handled by <ExperimentViewRunsModeSwitchV2> which works using route params.\n */\nexport const useExperimentPageViewMode = (): [\n  ExperimentViewRunsCompareMode,\n  (newCompareRunsMode: ExperimentViewRunsCompareMode, experimentId?: string) => void,\n] => {\n  const [params, setParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const mode =\n    (params.get(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY) as ExperimentViewRunsCompareMode) ||\n    getExperimentPageDefaultViewMode();\n  const setMode = (newCompareRunsMode: ExperimentViewRunsCompareMode, experimentId?: string) => {\n    // Check if the new mode should actually navigate to a different route instead of just changing the query param\n    if (newCompareRunsMode in viewModeToRouteMap && experimentId) {\n      const route = viewModeToRouteMap[newCompareRunsMode]?.(experimentId);\n      if (route) {\n        navigate(route);\n        return;\n      }\n    }\n    setParams(\n      (currentParams) => {\n        currentParams.set(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, newCompareRunsMode || '');\n        return currentParams;\n      },\n      { replace: false },\n    );\n  };\n\n  return [mode, setMode];\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ExperimentKind } from '../../../constants';\nimport { MlflowService } from '../../../sdk/MlflowService';\n\n/**\n * An utility wrapper hook to update the experiment kind.\n * The success callback is optional but it's part of the mutation to include it in the loading state.\n */\nexport const useUpdateExperimentKind = (onSuccess?: () => void) =>\n  useMutation<unknown, Error, { experimentId: string; kind: ExperimentKind }>({\n    mutationFn: ({ experimentId, kind }) =>\n      MlflowService.setExperimentTag({\n        experiment_id: experimentId,\n        key: 'mlflow.experimentKind',\n        value: kind,\n      }).then(() => onSuccess?.() ?? Promise.resolve()),\n  });\n","import { ExperimentEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Modal,\n  PencilIcon,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getExperimentTags } from '../../../reducers/Reducers';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport React from 'react';\nimport 'react-mde/lib/styles/css/react-mde-all.css';\nimport ReactMde, { SvgIcon } from 'react-mde';\nimport {\n  forceAnchorTagNewTab,\n  getMarkdownConverter,\n  sanitizeConvertedHtml,\n} from '../../../../common/utils/MarkdownUtils';\nimport { FormattedMessage } from 'react-intl';\nimport { setExperimentTagApi } from '../../../actions';\n\nconst extractNoteFromTags = (tags: Record<string, KeyValueEntity>) =>\n  Object.values(tags).find((t) => t.key === NOTE_CONTENT_TAG)?.value || undefined;\n\nconst toolbarCommands = [\n  ['header', 'bold', 'italic', 'strikethrough'],\n  ['link', 'code', 'image'],\n  ['unordered-list', 'ordered-list'],\n];\n\nconst converter = getMarkdownConverter();\n\nconst getSanitizedHtmlContent = (markdown: string | undefined) => {\n  if (markdown) {\n    const sanitized = sanitizeConvertedHtml(converter.makeHtml(markdown));\n    return forceAnchorTagNewTab(sanitized);\n  }\n  return null;\n};\n\nexport const ExperimentViewDescriptionNotes = ({\n  experiment,\n  editing,\n  setEditing,\n  setShowAddDescriptionButton,\n  onNoteUpdated,\n  defaultValue,\n}: {\n  experiment: ExperimentEntity;\n  editing: boolean;\n  setEditing: (editing: boolean) => void;\n  setShowAddDescriptionButton: (show: boolean) => void;\n  onNoteUpdated?: () => void;\n  defaultValue?: string;\n}) => {\n  const storedNote = useSelector((state) => {\n    const tags = getExperimentTags(experiment.experimentId, state);\n    return tags ? extractNoteFromTags(tags) : '';\n  });\n  setShowAddDescriptionButton(!storedNote);\n\n  const effectiveNote = storedNote || defaultValue;\n  const [tmpNote, setTmpNote] = useState(effectiveNote);\n  const [selectedTab, setSelectedTab] = useState<'write' | 'preview' | undefined>('write');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const PADDING_HORIZONTAL = 12;\n  const DISPLAY_LINE_HEIGHT = 16;\n  const COLLAPSE_MAX_HEIGHT = DISPLAY_LINE_HEIGHT + 2 * theme.spacing.sm;\n  const MIN_EDITOR_HEIGHT = 200;\n  const MAX_EDITOR_HEIGHT = 500;\n  const MIN_PREVIEW_HEIGHT = 20;\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = useCallback(\n    (updatedNote?: string) => {\n      setEditing(false);\n      setShowAddDescriptionButton(!updatedNote);\n      const action = setExperimentTagApi(experiment.experimentId, NOTE_CONTENT_TAG, updatedNote);\n      dispatch(action).then(onNoteUpdated);\n    },\n    [experiment.experimentId, dispatch, setEditing, setShowAddDescriptionButton, onNoteUpdated],\n  );\n\n  return (\n    <div>\n      {effectiveNote && (\n        <div\n          style={{\n            whiteSpace: isExpanded ? 'normal' : 'pre-wrap',\n            lineHeight: theme.typography.lineHeightLg,\n            background: theme.colors.backgroundSecondary,\n            display: 'flex',\n            alignItems: 'flex-start',\n            padding: theme.spacing.xs,\n          }}\n        >\n          <div\n            style={{\n              flexGrow: 1,\n              marginRight: PADDING_HORIZONTAL,\n              overflow: 'hidden',\n              overflowWrap: isExpanded ? 'break-word' : undefined,\n              padding: `${theme.spacing.sm}px ${PADDING_HORIZONTAL}px`,\n              maxHeight: isExpanded ? 'none' : COLLAPSE_MAX_HEIGHT + 'px',\n              wordBreak: 'break-word',\n            }}\n          >\n            <div\n              // eslint-disable-next-line react/no-danger\n              dangerouslySetInnerHTML={{ __html: getSanitizedHtmlContent(effectiveNote) }}\n            />\n          </div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_114\"\n            icon={<PencilIcon />}\n            onClick={() => setEditing(true)}\n            style={{ padding: `0px ${theme.spacing.sm}px` }}\n          />\n          {isExpanded ? (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_120\"\n              icon={<ChevronUpIcon />}\n              onClick={() => setIsExpanded(false)}\n              style={{ padding: `0px ${theme.spacing.sm}px` }}\n            />\n          ) : (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_126\"\n              icon={<ChevronDownIcon />}\n              onClick={() => setIsExpanded(true)}\n              style={{ padding: `0px ${theme.spacing.sm}px` }}\n            />\n          )}\n        </div>\n      )}\n      <Modal\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_experimentviewdescriptionnotes.tsx_141\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add description\"\n            description=\"experiment page > description modal > title\"\n          />\n        }\n        visible={editing}\n        okText={\n          <FormattedMessage defaultMessage=\"Save\" description=\"experiment page > description modal > save button\" />\n        }\n        cancelText={\n          <FormattedMessage defaultMessage=\"Cancel\" description=\"experiment page > description modal > cancel button\" />\n        }\n        onOk={() => {\n          handleSubmitEditNote(tmpNote);\n          setEditing(false);\n        }}\n        onCancel={() => {\n          setTmpNote(effectiveNote);\n          setEditing(false);\n        }}\n      >\n        <React.Fragment>\n          <ReactMde\n            value={tmpNote}\n            minEditorHeight={MIN_EDITOR_HEIGHT}\n            maxEditorHeight={MAX_EDITOR_HEIGHT}\n            minPreviewHeight={MIN_PREVIEW_HEIGHT}\n            toolbarCommands={toolbarCommands}\n            onChange={(value) => setTmpNote(value)}\n            selectedTab={selectedTab}\n            onTabChange={(newTab) => setSelectedTab(newTab)}\n            generateMarkdownPreview={() => Promise.resolve(getSanitizedHtmlContent(tmpNote))}\n            getIcon={(name) => (\n              <LegacyTooltip title={name}>\n                <span css={{ color: theme.colors.textPrimary }}>\n                  <SvgIcon icon={name} />\n                </span>\n              </LegacyTooltip>\n            )}\n          />\n        </React.Fragment>\n      </Modal>\n    </div>\n  );\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the title after clicking on the icon\n */\nexport const ExperimentViewCopyTitle = ({\n  experiment,\n  size,\n}: {\n  experiment: ExperimentEntity;\n  size: 'sm' | 'md' | 'lg' | 'xl';\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size={size}\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.name,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy path',\n              description: 'Copy tooltip to copy experiment path from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Path copied',\n              description: 'Tooltip displayed after experiment path was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the artifact location after clicking on the icon\n */\nexport const ExperimentViewCopyArtifactLocation = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size=\"md\"\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.artifactLocation,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy artifact location',\n              description: 'Copy tooltip to copy experiment artifact location from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Artifact location copied',\n              description: 'Tooltip displayed after experiment artifact location was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the experimentId after clicking on the icon\n */\nexport const ExperimentViewCopyExperimentId = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size=\"md\"\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.experimentId,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy experiment id',\n              description: 'Copy tooltip to copy experiment id from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Experiment id copied',\n              description: 'Tooltip displayed after experiment id was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n"],"names":["useInferExperimentKind","experimentId","isLoadingExperiment","enabled","experimentTags","updateExperimentKind","containsTraces","isLoading","isTracesBeingDetermined","useExperimentContainsTraces","data","useQuery","async","invariant","experimentIds","MlflowService","getExperimentTraces","undefined","Boolean","isEmpty","traces","isDismissed","setIsDismissed","useState","containsRuns","isTrainingRunsBeingDetermined","useExperimentContainsTrainingRuns","error","searchRuns","experiment_ids","max_results","useMemo","runs","inferredExperimentKind","ExperimentKind","GENAI_DEVELOPMENT_INFERRED","CUSTOM_MODEL_DEVELOPMENT_INFERRED","NO_INFERRED_TYPE","inferredExperimentPageTab","ExperimentPageTabName","Traces","Runs","useEffect","isEditableExperimentKind","kind","dismiss","_ref","name","styles","_ref2","_ref3","_ref4","ExperimentViewInferredKindPopover","children","onConfirm","onDismiss","isInferredKindEditable","intl","useIntl","theme","useDesignSystemTheme","_jsxs","css","Popover","Root","componentId","open","modal","_jsx","Trigger","asChild","Content","Arrow","_css","display","alignItems","gap","spacing","sm","Typography","Paragraph","FormattedMessage","id","defaultMessage","values","kindLabel","formatMessage","ExperimentKindShortLabels","isEditable","Button","onClick","type","size","icon","CloseIcon","ExperimentViewHeaderKindSelector","value","onChange","isUpdating","readOnly","dropdownItems","entries","ExperimentKindDropdownLabels","filter","key","getSelectableExperimentKinds","includes","currentValue","normalizeInferredExperimentKind","coerceToEnum","visibleLabel","getVisibleLabel","EMPTY","defineMessage","dropdownOpen","setDropdownOpen","displayInferencePopover","setDisplayInferencePopover","usingDropdown","tagElement","Tag","Spinner","ChevronDownIcon","tagElementWithTooltip","ExperimentTypeTooltip","dropdownElement","DropdownMenu","onOpenChange","align","Label","map","label","isSelected","CheckboxItem","checked","ItemIndicator","Tooltip","content","ExperimentViewInferredKindModal","selectedKind","setSelectedKind","CUSTOM_MODEL_DEVELOPMENT","Modal","visible","onCancel","title","cancelText","okText","onOk","flexDirection","marginBottom","Radio","GENAI_DEVELOPMENT","RunsTabConfig","ListIcon","getRoute","Routes","getExperimentPageTabRoute","TracesTabConfig","ListBorderIcon","ModelsTabConfig","ModelsIcon","Models","GenAIExperimentTabConfigMap","GenAIExperimentWithPromptsTabConfigMap","CustomExperimentTabConfigMap","DefaultTabConfigMap","TabSelectorBar","experimentKind","tabName","useParams","viewMode","useExperimentPageViewMode","topLevelTabName","tabNameFromRoute","useGetExperimentPageActiveTabByRoute","tabNameFromParams","Datasets","EvaluationRuns","LabelingSchemas","LabelingSessions","tabNameFromViewMode","isRunsViewTab","iTracesViewTab","activeTab","tabsConfig","shouldEnablePromptsTabOnDBPlatform","FORECASTING","REGRESSION","AUTOML","CLASSIFICATION","getExperimentTabsConfig","SegmentedControlGroup","newStyleFlagOverride","justifySelf","responsive","mediaQueries","xl","Object","tabConfig","isActive","React","Link","className","to","SegmentedControlButton","delayDuration","ExperimentViewHeaderV2","experiment","searchFacetsState","uiState","setEditing","experimentKindSelector","normalizedExperimentName","split","pop","getExperimentKindFromTags","tags","xs","Breadcrumb","includeTrailingCaret","breadcrumb","index","Item","overflow","minWidth","Title","withoutMargins","level","style","marginRight","InfoPopover","iconTitle","flexWrap","whiteSpace","ExperimentViewCopyTitle","ExperimentViewCopyExperimentId","ExperimentViewArtifactLocation","artifactLocation","ExperimentViewCopyArtifactLocation","justifyContent","marginLeft","ExperimentViewHeaderShareButton","_ref5","ExperimentViewHeaderV2Skeleton","ParagraphSkeleton","loading","TitleSkeleton","width","height","general","heightSm","alignSelf","lg","ExperimentPageRoutePathToTabNameMap","RoutePaths","experimentPageTabRuns","experimentPageTabTraces","experimentPageTabModels","routePath","pathname","useLocation","shouldEnableExperimentPageChildRoutes","_ExperimentPageRouteP","find","matchPath","getTabNameFromRoutePath","CopyBox","copyText","Input","CopyButton","GetLinkModal","link","ExperimentGetShareLinkModal","sharedStateUrl","setSharedStateUrl","linkInProgress","setLinkInProgress","generatedState","setGeneratedState","dispatch","useDispatch","stateToSerialize","createSerializedState","useCallback","length","state","window","location","href","shouldUseCompressedExperimentViewSharedState","textCompressDeflate","JSON","stringify","serializePersistedState","hash","getStringSHA256","tagName","EXPERIMENT_PAGE_VIEW_STATE_SHARE_TAG_PREFIX","setExperimentTagApi","getShareableUrl","shareStateHash","route","getExperimentPageRoute","queryParams","URLSearchParams","set","EXPERIMENT_PAGE_VIEW_STATE_SHARE_URL_PARAM_KEY","EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY","params","toString","hashParam","startsWith","origin","e","Utils","logErrorAndNotifyUser","GenericSkeleton","placeholder","showGetLinkModal","setShowGetLinkModal","_Fragment","DeleteExperimentModalImpl","Component","constructor","args","handleSubmit","activeExperimentIds","this","props","deleteExperimentRequestId","getUUID","deleteExperimentApi","then","navigate","rootRoute","eid","getCompareExperimentsPageRoute","onExperimentDeleted","catch","render","ConfirmModal","isOpen","onClose","experimentName","helpText","confirmButtonText","mapDispatchToProps","DeleteExperimentModal","withRouterNext","connect","RenameExperimentModalImpl","handleRenameExperiment","newExperimentName","NEW_NAME_FIELD","updateExperimentApi","getExperimentApi","onExperimentRenamed","debouncedExperimentNameValidator","debounce","getExperimentNameValidator","experimentNames","GenericInputModal","RenameForm","validator","RenameExperimentModal","getExperiments","ExperimentViewManagementMenu","baseComponentId","showRenameExperimentModal","setShowRenameExperimentModal","showDeleteExperimentModal","setShowDeleteExperimentModal","invalidateExperimentList","useInvalidateExperimentList","useNavigate","OverflowMenu","menu","itemName","experimentsObservatoryRoute","ExperimentViewHeader","showAddDescriptionButton","breadcrumbs","feedbackFormUrl","EXPERIMENT_PAGE_FEEDBACK_URL","PageHeader","wordBreak","textOverflow","verticalAlign","titleAddOns","target","rel","endIcon","NewWindowIcon","background","colors","backgroundSecondary","border","Text","spacerSize","dangerouslyAppendEmotionCSS","h2","ExperimentViewHeaderSkeleton","md","getExperimentPageDefaultViewMode","viewModeToRouteMap","MODELS","setParams","useSearchParams","get","setMode","newCompareRunsMode","_viewModeToRouteMap$n","call","currentParams","replace","useUpdateExperimentKind","onSuccess","useMutation","mutationFn","setExperimentTag","experiment_id","_onSuccess","Promise","resolve","toolbarCommands","converter","getMarkdownConverter","getSanitizedHtmlContent","markdown","sanitized","sanitizeConvertedHtml","makeHtml","forceAnchorTagNewTab","ExperimentViewDescriptionNotes","editing","setShowAddDescriptionButton","onNoteUpdated","defaultValue","storedNote","useSelector","getExperimentTags","_Object$values$find","t","NOTE_CONTENT_TAG","extractNoteFromTags","effectiveNote","tmpNote","setTmpNote","selectedTab","setSelectedTab","isExpanded","setIsExpanded","COLLAPSE_MAX_HEIGHT","handleSubmitEditNote","updatedNote","action","lineHeight","typography","lineHeightLg","padding","flexGrow","overflowWrap","maxHeight","dangerouslySetInnerHTML","__html","PencilIcon","ChevronUpIcon","ReactMde","minEditorHeight","maxEditorHeight","minPreviewHeight","onTabChange","newTab","generateMarkdownPreview","getIcon","LegacyTooltip","color","textPrimary","SvgIcon","dangerouslySetAntdProps","copyable","text","CopyIcon","tooltips"],"sourceRoot":""}