{"version":3,"file":"static/js/9721.af845dbe.chunk.js","mappings":"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","sources":["experiment-tracking/components/CompareRunPlotContainer.tsx","experiment-tracking/components/CompareRunScatter.tsx","experiment-tracking/components/CompareRunBox.tsx","experiment-tracking/components/CompareRunContour.tsx","experiment-tracking/components/ParallelCoordinatesPlotView.tsx","experiment-tracking/components/ParallelCoordinatesPlotControls.tsx","experiment-tracking/components/ParallelCoordinatesPlotPanel.tsx","model-registry/components/CompareModelVersionsView.tsx","model-registry/components/CompareModelVersionsPage.tsx","experiment-tracking/components/LazyPlot.tsx"],"sourcesContent":["import { Theme } from '@emotion/react';\n\ninterface CompareRunPlotContainerProps {\n  controls: React.ReactNode;\n}\n\nexport const CompareRunPlotContainer = (props: React.PropsWithChildren<CompareRunPlotContainerProps>) => (\n  <div css={styles.wrapper}>\n    <div css={styles.controls}>{props.controls}</div>\n    <div css={styles.plotWrapper}>{props.children}</div>\n  </div>\n);\n\nconst styles = {\n  plotWrapper: {\n    overflow: 'hidden',\n    width: '100%',\n    height: '100%',\n    minHeight: 450,\n  },\n  wrapper: {\n    display: 'grid',\n    gridTemplateColumns: 'minmax(300px, 1fr) 3fr',\n  },\n  controls: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport { FormUI, SimpleSelect, SimpleSelectOption, SimpleSelectOptionGroup, Spacer } from '@databricks/design-system';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunScatterImplProps = {\n  runUuids: string[];\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunScatterImplState = any;\n\nexport class CompareRunScatterImpl extends Component<CompareRunScatterImplProps, CompareRunScatterImplState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunScatterImplProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, false);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, false);\n\n    if (this.paramKeys.length + this.metricKeys.length < 2) {\n      this.state = { disabled: true };\n    } else {\n      this.state = {\n        disabled: false,\n        x:\n          this.paramKeys.length > 0\n            ? {\n                key: this.paramKeys[0],\n                isMetric: false,\n              }\n            : {\n                key: this.metricKeys[1],\n                isMetric: true,\n              },\n        y:\n          this.metricKeys.length > 0\n            ? {\n                key: this.metricKeys[0],\n                isMetric: true,\n              }\n            : {\n                key: this.paramKeys[1],\n                isMetric: false,\n              },\n      };\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return <div />;\n    }\n\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'x' comes from an index signature, so it ... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.x);\n      // @ts-expect-error TS(4111): Property 'y' comes from an index signature, so it ... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.y);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n      xs.push(x);\n      ys.push(y);\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"x-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('x')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"y-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('y')}\n            </div>\n          </>\n        }\n      >\n        <LazyPlot\n          data={[\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['x'].key, keyLength)),\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['y'].key, keyLength)),\n            },\n          }}\n          css={styles.plot}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: any) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunscatter.tsx_182\"\n        css={styles.select}\n        id={axis + '-axis-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunScatterImpl.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  select: {\n    width: '100%',\n  },\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport const CompareRunScatter = connect(mapStateToProps)(CompareRunScatterImpl);\n","import React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Typography,\n  Row,\n  Col,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { LazyPlot } from './LazyPlot';\nimport { RunInfoEntity } from '../types';\n\ntype Props = {\n  runUuids: string[];\n  runInfos: RunInfoEntity[];\n  metricLists: any[][];\n  paramLists: any[][];\n};\n\ntype Axis = {\n  key?: string;\n  isParam?: boolean;\n};\n\nconst paramOptionPrefix = 'param-';\nconst metricOptionPrefix = 'metric-';\n\n// Note: This component does not pass the value of the parent component to the child component.\n// Doing so will cause weird rendering issues with the label and updating of the value.\nconst Selector = ({\n  id,\n  onChange,\n  paramKeys,\n  metricKeys,\n}: {\n  id: string;\n  onChange: (axis: Axis) => void;\n  paramKeys: string[];\n  metricKeys: string[];\n}) => {\n  const intl = useIntl();\n  return (\n    <SimpleSelect\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunbox.tsx_46\"\n      id={id}\n      css={{ width: '100%', marginBottom: '16px' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Select parameter or metric',\n        description: 'Placeholder text for parameter/metric selector in box plot comparison in MLflow',\n      })}\n      onChange={({ target }) => {\n        const { value } = target;\n        const [_prefix, key] = value.split('-');\n        const isParam = value.startsWith(paramOptionPrefix);\n        onChange({ key, isParam });\n      }}\n    >\n      <SimpleSelectOptionGroup label=\"Parameters\">\n        {paramKeys.map((key) => (\n          <SimpleSelectOption key={key} value={paramOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n      <SimpleSelectOptionGroup label=\"Metrics\">\n        {metricKeys.map((key) => (\n          <SimpleSelectOption key={key} value={metricOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n    </SimpleSelect>\n  );\n};\n\nexport const CompareRunBox = ({ runInfos, metricLists, paramLists }: Props) => {\n  const [xAxis, setXAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n  const [yAxis, setYAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n\n  const paramKeys = Array.from(new Set(paramLists.flat().map(({ key }) => key))).sort();\n  const metricKeys = Array.from(new Set(metricLists.flat().map(({ key }) => key))).sort();\n\n  const getBoxPlotData = () => {\n    const data = {};\n    runInfos.forEach((_, index) => {\n      const params = paramLists[index];\n      const metrics = metricLists[index];\n      const x = (xAxis.isParam ? params : metrics).find(({ key }) => key === xAxis.key);\n      const y = (yAxis.isParam ? params : metrics).find(({ key }) => key === yAxis.key);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n\n      if (x.value in data) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value].push(y.value);\n      } else {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value] = [y.value];\n      }\n    });\n\n    return Object.entries(data).map(([key, values]) => ({\n      y: values,\n      type: 'box',\n      name: key,\n      jitter: 0.3,\n      pointpos: -1.5,\n      boxpoints: 'all',\n    }));\n  };\n\n  const renderPlot = () => {\n    if (!(xAxis.key && yAxis.key)) {\n      return (\n        <div\n          css={{\n            display: 'flex',\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text size=\"xl\">\n            <FormattedMessage\n              defaultMessage=\"Select parameters/metrics to plot.\"\n              description=\"Text to show when x or y axis is not selected on box plot\"\n            />\n          </Typography.Text>\n        </div>\n      );\n    }\n\n    return (\n      <LazyPlot\n        css={{\n          width: '100%',\n          height: '100%',\n          minHeight: '35vw',\n        }}\n        data={getBoxPlotData()}\n        layout={{\n          margin: {\n            t: 30,\n          },\n          hovermode: 'closest',\n          xaxis: {\n            title: xAxis.key,\n          },\n          yaxis: {\n            title: yAxis.key,\n          },\n        }}\n        config={{\n          responsive: true,\n          displaylogo: false,\n          scrollZoom: true,\n          modeBarButtonsToRemove: [\n            'sendDataToCloud',\n            'select2d',\n            'lasso2d',\n            'resetScale2d',\n            'hoverClosestCartesian',\n            'hoverCompareCartesian',\n          ],\n        }}\n        useResizeHandler\n      />\n    );\n  };\n\n  return (\n    <Row>\n      <Col span={6}>\n        <div css={styles.borderSpacer}>\n          <div>\n            <FormUI.Label htmlFor=\"x-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"X-axis:\"\n                description=\"Label text for X-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"x-axis-selector\" onChange={setXAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n\n          <div>\n            <FormUI.Label htmlFor=\"y-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"Y-axis:\"\n                description=\"Label text for Y-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"y-axis-selector\" onChange={setYAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n        </div>\n      </Col>\n      <Col span={18}>{renderPlot()}</Col>\n    </Row>\n  );\n};\n\nconst styles = {\n  borderSpacer: (theme: any) => ({\n    paddingLeft: theme.spacing.xs,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Switch,\n  Spacer,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunContourProps = {\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunContourState = any;\n\nexport class CompareRunContour extends Component<CompareRunContourProps, CompareRunContourState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunContourProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, true);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, true);\n\n    if (this.paramKeys.length + this.metricKeys.length < 3) {\n      this.state = { disabled: true };\n    } else {\n      const common = { disabled: false, reverseColor: false };\n      if (this.metricKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.paramKeys[2], isMetric: false },\n        };\n      } else if (this.paramKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.metricKeys[0], isMetric: true },\n          yaxis: { key: this.metricKeys[1], isMetric: true },\n          zaxis: { key: this.metricKeys[2], isMetric: true },\n        };\n      } else if (this.paramKeys.length === 1) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.metricKeys[0], isMetric: true },\n          zaxis: { key: this.metricKeys[1], isMetric: true },\n        };\n      } else {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.metricKeys[0], isMetric: true },\n        };\n      }\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  getColorscale() {\n    /*\n     * contour plot has an option named \"reversescale\" which\n     * reverses the color mapping if True, but it doesn't work properly now.\n     *\n     * https://github.com/plotly/plotly.js/issues/4430\n     *\n     * This function is a temporary workaround for the issue.\n     */\n    const colorscale = [\n      [0, 'rgb(5,10,172)'],\n      [0.35, 'rgb(40,60,190)'],\n      [0.5, 'rgb(70,100,245)'],\n      [0.6, 'rgb(90,120,245)'],\n      [0.7, 'rgb(106,137,247)'],\n      [1, 'rgb(220,220,220)'],\n    ];\n\n    // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n    if (this.state.reverseColor) {\n      return colorscale;\n    } else {\n      // reverse only RGB values\n      return colorscale.map(([val], index) => [val, colorscale[colorscale.length - 1 - index][1]]);\n    }\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return (\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Contour plots can only be rendered when comparing a group of runs\n              with three or more unique metrics or params. Log more metrics or params to your\n              runs to visualize them using the contour plot.\"\n            description=\"Text explanation when contour plot is disabled in comparison pages\n              in MLflow\"\n          />\n        </div>\n      );\n    }\n\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const zs: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'xaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.xaxis);\n      // @ts-expect-error TS(4111): Property 'yaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.yaxis);\n      // @ts-expect-error TS(4111): Property 'zaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const z = this.getValue(index, this.state.zaxis);\n      if (x === undefined || y === undefined || z === undefined) {\n        return;\n      }\n      xs.push(parseFloat(x));\n      ys.push(parseFloat(y));\n      zs.push(parseFloat(z));\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    const maybeRenderPlot = () => {\n      const invalidAxes = [];\n      if (new Set(xs).size < 2) {\n        invalidAxes.push('X');\n      }\n      if (new Set(ys).size < 2) {\n        invalidAxes.push('Y');\n      }\n      if (invalidAxes.length > 0) {\n        const messageHead =\n          invalidAxes.length > 1 ? `The ${invalidAxes.join(' and ')} axes don't` : `The ${invalidAxes[0]} axis doesn't`;\n        return (\n          <div\n            css={styles.noDataMessage}\n          >{`${messageHead} have enough unique data points to render the contour plot.`}</div>\n        );\n      }\n\n      return (\n        <LazyPlot\n          css={styles.plot}\n          data={[\n            // contour plot\n            {\n              z: zs,\n              x: xs,\n              y: ys,\n              type: 'contour',\n              hoverinfo: 'none',\n              colorscale: this.getColorscale(),\n              connectgaps: true,\n              contours: {\n                coloring: 'heatmap',\n              },\n            },\n            // scatter plot\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['xaxis'].key, keyLength)),\n              range: [Math.min(...xs), Math.max(...xs)],\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['yaxis'].key, keyLength)),\n              range: [Math.min(...ys), Math.max(...ys)],\n            },\n          }}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      );\n    };\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"xaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('xaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"yaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('yaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"zaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Z-axis:\"\n                  description=\"Label text for z-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('zaxis')}\n            </div>\n            <Spacer />\n            <div className=\"inline-control\">\n              <FormattedMessage\n                defaultMessage=\"Reverse color:\"\n                description=\"Label text for reverse color toggle in contour plot comparison\n                      in MLflow\"\n              />{' '}\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_282\"\n                className=\"show-point-toggle\"\n                // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n                checked={this.state.reverseColor}\n                onChange={(checked) => this.setState({ reverseColor: checked })}\n              />\n            </div>\n          </>\n        }\n      >\n        {maybeRenderPlot()}\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: string) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_299\"\n        css={{ width: '100%' }}\n        id={axis + '-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunContour.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n  noDataMessage: (theme: any) => ({\n    padding: theme.spacing.sm,\n    display: 'flex',\n    justifyContent: 'center',\n  }),\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport default connect(mapStateToProps)(CompareRunContour);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { LazyPlot } from './LazyPlot';\n\nconst AXIS_LABEL_CLS = '.pcp-plot .parcoords .y-axis .axis-heading .axis-title';\nexport const UNKNOWN_TERM = 'unknown';\n\ntype ParallelCoordinatesPlotViewProps = {\n  runUuids: string[];\n  paramKeys: string[];\n  metricKeys: string[];\n  paramDimensions: any[];\n  metricDimensions: any[];\n};\n\ntype ParallelCoordinatesPlotViewState = any;\n\nexport class ParallelCoordinatesPlotView extends React.Component<\n  ParallelCoordinatesPlotViewProps,\n  ParallelCoordinatesPlotViewState\n> {\n  state = {\n    // Current sequence of all axes, both parameters and metrics.\n    sequence: [...this.props.paramKeys, ...this.props.metricKeys],\n  };\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    const keysFromProps = [...props.paramKeys, ...props.metricKeys];\n    const keysFromState = state.sequence;\n    if (!_.isEqual(_.sortBy(keysFromProps), _.sortBy(keysFromState))) {\n      return { sequence: keysFromProps };\n    }\n    return null;\n  }\n\n  getData() {\n    const { sequence } = this.state;\n    const { paramDimensions, metricDimensions, metricKeys } = this.props;\n    const lastMetricKey = this.findLastKeyFromState(metricKeys);\n    const lastMetricDimension = this.props.metricDimensions.find((d) => d.label === lastMetricKey);\n    const colorScaleConfigs = ParallelCoordinatesPlotView.getColorScaleConfigsForDimension(lastMetricDimension);\n    // This make sure axis order consistency across renders.\n    const orderedDimensions = ParallelCoordinatesPlotView.getDimensionsOrderedBySequence(\n      [...paramDimensions, ...metricDimensions],\n      sequence,\n    );\n    return [\n      {\n        type: 'parcoords',\n        line: { ...colorScaleConfigs },\n        dimensions: orderedDimensions,\n      },\n    ];\n  }\n\n  static getDimensionsOrderedBySequence(dimensions: any, sequence: any) {\n    return _.sortBy(dimensions, [(dimension) => sequence.indexOf(dimension.label)]);\n  }\n\n  static getLabelElementsFromDom = () => Array.from(document.querySelectorAll(AXIS_LABEL_CLS));\n\n  findLastKeyFromState(keys: any) {\n    const { sequence } = this.state;\n    const keySet = new Set(keys);\n    return _.findLast(sequence, (key) => keySet.has(key));\n  }\n\n  static getColorScaleConfigsForDimension(dimension: any) {\n    if (!dimension) return null;\n    const cmin = _.min(dimension.values);\n    const cmax = _.max(dimension.values);\n    return {\n      showscale: true,\n      colorscale: 'Jet',\n      cmin,\n      cmax,\n      color: dimension.values,\n    };\n  }\n\n  // Update styles(green & bold) for metric axes.\n  // Note(Zangr) 2019-6-25 this is needed because there is no per axis label setting available. This\n  // needs to be called every time chart updates. More information about currently available label\n  // setting here: https://plot.ly/javascript/reference/#parcoords-labelfont\n  updateMetricAxisLabelStyle = () => {\n    /* eslint-disable no-param-reassign */\n    const metricsKeySet = new Set(this.props.metricKeys);\n    // TODO(Zangr) 2019-06-20 This assumes name uniqueness across params & metrics. Find a way to\n    // make it more deterministic. Ex. Add add different data attributes to indicate axis kind.\n    ParallelCoordinatesPlotView.getLabelElementsFromDom()\n      .filter((el) => metricsKeySet.has(el.innerHTML))\n      .forEach((el) => {\n        (el as any).style.fill = 'green';\n        (el as any).style.fontWeight = 'bold';\n      });\n  };\n\n  maybeUpdateStateForColorScale = (currentSequenceFromPlotly: any) => {\n    const rightmostMetricKeyFromState = this.findLastKeyFromState(this.props.metricKeys);\n    const metricsKeySet = new Set(this.props.metricKeys);\n    const rightmostMetricKeyFromPlotly = _.findLast(currentSequenceFromPlotly, (key) => metricsKeySet.has(key));\n    // Currently we always render color scale based on the rightmost metric axis, so if that changes\n    // we need to setState with the new axes sequence to trigger a rerender.\n    if (rightmostMetricKeyFromState !== rightmostMetricKeyFromPlotly) {\n      this.setState({ sequence: currentSequenceFromPlotly });\n    }\n  };\n\n  handlePlotUpdate = ({ data: [{ dimensions }] }: any) => {\n    this.updateMetricAxisLabelStyle();\n    this.maybeUpdateStateForColorScale(dimensions.map((d: any) => d.label));\n  };\n\n  render() {\n    return (\n      <LazyPlot\n        layout={{ autosize: true, margin: { t: 50 } }}\n        useResizeHandler\n        css={styles.plot}\n        data={this.getData()}\n        onUpdate={this.handlePlotUpdate}\n        className=\"pcp-plot\"\n        config={{ displayModeBar: false }}\n      />\n    );\n  }\n}\n\nexport const generateAttributesForCategoricalDimension = (labels: any) => {\n  // Create a lookup from label to its own alphabetical sorted order.\n  // Ex. ['A', 'B', 'C'] => { 'A': '0', 'B': '1', 'C': '2' }\n  const sortedUniqLabels = _.uniq(labels).sort();\n\n  // We always want the UNKNOWN_TERM to be at the top\n  // of the chart which is end of the sorted label array\n  // Ex. ['A', 'UNKNOWN_TERM', 'B'] => { 'A': '0', 'B': '1', 'UNKNOWN_TERM': '2' }\n  let addUnknownTerm = false;\n  const filteredSortedUniqLabels = sortedUniqLabels.filter((label) => {\n    if (label === UNKNOWN_TERM) addUnknownTerm = true;\n    return label !== UNKNOWN_TERM;\n  });\n  if (addUnknownTerm) {\n    filteredSortedUniqLabels.push(UNKNOWN_TERM);\n  }\n  const labelToIndexStr = _.invert(filteredSortedUniqLabels);\n  const attributes = {};\n\n  // Values are assigned to their alphabetical sorted index number\n  (attributes as any).values = labels.map((label: any) => Number(labelToIndexStr[label]));\n\n  // Default to alphabetical order for categorical axis here. Ex. [0, 1, 2, 3 ...]\n  (attributes as any).tickvals = _.range(filteredSortedUniqLabels.length);\n\n  // Default to alphabetical order for categorical axis here. Ex. ['A', 'B', 'C', 'D' ...]\n  (attributes as any).ticktext = filteredSortedUniqLabels.map((sortedUniqLabel) =>\n    (sortedUniqLabel as any).substring(0, 10),\n  );\n\n  return attributes;\n};\n\n/**\n * Infer the type of data in a run. If all the values are numbers or castable to numbers, then\n * treat it as a number column.\n */\nexport const inferType = (key: any, runUuids: any, entryByRunUuid: any) => {\n  for (let i = 0; i < runUuids.length; i++) {\n    if (entryByRunUuid[runUuids[i]][key]) {\n      const { value } = entryByRunUuid[runUuids[i]][key];\n      if (typeof value === 'string' && isNaN(Number(value)) && value !== 'NaN') {\n        return 'string';\n      }\n    }\n  }\n  return 'number';\n};\n\nexport const createDimension = (key: any, runUuids: any, entryByRunUuid: any) => {\n  let attributes = {};\n  const dataType = inferType(key, runUuids, entryByRunUuid);\n  if (dataType === 'string') {\n    attributes = generateAttributesForCategoricalDimension(\n      runUuids.map((runUuid: any) =>\n        entryByRunUuid[runUuid][key] ? entryByRunUuid[runUuid][key].value : UNKNOWN_TERM,\n      ),\n    );\n  } else {\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const values = runUuids.map((runUuid: any) => {\n      if (entryByRunUuid[runUuid][key]) {\n        const { value } = entryByRunUuid[runUuid][key];\n        const numericValue = Number(value);\n        if (maxValue < numericValue) maxValue = numericValue;\n        return numericValue;\n      }\n      return UNKNOWN_TERM;\n    });\n\n    // For Numerical values, we take the max value of all the attribute\n    // values and 0.01 to it so it is always at top of the graph.\n    (attributes as any).values = values.map((value: any) => {\n      if (value === UNKNOWN_TERM) return maxValue + 0.01;\n      return value;\n    });\n\n    // For some reason, Plotly tries to plot these values with SI prefixes by default\n    // Explicitly set to 5 fixed digits float here\n    (attributes as any).tickformat = '.5f';\n  }\n  return {\n    label: key,\n    ...attributes,\n  };\n};\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids, paramKeys, metricKeys } = ownProps;\n  const { latestMetricsByRunUuid, paramsByRunUuid } = state.entities;\n  const paramDimensions = paramKeys.map((paramKey: any) => createDimension(paramKey, runUuids, paramsByRunUuid));\n  const metricDimensions = metricKeys.map((metricKey: any) =>\n    createDimension(metricKey, runUuids, latestMetricsByRunUuid),\n  );\n  return { paramDimensions, metricDimensions };\n};\n\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotView);\n","import { Button, LegacySelect } from '@databricks/design-system';\nimport { type Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  paramKeys: string[];\n  metricKeys: string[];\n  selectedParamKeys: string[];\n  selectedMetricKeys: string[];\n  handleParamsSelectChange: (paramValues: string[]) => void;\n  handleMetricsSelectChange: (metricValues: string[]) => void;\n  onClearAllSelect: () => void;\n};\n\nexport function ParallelCoordinatesPlotControls({\n  paramKeys,\n  metricKeys,\n  selectedParamKeys,\n  selectedMetricKeys,\n  handleParamsSelectChange,\n  handleMetricsSelectChange,\n  onClearAllSelect,\n}: Props) {\n  return (\n    <div css={styles.wrapper}>\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Parameters:\"\n          description=\"Label text for parameters in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select parameters\"\n            description=\"Placeholder text for parameters in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedParamKeys}\n        onChange={handleParamsSelectChange}\n      >\n        {paramKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics:\"\n          description=\"Label text for metrics in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select metrics\"\n            description=\"Placeholder text for metrics in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedMetricKeys}\n        onChange={handleMetricsSelectChange}\n      >\n        {metricKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_parallelcoordinatesplotcontrols.tsx_84\"\n          data-testid=\"clear-button\"\n          onClick={onClearAllSelect}\n        >\n          <FormattedMessage\n            defaultMessage=\"Clear All\"\n            description=\"String for the clear button to clear any selected parameters and metrics\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  wrapper: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n  select: { width: '100%' },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ParallelCoordinatesPlotView from './ParallelCoordinatesPlotView';\nimport { ParallelCoordinatesPlotControls } from './ParallelCoordinatesPlotControls';\nimport {\n  getAllParamKeysByRunUuids,\n  getAllMetricKeysByRunUuids,\n  getSharedMetricKeysByRunUuids,\n  getRunInfo,\n} from '../reducers/Reducers';\nimport _ from 'lodash';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@databricks/design-system';\n\ntype ParallelCoordinatesPlotPanelProps = {\n  runUuids: string[];\n  allParamKeys: string[];\n  allMetricKeys: string[];\n  sharedMetricKeys: string[];\n  diffParamKeys: string[];\n};\n\ntype ParallelCoordinatesPlotPanelState = any;\n\nexport class ParallelCoordinatesPlotPanel extends React.Component<\n  ParallelCoordinatesPlotPanelProps,\n  ParallelCoordinatesPlotPanelState\n> {\n  state = {\n    // Default to select differing parameters. Sort alphabetically (to match\n    // highlighted params in param table), then cap at first 3\n    selectedParamKeys: this.props.diffParamKeys.sort().slice(0, 3),\n    // Default to select the first metric key.\n    // Note that there will be no color scaling if no metric is selected.\n    selectedMetricKeys: this.props.sharedMetricKeys.slice(0, 1),\n  };\n\n  handleParamsSelectChange = (paramValues: any) => {\n    this.setState({ selectedParamKeys: paramValues });\n  };\n\n  handleMetricsSelectChange = (metricValues: any) => {\n    this.setState({ selectedMetricKeys: metricValues });\n  };\n\n  onClearAllSelect = () => {\n    this.setState({ selectedParamKeys: [], selectedMetricKeys: [] });\n  };\n\n  render() {\n    const { runUuids, allParamKeys, allMetricKeys } = this.props;\n    const { selectedParamKeys, selectedMetricKeys } = this.state;\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <ParallelCoordinatesPlotControls\n            paramKeys={allParamKeys}\n            metricKeys={allMetricKeys}\n            selectedParamKeys={selectedParamKeys}\n            selectedMetricKeys={selectedMetricKeys}\n            handleMetricsSelectChange={this.handleMetricsSelectChange}\n            handleParamsSelectChange={this.handleParamsSelectChange}\n            onClearAllSelect={this.onClearAllSelect}\n          />\n        }\n      >\n        {!_.isEmpty(selectedParamKeys) || !_.isEmpty(selectedMetricKeys) ? (\n          <ParallelCoordinatesPlotView\n            runUuids={runUuids}\n            paramKeys={selectedParamKeys}\n            metricKeys={selectedMetricKeys}\n          />\n        ) : (\n          // @ts-expect-error TS(2322): Type '(theme: any) => { padding: any; textAlign: s... Remove this comment to see the full error message\n          <div css={styles.noValuesSelected} data-testid=\"no-values-selected\">\n            <Typography.Title level={2}>\n              <FormattedMessage\n                defaultMessage=\"Nothing to compare!\"\n                // eslint-disable-next-line max-len\n                description=\"Header displayed in the metrics and params compare plot when no values are selected\"\n              />\n            </Typography.Title>\n            <FormattedMessage\n              defaultMessage=\"Please select parameters and/or metrics to display the comparison.\"\n              // eslint-disable-next-line max-len\n              description=\"Explanation displayed in the metrics and params compare plot when no values are selected\"\n            />\n          </div>\n        )}\n      </CompareRunPlotContainer>\n    );\n  }\n}\n\nexport const getDiffParams = (allParamKeys: any, runUuids: any, paramsByRunUuid: any) => {\n  const diffParamKeys: any = [];\n  allParamKeys.forEach((param: any) => {\n    // collect all values for this param\n    const paramVals = runUuids.map(\n      (runUuid: any) => paramsByRunUuid[runUuid][param] && paramsByRunUuid[runUuid][param].value,\n    );\n    if (!paramVals.every((x: any, i: any, arr: any) => x === arr[0])) diffParamKeys.push(param);\n  });\n  return diffParamKeys;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids: allRunUuids } = ownProps;\n\n  // Filter out runUuids that do not have corresponding runInfos\n  const runUuids = (allRunUuids ?? []).filter((uuid: string) => getRunInfo(uuid, state));\n  const allParamKeys = getAllParamKeysByRunUuids(runUuids, state);\n  const allMetricKeys = getAllMetricKeysByRunUuids(runUuids, state);\n  const sharedMetricKeys = getSharedMetricKeysByRunUuids(runUuids, state);\n  const { paramsByRunUuid } = state.entities;\n  const diffParamKeys = getDiffParams(allParamKeys, runUuids, paramsByRunUuid);\n\n  return {\n    allParamKeys,\n    allMetricKeys,\n    sharedMetricKeys,\n    diffParamKeys,\n  };\n};\n\nconst styles = {\n  noValuesSelected: (theme: any) => ({\n    padding: theme.spacing.md,\n    textAlign: 'center',\n  }),\n};\n\n// @ts-expect-error TS(2345): Argument of type 'typeof ParallelCoordinatesPlotPa... Remove this comment to see the full error message\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotPanel);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport _ from 'lodash';\nimport { FormattedMessage, injectIntl, IntlShape } from 'react-intl';\nimport { Switch, LegacyTabs, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { getParams, getRunInfo } from '../../experiment-tracking/reducers/Reducers';\nimport '../../experiment-tracking/components/CompareRunView.css';\nimport { CompareRunScatter } from '../../experiment-tracking/components/CompareRunScatter';\nimport { CompareRunBox } from '../../experiment-tracking/components/CompareRunBox';\nimport CompareRunContour from '../../experiment-tracking/components/CompareRunContour';\nimport Routes from '../../experiment-tracking/routes';\nimport { getLatestMetrics } from '../../experiment-tracking/reducers/MetricReducer';\nimport CompareRunUtil from '../../experiment-tracking/components/CompareRunUtil';\nimport Utils from '../../common/utils/Utils';\nimport ParallelCoordinatesPlotPanel from '../../experiment-tracking/components/ParallelCoordinatesPlotPanel';\nimport { ModelRegistryRoutes } from '../routes';\nimport { getModelVersionSchemas } from '../reducers';\nimport { PageHeader } from '../../shared/building_blocks/PageHeader';\nimport type { RunInfoEntity } from '../../experiment-tracking/types';\n\nconst { TabPane } = LegacyTabs;\n\nfunction CenteredText(props: any) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        textAlign: 'center',\n        color: theme.colors.textSecondary,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CompareTable(props: any) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <table\n      className=\"mlflow-compare-table table\"\n      css={{\n        'th.main-table-header': {\n          backgroundColor: theme.colors.white,\n          padding: 0,\n        },\n        'td.highlight-data': {\n          backgroundColor: theme.colors.backgroundValidationWarning,\n        },\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction CollapseButton(props: any) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <button\n      css={{\n        textAlign: 'left',\n        display: 'flex',\n        alignItems: 'center',\n        border: 'none',\n        backgroundColor: theme.colors.white,\n        paddingLeft: 0,\n        cursor: 'pointer',\n      }}\n      {...props}\n    />\n  );\n}\n\ntype CompareModelVersionsViewImplProps = {\n  runInfos: RunInfoEntity[];\n  runInfosValid: boolean[];\n  runUuids: string[];\n  metricLists: any[][];\n  paramLists: any[][];\n  runNames: string[];\n  runDisplayNames: string[];\n  modelName: string;\n  versionsToRuns: any;\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  inputsListByName: Array[];\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  inputsListByIndex: Array[];\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  outputsListByName: Array[];\n  // @ts-expect-error TS(2314): Generic type 'Array<T>' requires 1 type argument(s... Remove this comment to see the full error message\n  outputsListByIndex: Array[];\n  intl: IntlShape;\n};\n\ntype CompareModelVersionsViewImplState = any;\n\nexport class CompareModelVersionsViewImpl extends Component<\n  CompareModelVersionsViewImplProps,\n  CompareModelVersionsViewImplState\n> {\n  state = {\n    inputActive: true,\n    outputActive: true,\n    paramsToggle: true,\n    paramsActive: true,\n    schemaToggle: true,\n    compareByColumnNameToggle: false,\n    schemaActive: true,\n    metricToggle: true,\n    metricActive: true,\n  };\n\n  icons = {\n    plusIcon: <i className=\"fa fa-plus-square-o\" />,\n    minusIcon: <i className=\"fa fa-minus-square-o\" />,\n    downIcon: <i className=\"fa fa-caret-down\" />,\n    rightIcon: <i className=\"fa fa-caret-right\" />,\n    chartIcon: <i className=\"fa fa-line-chart padding-left-text\" />,\n  };\n\n  onToggleClick = (active: any) => {\n    this.setState((state: any) => ({\n      [active]: !state[active],\n    }));\n  };\n\n  render() {\n    const {\n      inputsListByIndex,\n      inputsListByName,\n      modelName,\n      outputsListByIndex,\n      outputsListByName,\n      runInfos,\n      runUuids,\n      runDisplayNames,\n      paramLists,\n      metricLists,\n    } = this.props;\n    const title = (\n      <FormattedMessage\n        defaultMessage=\"Comparing {numVersions} Versions\"\n        description=\"Text for main title for the model comparison page\"\n        values={{ numVersions: this.props.runInfos.length }}\n      />\n    );\n    const breadcrumbs = [\n      // eslint-disable-next-line react/jsx-key\n      <Link to={ModelRegistryRoutes.modelListPageRoute}>\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for registered model link in the title for model comparison page\"\n        />\n      </Link>,\n      // eslint-disable-next-line react/jsx-key\n      <Link to={ModelRegistryRoutes.getModelPageRoute(modelName)}>{modelName}</Link>,\n    ];\n\n    return (\n      <div\n        className=\"CompareModelVersionsView\"\n        // @ts-expect-error TS(2322): Type '{ '.mlflow-compare-table': { minWidth: number; }; '... Remove this comment to see the full error message\n        css={{\n          ...styles.compareModelVersionsView,\n          ...styles.wrapper(runInfos.length),\n        }}\n      >\n        <PageHeader title={title} breadcrumbs={breadcrumbs} />\n        <div className=\"mlflow-responsive-table-container\">\n          <CompareTable>\n            {this.renderTableHeader()}\n            {this.renderModelVersionInfo()}\n            {this.renderSectionHeader(\n              'paramsActive',\n              'paramsToggle',\n              <FormattedMessage\n                defaultMessage=\"Parameters\"\n                description=\"Table title text for parameters table in the model comparison page\"\n              />,\n            )}\n            {this.renderParams()}\n            {this.renderSectionHeader(\n              'schemaActive',\n              'schemaToggle',\n              <FormattedMessage\n                defaultMessage=\"Schema\"\n                description=\"Table title text for schema table in the model comparison page\"\n              />,\n              false,\n              // @ts-expect-error TS(2345): Argument of type 'Element' is not assignable to pa... Remove this comment to see the full error message\n              <Switch\n                className=\"toggle-switch\"\n                // @ts-expect-error TS(2322): Type '{ className: string; style: { marginLeft: st... Remove this comment to see the full error message\n                style={{ marginLeft: 'auto' }}\n                onChange={() => this.onToggleClick('compareByColumnNameToggle')}\n              />,\n              <div className=\"padding-left-text padding-right-text\">\n                <span>\n                  <FormattedMessage\n                    defaultMessage=\"Ignore column ordering\"\n                    description=\"Toggle text that determines whether to ignore column order in the\n                      model comparison page\"\n                  />\n                </span>\n              </div>,\n            )}\n            {this.renderSchemaSectionHeader(\n              'inputActive',\n              <FormattedMessage\n                defaultMessage=\"Inputs\"\n                description=\"Table subtitle for schema inputs in the model comparison page\"\n              />,\n            )}\n            {this.renderSchema(\n              'inputActive',\n              <FormattedMessage\n                defaultMessage=\"Inputs\"\n                description=\"Table section name for schema inputs in the model comparison page\"\n              />,\n              inputsListByIndex,\n              inputsListByName,\n            )}\n            {this.renderSchemaSectionHeader(\n              'outputActive',\n              <FormattedMessage\n                defaultMessage=\"Outputs\"\n                description=\"Table subtitle for schema outputs in the model comparison page\"\n              />,\n            )}\n            {this.renderSchema(\n              'outputActive',\n              <FormattedMessage\n                defaultMessage=\"Outputs\"\n                description=\"Table section name for schema outputs in the model comparison page\"\n              />,\n              outputsListByIndex,\n              outputsListByName,\n            )}\n            {this.renderSectionHeader(\n              'metricActive',\n              'metricToggle',\n              <FormattedMessage\n                defaultMessage=\"Metrics\"\n                description=\"Table title text for metrics table in the model comparison page\"\n              />,\n            )}\n            {this.renderMetrics()}\n          </CompareTable>\n        </div>\n        <LegacyTabs>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Parallel Coordinates Plot\"\n                description=\"Tab text for parallel coordinates plot on the model comparison page\"\n              />\n            }\n            key=\"parallel-coordinates-plot\"\n          >\n            <ParallelCoordinatesPlotPanel runUuids={runUuids} />\n          </TabPane>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Scatter Plot\"\n                description=\"Tab text for scatter plot on the model comparison page\"\n              />\n            }\n            key=\"scatter-plot\"\n          >\n            <CompareRunScatter runUuids={runUuids} runDisplayNames={runDisplayNames} />\n          </TabPane>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Box Plot\"\n                description=\"Tab pane title for box plot on the compare runs page\"\n              />\n            }\n            key=\"box-plot\"\n          >\n            <CompareRunBox runUuids={runUuids} runInfos={runInfos} paramLists={paramLists} metricLists={metricLists} />\n          </TabPane>\n          <TabPane\n            tab={\n              <FormattedMessage\n                defaultMessage=\"Contour Plot\"\n                description=\"Tab text for contour plot on the model comparison page\"\n              />\n            }\n            key=\"contour-plot\"\n          >\n            <CompareRunContour runUuids={runUuids} runDisplayNames={runDisplayNames} />\n          </TabPane>\n        </LegacyTabs>\n      </div>\n    );\n  }\n\n  renderTableHeader() {\n    const { runInfos, runInfosValid } = this.props;\n    return (\n      <thead>\n        <tr className=\"table-row\">\n          <th scope=\"row\" className=\"row-header block-content\">\n            <FormattedMessage\n              defaultMessage=\"Run ID:\"\n              description=\"Text for run ID header in the main table in the model comparison page\"\n            />\n          </th>\n          {runInfos.map((r, idx) => (\n            <th scope=\"column\" className=\"data-value block-content\" key={r.runUuid}>\n              {/* Do not show links for invalid run IDs */}\n              {runInfosValid[idx] ? (\n                <Link to={Routes.getRunPageRoute(r.experimentId ?? '0', r.runUuid ?? '')}>{r.runUuid}</Link>\n              ) : (\n                r.runUuid\n              )}\n            </th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n\n  renderModelVersionInfo() {\n    const { runInfos, runInfosValid, versionsToRuns, runNames, modelName } = this.props;\n    return (\n      <tbody className=\"scrollable-table\">\n        <tr className=\"table-row\">\n          <th scope=\"row\" className=\"data-value block-content\">\n            <FormattedMessage\n              defaultMessage=\"Model Version:\"\n              description=\"Text for model version row header in the main table in the model\n                comparison page\"\n            />\n          </th>\n          {Object.keys(versionsToRuns).map((modelVersion) => {\n            const run = versionsToRuns[modelVersion];\n            return (\n              <td className=\"meta-info block-content\" key={run}>\n                <Link to={ModelRegistryRoutes.getModelVersionPageRoute(modelName, modelVersion)}>{modelVersion}</Link>\n              </td>\n            );\n          })}\n        </tr>\n        <tr className=\"table-row\">\n          <th scope=\"row\" className=\"data-value block-content\">\n            <FormattedMessage\n              defaultMessage=\"Run Name:\"\n              description=\"Text for run name row header in the main table in the model comparison\n                page\"\n            />\n          </th>\n          {runNames.map((runName, i) => {\n            return (\n              <td className=\"meta-info block-content\" key={runInfos[i].runUuid}>\n                <div className=\"truncate-text single-line cell-content\">{runName}</div>\n              </td>\n            );\n          })}\n        </tr>\n        <tr className=\"table-row\">\n          <th scope=\"row\" className=\"data-value block-content\">\n            <FormattedMessage\n              defaultMessage=\"Start Time:\"\n              description=\"Text for start time row header in the main table in the model comparison\n                page\"\n            />\n          </th>\n          {runInfos.map((run, idx) => {\n            /* Do not attempt to get timestamps for invalid run IDs */\n            const startTime =\n              run.startTime && runInfosValid[idx] ? Utils.formatTimestamp(run.startTime, this.props.intl) : '(unknown)';\n            return (\n              <td className=\"meta-info block-content\" key={run.runUuid}>\n                {startTime}\n              </td>\n            );\n          })}\n        </tr>\n      </tbody>\n    );\n  }\n\n  /* additional Switch and Text are antd Switch component and the text followed by the toggle switch\n  this is currently used in schema section where we have an additional switch toggle for\n  ignore column ordering, same logic can be applied if future section needs additional toggle */\n  renderSectionHeader(\n    activeSection: any,\n    toggleSection: any,\n    sectionName: any,\n    leftToggle = true,\n    additionalSwitch = null,\n    additionalSwitchText = null,\n  ) {\n    const { runInfos } = this.props;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isActive = this.state[activeSection];\n    const { downIcon, rightIcon } = this.icons;\n    return (\n      <tbody>\n        <tr>\n          <th scope=\"rowgroup\" className=\"block-content main-table-header\" colSpan={runInfos.length + 1}>\n            <div className=\"switch-button-container\">\n              <CollapseButton onClick={() => this.onToggleClick(activeSection)}>\n                {isActive ? downIcon : rightIcon}\n                <span className=\"header\">{sectionName}</span>\n              </CollapseButton>\n              {additionalSwitch}\n              {additionalSwitchText}\n              <Switch\n                defaultChecked\n                className=\"toggle-switch\"\n                // @ts-expect-error TS(2322): Type '{ defaultChecked: true; className: string; s... Remove this comment to see the full error message\n                style={leftToggle ? { marginLeft: 'auto' } : {}}\n                onChange={() => this.onToggleClick(toggleSection)}\n              />\n              <div className=\"padding-left-text\">\n                <span>\n                  <FormattedMessage\n                    defaultMessage=\"Show diff only\"\n                    description=\"Toggle text that determines whether to show diff only in the model\n                      comparison page\"\n                  />\n                </span>\n              </div>\n            </div>\n          </th>\n        </tr>\n      </tbody>\n    );\n  }\n\n  renderParams() {\n    return (\n      <tbody className=\"scrollable-table\">\n        {this.renderDataRows(\n          this.props.paramLists,\n          <FormattedMessage\n            defaultMessage=\"Parameters\"\n            description=\"Field name text for parameters table in the model comparison page\"\n          />,\n          this.state.paramsActive,\n          this.state.paramsToggle,\n        )}\n      </tbody>\n    );\n  }\n\n  renderSchemaSectionHeader(activeSection: any, sectionName: any) {\n    const { runInfos } = this.props;\n    const { schemaActive } = this.state;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isActive = this.state[activeSection];\n    const { minusIcon, plusIcon } = this.icons;\n    return (\n      <tbody>\n        <tr className={`${schemaActive ? '' : 'hidden-row'}`}>\n          <th scope=\"rowgroup\" className=\"schema-table-header block-content\" colSpan={runInfos.length + 1}>\n            <button className=\"schema-collapse-button\" onClick={() => this.onToggleClick(activeSection)}>\n              {isActive ? minusIcon : plusIcon}\n              <strong style={{ paddingLeft: 4 }}>{sectionName}</strong>\n            </button>\n          </th>\n        </tr>\n      </tbody>\n    );\n  }\n\n  renderSchema(activeSection: any, sectionName: any, listByIndex: any, listByName: any) {\n    const { schemaActive, compareByColumnNameToggle, schemaToggle } = this.state;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const isActive = this.state[activeSection];\n    const showSchemaSection = schemaActive && isActive;\n    const showListByIndex = !compareByColumnNameToggle && !_.isEmpty(listByIndex);\n    const showListByName = compareByColumnNameToggle && !_.isEmpty(listByName);\n    const listByIndexHeaderMap = (key: any, data: any) => (\n      <>\n        {sectionName} [{key}]\n      </>\n    );\n    const listByNameHeaderMap = (key: any, data: any) => key;\n    const schemaFormatter = (value: any) => value;\n    const schemaFieldName = (\n      <FormattedMessage\n        defaultMessage=\"Schema {sectionName}\"\n        description=\"Field name text for schema table in the model comparison page\"\n        values={{ sectionName: sectionName }}\n      />\n    );\n    return (\n      <tbody className=\"scrollable-table schema-scrollable-table\">\n        {this.renderDataRows(\n          listByIndex,\n          schemaFieldName,\n          showSchemaSection && showListByIndex,\n          schemaToggle,\n          listByIndexHeaderMap,\n          schemaFormatter,\n        )}\n        {this.renderDataRows(\n          listByName,\n          schemaFieldName,\n          showSchemaSection && showListByName,\n          schemaToggle,\n          listByNameHeaderMap,\n          schemaFormatter,\n        )}\n      </tbody>\n    );\n  }\n\n  renderMetrics() {\n    const { runInfos, metricLists } = this.props;\n    const { metricActive, metricToggle } = this.state;\n    const { chartIcon } = this.icons;\n    const metricsHeaderMap = (key: any, data: any) => {\n      return (\n        <Link\n          to={Routes.getMetricPageRoute(\n            runInfos.map((info) => info.runUuid).filter((uuid, idx) => data[idx] !== undefined),\n            key,\n            // TODO: Refactor so that the breadcrumb\n            // on the linked page is for model registry\n            [runInfos[0].experimentId],\n          )}\n          target=\"_blank\"\n          title=\"Plot chart\"\n        >\n          {key}\n          {chartIcon}\n        </Link>\n      );\n    };\n    return (\n      <tbody className=\"scrollable-table\">\n        {this.renderDataRows(\n          metricLists,\n          <FormattedMessage\n            defaultMessage=\"Metrics\"\n            description=\"Field name text for metrics table in the model comparison page\"\n          />,\n          metricActive,\n          metricToggle,\n          metricsHeaderMap,\n          Utils.formatMetric,\n        )}\n      </tbody>\n    );\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  renderDataRows(\n    list: any,\n    fieldName: any,\n    show = true,\n    toggle = false,\n    headerMap = (key: any, data: any) => key,\n    formatter = (value: any) => (isNaN(value) ? `\"${value}\"` : value),\n  ) {\n    // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.\n    const keys = CompareRunUtil.getKeys(list);\n    const data = {};\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    keys.forEach((k) => (data[k] = []));\n    list.forEach((records: any, i: any) => {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      keys.forEach((k) => data[k].push(undefined));\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      records.forEach((r: any) => (data[r.key][i] = r.value));\n    });\n    if (_.isEmpty(keys) || _.isEmpty(list)) {\n      return (\n        <tr className={`table-row ${show ? '' : 'hidden-row'}`}>\n          <th scope=\"row\" className=\"rowHeader block-content\">\n            <CenteredText>\n              <FormattedMessage\n                defaultMessage=\"{fieldName} are empty\"\n                description=\"Default text in data table where items are empty in the model\n                  comparison page\"\n                values={{ fieldName: fieldName }}\n              />\n            </CenteredText>\n          </th>\n        </tr>\n      );\n    }\n    // @ts-expect-error TS(2345): Argument of type 'string' is not assignable to par... Remove this comment to see the full error message\n    const isAllNumeric = _.every(keys, (key) => !isNaN(key));\n    if (isAllNumeric) {\n      keys.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));\n    } else {\n      keys.sort();\n    }\n    let identical = true;\n    const resultRows = keys.map((k) => {\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const isDifferent = data[k].length > 1 && _.uniq(data[k]).length > 1;\n      identical = !isDifferent && identical;\n      return (\n        <tr key={k} className={`table-row ${(toggle && !isDifferent) || !show ? 'hidden-row' : ''}`}>\n          <th scope=\"row\" className=\"rowHeader block-content\">\n            {/* @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message */}\n            {headerMap(k, data[k])}\n          </th>\n          {/* @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message */}\n          {data[k].map((value: any, i: any) => (\n            <td\n              className={`data-value block-content ${isDifferent ? 'highlight-data' : ''}`}\n              key={this.props.runInfos[i].runUuid}\n            >\n              <span className=\"truncate-text single-line cell-content\">\n                {value === undefined ? '-' : formatter(value)}\n              </span>\n            </td>\n          ))}\n        </tr>\n      );\n    });\n    if (identical && toggle) {\n      return (\n        <tr className={`table-row ${show ? '' : 'hidden-row'}`}>\n          <th scope=\"row\" className=\"rowHeader block-content\">\n            <CenteredText>\n              <FormattedMessage\n                defaultMessage=\"{fieldName} are identical\"\n                // eslint-disable-next-line max-len\n                description=\"Default text in data table where items are identical in the model comparison page\"\n                values={{ fieldName: fieldName }}\n              />\n            </CenteredText>\n          </th>\n        </tr>\n      );\n    }\n    return resultRows;\n  }\n}\n\nconst getModelVersionSchemaColumnsByIndex = (columns: any) => {\n  const columnsByIndex = {};\n  columns.forEach((column: any, index: any) => {\n    const name = column.name ? column.name : '';\n    const type = column.type ? column.type : '';\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    columnsByIndex[index] = {\n      key: index,\n      value: name !== '' && type !== '' ? `${name}: ${type}` : `${name}${type}`,\n    };\n  });\n  return columnsByIndex;\n};\n\nconst getModelVersionSchemaColumnsByName = (columns: any) => {\n  const columnsByName = {};\n  columns.forEach((column: any) => {\n    const name = column.name ? column.name : '-';\n    const type = column.type ? column.type : '-';\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    columnsByName[name] = {\n      key: name,\n      value: type,\n    };\n  });\n  return columnsByName;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos = [];\n  const runInfosValid = [];\n  const metricLists = [];\n  const paramLists = [];\n  const runNames = [];\n  const runDisplayNames = [];\n  const runUuids = [];\n  const { modelName, versionsToRuns } = ownProps;\n  const inputsListByName = [];\n  const inputsListByIndex = [];\n  const outputsListByName = [];\n  const outputsListByIndex = [];\n  for (const modelVersion in versionsToRuns) {\n    if (versionsToRuns && modelVersion in versionsToRuns) {\n      const runUuid = versionsToRuns[modelVersion];\n      const runInfo = getRunInfo(runUuid, state);\n      if (runInfo) {\n        runInfos.push(runInfo);\n        runInfosValid.push(true);\n        metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n        paramLists.push(Object.values(getParams(runUuid, state)));\n        runNames.push(Utils.getRunName(runInfo));\n        // the following are used to render plots - we only include valid run IDs here\n        runDisplayNames.push(Utils.getRunDisplayName(runInfo, runUuid));\n        runUuids.push(runUuid);\n      } else {\n        if (runUuid) {\n          runInfos.push({ runUuid });\n        } else {\n          runInfos.push({ runUuid: 'None' });\n        }\n        runInfosValid.push(false);\n        metricLists.push([]);\n        paramLists.push([]);\n        runNames.push('Invalid Run');\n      }\n      const schema = getModelVersionSchemas(state, modelName, modelVersion);\n      inputsListByIndex.push(Object.values(getModelVersionSchemaColumnsByIndex((schema as any).inputs)));\n      inputsListByName.push(Object.values(getModelVersionSchemaColumnsByName((schema as any).inputs)));\n      outputsListByIndex.push(Object.values(getModelVersionSchemaColumnsByIndex((schema as any).outputs)));\n      outputsListByName.push(Object.values(getModelVersionSchemaColumnsByName((schema as any).outputs)));\n    }\n  }\n\n  return {\n    runInfos,\n    runInfosValid,\n    metricLists,\n    paramLists,\n    runNames,\n    runDisplayNames,\n    runUuids,\n    modelName,\n    inputsListByName,\n    inputsListByIndex,\n    outputsListByName,\n    outputsListByIndex,\n  };\n};\n\nconst DEFAULT_COLUMN_WIDTH = 200;\n\nconst styles = {\n  wrapper: (numRuns: any) => ({\n    '.mlflow-compare-table': {\n      // 1 extra unit for header column\n      minWidth: (numRuns + 1) * DEFAULT_COLUMN_WIDTH,\n    },\n  }),\n  compareModelVersionsView: {\n    'button:focus': {\n      outline: 'none',\n      boxShadow: 'none',\n    },\n    'td.block-content th.block-content': {\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      tableLayout: 'fixed',\n      boxSizing: 'content-box',\n    },\n    'th.schema-table-header': {\n      height: 28,\n      padding: 0,\n    },\n    'tr.table-row': {\n      display: 'table',\n      width: '100%',\n      tableLayout: 'fixed',\n    },\n    'tr.hidden-row': {\n      display: 'none',\n    },\n    'tbody.scrollable-table': {\n      width: '100%',\n      display: 'block',\n      border: 'none',\n      maxHeight: 400,\n      overflowY: 'auto',\n    },\n    'tbody.schema-scrollable-table': {\n      maxHeight: 200,\n    },\n    '.switch-button-container': {\n      display: 'flex',\n      paddingTop: 16,\n      paddingBottom: 16,\n    },\n    'button.schema-collapse-button': {\n      textAlign: 'left',\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      border: 'none',\n    },\n    '.collapse-button': {\n      textAlign: 'left',\n      display: 'flex',\n      alignItems: 'center',\n      border: 'none',\n      backgroundColor: 'white',\n      paddingLeft: 0,\n    },\n    '.cell-content': {\n      maxWidth: '200px',\n      minWidth: '100px',\n    },\n    '.padding-left-text': {\n      paddingLeft: 8,\n    },\n    '.padding-right-text': {\n      paddingRight: 16,\n    },\n    '.toggle-switch': {\n      marginTop: 2,\n    },\n    '.header': {\n      paddingLeft: 8,\n      fontSize: 16,\n    },\n  },\n};\n\nexport const CompareModelVersionsView = connect(mapStateToProps)(injectIntl(CompareModelVersionsViewImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport qs from 'qs';\nimport { connect } from 'react-redux';\nimport { getRunApi } from '../../experiment-tracking/actions';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { getRegisteredModelApi, getModelVersionApi, getModelVersionArtifactApi, parseMlModelFile } from '../actions';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport { CompareModelVersionsView } from './CompareModelVersionsView';\nimport _ from 'lodash';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\n\ntype CompareModelVersionsPageImplProps = {\n  modelName: string;\n  versionsToRuns: any;\n  getRunApi: (...args: any[]) => any;\n  getRegisteredModelApi: (...args: any[]) => any;\n  getModelVersionApi: (...args: any[]) => any;\n  getModelVersionArtifactApi: (...args: any[]) => any;\n  parseMlModelFile: (...args: any[]) => any;\n};\n\ntype CompareModelVersionsPageImplState = any;\n\n// TODO: Write integration tests for this component\nexport class CompareModelVersionsPageImpl extends Component<\n  CompareModelVersionsPageImplProps,\n  CompareModelVersionsPageImplState\n> {\n  registeredModelRequestId = getUUID();\n  versionRequestId = getUUID();\n  runRequestId = getUUID();\n  getMlModelFileRequestId = getUUID();\n\n  state = {\n    requestIds: [\n      // requests that must be fulfilled before rendering\n      this.registeredModelRequestId,\n      this.runRequestId,\n      this.versionRequestId,\n      this.getMlModelFileRequestId,\n    ],\n    requestIdsWith404ErrorsToIgnore: [this.runRequestId, this.getMlModelFileRequestId],\n  };\n\n  removeRunRequestId() {\n    this.setState((prevState: any) => ({\n      requestIds: _.without(prevState.requestIds, this.runRequestId),\n    }));\n  }\n\n  componentDidMount() {\n    this.props.getRegisteredModelApi(this.props.modelName, this.registeredModelRequestId);\n    for (const modelVersion in this.props.versionsToRuns) {\n      if ({}.hasOwnProperty.call(this.props.versionsToRuns, modelVersion)) {\n        const runID = this.props.versionsToRuns[modelVersion];\n        if (runID) {\n          this.props.getRunApi(runID, this.runRequestId).catch(() => {\n            // Failure of this call should not block the page. Here we remove\n            // `runRequestId` from `requestIds` to unblock RequestStateWrapper\n            // from rendering its content\n            this.removeRunRequestId();\n          });\n        } else {\n          this.removeRunRequestId();\n        }\n        const { modelName } = this.props;\n        this.props.getModelVersionApi(modelName, modelVersion, this.versionRequestId);\n        this.props\n          .getModelVersionArtifactApi(modelName, modelVersion)\n          .then((content: any) =>\n            this.props.parseMlModelFile(modelName, modelVersion, content.value, this.getMlModelFileRequestId),\n          )\n          .catch(() => {\n            // Failure of this call chain should not block the page. Here we remove\n            // `getMlModelFileRequestId` from `requestIds` to unblock RequestStateWrapper\n            // from rendering its content\n            this.setState((prevState: any) => ({\n              requestIds: _.without(prevState.requestIds, this.getMlModelFileRequestId),\n            }));\n          });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.state.requestIds}\n          requestIdsWith404sToIgnore={this.state.requestIdsWith404ErrorsToIgnore}\n        >\n          <CompareModelVersionsView modelName={this.props.modelName} versionsToRuns={this.props.versionsToRuns} />\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: WithRouterNextProps) => {\n  const { location } = ownProps;\n  const searchValues = qs.parse(location.search);\n  // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n  const modelName = decodeURIComponent(JSON.parse(searchValues['?name']));\n  // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n  const versionsToRuns = JSON.parse(searchValues['runs']);\n  return { modelName, versionsToRuns };\n};\n\nconst mapDispatchToProps = {\n  getRunApi,\n  getRegisteredModelApi,\n  getModelVersionApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n};\n\nconst CompareModelVersionsPageWithRouter = withRouterNext(\n  connect(mapStateToProps, mapDispatchToProps)(CompareModelVersionsPageImpl),\n);\n\nexport const CompareModelVersionsPage = withErrorBoundary(\n  ErrorUtils.mlflowServices.MODEL_REGISTRY,\n  CompareModelVersionsPageWithRouter,\n);\n\nexport default CompareModelVersionsPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = ({ fallback, ...props }: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={fallback ?? <LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n"],"names":["CompareRunPlotContainer","props","_jsxs","css","styles","wrapper","children","_jsx","controls","plotWrapper","overflow","width","height","minHeight","display","gridTemplateColumns","theme","padding","spacing","xs","CompareRunScatterImpl","Component","constructor","super","metricKeys","paramKeys","this","CompareRunUtil","getKeys","metricLists","paramLists","length","state","disabled","x","key","isMetric","y","getValue","i","value","findInList","undefined","render","keyLength","MAX_PLOT_KEY_LENGTH","ys","tooltips","runInfos","forEach","_","index","push","getPlotlyTooltip","_Fragment","FormUI","Label","htmlFor","FormattedMessage","id","defaultMessage","renderSelect","Spacer","LazyPlot","data","text","hoverinfo","type","mode","marker","size","color","layout","margin","t","hovermode","xaxis","title","escape","Utils","truncateString","yaxis","plot","config","responsive","displaylogo","scrollZoom","modeBarButtonsToRemove","useResizeHandler","axis","SimpleSelect","componentId","select","onChange","target","prefix","keyParts","split","join","setState","SimpleSelectOptionGroup","label","map","p","SimpleSelectOption","m","valueLength","MAX_PLOT_VALUE_LENGTH","runName","runDisplayNames","result","paramList","metricList","formatMetric","CompareRunScatter","connect","mapStateToProps","ownProps","runUuids","runUuid","getRunInfo","Object","values","getLatestMetrics","getParams","paramOptionPrefix","_ref","name","Selector","intl","useIntl","placeholder","formatMessage","_prefix","isParam","startsWith","_ref2","_ref3","CompareRunBox","xAxis","setXAxis","useState","yAxis","setYAxis","Array","from","Set","flat","sort","getBoxPlotData","params","metrics","find","entries","jitter","pointpos","boxpoints","Row","Col","span","borderSpacer","Typography","Text","paddingLeft","CompareRunContour","common","reverseColor","zaxis","getColorscale","colorscale","val","zs","z","parseFloat","className","Switch","checked","maybeRenderPlot","invalidAxes","messageHead","noDataMessage","connectgaps","contours","coloring","range","Math","min","max","sm","justifyContent","UNKNOWN_TERM","ParallelCoordinatesPlotView","React","args","sequence","updateMetricAxisLabelStyle","metricsKeySet","getLabelElementsFromDom","filter","el","has","innerHTML","style","fill","fontWeight","maybeUpdateStateForColorScale","currentSequenceFromPlotly","rightmostMetricKeyFromState","findLastKeyFromState","handlePlotUpdate","dimensions","d","getDerivedStateFromProps","keysFromProps","keysFromState","getData","paramDimensions","metricDimensions","lastMetricKey","lastMetricDimension","line","getColorScaleConfigsForDimension","getDimensionsOrderedBySequence","dimension","indexOf","keys","keySet","showscale","cmin","cmax","autosize","onUpdate","displayModeBar","document","querySelectorAll","createDimension","entryByRunUuid","attributes","dataType","inferType","isNaN","Number","labels","sortedUniqLabels","addUnknownTerm","filteredSortedUniqLabels","labelToIndexStr","tickvals","ticktext","sortedUniqLabel","substring","generateAttributesForCategoricalDimension","maxValue","MIN_SAFE_INTEGER","numericValue","tickformat","latestMetricsByRunUuid","paramsByRunUuid","entities","paramKey","metricKey","ParallelCoordinatesPlotControls","selectedParamKeys","selectedMetricKeys","handleParamsSelectChange","handleMetricsSelectChange","onClearAllSelect","LegacySelect","Option","marginTop","Button","onClick","ParallelCoordinatesPlotPanel","diffParamKeys","slice","sharedMetricKeys","paramValues","metricValues","allParamKeys","allMetricKeys","noValuesSelected","Title","level","md","textAlign","allRunUuids","uuid","getAllParamKeysByRunUuids","getAllMetricKeysByRunUuids","getSharedMetricKeysByRunUuids","getDiffParams","param","every","arr","TabPane","LegacyTabs","CenteredText","useDesignSystemTheme","_css","colors","textSecondary","CompareTable","backgroundColor","white","backgroundValidationWarning","CollapseButton","alignItems","border","cursor","CompareModelVersionsViewImpl","inputActive","outputActive","paramsToggle","paramsActive","schemaToggle","compareByColumnNameToggle","schemaActive","metricToggle","metricActive","icons","plusIcon","minusIcon","downIcon","rightIcon","chartIcon","onToggleClick","active","inputsListByIndex","inputsListByName","modelName","outputsListByIndex","outputsListByName","numVersions","breadcrumbs","Link","to","ModelRegistryRoutes","modelListPageRoute","getModelPageRoute","compareModelVersionsView","PageHeader","renderTableHeader","renderModelVersionInfo","renderSectionHeader","renderParams","marginLeft","renderSchemaSectionHeader","renderSchema","renderMetrics","tab","runInfosValid","scope","r","idx","_r$experimentId","_r$runUuid","Routes","getRunPageRoute","experimentId","versionsToRuns","runNames","modelVersion","run","getModelVersionPageRoute","startTime","formatTimestamp","activeSection","toggleSection","sectionName","leftToggle","additionalSwitch","additionalSwitchText","isActive","colSpan","defaultChecked","renderDataRows","listByIndex","listByName","showSchemaSection","showListByIndex","showListByName","schemaFormatter","schemaFieldName","listByIndexHeaderMap","listByNameHeaderMap","metricsHeaderMap","getMetricPageRoute","info","list","fieldName","show","toggle","headerMap","formatter","k","records","a","b","parseInt","identical","resultRows","isDifferent","getModelVersionSchemaColumnsByIndex","columns","columnsByIndex","column","getModelVersionSchemaColumnsByName","columnsByName","numRuns","minWidth","outline","boxShadow","whiteSpace","textOverflow","tableLayout","boxSizing","maxHeight","overflowY","paddingTop","paddingBottom","maxWidth","paddingRight","fontSize","CompareModelVersionsView","runInfo","getRunName","getRunDisplayName","schema","getModelVersionSchemas","inputs","outputs","injectIntl","CompareModelVersionsPageImpl","registeredModelRequestId","getUUID","versionRequestId","runRequestId","getMlModelFileRequestId","requestIds","requestIdsWith404ErrorsToIgnore","removeRunRequestId","prevState","componentDidMount","getRegisteredModelApi","hasOwnProperty","call","runID","getRunApi","catch","getModelVersionApi","getModelVersionArtifactApi","then","content","parseMlModelFile","PageContainer","RequestStateWrapper","requestIdsWith404sToIgnore","mapDispatchToProps","CompareModelVersionsPageWithRouter","withRouterNext","location","searchValues","qs","search","decodeURIComponent","JSON","parse","CompareModelVersionsPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY","Plot","fallback","SectionErrorBoundary","LegacySkeleton"],"sourceRoot":""}