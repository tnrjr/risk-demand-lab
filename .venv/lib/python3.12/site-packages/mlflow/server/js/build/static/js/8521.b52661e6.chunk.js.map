{"version":3,"file":"static/js/8521.b52661e6.chunk.js","mappings":"gLAGA,SAASA,EAAqBC,GAC5B,QAAgBC,IAAZD,EAGJ,MAA0B,kBAAZA,GAAwBA,aAAmBE,UAAYF,aAAmBG,KACpFH,EACAI,KAAKC,UAAUL,EACrB,CAGO,MAAMM,EAA0BC,MACrCC,EACAC,EAA8C,MAC9CC,KAEA,MAAMC,EAAU,IACVD,EAAO,CAAE,eAAgB,oBAAuB,CAAC,MAClDE,EAAAA,EAAAA,IAAkBC,SAASC,SAE1BC,QAAiBC,MAAMR,EAAK,CAChCC,SACAC,KAAMX,EAAqBW,GAC3BC,YAEF,IAAKI,EAASE,GAAI,CAChB,MAAMC,GAAkBC,EAAAA,EAAAA,IAAqBJ,GAC7C,GAAIG,EAAiB,CACnB,IAEE,MAAME,SAAiBL,EAASM,QAAQD,QACxCF,EAAgBE,QAAiB,OAAPA,QAAO,IAAPA,EAAAA,EAAWF,EAAgBE,OACvD,CAAE,MACA,CAEF,MAAMF,CACR,CACF,CACA,OAAOH,EAASM,MAAM,C,wDCnCjB,MAAMC,EAAiBC,GAAiBC,QAAQD,EAAKE,MAAM,+B,8FCH3D,MAAMC,EAAwBA,CAACC,EAA0BC,IAC9DD,EAASE,SAAWD,EAASC,QAAUF,EAASJ,OAASK,EAASL,MAAQI,EAASG,UAAYF,EAASE,QAE7FC,EAAuBC,IAClC,MAAM,QAAEC,GAAYD,EACdE,EAAaD,EAAQC,WAC3B,IACE,GAAIA,IAAeC,EAAAA,GAAmBC,KAAM,CAC1C,MAAM,IAAE5B,GAAQJ,KAAKiC,MAAMJ,EAAQK,QACnC,OAAO9B,CACT,CACA,GAAI0B,IAAeC,EAAAA,GAAmBI,GAAI,CACxC,MAAM,IAAEC,GAAQpC,KAAKiC,MAAMJ,EAAQK,QACnC,OAAOE,CACT,CACA,GAAIN,IAAeC,EAAAA,GAAmBM,aAAc,CAClD,MAAM,KAAEC,GAAStC,KAAKiC,MAAMJ,EAAQK,QACpC,MAAO,mCAAmCI,GAC5C,CACF,CAAE,MACA,OAAO,IACT,CACA,OAAO,IAAI,C,4DCxBTC,EAAOC,EAAIC,EAAQC,EAAQC,E,WAC/B,SAASC,IAAa,OAAOA,EAAWC,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAAK,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAAIF,UAAUD,GAAI,IAAK,IAAII,KAAKD,GAAG,CAAG,GAAEE,eAAeC,KAAKH,EAAGC,KAAOL,EAAEK,GAAKD,EAAEC,GAAK,CAAE,OAAOL,CAAG,EAAGJ,EAASY,MAAM,KAAMN,UAAY,CAEnR,SAASO,GAAyB,MAChCC,EAAK,QACLC,KACGC,GACFC,GACD,OAAoB,gBAAoB,MAAOjB,EAAS,CACtDkB,MAAO,GACPC,OAAQ,GACRC,QAAS,YACTC,KAAM,OACNC,MAAO,6BACPC,IAAKN,EACL,kBAAmBF,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DU,GAAIT,GACHD,GAAS,KAAmB,gBAAoB,IAAK,CACtDW,SAAU,mBACI,gBAAoB,OAAQ,CAC1CD,GAAI,YACJE,MAAO,CACLC,SAAU,aAEZC,UAAW,iBACXC,EAAG,EACHC,EAAG,EACHZ,MAAO,GACPC,OAAQ,IACPxB,IAAUA,EAAqB,gBAAoB,OAAQ,CAC5DoC,EAAG,mBACHV,KAAM,YACFzB,IAAOA,EAAkB,gBAAoB,IAAK,CACtDoC,KAAM,mBACQ,gBAAoB,OAAQ,CAC1CC,SAAU,UACVC,SAAU,UACVH,EAAG,uuDACHV,KAAM,mBACFxB,IAAWA,EAAsB,gBAAoB,OAAQ,CACjEkC,EAAG,uHACHV,KAAM,WACHvB,IAAWA,EAAsB,gBAAoB,OAAQ,CAChEmC,SAAU,UACVC,SAAU,UACVH,EAAG,0dACHV,KAAM,cACFtB,IAAUA,EAAqB,gBAAoB,OAAQ,KAAmB,gBAAoB,WAAY,CAClHyB,GAAI,aACU,gBAAoB,OAAQ,CAC1CN,MAAO,GACPC,OAAQ,GACRE,KAAM,aAEV,CACA,MAAMc,EAA0B,aAAiBtB,GAClC,G,wGCnDf,MAEMuB,EAAgBA,CAAC7D,EAAc8D,IACnC,wBAAwB9D,EAAK+D,QAAQ,MAAO,gBAAgBD,IACxDE,EAAiBA,CAAChE,EAAc8D,KAAoBG,EAAAA,EAAAA,IAAsB,WAAWjE,cAAiB8D,KAoD/FI,EAA6CA,EACxDC,eACAC,YAAW,MAMX,MAAM,cAAEC,EAAa,SAAEC,IAAaC,EAAAA,EAAAA,UAAQ,KAC1C,MAAMF,EAAgBF,EAAaK,SAASC,IAAiB,IAADC,EAC1D,MAAMC,EAAqD,QAAnCD,EA5DDD,KAC3B,IAAK,IAADG,EAAAC,EAAAC,EACF,MAAMC,EAA2B,QAAnBH,EAAGH,EAAYO,YAAI,IAAAJ,GAAM,QAANC,EAAhBD,EAAkBK,YAAI,IAAAJ,GAAoD,QAApDC,EAAtBD,EAAwBK,MAAMC,GARnB,yBAQ2BA,EAAIC,aAAgC,IAAAN,OAA1D,EAAhBA,EAA4EO,MAE7F,GAAIN,EAEF,OAAOlG,KAAKiC,MAAMiE,EAEtB,CAAE,MAAOjD,GACP,OAAO,IACT,CACA,OAAO,IAAI,EAiDoBwD,CAAoBb,UAAY,IAAAC,EAAAA,EAAI,GAC/D,OAAOC,EAAmBY,KAAKC,IAC7B,MACMC,GADY1F,EAAAA,EAAAA,GAAcyF,EAAqBxF,MACxB6D,EAAgBG,EAC7C,MAAO,CACL0B,cAAeF,EAAqBxF,KACpC8D,QAAS0B,EAAqB1B,QAC9B6B,KAAMF,EAASD,EAAqBxF,KAAMwF,EAAqB1B,SAC/D/C,OAAQ,KACR6E,OAAQ,KACRC,kBAAmBpB,EACpB,GACD,IAGEH,EAAWD,EAAcyB,QAAQC,GAAUA,EAAML,gBAAiB3F,EAAAA,EAAAA,GAAcgG,EAAML,iBAE5F,MAAO,CAAErB,gBAAeC,WAAU,GACjC,CAACH,KAEE,WAAE6B,EAAU,UAAEC,GAjEWC,EAC/B5B,EACAF,KAEA,MAAM+B,GAAU5B,EAAAA,EAAAA,UAAQ,KACjBH,GAAYE,EAAStC,OAGnB,KACN,CAACsC,EAAUF,IAERgC,GAAeC,EAAAA,EAAAA,GAAW,CAAEF,aAE5B,WAAEH,EAAU,UAAEC,IAAc1B,EAAAA,EAAAA,UAAQ,IACnCH,GAAgC,IAApBE,EAAStC,OAMnB,CAAEgE,WADmC,CAAC,EACxBC,UAFHG,EAAaE,MAAMC,GAAWA,EAAON,aAH9C,CAAED,WAAY,CAAC,EAAGC,WAAW,IAMrC,CAACG,EAAcD,EAAS/B,EAAUE,EAAStC,SAE9C,MAAO,CAAEgE,aAAYC,YAAW,EA0CEC,CAAyB5B,EAAUF,GAwBrE,MAAO,CACLC,eAtB8BE,EAAAA,EAAAA,UAC9B,IACEF,EAAckB,KAAKiB,IACjB,MAAMd,EAAgBc,EAAad,cAC7Be,EAAYf,IAAiB3F,EAAAA,EAAAA,GAAc2F,GAEjD,IAAIgB,GAAY,EAE6B,IAADC,EAAxCvC,GAAYqC,GAAaf,IAE3BgB,EAAkE,QAAzDC,EAAGX,EAAW,GAAGN,KAAiBc,EAAa1C,kBAAU,IAAA6C,GAAAA,GAGpE,MAAO,IACFH,EACHE,YACD,KAEL,CAACrC,EAAeD,EAAU4B,IAK1BC,YACD,C,8HCpHoE,IAAAW,EAAA,CAAA5G,KAAA,UAAA6G,OAAA,mBAQhE,MAAMC,EAAmCA,EAC9CrG,kBACAsG,oBACAC,gBAC8B,IAADC,EAC7B,MAAM,QAAEvG,EAAO,KAAEuE,GAASxE,GACpB,MAAEyG,IAAUC,EAAAA,EAAAA,KAEZC,EAAiB,OAAJnC,QAAI,IAAJA,GAA+D,QAA3DgC,EAAJhC,EAAMC,MAAK,EAAGE,SAAUA,IAAQiC,EAAAA,YAA+B,IAAAJ,OAA3D,EAAJA,EAAiE5B,MAEpF,OACEiC,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,UAAWV,EAAMW,QAAQC,GACzBC,aAAcb,EAAMW,QAAQC,IAC7B,IACDd,UAAWA,EAAUgB,SAAA,EAErBC,EAAAA,EAAAA,GAACC,EAAAA,UAAS,CAACX,KAAGC,EAAAA,EAAAA,IAAE,CAAEW,YAAajB,EAAMW,QAAQC,GAAIM,MAAOlB,EAAMmB,OAAOC,eAAe,MACnFvB,GACCO,EAAAA,EAAAA,IAAA,OAAAU,SAAA,CACGtH,EAAQV,KAAK,KAAGU,EAAQJ,OAAO,QAGlCgH,EAAAA,EAAAA,IAACiB,EAAAA,EAAWC,KAAI,CAACC,KAAK,KAAKlB,IAAGX,EAAsBoB,SAAA,CACjDtH,EAAQV,KAAK,KAAGU,EAAQJ,OAAO,OAGnC8G,IACCa,EAAAA,EAAAA,GAACS,EAAAA,IAAG,CACFC,YAAY,gIACZpB,KAAGC,EAAAA,EAAAA,IAAE,CACHoB,cAAe,aACfC,WAAY3B,EAAMW,QAAQC,GAC1BK,YAAajB,EAAMW,QAAQC,IAC5B,IAACE,SAEDZ,MAGD,C,uJCvCV,MAAM0B,EAAQ,CACZC,YAAYd,EAAAA,EAAAA,GAACe,EAAAA,SAAQ,IACrBC,aAAahB,EAAAA,EAAAA,GAACiB,EAAAA,SAAQ,IACtBC,QAAQlB,EAAAA,EAAAA,GAACmB,EAAAA,WAAU,IACnBC,SAASpB,EAAAA,EAAAA,GAACqB,EAAAA,YAAW,IACrBC,OAAOtB,EAAAA,EAAAA,GAACuB,EAAAA,EAAS,IACjBC,MAAMxB,EAAAA,EAAAA,GAACyB,EAAAA,cAAa,IACpBC,OAAO1B,EAAAA,EAAAA,GAAC2B,EAAAA,eAAc,KAGXC,EAAoBA,EAC/B7B,WACA8B,UACAC,sBAMA,MAAM,8BAAEC,IAAkCC,EAAAA,EAAAA,YAAWC,EAAAA,GAErD,OACEjC,EAAAA,EAAAA,GAACkC,EAAAA,EAAQC,aAAY,CACnBtB,MAAOA,EACPuB,QAAS,CACPP,QAASA,EACTQ,aAAcN,EACdD,gBAAkBQ,GAAMR,EAAgBQ,IACxCvC,SAEDA,GACoB,C,6NClCpB,MAAMwC,EAAsB,IAAI,IAAA5D,EAAA,CAAA5G,KAAA,SAAA6G,OAAA,oBAShC,MAAM4D,EAAYA,EAAGC,WAAUC,qBAAoBC,YAAWC,mBACnE,MAAOC,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAS,IAC/C,MAAE9D,IAAUC,EAAAA,EAAAA,MAEX8D,EAAcC,IAAmBF,EAAAA,EAAAA,WAAS,GAcjD,OAZAG,EAAAA,EAAAA,YAAU,KAERD,GAAgB,GAChB,MAAME,EAAM,IAAIC,OAAOC,MAIvB,OAHAF,EAAIG,OAAS,IAAML,GAAgB,GACnCE,EAAII,QAAU,IAAMN,GAAgB,GACpCE,EAAIK,IAAMd,EACH,KACLS,EAAIK,IAAM,EAAE,CACb,GACA,CAACd,KAGF1C,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAE7E,MAAOiI,GAAa,OAAQhI,OAAQgI,GAAa,QAAQ,IAAC5C,UACpEC,EAAAA,EAAAA,GAAA,OAAKV,IAAGX,EAA0BoB,cACRtJ,IAAvBiM,GAAoCM,GACnChD,EAAAA,EAAAA,GAAA,OACEV,KAAGC,EAAAA,EAAAA,IAAE,CACH7E,MAAO,OACP+I,gBAAiBxE,EAAMmB,OAAOsD,oBAC9BlE,QAAS,OACTmE,YAAa,IACbC,eAAgB,SAChBlE,WAAY,UACb,IAACK,UAEFC,EAAAA,EAAAA,GAAC6D,EAAAA,EAAO,OAGV7D,EAAAA,EAAAA,GAAA,OACEV,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTE,WAAY,SACZkE,eAAgB,SAChBlJ,MAAOiI,GAAa,OACpBgB,YAAa,IACbG,SAAUlB,EACVmB,UAAWnB,EACXa,gBAAiBxE,EAAMmB,OAAOsD,oBAC9B,YAAa,CACXM,OAAQ,YAEX,IAACjE,UAEFC,EAAAA,EAAAA,GAAC4B,EAAAA,EAAiB,CAACC,QAASgB,EAAgBf,gBAAiBgB,EAAkB/C,UAC7EC,EAAAA,EAAAA,GAACqD,EAAAA,EAAK,CACJG,IAAKd,EACLN,QAAS,CAAEoB,IAAKf,GAChBvH,MAAO,CAAE4I,SAAUlB,GAAgB,OAAQmB,UAAWnB,GAAgB,iBAM5E,EAIGqB,EAAuBA,EAClCC,iBACAvB,YACAwB,OACAC,cAOA,MAAM,MAAEnF,IAAUC,EAAAA,EAAAA,KAElB,YAA6BzI,IAAzByN,EAAeC,IAEf9E,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZkE,eAAgB,SAChBS,UAAW,SACX3J,MAAOiI,EACPc,gBAAiBxE,EAAMmB,OAAOsD,oBAC9BY,QAASrF,EAAMW,QAAQ2E,GACvBZ,YAAa,KACd,IAAC5D,SAAA,EAEFC,EAAAA,EAAAA,GAACwE,EAAAA,UAAS,KACVxE,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,qCAOrB1E,EAAAA,EAAAA,GAACwC,EAAS,CACRC,UAAUkC,EAAAA,EAAAA,IAAuBT,EAAeC,GAAMS,SAAUR,GAChE1B,oBAAoBiC,EAAAA,EAAAA,IAAuBT,EAAeC,GAAMU,oBAAqBT,GACrFzB,UAAWA,GACX,EAEJ,IAAAmC,EAAA,CAAA/M,KAAA,UAAA6G,OAAA,sHAAAmG,EAAA,CAAAhN,KAAA,SAAA6G,OAAA,mBAAAoG,EAAA,CAAAjN,KAAA,UAAA6G,OAAA,sBAEK,MAAMqG,EAAqBA,KAE9B5F,EAAAA,EAAAA,IAAA,OACEC,IAAGwF,EAQD/E,SAAA,EAEFC,EAAAA,EAAAA,GAACM,EAAAA,EAAW4E,MAAK,CAAC5F,IAAGyF,EAAqB5E,MAAM,YAAYgF,MAAO,EAAEpF,SAAC,2BAGtEC,EAAAA,EAAAA,GAACM,EAAAA,EAAWC,KAAI,CAACjB,IAAG0F,EAAwB7E,MAAM,YAAWJ,SAAC,qE,6HC1IpE,MAAMqF,EAA8B,uEAqBpC,IAAAN,EAAA,CAAA/M,KAAA,UAAA6G,OAAA,oGAGO,MAAMyG,EAAeA,EAC1BlF,QACAmF,SACAC,mBACG/K,MAKE,IAADmE,EACJ,MAAO6G,EAAYC,IAAiB1C,EAAAA,EAAAA,eAA6BtM,GAE3DiP,GAAyBpJ,EAAAA,EAAAA,UAAQ,IAIjCiJ,GACKI,EAAAA,EAAAA,UAASJ,EAAe,KAE1B,QACN,CAACA,IAEJ,OACElG,EAAAA,EAAAA,IAAA,SACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHqG,UAAW,aACXlL,MAAO,GACPC,OAAQ,GACRkL,aAAc,EACdC,WAAY,EAEZC,OAAQ,cAAaT,EAAS,cAAgB,mBAE9C,CAACF,GAA8B,CAC7BtF,aAAc,GAEhBkG,WAAYV,EA1DiB,kSA0DuB7O,EACpDuN,OAAQuB,EAAgB,UAAY,UACpCU,SAAU,WACV,UAAW,CACTC,QAASX,EAAgB,GAAM,IAElC,IACDrK,MAAO,CAAEuI,gBAAoC,QAArB9E,EAAY,OAAV6G,QAAU,IAAVA,EAAAA,EAAcrF,SAAK,IAAAxB,EAAAA,EAAI,kBAC7CnE,EAAKuF,SAAA,EAETC,EAAAA,EAAAA,GAAA,QACEV,IAAG,CACD6G,EAAAA,EAAe,qBAIfpG,SAEDI,IAEFoF,IACCvF,EAAAA,EAAAA,GAAA,SACEoG,SAAUd,EACVe,KAAK,QACLjJ,MAAiB,OAAVoI,QAAU,IAAVA,EAAAA,EAAcrF,EACrBmG,SAAUA,EAAGC,aACXd,EAAcc,EAAOnJ,OACrBsI,EAAuBa,EAAOnJ,MAAM,EAEtCoJ,KAAMC,EAAAA,EACNnH,IAAGwF,MAYD,C,yhBC1GL,MAAM4B,EAAS,CACpBC,KAAM,OACNC,QAAS,UACTC,WAAY,aACZC,SAAU,YAGCC,EAAgB,CAACL,EAAOE,QAASF,EAAOG,YAExCG,EAAc,CACzB,CAACN,EAAOC,MAAO,OACf,CAACD,EAAOE,SAAU,UAClB,CAACF,EAAOG,YAAa,aACrB,CAACH,EAAOI,UAAW,YAGRG,EAAqB,CAChC,CAACP,EAAOC,OACN3G,EAAAA,EAAAA,GAACS,EAAAA,IAAG,CAACC,YAAY,yDAAwDX,SAAEiH,EAAYN,EAAOC,QAEhG,CAACD,EAAOE,UACN5G,EAAAA,EAAAA,GAACS,EAAAA,IAAG,CAACC,YAAY,yDAAyDP,MAAM,QAAOJ,SACpFiH,EAAYN,EAAOE,WAGxB,CAACF,EAAOG,aACN7G,EAAAA,EAAAA,GAACS,EAAAA,IAAG,CAACC,YAAY,yDAAyDP,MAAM,OAAMJ,SACnFiH,EAAYN,EAAOG,cAGxB,CAACH,EAAOI,WACN9G,EAAAA,EAAAA,GAACS,EAAAA,IAAG,CAACC,YAAY,yDAAyDP,MAAM,WAAUJ,SACvFiH,EAAYN,EAAOI,aAiBnB,IAAKI,EAAa,SAAbA,GAAa,OAAbA,EAAa,wCAAbA,EAAa,4CAAbA,EAAa,sCAAbA,EAAa,sCAAbA,EAAa,oCAAbA,EAAa,oCAAbA,EAAa,0BAAbA,CAAa,OAealH,EAAAA,EAAAA,GAAA,OAAK9E,MAAO,CAAEyE,WAAY,IAAKI,SAAC,MAA/D,MAEMoH,EAAqB,CAChCC,MAAO,SAGIC,EAAoC,CAC/C,CAACF,EAAmBC,QAClBpH,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SAAC0J,eAAe,YAIxB4C,EAAiC,CAC5C,CAACH,EAAmBC,QAClBpH,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,WAMR6C,EAA0B,CACrC,CAACJ,EAAmBC,QAAQpH,EAAAA,EAAAA,GAACwH,EAAAA,GAAS,KAG3BC,EAAqC,IAOrCC,EAAqC,GACrCC,EAAkC,GAElCC,EAA2C,GAE3CC,EAAsC,OAEtCC,EAA2C,YAE3CC,EAAwC,qBAExCC,EAAqB,CAChCC,IAAK,SACLC,KAAM,WAGKC,EAAqCC,IAChDpI,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,sFAIf2D,OAAQ,CAAED,aAAcA,KAIfE,EACX,mF,oJC9H4C,IAAA3J,EAAA,CAAA5G,KAAA,UAAA6G,OAAA,cAOvC,MAAM2J,EAAmCA,EAC9CC,SACA3K,aAEA,MAQM4K,EAAiBD,EAAO3K,QAAO,CAAC6K,EAAqCC,KACzEC,OATiB7Q,EASP2Q,EAAI3Q,KATkBsO,EASZqC,EAAIrC,KAPX,KAAXxI,IACI,OAAJ9F,QAAI,IAAJA,OAAI,EAAJA,EAAM8Q,cAAcC,SAASjL,EAAOgL,kBAChC,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAMwC,cAAcC,SAASjL,EAAOgL,gBAJtBD,IAAC7Q,EAAesO,CAUlC,IAeA,OACEhH,EAAAA,EAAAA,IAAC0J,EAAAA,MAAK,CAACC,YAAU,EAAC1J,IAAGX,EAAoBoB,SAAA,EACvCV,EAAAA,EAAAA,IAAC4J,EAAAA,SAAQ,CAACC,UAAQ,EAAAnJ,SAAA,EAChBC,EAAAA,EAAAA,GAACmJ,EAAAA,YAAW,CAACzI,YAAY,gIAA+HX,UAd1JC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,YAgBf1E,EAAAA,EAAAA,GAACmJ,EAAAA,YAAW,CAACzI,YAAY,gIAA+HX,UATrJC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SAAC0J,eAAe,eAatC1E,EAAAA,EAAAA,GAAA,OAAKoJ,QAAUvP,GAAMA,EAAEwP,kBAAkBtJ,SACZ,IAA1B0I,EAAe1O,QACdiG,EAAAA,EAAAA,GAACiJ,EAAAA,SAAQ,CAAAlJ,UACPC,EAAAA,EAAAA,GAACsJ,EAAAA,UAAS,CAAAvJ,UACRC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,sCAMrB+D,EAAenL,KAAI,CAACoL,EAAqCa,KACvDlK,EAAAA,EAAAA,IAAC4J,EAAAA,SAAQ,CAAAlJ,SAAA,EACPC,EAAAA,EAAAA,GAACsJ,EAAAA,UAAS,CAAAvJ,SAAE2I,EAAI3Q,QAChBiI,EAAAA,EAAAA,GAACsJ,EAAAA,UAAS,CAAAvJ,SAAE2I,EAAIrC,SAFH,kBAAkBkD,WAOjC,EClDkC,IAAA5K,EAAA,CAAA5G,KAAA,SAAA6G,OAAA,mDAAAkG,EAAA,CAAA/M,KAAA,UAAA6G,OAAA,kGAAAmG,EAAA,CAAAhN,KAAA,SAAA6G,OAAA,mEAAAoG,EAAA,CAAAjN,KAAA,UAAA6G,OAAA,cAAA4K,EAAA,CAAAzR,KAAA,SAAA6G,OAAA,gBAAA6K,EAAA,CAAA1R,KAAA,SAAA6G,OAAA,4FAAA8K,EAAA,CAAA3R,KAAA,SAAA6G,OAAA,qBAAA+K,EAAA,CAAA5R,KAAA,UAAA6G,OAAA,iEAAAgL,EAAA,CAAA7R,KAAA,UAAA6G,OAAA,iEAMvC,MAAMiL,EAA8BA,EAAGrR,sBAC5C,MAAM,MAAEyG,IAAUC,EAAAA,EAAAA,MACZ,QAAEzG,GAAYD,GACbqF,EAAQiM,IAAa/G,EAAAA,EAAAA,UAAS,IAErC,GAAuB,OAAnBtK,EAAQ+P,QAAsC,KAAnB/P,EAAQ+P,OACrC,OACExI,EAAAA,EAAAA,GAAA,OACEV,IAAGX,EAIDoB,UAEFC,EAAAA,EAAAA,GAAA,OACEV,IAAGwF,EAMD/E,UAEFC,EAAAA,EAAAA,GAAC+J,EAAAA,OAAM,CAACzP,OAAO0F,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAEY,MAAOlB,EAAMmB,OAAO4J,SAAS,IAACjK,SAAC,8BAKlE,IACE,MAAMyI,EAAS5R,KAAKiC,MAAMJ,EAAQ+P,QAClC,MAAI,mBAAoBA,GAGpBnJ,EAAAA,EAAAA,IAAA,OACEC,IAAGyF,EAKDhF,SAAA,EAEFC,EAAAA,EAAAA,GAAA,OACEV,KAAGC,EAAAA,EAAAA,IAAE,CACHI,UAAWV,EAAMW,QAAQqK,GACzBC,KAAM,CAAExP,MAAO,SAChB,IAACqF,UAEFC,EAAAA,EAAAA,GAACmK,EAAAA,iBAAgB,CACfzJ,YAAY,2HACZtD,MAAOS,EACPuM,YAAY,gBACZ9D,SAAWzM,GAAMiQ,EAAUjQ,EAAE0M,OAAOnJ,OACpCiN,QAASA,KACPP,EAAU,GAAG,EAEfxK,IAAG0F,EACHsF,eAAgB,CAAEpP,MAAO,CAAER,MAAO,cAGtCsF,EAAAA,EAAAA,GAAA,OACEV,KAAGC,EAAAA,EAAAA,IAAE,CACHI,UAAWV,EAAMW,QAAQqK,GACzBM,SAAU,UACX,IAACxK,UAEFC,EAAAA,EAAAA,GAACuI,EAAgC,CAACC,OAAQA,EAAOgC,eAAgB3M,OAAQA,SAItE,sBAAuB2K,GAG9BxI,EAAAA,EAAAA,GAAA,OAAKV,IAAGkK,EAAsBzJ,UAC5BV,EAAAA,EAAAA,IAAA,OACEC,IAAGmK,EAMD1J,SAAA,EAEFC,EAAAA,EAAAA,GAACC,EAAAA,UAAS,CAACX,KAAGC,EAAAA,EAAAA,IAAE,CAAEkL,SAAU,OAAQtK,MAAOlB,EAAMmB,OAAO4J,SAAS,OACjEhK,EAAAA,EAAAA,GAAC+J,EAAAA,OAAM,CAACzP,OAAO0F,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAEY,MAAOlB,EAAMmB,OAAO4J,SAAS,IAACjK,SAAC,wBAE1DC,EAAAA,EAAAA,GAACM,EAAAA,EAAWC,KAAI,CAACJ,MAAOlB,EAAMmB,OAAO4J,QAAS1K,IAAGoK,EAA0B3J,UACzEC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,iHAUvB1E,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAEqB,WAAY3B,EAAMW,QAAQ8K,GAAI/K,UAAWV,EAAMW,QAAQ2E,GAAI7J,MAAO,QAAQ,IAACqF,UACrFV,EAAAA,EAAAA,IAAA,OAAKC,IAAGqK,EAA6E5J,SAAA,EACnFC,EAAAA,EAAAA,GAAC+J,EAAAA,OAAM,CAACzP,OAAO0F,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAEY,MAAOlB,EAAMmB,OAAO4J,SAAS,IAACjK,SAAC,kCAE1DV,EAAAA,EAAAA,IAACiB,EAAAA,EAAWC,KAAI,CAACJ,MAAOlB,EAAMmB,OAAO4J,QAAQjK,SAAA,EAC3CC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,sBAGhB9N,KAAKC,UAAU2R,UAM5B,CAAE,MACA,OACExI,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAEqB,WAAY3B,EAAMW,QAAQ8K,GAAI/K,UAAWV,EAAMW,QAAQ2E,GAAI7J,MAAO,QAAQ,IAACqF,UACrFC,EAAAA,EAAAA,GAAA,OAAKV,IAAGsK,EAA6E7J,UACnFC,EAAAA,EAAAA,GAAC+J,EAAAA,OAAM,CAACzP,OAAO0F,EAAAA,EAAAA,GAAA,OAAKV,KAAGC,EAAAA,EAAAA,IAAE,CAAEY,MAAOlB,EAAMmB,OAAO4J,SAAS,IAACjK,SAAC,6BAIlE,G,qCClIK,MAAM4K,EAA4BA,EAAGnS,kBAAiBoS,cAC3D,MAAM,QAAEnS,GAAYD,EACpB,GAAIC,EAAQC,aAAeC,EAAAA,GAAmBC,MAAQH,EAAQC,aAAeC,EAAAA,GAAmBM,aAAc,CAC5G,MAAMjC,GAAMuB,EAAAA,EAAAA,GAAoBC,GAChC,GAAIxB,EACF,OACEgJ,EAAAA,EAAAA,GAAC6K,EAAAA,EAAM,CACLxE,KAAK,UACL3F,YAAY,2HACZoK,MAAM9K,EAAAA,EAAAA,GAAC+K,EAAAA,GAAa,IACpBC,KAAMhU,EACNuP,OAAO,SAAQxG,UAEfC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,kBAMzB,CACA,GAAIjM,EAAQC,aAAeC,EAAAA,GAAmBI,GAAI,CAChD,MAAM/B,GAAMuB,EAAAA,EAAAA,GAAoBC,GAChC,GAAIxB,EACF,OACEgJ,EAAAA,EAAAA,GAACiL,EAAAA,EAAU,CACTvK,YAAY,2HACZoK,MAAM9K,EAAAA,EAAAA,GAACkL,EAAAA,SAAQ,IACfC,SAAUnU,EAAI+I,UAEdC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,8BAMzB,CACA,OAAIjM,EAAQC,aAAeC,EAAAA,GAAmByS,UAE1CpL,EAAAA,EAAAA,GAAC6K,EAAAA,EAAM,CACLnK,YAAY,2HACZoK,MAAM9K,EAAAA,EAAAA,GAAC+K,EAAAA,GAAa,IAAIhL,UAExBC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,8BAMhB,IAAI,E,gDCtDN,MAAM2G,EAAkCA,EAAG7S,sBAChD,MAAM,QAAEC,GAAYD,EAEdE,EAAaD,EAAQC,WA8BrB4S,EA3BA5S,IAAeC,EAAAA,GAAmBC,MAAQF,IAAeC,EAAAA,GAAmByS,UAE5EpL,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,SAKjBhM,IAAeC,EAAAA,GAAmBI,IAElCiH,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,OAKjBhM,IAAeC,EAAAA,GAAmBM,cAElC+G,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,iBAKd,KAKT,OAAI4G,GAEAtL,EAAAA,EAAAA,GAACM,EAAAA,EAAWiL,KAAI,CAAAxL,UACdC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,2BAEf2D,OAAQ,CAAEiD,iBAMX,IAAI,ECtDwD,IAAA3M,EAAA,CAAA5G,KAAA,SAAA6G,OAAA,gCAAAkG,EAAA,CAAA/M,KAAA,UAAA6G,OAAA,0CAAAmG,EAAA,CAAAhN,KAAA,SAAA6G,OAAA,6DAM9D,MAAM4M,EAAiCA,EAAGhT,sBAC/C,MAAM,QAAEC,GAAYD,GACd,MAAEyG,IAAUC,EAAAA,EAAAA,KAEZxG,EAAaD,EAAQC,WAE3B,GACEA,IAAeC,EAAAA,GAAmBC,MAClCF,IAAeC,EAAAA,GAAmByS,UAClC1S,IAAeC,EAAAA,GAAmBM,aAClC,CACA,MAAMjC,GAAMuB,EAAAA,EAAAA,GAAoBC,GAChC,GAAIxB,EACF,OACEqI,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHkM,WAAY,SACZjM,QAAS,OACTiL,SAAUxL,EAAMyM,WAAWC,WAC3BxL,MAAOlB,EAAMmB,OAAOC,cACpBuL,UAAW3M,EAAMW,QAAQC,IAC1B,IACDvF,MAAOtD,EAAI+I,SAAA,CACZ,OACM,KACLC,EAAAA,EAAAA,GAACM,EAAAA,EAAWuL,KAAI,CACdnL,YAAY,8HACZoL,cAAY,EACZd,KAAMhU,EACNsI,IAAGX,EAA0CoB,UAE7CC,EAAAA,EAAAA,GAAA,QAAMV,IAAGwF,EAAmD/E,SAAE/I,QAKxE,CACA,GAAI0B,IAAeC,EAAAA,GAAmBI,GACpC,IACE,MAAM,IAAEC,GAAQpC,KAAKiC,MAAMJ,EAAQK,QACnC,GAAIE,EACF,OACEqG,EAAAA,EAAAA,IAACiB,EAAAA,EAAWiL,KAAI,CACdjR,MAAOtB,EACPsG,IAAGyF,EAIDhF,SAAA,CACH,WACU/G,IAIjB,CAAE,MACA,OAAO,IACT,CAEF,OAAO,IAAI,EC9DA+S,EAA8BA,EAAGvT,sBAC5C,MAAM,QAAEC,GAAYD,EACpB,OACEwH,EAAAA,EAAAA,GAACM,EAAAA,EAAWiL,KAAI,CAAAxL,UACdC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,mBAEf2D,OAAQ,CAAEhQ,QAAQ2H,EAAAA,EAAAA,GAAA,QAAAD,SAAOtH,EAAQJ,aAEnB,E,eCuCpB,IAAAsG,EAAA,CAAA5G,KAAA,UAAA6G,OAAA,+CAAAkG,EAAA,CAAA/M,KAAA,UAAA6G,OAAA,0CAAAmG,EAAA,CAAAhN,KAAA,UAAA6G,OAAA,8DAAAoG,EAAA,CAAAjN,KAAA,SAAA6G,OAAA,UAAA4K,EAAA,CAAAzR,KAAA,SAAA6G,OAAA,sDAAA6K,EAAA,CAAA1R,KAAA,UAAA6G,OAAA,mCAEF,MAAMoN,EAAkCA,EACtCC,SACAC,YACAC,yBACAC,gCAC6C,IAADC,EAC5C,MAAM,MAAEpN,IAAUC,EAAAA,EAAAA,MACZ,gBAAE1G,EAAe,QAAE8T,GAAYH,EAC/BhN,EAAagN,EACA,OAAf3T,QAAe,IAAfA,GAAqB,QAAN6T,EAAf7T,EAAiBwE,YAAI,IAAAqP,OAAN,EAAfA,EAAuBpP,MAAMC,GAAQA,EAAIC,MAAQiC,EAAAA,UACjD3I,EACE8V,EACJ/T,EAAgBC,QAAQ+T,SAA+C,SAApChU,EAAgBC,QAAQ+T,QACvDhU,EAAgBC,QAAQ+T,aACxB/V,EAEAgW,GAAcC,EAAAA,EAAAA,OACd,aAAEC,EAAe,GAAE,KAAE3P,EAAO,CAAC,GAAMsP,EAEzC,OACEtM,EAAAA,EAAAA,GAAC4M,EAAAA,OAAOC,KAAI,CACVC,KAAMb,EACNc,aAAeD,IACRA,GACHZ,GAAU,EACZ,EACAnM,UAEFC,EAAAA,EAAAA,GAAC4M,EAAAA,OAAOI,QAAO,CACbtM,YAAY,2HACZpG,OACE+E,EAAAA,EAAAA,IAAA,OAAKC,IAAGX,EAA4DoB,SAAA,EAClEC,EAAAA,EAAAA,GAACM,EAAAA,EAAW4E,MAAK,CAACC,MAAO,EAAG7F,KAAGC,EAAAA,EAAAA,IAAE,CAAEW,YAAajB,EAAMW,QAAQqK,GAAInK,aAAc,GAAG,IAACC,UAClFC,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,yBAInBrF,EAAAA,EAAAA,IAACwM,EAAAA,GAAI,CAACoB,GAAIC,EAAAA,GAAOC,gBAAgBR,EAAcL,EAAQlI,SAAU9E,IAAKV,EAAOwO,QAAQrN,SAAA,EACnFC,EAAAA,EAAAA,GAACqF,EAAAA,EAAY,CAAClF,MAAOsM,EAAYH,EAAQlI,YACzCpE,EAAAA,EAAAA,GAAA,QAAMV,IAAKV,EAAOyO,QAAQtN,SAAEuM,EAAQe,gBAI1C3S,MAnDa,QAoDb4S,QAAQtN,EAAAA,EAAAA,GAACuN,EAAAA,EAAM,CAAC/M,KAAK,OAAQT,UAE7BV,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTgO,UAAW,aAAavO,EAAMmB,OAAO2F,SACrCpL,OAAQ,OACRiG,YAAa3B,EAAMW,QAAQqK,IAC5B,IAAClK,SAAA,EAGFV,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTC,cAAe,SACf/E,MAAO,QACP+S,YAAa,aAAaxO,EAAMmB,OAAO2F,SACvCpL,OAAQ,QACT,IAACoF,SAAA,EAEFV,EAAAA,EAAAA,IAACiB,EAAAA,EAAWC,KAAI,CACdJ,MAAM,YACNb,KAAGC,EAAAA,EAAAA,IAAE,CACHO,aAAcb,EAAMW,QAAQqK,GAC5BtK,UAAWV,EAAMW,QAAQqK,GACzByD,YAAazO,EAAMW,QAAQqK,IAC5B,IAAClK,SAAA,CAEDuM,EAAQqB,SAAS5T,OAAQ,KAC1BiG,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,sBAInB1E,EAAAA,EAAAA,GAAA,OACEV,IAAGwF,EAKHsE,QAAUvP,GAAMA,EAAEwP,kBAAkBtJ,UAEpCC,EAAAA,EAAAA,GAAA,OACEV,IAAGyF,EAKDhF,SAEDuM,EAAQqB,SAASrQ,KAAK7E,IACrBuH,SAAAA,EAAAA,GAACM,EAAAA,EAAWuL,KAAI,CACdnL,YAAY,qCACZ,aAAY,GAAGjI,EAAQA,QAAQV,SAASU,EAAQA,QAAQJ,UAExDiH,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACTiM,WAAY,SACZmC,eAAgB,OAChB5J,OAAQ,UACRvE,cAAe,SACfmE,eAAgB,SAChBlE,WAAY,aACZ+D,iBAhHIoK,EAgH8BpV,EAhHAqV,EAgHStV,EA/GxDqV,EAASpV,QAAQJ,SAAWyV,EAASrV,QAAQJ,QAAUwV,EAASpV,QAAQV,OAAS+V,EAASrV,QAAQV,KAgHjFkH,EAAMmB,OAAO2N,8BACb,eACJC,cAAe/O,EAAMW,QAAQqK,GAC7BgE,WAAYhP,EAAMW,QAAQqK,GAC1ByD,YAAazO,EAAMW,QAAQqK,GAC3BlE,OAAQ,EACRyH,UAAW,aAAavO,EAAMmB,OAAO2F,SACrC,UAAW,CACTtC,gBAAiBxE,EAAMmB,OAAO8N,gCAEjC,IACDC,QAASA,KACP/B,EAA0B,CAAE5T,gBAAiBC,EAAS6T,QAASA,IAC/DJ,GAAU,EAAK,EACfnM,UAEFC,EAAAA,EAAAA,GAACnB,EAAAA,EAAgC,CAACrG,gBAAiBC,EAASqG,mBAAmB,KA1B1E,GAAGrG,EAAQA,QAAQV,QAAQU,EAAQA,QAAQJ,UAvG3C+V,IAACP,EAA8BC,CAmIvC,YAKPzO,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHgL,SAAU,SACVmD,YAAazO,EAAMW,QAAQ2E,GAC3B0J,WAAYhP,EAAMW,QAAQ2E,GAC1B/E,QAAS,OACTC,cAAe,SACf/E,MAAO,QACR,IAACqF,SAAA,EAGFV,EAAAA,EAAAA,IAAA,OACEC,KAAGC,EAAAA,EAAAA,IAAE,CACHC,QAAS,OACT6O,IAAKpP,EAAMW,QAAQqK,IACpB,IAAClK,SAAA,EAEFV,EAAAA,EAAAA,IAAA,OAAKC,IAAG0F,EAAgBjF,SAAA,EACtBC,EAAAA,EAAAA,GAAC+J,EAAAA,OAAM,CACLzP,OACE+E,EAAAA,EAAAA,IAAA,OAAKC,IAAGkK,EAAkEzJ,SAAA,EACxEC,EAAAA,EAAAA,GAACC,EAAAA,UAAS,CAACX,KAAGC,EAAAA,EAAAA,IAAE,CAAEW,YAAajB,EAAMW,QAAQC,IAAI,OACjDG,EAAAA,EAAAA,GAACsO,EAAAA,cAAa,CAAChU,MAAO9B,EAAgBC,QAAQV,KAAKgI,UACjDC,EAAAA,EAAAA,GAACM,EAAAA,EAAW4E,MAAK,CAACqJ,UAAQ,EAACpJ,MAAO,EAAG7F,IAAGmK,EAAqC1J,SAC1EvH,EAAgBC,QAAQV,SAG5BoH,IACCa,EAAAA,EAAAA,GAACS,EAAAA,IAAG,CACFC,YAAY,4HACZpB,KAAGC,EAAAA,EAAAA,IAAE,CACHoB,cAAe,aACfC,WAAY3B,EAAMW,QAAQC,GAC1BK,YAAajB,EAAMW,QAAQC,IAC5B,IAACE,SAEDZ,EAAW/B,cAMtB4C,EAAAA,EAAAA,GAACM,EAAAA,EAAW4E,MAAK,CACfC,MAAO,EACPhF,MAAM,YACNb,KAAGC,EAAAA,EAAAA,IAAE,CAAEO,aAAcb,EAAMW,QAAQC,GAAIF,UAAWV,EAAMW,QAAQC,IAAI,IACpEvF,MAAOiS,EAAYxM,SAElBvH,EAAgBC,QAAQ+T,SAA+C,SAApChU,EAAgBC,QAAQ+T,QAC1DhU,EAAgBC,QAAQ+T,QAAQzS,OA3LzB,GA4LL,GAAGvB,EAAgBC,QAAQ+T,QAAQgC,UAAU,EA5LxC,UA8LLhW,EAAgBC,QAAQ+T,SAG1BxM,EAAAA,EAAAA,GAACyE,EAAAA,EAAgB,CAAAzJ,GAAA,SACf0J,eAAe,+BAMvB1E,EAAAA,EAAAA,GAAC2K,EAAyB,CAACnS,gBAAiBA,EAAiBoS,QAAS5N,QAExEqC,EAAAA,EAAAA,IAAA,OAAKC,KAAGC,EAAAA,EAAAA,IAAE,CAAEuG,WAAY,EAAGtG,QAAS,OAAQC,cAAe,SAAU4O,IAAKpP,EAAMW,QAAQC,IAAI,IAACE,SAAA,EAC3FC,EAAAA,EAAAA,GAAC+L,EAA2B,CAACvT,gBAAiBA,KAC9CwH,EAAAA,EAAAA,GAACqL,EAA+B,CAAC7S,gBAAiBA,KAClDwH,EAAAA,EAAAA,GAACwL,EAA8B,CAAChT,gBAAiBA,QAGnDwH,EAAAA,EAAAA,GAAA,OACEV,KAAGC,EAAAA,EAAAA,IAAE,CACHI,UAAWV,EAAMW,QAAQqK,GACzBnK,aAAcb,EAAMW,QAAQC,GAC5B2N,UAAW,aAAavO,EAAMmB,OAAO2F,SACrCG,QAAS,IACV,OAEHlG,EAAAA,EAAAA,GAAC6J,EAA2B,CAACrR,gBAAiBA,aAIxC,EAMLiW,EAA8BC,EAAAA,KAAW1C,GAEhDpN,EAAS,CACbwO,QAAS,CACP7C,SAAU,SACV/K,QAAS,OACT6O,IAAK,EACL3O,WAAY,UAEd2N,QAAS,CACP9C,SAAU,SACVoE,aAAc,WACdlE,SAAU,Q","sources":["experiment-tracking/hooks/logged-models/request.utils.ts","experiment-tracking/utils/IsUCModelName.ts","experiment-tracking/utils/DatasetUtils.ts","common/static/registered-model-grey-ok.svg","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetWithContext.tsx","shared/building_blocks/Image.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common.tsx","experiment-tracking/components/experiment-page/components/RunColorPill.tsx","model-registry/constants.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSchemaTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSchema.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetLink.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSourceType.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetSourceURL.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetDigest.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewDatasetDrawer.tsx"],"sourcesContent":["import { matchPredefinedError } from '@databricks/web-shared/errors';\nimport { getDefaultHeaders } from '../../../common/utils/FetchUtils';\n\nfunction serializeRequestBody(payload: any | FormData | Blob) {\n  if (payload === undefined) {\n    return undefined;\n  }\n  return typeof payload === 'string' || payload instanceof FormData || payload instanceof Blob\n    ? payload\n    : JSON.stringify(payload);\n}\n\n// Helper method to make a request to the backend.\nexport const loggedModelsDataRequest = async (\n  url: string,\n  method: 'POST' | 'GET' | 'PATCH' | 'DELETE' = 'GET',\n  body?: any,\n) => {\n  const headers = {\n    ...(body ? { 'Content-Type': 'application/json' } : {}),\n    ...getDefaultHeaders(document.cookie),\n  };\n  const response = await fetch(url, {\n    method,\n    body: serializeRequestBody(body),\n    headers,\n  });\n  if (!response.ok) {\n    const predefinedError = matchPredefinedError(response);\n    if (predefinedError) {\n      try {\n        // Attempt to use message from the response\n        const message = (await response.json()).message;\n        predefinedError.message = message ?? predefinedError.message;\n      } catch {\n        // If the message can't be parsed, use default one\n      }\n      throw predefinedError;\n    }\n  }\n  return response.json();\n};\n","/**\n * Checks if a given model name is a valid UC entity name.\n * A valid UC entity name follows the pattern: \"catalog.schema.model\".\n * This is used to distinguish from other registries model names which should not contain dots.\n */\nexport const isUCModelName = (name: string) => Boolean(name.match(/^[^. /]+\\.[^. /]+\\.[^. /]+$/));\n","import { DatasetSourceTypes, type DatasetSummary, type RunDatasetWithTags } from '../types';\n\nexport const datasetSummariesEqual = (summary1: DatasetSummary, summary2: DatasetSummary) =>\n  summary1.digest === summary2.digest && summary1.name === summary2.name && summary1.context === summary2.context;\n\nexport const getDatasetSourceUrl = (datasetWithTags: RunDatasetWithTags) => {\n  const { dataset } = datasetWithTags;\n  const sourceType = dataset.sourceType;\n  try {\n    if (sourceType === DatasetSourceTypes.HTTP) {\n      const { url } = JSON.parse(dataset.source);\n      return url;\n    }\n    if (sourceType === DatasetSourceTypes.S3) {\n      const { uri } = JSON.parse(dataset.source);\n      return uri;\n    }\n    if (sourceType === DatasetSourceTypes.HUGGING_FACE) {\n      const { path } = JSON.parse(dataset.source);\n      return `https://huggingface.co/datasets/${path}`;\n    }\n  } catch {\n    return null;\n  }\n  return null;\n};\n","var _path, _g, _path2, _path3, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgRegisteredModelGreyOk({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 19,\n    height: 16,\n    viewBox: \"0 0 19 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_0_3\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 16,\n    height: 16\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 0H0V16H16V0Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M2.75 3.49999C2.05964 3.49999 1.5 4.05963 1.5 4.74999C1.5 5.44034 2.05964 5.99999 2.75 5.99999C3.44036 5.99999 4 5.44034 4 4.74999C4 4.05963 3.44036 3.49999 2.75 3.49999ZM0 4.74999C0 3.2312 1.23122 1.99999 2.75 1.99999C3.77682 1.99999 4.6722 2.56276 5.14452 3.39669L9.51655 2.44626C9.66772 1.0704 10.8338 0 12.25 0C13.7688 0 15 1.23122 15 2.75C15 3.87686 14.3222 4.84541 13.3521 5.27025L13.6341 7.52661C14.9711 7.71349 16 8.86158 16 10.25C16 11.7688 14.7687 13 13.25 13C12.3895 13 11.6214 12.6048 11.1172 11.9861L8.49749 13.1322C8.49913 13.1713 8.49997 13.2105 8.49997 13.25C8.49996 14.7688 7.26875 16 5.74997 16C4.23118 16 2.99997 14.7688 2.99996 13.25C2.99997 12.3569 3.42568 11.5633 4.08524 11.0609L3.01322 7.48755C2.92659 7.49578 2.83878 7.49999 2.75 7.49999C1.23122 7.49999 0 6.26877 0 4.74999ZM5.46534 5.18782C5.48277 5.07884 5.4938 4.96773 5.49804 4.85488L9.76409 3.92748C10.1528 4.74671 10.9346 5.34321 11.8658 5.47338L12.1478 7.72974C11.7709 7.89483 11.438 8.14204 11.1719 8.44873L5.46534 5.18782ZM4.82802 6.55126C4.70399 6.69422 4.56546 6.82424 4.41471 6.93906L5.48674 10.5124C5.57337 10.5042 5.66118 10.5 5.74997 10.5C6.69483 10.5 7.52839 10.9765 8.02345 11.7023L10.5231 10.6087C10.5079 10.4913 10.5 10.3716 10.5 10.25C10.5 10.101 10.5118 9.95475 10.5346 9.81218L4.82802 6.55126ZM12 10.25C12 9.55963 12.5596 8.99999 13.25 8.99999C13.9403 8.99999 14.5 9.55963 14.5 10.25C14.5 10.9403 13.9403 11.5 13.25 11.5C12.5596 11.5 12 10.9403 12 10.25ZM5.74997 12C5.05961 12 4.49997 12.5596 4.49997 13.25C4.49997 13.9403 5.05961 14.5 5.74997 14.5C6.44032 14.5 6.99997 13.9403 6.99997 13.25C6.99997 12.5596 6.44032 12 5.74997 12ZM11 2.75C11 2.05964 11.5596 1.5 12.25 1.5C12.9403 1.5 13.5 2.05964 13.5 2.75C13.5 3.44036 12.9403 4 12.25 4C11.5596 4 11 3.44036 11 2.75Z\",\n    fill: \"currentColor\"\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.5 14C15.433 14 17 12.433 17 10.5C17 8.567 15.433 7 13.5 7C11.567 7 10 8.567 10 10.5C10 12.433 11.567 14 13.5 14Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M11.125 11C11.125 9.41218 12.4122 8.125 14 8.125C15.5878 8.125 16.875 9.41218 16.875 11C16.875 12.5878 15.5878 13.875 14 13.875C12.4122 13.875 11.125 12.5878 11.125 11ZM14 6.625C11.5838 6.625 9.625 8.58375 9.625 11C9.625 13.4162 11.5838 15.375 14 15.375C16.4162 15.375 18.375 13.4162 18.375 11C18.375 8.58375 16.4162 6.625 14 6.625ZM14.0303 12.5303L16.0303 10.5303L14.9697 9.46967L13.5 10.9393L13.0303 10.4697L11.9697 11.5303L12.9697 12.5303L13.5 13.0607L14.0303 12.5303Z\",\n    fill: \"#3CAA60\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_0_3\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 19,\n    height: 16,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegisteredModelGreyOk);\nexport default __webpack_public_path__ + \"static/media/registered-model-grey-ok.8274b58d39504c8d1b8c358aa1c9aa35.svg\";\nexport { ForwardRef as ReactComponent };","import { useMemo } from 'react';\nimport { useQueries } from '../../../../common/utils/reactQueryHooks';\nimport type { LoggedModelProto } from '../../../types';\nimport { RunPageModelVersionSummary } from '../../run-page/hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { createMLflowRoutePath } from '../../../../common/utils/RoutingUtils';\nimport { isUCModelName } from '../../../utils/IsUCModelName';\nconst MODEL_VERSIONS_TAG_NAME = 'mlflow.modelVersions';\n\nconst getUCModelUrl = (name: string, version: string) =>\n  `/explore/data/models/${name.replace(/\\./g, '/')}/version/${version}`;\nconst getWMRModelUrl = (name: string, version: string) => createMLflowRoutePath(`/models/${name}/versions/${version}`);\n\nconst getTagValueForModel = (loggedModel: LoggedModelProto): { name: string; version: string }[] | null => {\n  try {\n    const tagValue = loggedModel.info?.tags?.find((tag) => tag.key === MODEL_VERSIONS_TAG_NAME)?.value;\n\n    if (tagValue) {\n      // Try to parse the tag. If it's malformed, catch and return nothing.\n      return JSON.parse(tagValue);\n    }\n  } catch (e) {\n    return null;\n  }\n  return null;\n};\n\n// Hook for ACL checking logic\nconst useModelVersionsAclCheck = (\n  ucModels: RunPageModelVersionSummary[],\n  checkAcl: boolean,\n): { aclResults: Record<string, boolean>; isLoading: boolean } => {\n  const queries = useMemo(() => {\n    if (!checkAcl || ucModels.length === 0) {\n      return [];\n    }\n    return [];\n  }, [ucModels, checkAcl]);\n\n  const queryResults = useQueries({ queries });\n\n  const { aclResults, isLoading } = useMemo(() => {\n    if (!checkAcl || ucModels.length === 0) {\n      return { aclResults: {}, isLoading: false };\n    }\n\n    const isLoading = queryResults.some((result) => result.isLoading);\n    const aclResults: Record<string, boolean> = {};\n    return { aclResults, isLoading };\n  }, [queryResults, queries, checkAcl, ucModels.length]);\n\n  return { aclResults, isLoading };\n};\n\nexport interface RunPageModelVersionSummaryWithAccess extends RunPageModelVersionSummary {\n  hasAccess: boolean;\n}\n\nexport interface UseExperimentLoggedModelRegisteredVersionsResult {\n  modelVersions: RunPageModelVersionSummaryWithAccess[];\n  isLoading: boolean;\n}\n\nexport const useExperimentLoggedModelRegisteredVersions = ({\n  loggedModels,\n  checkAcl = false,\n}: {\n  loggedModels: LoggedModelProto[];\n  checkAcl?: boolean;\n}): UseExperimentLoggedModelRegisteredVersionsResult => {\n  // Combined useMemo for parsing tags and creating model versions\n  const { modelVersions, ucModels } = useMemo(() => {\n    const modelVersions = loggedModels.flatMap((loggedModel) => {\n      const modelVersionsInTag = getTagValueForModel(loggedModel) ?? [];\n      return modelVersionsInTag.map((registeredModelEntry) => {\n        const isUCModel = isUCModelName(registeredModelEntry.name);\n        const getUrlFn = isUCModel ? getUCModelUrl : getWMRModelUrl;\n        return {\n          displayedName: registeredModelEntry.name,\n          version: registeredModelEntry.version,\n          link: getUrlFn(registeredModelEntry.name, registeredModelEntry.version),\n          source: null,\n          status: null,\n          sourceLoggedModel: loggedModel,\n        };\n      });\n    });\n\n    const ucModels = modelVersions.filter((model) => model.displayedName && isUCModelName(model.displayedName));\n\n    return { modelVersions, ucModels };\n  }, [loggedModels]);\n\n  const { aclResults, isLoading } = useModelVersionsAclCheck(ucModels, checkAcl);\n\n  // Add hasAccess to each model version\n  const modelVersionsWithAccess = useMemo<RunPageModelVersionSummaryWithAccess[]>(\n    () =>\n      modelVersions.map((modelVersion) => {\n        const displayedName = modelVersion.displayedName;\n        const isUCModel = displayedName && isUCModelName(displayedName);\n\n        let hasAccess = true; // Default for workspace models\n\n        if (checkAcl && isUCModel && displayedName) {\n          // For UC models with ACL check enabled, use the ACL result\n          hasAccess = aclResults[`${displayedName}:${modelVersion.version}`] ?? false;\n        }\n\n        return {\n          ...modelVersion,\n          hasAccess,\n        };\n      }),\n    [modelVersions, checkAcl, aclResults],\n  );\n\n  return {\n    modelVersions: modelVersionsWithAccess,\n    isLoading,\n  };\n};\n","import { TableIcon, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../constants';\n\nexport interface DatasetWithContextProps {\n  datasetWithTags: RunDatasetWithTags;\n  displayTextAsLink: boolean;\n  className?: string;\n}\n\nexport const ExperimentViewDatasetWithContext = ({\n  datasetWithTags,\n  displayTextAsLink,\n  className,\n}: DatasetWithContextProps) => {\n  const { dataset, tags } = datasetWithTags;\n  const { theme } = useDesignSystemTheme();\n\n  const contextTag = tags?.find(({ key }) => key === MLFLOW_RUN_DATASET_CONTEXT_TAG)?.value;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: theme.spacing.xs,\n        marginBottom: theme.spacing.xs,\n      }}\n      className={className}\n    >\n      <TableIcon css={{ marginRight: theme.spacing.xs, color: theme.colors.textSecondary }} />\n      {displayTextAsLink ? (\n        <div>\n          {dataset.name} ({dataset.digest})\n        </div>\n      ) : (\n        <Typography.Text size=\"md\" css={{ marginBottom: 0 }}>\n          {dataset.name} ({dataset.digest})\n        </Typography.Text>\n      )}\n      {contextTag && (\n        <Tag\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetwithcontext.tsx_41\"\n          css={{\n            textTransform: 'capitalize',\n            marginLeft: theme.spacing.xs,\n            marginRight: theme.spacing.xs,\n          }}\n        >\n          {contextTag}\n        </Tag>\n      )}\n    </div>\n  );\n};\n","import {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  CloseIcon,\n  DesignSystemContext,\n  RedoIcon,\n  UndoIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n} from '@databricks/design-system';\nimport { useContext } from 'react';\nimport RcImage from 'rc-image';\nimport './Image.css';\nimport { MLflowImagePreviewContainer } from '../../common/components/DesignSystemContainer';\n\nconst icons = {\n  rotateLeft: <UndoIcon />,\n  rotateRight: <RedoIcon />,\n  zoomIn: <ZoomInIcon />,\n  zoomOut: <ZoomOutIcon />,\n  close: <CloseIcon />,\n  left: <ArrowLeftIcon />,\n  right: <ArrowRightIcon />,\n};\n\nexport const ImagePreviewGroup = ({\n  children,\n  visible,\n  onVisibleChange,\n}: {\n  children: React.ReactNode;\n  visible: boolean;\n  onVisibleChange: (v: boolean) => void;\n}) => {\n  const { getImagePreviewPopupContainer } = useContext(MLflowImagePreviewContainer);\n\n  return (\n    <RcImage.PreviewGroup\n      icons={icons}\n      preview={{\n        visible: visible,\n        getContainer: getImagePreviewPopupContainer,\n        onVisibleChange: (v) => onVisibleChange(v),\n      }}\n    >\n      {children}\n    </RcImage.PreviewGroup>\n  );\n};\n\nexport { RcImage as Image };\n","import { ImageIcon, Spinner } from '@databricks/design-system';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { getArtifactLocationUrl } from '@mlflow/mlflow/src/common/utils/ArtifactUtils';\nimport { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { useState, useEffect } from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { ImagePreviewGroup, Image } from '../../../../../shared/building_blocks/Image';\n\n/**\n * Despite image size being dynamic, we want to set a minimum size for the grid images.\n */\nexport const MIN_GRID_IMAGE_SIZE = 200;\n\ntype ImagePlotProps = {\n  imageUrl: string;\n  compressedImageUrl: string;\n  imageSize?: number;\n  maxImageSize?: number;\n};\n\nexport const ImagePlot = ({ imageUrl, compressedImageUrl, imageSize, maxImageSize }: ImagePlotProps) => {\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const [imageLoading, setImageLoading] = useState(true);\n\n  useEffect(() => {\n    // Load the image in the memory (should reuse the same request) in order to get the loading state\n    setImageLoading(true);\n    const img = new window.Image();\n    img.onload = () => setImageLoading(false);\n    img.onerror = () => setImageLoading(false);\n    img.src = compressedImageUrl;\n    return () => {\n      img.src = '';\n    };\n  }, [compressedImageUrl]);\n\n  return (\n    <div css={{ width: imageSize || '100%', height: imageSize || '100%' }}>\n      <div css={{ display: 'contents' }}>\n        {compressedImageUrl === undefined || imageLoading ? (\n          <div\n            css={{\n              width: '100%',\n              backgroundColor: theme.colors.backgroundSecondary,\n              display: 'flex',\n              aspectRatio: '1',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Spinner />\n          </div>\n        ) : (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: imageSize || '100%',\n              aspectRatio: '1',\n              maxWidth: maxImageSize,\n              maxHeight: maxImageSize,\n              backgroundColor: theme.colors.backgroundSecondary,\n              '.rc-image': {\n                cursor: 'pointer',\n              },\n            }}\n          >\n            <ImagePreviewGroup visible={previewVisible} onVisibleChange={setPreviewVisible}>\n              <Image\n                src={compressedImageUrl}\n                preview={{ src: imageUrl }}\n                style={{ maxWidth: maxImageSize || '100%', maxHeight: maxImageSize || '100%' }}\n              />\n            </ImagePreviewGroup>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const ImagePlotWithHistory = ({\n  metadataByStep,\n  imageSize,\n  step,\n  runUuid,\n}: {\n  metadataByStep: Record<number, ImageEntity>;\n  imageSize?: number;\n  step: number;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (metadataByStep[step] === undefined) {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n          width: imageSize,\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          aspectRatio: '1',\n        }}\n      >\n        <ImageIcon />\n        <FormattedMessage\n          defaultMessage=\"No image logged at this step\"\n          description=\"Experiment tracking > runs charts > charts > image plot with history > no image text\"\n        />\n      </div>\n    );\n  }\n  return (\n    <ImagePlot\n      imageUrl={getArtifactLocationUrl(metadataByStep[step].filepath, runUuid)}\n      compressedImageUrl={getArtifactLocationUrl(metadataByStep[step].compressed_filepath, runUuid)}\n      imageSize={imageSize}\n    />\n  );\n};\n\nexport const EmptyImageGridPlot = () => {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        fontSize: 16,\n      }}\n    >\n      <Typography.Title css={{ marginTop: 16 }} color=\"secondary\" level={3}>\n        Compare logged images\n      </Typography.Title>\n      <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n        Use the image grid chart to compare logged images across runs.\n      </Typography.Text>\n    </div>\n  );\n};\n","// This media query applies to screens with a pixel density of 2 or higher\n\nimport { debounce } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { COLORS_PALETTE_DATALIST_ID } from '../../../../common/components/ColorsPaletteDatalist';\nimport { visuallyHidden } from '@databricks/design-system';\n\n// and higher resolution values (e.g. Retina displays). 192 dpi is double the \"default\" historical 96 dpi.\nconst HIGH_RESOLUTION_MEDIA_QUERY = '@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n\nconst stripedHiddenBackgroundStyle = `repeating-linear-gradient(\n  135deg,\n  #959595 0,\n  #e7e7e7 1px,\n  #e7e7e7 2px,\n  #959595 3px,\n  #e7e7e7 4px,\n  #e7e7e7 5px,\n  #959595 6px,\n  #e7e7e7 7px,\n  #e7e7e7 8px,\n  #959595 9px,\n  #e7e7e7 10px,\n  #e7e7e7 11px,\n  #959595 12px,\n  #e7e7e7 13px,\n  #e7e7e7 14px\n)`;\n\n/**\n * Renders a colored rounded pill for a run.\n */\nexport const RunColorPill = ({\n  color,\n  hidden,\n  onChangeColor,\n  ...props\n}: {\n  color?: string;\n  hidden?: boolean;\n  onChangeColor?: (colorValue: string) => void;\n}) => {\n  const [colorValue, setColorValue] = useState<string | undefined>(undefined);\n\n  const onChangeColorDebounced = useMemo(() => {\n    // Implementations of <input type=\"color\"> vary from browser to browser, some browser\n    // fire an event on every color change so we debounce the event to avoid multiple\n    // calls to the onChangeColor handler.\n    if (onChangeColor) {\n      return debounce(onChangeColor, 300);\n    }\n    return () => {};\n  }, [onChangeColor]);\n\n  return (\n    <label\n      css={{\n        boxSizing: 'border-box',\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        flexShrink: 0,\n        // Add a border to make the pill visible when using very light color\n        border: `1px solid ${hidden ? 'transparent' : 'rgba(0,0,0,0.1)'}`,\n        // Straighten it up on high-res screens\n        [HIGH_RESOLUTION_MEDIA_QUERY]: {\n          marginBottom: 1,\n        },\n        background: hidden ? stripedHiddenBackgroundStyle : undefined,\n        cursor: onChangeColor ? 'pointer' : 'default',\n        position: 'relative',\n        '&:hover': {\n          opacity: onChangeColor ? 0.8 : 1,\n        },\n      }}\n      style={{ backgroundColor: colorValue ?? color ?? 'transparent' }}\n      {...props}\n    >\n      <span\n        css={[\n          visuallyHidden,\n          {\n            userSelect: 'none',\n          },\n        ]}\n      >\n        {color}\n      </span>\n      {onChangeColor && (\n        <input\n          disabled={hidden}\n          type=\"color\"\n          value={colorValue ?? color}\n          onChange={({ target }) => {\n            setColorValue(target.value);\n            onChangeColorDebounced(target.value);\n          }}\n          list={COLORS_PALETTE_DATALIST_ID}\n          css={{\n            appearance: 'none',\n            width: 0,\n            height: 0,\n            border: 0,\n            padding: 0,\n            position: 'absolute',\n            bottom: 0,\n            visibility: 'hidden',\n          }}\n        />\n      )}\n    </label>\n  );\n};\n","import { Tag } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ReadyIcon } from './utils';\n\nexport const Stages = {\n  NONE: 'None',\n  STAGING: 'Staging',\n  PRODUCTION: 'Production',\n  ARCHIVED: 'Archived',\n};\n\nexport const ACTIVE_STAGES = [Stages.STAGING, Stages.PRODUCTION];\n\nexport const StageLabels = {\n  [Stages.NONE]: 'None',\n  [Stages.STAGING]: 'Staging',\n  [Stages.PRODUCTION]: 'Production',\n  [Stages.ARCHIVED]: 'Archived',\n};\n\nexport const StageTagComponents = {\n  [Stages.NONE]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_37\">{StageLabels[Stages.NONE]}</Tag>\n  ),\n  [Stages.STAGING]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_38\" color=\"lemon\">\n      {StageLabels[Stages.STAGING]}\n    </Tag>\n  ),\n  [Stages.PRODUCTION]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_39\" color=\"lime\">\n      {StageLabels[Stages.PRODUCTION]}\n    </Tag>\n  ),\n  [Stages.ARCHIVED]: (\n    <Tag componentId=\"codegen_mlflow_app_src_model-registry_constants.tsx_40\" color=\"charcoal\">\n      {StageLabels[Stages.ARCHIVED]}\n    </Tag>\n  ),\n};\n\nexport interface ModelVersionActivity {\n  creation_timestamp?: number;\n  user_id?: string;\n  activity_type: ActivityTypes;\n  comment?: string;\n  last_updated_timestamp?: number;\n  from_stage?: string;\n  to_stage?: string;\n  system_comment?: string;\n  id?: string;\n}\n\nexport enum ActivityTypes {\n  APPLIED_TRANSITION = 'APPLIED_TRANSITION',\n  REQUESTED_TRANSITION = 'REQUESTED_TRANSITION',\n  SYSTEM_TRANSITION = 'SYSTEM_TRANSITION',\n  CANCELLED_REQUEST = 'CANCELLED_REQUEST',\n  APPROVED_REQUEST = 'APPROVED_REQUEST',\n  REJECTED_REQUEST = 'REJECTED_REQUEST',\n  NEW_COMMENT = 'NEW_COMMENT',\n}\n\nexport interface PendingModelVersionActivity {\n  type: ActivityTypes;\n  to_stage: string;\n}\n\nexport const EMPTY_CELL_PLACEHOLDER = <div style={{ marginTop: -12 }}>_</div>;\n\nexport const ModelVersionStatus = {\n  READY: 'READY',\n};\n\nexport const DefaultModelVersionStatusMessages = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage defaultMessage=\"Ready.\" description=\"Default status message for model versions that are ready\" />\n  ),\n};\n\nexport const modelVersionStatusIconTooltips = {\n  [ModelVersionStatus.READY]: (\n    <FormattedMessage\n      defaultMessage=\"Ready\"\n      description=\"Tooltip text for ready model version status icon in model view page\"\n    />\n  ),\n};\n\nexport const ModelVersionStatusIcons = {\n  [ModelVersionStatus.READY]: <ReadyIcon />,\n};\n\nexport const MODEL_VERSION_STATUS_POLL_INTERVAL = 10000;\n\n// Number of registered models initially shown on the model registry list page\nconst REGISTERED_MODELS_PER_PAGE = 10;\n\n// Variant for compact tables (unified list pattern), this is\n// going to become a default soon\nexport const REGISTERED_MODELS_PER_PAGE_COMPACT = 25;\nexport const MODEL_VERSIONS_PER_PAGE_COMPACT = 25;\n\nexport const MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER = 75; // request size has a limit of 4KB\n\nexport const REGISTERED_MODELS_SEARCH_NAME_FIELD = 'name';\n\nexport const REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD = 'timestamp';\n\nexport const MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD = 'creation_timestamp';\n\nexport const AntdTableSortOrder = {\n  ASC: 'ascend',\n  DESC: 'descend',\n};\n\nexport const archiveExistingVersionToolTipText = (currentStage: string) => (\n  <FormattedMessage\n    defaultMessage=\"Model versions in the `{currentStage}` stage will be moved to the\n     `Archived` stage.\"\n    description=\"Tooltip text for transitioning existing model versions in stage to archived\n     in the model versions page\"\n    values={{ currentStage: currentStage }}\n  />\n);\n\nexport const mlflowAliasesLearnMoreLink =\n  'https://mlflow.org/docs/latest/model-registry.html#using-registered-model-aliases';\n","import { Table, TableCell, TableHeader, TableRow } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewDatasetSchemaTableProps {\n  schema: any[];\n  filter: string;\n}\n\nexport const ExperimentViewDatasetSchemaTable = ({\n  schema,\n  filter,\n}: ExperimentViewDatasetSchemaTableProps): JSX.Element => {\n  const hasFilter = (name?: string, type?: string) => {\n    return (\n      filter === '' ||\n      name?.toLowerCase().includes(filter.toLowerCase()) ||\n      type?.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filteredSchema = schema.filter((row: { name: string; type: string }, _: number) =>\n    hasFilter(row.name, row.type),\n  );\n\n  const getNameHeader = () => {\n    return (\n      <FormattedMessage\n        defaultMessage=\"Name\"\n        description='Header for \"name\" column in the experiment run dataset schema'\n      />\n    );\n  };\n\n  const getTypeHeader = () => {\n    return <FormattedMessage defaultMessage=\"Type\" description='Header for \"type\" column in the UC table schema' />;\n  };\n\n  return (\n    <Table scrollable css={{ width: '100%' }}>\n      <TableRow isHeader>\n        <TableHeader componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetschematable.tsx_57\">\n          {getNameHeader()}\n        </TableHeader>\n        <TableHeader componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetschematable.tsx_58\">\n          {getTypeHeader()}\n        </TableHeader>\n      </TableRow>\n      <div onWheel={(e) => e.stopPropagation()}>\n        {filteredSchema.length === 0 ? (\n          <TableRow>\n            <TableCell>\n              <FormattedMessage\n                defaultMessage=\"No results match this search.\"\n                description=\"No results message in datasets drawer table\"\n              />\n            </TableCell>\n          </TableRow>\n        ) : (\n          filteredSchema.map((row: { name: string; type: string }, idx: number) => (\n            <TableRow key={`table-body-row-${idx}`}>\n              <TableCell>{row.name}</TableCell>\n              <TableCell>{row.type}</TableCell>\n            </TableRow>\n          ))\n        )}\n      </div>\n    </Table>\n  );\n};\n","import {\n  Header,\n  TableIcon,\n  useDesignSystemTheme,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableFilterInput,\n  Spacer,\n  Typography,\n} from '@databricks/design-system';\nimport { ExperimentViewDatasetSchemaTable } from './ExperimentViewDatasetSchemaTable';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport { useEffect, useMemo, useState } from 'react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface DatasetsCellRendererProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSchema = ({ datasetWithTags }: DatasetsCellRendererProps): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n  const { dataset } = datasetWithTags;\n  const [filter, setFilter] = useState('');\n\n  if (dataset.schema === null || dataset.schema === '') {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100vh',\n        }}\n      >\n        <div\n          css={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignContent: 'center',\n          }}\n        >\n          <Header title={<div css={{ color: theme.colors.grey600 }}>No schema available</div>} />\n        </div>\n      </div>\n    );\n  }\n  try {\n    const schema = JSON.parse(dataset.schema);\n    if ('mlflow_colspec' in schema) {\n      // if the dataset schema is colspec\n      return (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            overflow: 'hidden',\n            height: '100vh',\n          }}\n        >\n          <div\n            css={{\n              marginTop: theme.spacing.sm,\n              form: { width: '100%' },\n            }}\n          >\n            <TableFilterInput\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetschema.tsx_92\"\n              value={filter}\n              placeholder=\"Search fields\"\n              onChange={(e) => setFilter(e.target.value)}\n              onClear={() => {\n                setFilter('');\n              }}\n              css={{ width: '100%' }}\n              containerProps={{ style: { width: 'auto' } }}\n            />\n          </div>\n          <div\n            css={{\n              marginTop: theme.spacing.sm,\n              overflow: 'hidden',\n            }}\n          >\n            <ExperimentViewDatasetSchemaTable schema={schema.mlflow_colspec} filter={filter} />\n          </div>\n        </div>\n      );\n    } else if ('mlflow_tensorspec' in schema) {\n      // if the dataset schema is tensorspec\n      return (\n        <div css={{ height: '100vh' }}>\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n            }}\n          >\n            <TableIcon css={{ fontSize: '56px', color: theme.colors.grey600 }} />\n            <Header title={<div css={{ color: theme.colors.grey600 }}>Array Datasource</div>} />\n            {/* @ts-expect-error Type 'string' is not assignable to type '\"primary\" | \"secondary\" | \"info\" | \"error\" | \"success\" | \"warning\" | undefined' */}\n            <Typography.Text color={theme.colors.grey600} css={{ textAlign: 'center' }}>\n              <FormattedMessage\n                defaultMessage=\"The dataset is an array. To see a preview of the dataset, view the dataset in the training notebook.\"\n                description=\"Notification when the dataset is an array data source in the experiment run dataset schema\"\n              />\n            </Typography.Text>\n          </div>\n        </div>\n      );\n    } else {\n      // if the dataset schema is not colspec or tensorspec\n      return (\n        <div css={{ marginLeft: theme.spacing.lg, marginTop: theme.spacing.md, width: '100%' }}>\n          <div css={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n            <Header title={<div css={{ color: theme.colors.grey600 }}>Unrecognized Schema Format</div>} />\n            {/* @ts-expect-error Type 'string' is not assignable to type '\"primary\" | \"secondary\" | \"info\" | \"error\" | \"success\" | \"warning\" | undefined' */}\n            <Typography.Text color={theme.colors.grey600}>\n              <FormattedMessage\n                defaultMessage=\"Raw Schema JSON: \"\n                description=\"Label for the raw schema JSON in the experiment run dataset schema\"\n              />\n              {JSON.stringify(schema)}\n            </Typography.Text>\n          </div>\n        </div>\n      );\n    }\n  } catch {\n    return (\n      <div css={{ marginLeft: theme.spacing.lg, marginTop: theme.spacing.md, width: '100%' }}>\n        <div css={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start' }}>\n          <Header title={<div css={{ color: theme.colors.grey600 }}>No schema available</div>} />\n        </div>\n      </div>\n    );\n  }\n};\n","import { Button, CopyIcon, NewWindowIcon, Typography } from '@databricks/design-system';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { getDatasetSourceUrl } from '../../../../utils/DatasetUtils';\nimport { CopyButton } from '../../../../../shared/building_blocks/CopyButton';\n\nexport interface DatasetLinkProps {\n  datasetWithTags: RunDatasetWithTags;\n  runTags: Record<string, { key: string; value: string }>;\n}\n\nexport const ExperimentViewDatasetLink = ({ datasetWithTags, runTags }: DatasetLinkProps) => {\n  const { dataset } = datasetWithTags;\n  if (dataset.sourceType === DatasetSourceTypes.HTTP || dataset.sourceType === DatasetSourceTypes.HUGGING_FACE) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <Button\n          type=\"primary\"\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_1\"\n          icon={<NewWindowIcon />}\n          href={url}\n          target=\"_blank\"\n        >\n          <FormattedMessage\n            defaultMessage=\"Open dataset\"\n            description=\"Text for the HTTP/HF location link in the experiment run dataset drawer\"\n          />\n        </Button>\n      );\n    }\n  }\n  if (dataset.sourceType === DatasetSourceTypes.S3) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <CopyButton\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_2\"\n          icon={<CopyIcon />}\n          copyText={url}\n        >\n          <FormattedMessage\n            defaultMessage=\"Copy S3 URI to clipboard\"\n            description=\"Text for the HTTP/HF location link in the experiment run dataset drawer\"\n          />\n        </CopyButton>\n      );\n    }\n  }\n  if (dataset.sourceType === DatasetSourceTypes.EXTERNAL) {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetlink.tsx_19_3\"\n        icon={<NewWindowIcon />}\n      >\n        <FormattedMessage\n          defaultMessage=\"Go to external location\"\n          description=\"Text for the external location link in the experiment run dataset drawer\"\n        />\n      </Button>\n    );\n  }\n  return null;\n};\n","import { Typography } from '@databricks/design-system';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewDatasetSourceTypeProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSourceType = ({ datasetWithTags }: ExperimentViewDatasetSourceTypeProps) => {\n  const { dataset } = datasetWithTags;\n\n  const sourceType = dataset.sourceType;\n\n  const getSourceTypeLabel = () => {\n    if (sourceType === DatasetSourceTypes.HTTP || sourceType === DatasetSourceTypes.EXTERNAL) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"HTTP\"\n          description=\"Experiment dataset drawer > source type > HTTP source type label\"\n        />\n      );\n    }\n    if (sourceType === DatasetSourceTypes.S3) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"S3\"\n          description=\"Experiment dataset drawer > source type > S3 source type label\"\n        />\n      );\n    }\n    if (sourceType === DatasetSourceTypes.HUGGING_FACE) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Hugging Face\"\n          description=\"Experiment dataset drawer > source type > Hugging Face source type label\"\n        />\n      );\n    }\n    return null;\n  };\n\n  const typeLabel = getSourceTypeLabel();\n\n  if (typeLabel) {\n    return (\n      <Typography.Hint>\n        <FormattedMessage\n          defaultMessage=\"Source type: {typeLabel}\"\n          description=\"Experiment dataset drawer > source type > label\"\n          values={{ typeLabel }}\n        />\n      </Typography.Hint>\n    );\n  }\n\n  return null;\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { DatasetSourceTypes, RunDatasetWithTags } from '../../../../types';\nimport { getDatasetSourceUrl } from '../../../../utils/DatasetUtils';\n\nexport interface ExperimentViewDatasetSourceProps {\n  datasetWithTags: RunDatasetWithTags;\n}\n\nexport const ExperimentViewDatasetSourceURL = ({ datasetWithTags }: ExperimentViewDatasetSourceProps) => {\n  const { dataset } = datasetWithTags;\n  const { theme } = useDesignSystemTheme();\n\n  const sourceType = dataset.sourceType;\n\n  if (\n    sourceType === DatasetSourceTypes.HTTP ||\n    sourceType === DatasetSourceTypes.EXTERNAL ||\n    sourceType === DatasetSourceTypes.HUGGING_FACE\n  ) {\n    const url = getDatasetSourceUrl(datasetWithTags);\n    if (url) {\n      return (\n        <div\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            fontSize: theme.typography.fontSizeSm,\n            color: theme.colors.textSecondary,\n            columnGap: theme.spacing.xs,\n          }}\n          title={url}\n        >\n          URL:{' '}\n          <Typography.Link\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetsourceurl.tsx_34\"\n            openInNewTab\n            href={url}\n            css={{ display: 'flex', overflow: 'hidden' }}\n          >\n            <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{url}</span>\n          </Typography.Link>\n        </div>\n      );\n    }\n  }\n  if (sourceType === DatasetSourceTypes.S3) {\n    try {\n      const { uri } = JSON.parse(dataset.source);\n      if (uri) {\n        return (\n          <Typography.Hint\n            title={uri}\n            css={{\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            S3 URI: {uri}\n          </Typography.Hint>\n        );\n      }\n    } catch {\n      return null;\n    }\n  }\n  return null;\n};\n","import { Typography } from '@databricks/design-system';\nimport { RunDatasetWithTags } from '../../../../types';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentViewDatasetDigest = ({ datasetWithTags }: { datasetWithTags: RunDatasetWithTags }) => {\n  const { dataset } = datasetWithTags;\n  return (\n    <Typography.Hint>\n      <FormattedMessage\n        defaultMessage=\"Digest: {digest}\"\n        description=\"Experiment dataset drawer > digest > label and value\"\n        values={{ digest: <code>{dataset.digest}</code> }}\n      />\n    </Typography.Hint>\n  );\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport {\n  Button,\n  Drawer,\n  Header,\n  Spacer,\n  TableIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { RunDatasetWithTags } from '../../../../types';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../constants';\nimport { ExperimentViewDatasetSchema } from './ExperimentViewDatasetSchema';\nimport { ExperimentViewDatasetLink } from './ExperimentViewDatasetLink';\nimport { Link } from '../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewDatasetWithContext } from './ExperimentViewDatasetWithContext';\nimport { RunColorPill } from '../RunColorPill';\nimport { ExperimentViewDatasetSourceType } from './ExperimentViewDatasetSourceType';\nimport { ExperimentViewDatasetSourceURL } from './ExperimentViewDatasetSourceURL';\nimport { ExperimentViewDatasetDigest } from './ExperimentViewDatasetDigest';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../../../redux-types';\nimport { useGetExperimentRunColor } from '../../hooks/useExperimentRunColor';\n\nexport type DatasetWithRunType = {\n  datasetWithTags: RunDatasetWithTags;\n  runData: {\n    experimentId?: string;\n    tags?: Record<string, { key: string; value: string }>;\n    runUuid: string;\n    runName?: string;\n    datasets: RunDatasetWithTags[];\n  };\n};\n\nexport interface DatasetsCellRendererProps {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  selectedDatasetWithRun: DatasetWithRunType;\n  setSelectedDatasetWithRun: (datasetWithRun: DatasetWithRunType) => void;\n}\n\nconst DRAWER_WITDH = '800px';\nconst MAX_PROFILE_LENGTH = 80;\n\nconst areDatasetsEqual = (datasetA: RunDatasetWithTags, datasetB: RunDatasetWithTags) => {\n  return datasetA.dataset.digest === datasetB.dataset.digest && datasetA.dataset.name === datasetB.dataset.name;\n};\n\nconst ExperimentViewDatasetDrawerImpl = ({\n  isOpen,\n  setIsOpen,\n  selectedDatasetWithRun,\n  setSelectedDatasetWithRun,\n}: DatasetsCellRendererProps): JSX.Element => {\n  const { theme } = useDesignSystemTheme();\n  const { datasetWithTags, runData } = selectedDatasetWithRun;\n  const contextTag = selectedDatasetWithRun\n    ? datasetWithTags?.tags?.find((tag) => tag.key === MLFLOW_RUN_DATASET_CONTEXT_TAG)\n    : undefined;\n  const fullProfile =\n    datasetWithTags.dataset.profile && datasetWithTags.dataset.profile !== 'null'\n      ? datasetWithTags.dataset.profile\n      : undefined;\n\n  const getRunColor = useGetExperimentRunColor();\n  const { experimentId = '', tags = {} } = runData;\n\n  return (\n    <Drawer.Root\n      open={isOpen}\n      onOpenChange={(open) => {\n        if (!open) {\n          setIsOpen(false);\n        }\n      }}\n    >\n      <Drawer.Content\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetdrawer.tsx_81\"\n        title={\n          <div css={{ display: 'flex', alignItems: 'center', height: '100%' }}>\n            <Typography.Title level={4} css={{ marginRight: theme.spacing.sm, marginBottom: 0 }}>\n              <FormattedMessage\n                defaultMessage=\"Data details for \"\n                description=\"Text for data details for the experiment run in the dataset drawer\"\n              />\n            </Typography.Title>\n            <Link to={Routes.getRunPageRoute(experimentId, runData.runUuid)} css={styles.runLink}>\n              <RunColorPill color={getRunColor(runData.runUuid)} />\n              <span css={styles.runName}>{runData.runName}</span>\n            </Link>\n          </div>\n        }\n        width={DRAWER_WITDH}\n        footer={<Spacer size=\"xs\" />}\n      >\n        <div\n          css={{\n            display: 'flex',\n            borderTop: `1px solid ${theme.colors.border}`,\n            height: '100%',\n            marginLeft: -theme.spacing.sm,\n          }}\n        >\n          {/* column for dataset selection */}\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '300px',\n              borderRight: `1px solid ${theme.colors.border}`,\n              height: '100%',\n            }}\n          >\n            <Typography.Text\n              color=\"secondary\"\n              css={{\n                marginBottom: theme.spacing.sm,\n                marginTop: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n              }}\n            >\n              {runData.datasets.length}{' '}\n              <FormattedMessage\n                defaultMessage=\"datasets used\"\n                description=\"Text for dataset count in the experiment run dataset drawer\"\n              />\n            </Typography.Text>\n            <div\n              css={{\n                height: '100%',\n                display: 'flex',\n                overflow: 'auto',\n              }}\n              onWheel={(e) => e.stopPropagation()}\n            >\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  overflow: 'visible',\n                  flex: 1,\n                }}\n              >\n                {runData.datasets.map((dataset) => (\n                  <Typography.Link\n                    componentId=\"mlflow.dataset_drawer.dataset_link\"\n                    aria-label={`${dataset.dataset.name} (${dataset.dataset.digest})`}\n                    key={`${dataset.dataset.name}-${dataset.dataset.digest}`}\n                    css={{\n                      display: 'flex',\n                      whiteSpace: 'nowrap',\n                      textDecoration: 'none',\n                      cursor: 'pointer',\n                      flexDirection: 'column',\n                      justifyContent: 'center',\n                      alignItems: 'flex-start',\n                      backgroundColor: areDatasetsEqual(dataset, datasetWithTags)\n                        ? theme.colors.actionTertiaryBackgroundPress\n                        : 'transparent',\n                      paddingBottom: theme.spacing.sm,\n                      paddingTop: theme.spacing.sm,\n                      paddingLeft: theme.spacing.sm,\n                      border: 0,\n                      borderTop: `1px solid ${theme.colors.border}`,\n                      '&:hover': {\n                        backgroundColor: theme.colors.actionTertiaryBackgroundHover,\n                      },\n                    }}\n                    onClick={() => {\n                      setSelectedDatasetWithRun({ datasetWithTags: dataset, runData: runData });\n                      setIsOpen(true);\n                    }}\n                  >\n                    <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink={false} />\n                  </Typography.Link>\n                ))}\n              </div>\n            </div>\n          </div>\n          {/* column for dataset details */}\n          <div\n            css={{\n              overflow: 'hidden',\n              paddingLeft: theme.spacing.md,\n              paddingTop: theme.spacing.md,\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n            }}\n          >\n            {/* dataset metadata */}\n            <div\n              css={{\n                display: 'flex',\n                gap: theme.spacing.sm,\n              }}\n            >\n              <div css={{ flex: '1' }}>\n                <Header\n                  title={\n                    <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                      <TableIcon css={{ marginRight: theme.spacing.xs }} />\n                      <LegacyTooltip title={datasetWithTags.dataset.name}>\n                        <Typography.Title ellipsis level={3} css={{ marginBottom: 0, maxWidth: 200 }}>\n                          {datasetWithTags.dataset.name}\n                        </Typography.Title>\n                      </LegacyTooltip>\n                      {contextTag && (\n                        <Tag\n                          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewdatasetdrawer.tsx_206\"\n                          css={{\n                            textTransform: 'capitalize',\n                            marginLeft: theme.spacing.xs,\n                            marginRight: theme.spacing.xs,\n                          }}\n                        >\n                          {contextTag.value}\n                        </Tag>\n                      )}\n                    </div>\n                  }\n                />\n                <Typography.Title\n                  level={4}\n                  color=\"secondary\"\n                  css={{ marginBottom: theme.spacing.xs, marginTop: theme.spacing.xs }}\n                  title={fullProfile}\n                >\n                  {datasetWithTags.dataset.profile && datasetWithTags.dataset.profile !== 'null' ? (\n                    datasetWithTags.dataset.profile.length > MAX_PROFILE_LENGTH ? (\n                      `${datasetWithTags.dataset.profile.substring(0, MAX_PROFILE_LENGTH)} ...`\n                    ) : (\n                      datasetWithTags.dataset.profile\n                    )\n                  ) : (\n                    <FormattedMessage\n                      defaultMessage=\"No profile available\"\n                      description=\"Text for no profile available in the experiment run dataset drawer\"\n                    />\n                  )}\n                </Typography.Title>\n              </div>\n              <ExperimentViewDatasetLink datasetWithTags={datasetWithTags} runTags={tags} />\n            </div>\n            <div css={{ flexShrink: 0, display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n              <ExperimentViewDatasetDigest datasetWithTags={datasetWithTags} />\n              <ExperimentViewDatasetSourceType datasetWithTags={datasetWithTags} />\n              <ExperimentViewDatasetSourceURL datasetWithTags={datasetWithTags} />\n            </div>\n            {/* dataset schema */}\n            <div\n              css={{\n                marginTop: theme.spacing.sm,\n                marginBottom: theme.spacing.xs,\n                borderTop: `1px solid ${theme.colors.border}`,\n                opacity: 0.5,\n              }}\n            />\n            <ExperimentViewDatasetSchema datasetWithTags={datasetWithTags} />\n          </div>\n        </div>\n      </Drawer.Content>\n    </Drawer.Root>\n  );\n};\n\n// Memoize the component so it rerenders only when props change directly, preventing\n// rerenders caused e.g. by the overarching context provider.\nexport const ExperimentViewDatasetDrawer = React.memo(ExperimentViewDatasetDrawerImpl);\n\nconst styles = {\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    fontSize: '13px',\n  },\n};\n"],"names":["serializeRequestBody","payload","undefined","FormData","Blob","JSON","stringify","loggedModelsDataRequest","async","url","method","body","headers","getDefaultHeaders","document","cookie","response","fetch","ok","predefinedError","matchPredefinedError","message","json","isUCModelName","name","Boolean","match","datasetSummariesEqual","summary1","summary2","digest","context","getDatasetSourceUrl","datasetWithTags","dataset","sourceType","DatasetSourceTypes","HTTP","parse","source","S3","uri","HUGGING_FACE","path","_path","_g","_path2","_path3","_defs","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","SvgRegisteredModelGreyOk","title","titleId","props","svgRef","width","height","viewBox","fill","xmlns","ref","id","clipPath","style","maskType","maskUnits","x","y","d","mask","fillRule","clipRule","ForwardRef","getUCModelUrl","version","replace","getWMRModelUrl","createMLflowRoutePath","useExperimentLoggedModelRegisteredVersions","loggedModels","checkAcl","modelVersions","ucModels","useMemo","flatMap","loggedModel","_getTagValueForModel","modelVersionsInTag","_loggedModel$info","_loggedModel$info$tag","_loggedModel$info$tag2","tagValue","info","tags","find","tag","key","value","getTagValueForModel","map","registeredModelEntry","getUrlFn","displayedName","link","status","sourceLoggedModel","filter","model","aclResults","isLoading","useModelVersionsAclCheck","queries","queryResults","useQueries","some","result","modelVersion","isUCModel","hasAccess","_aclResults","_ref","styles","ExperimentViewDatasetWithContext","displayTextAsLink","className","_tags$find","theme","useDesignSystemTheme","contextTag","MLFLOW_RUN_DATASET_CONTEXT_TAG","_jsxs","css","_css","display","flexDirection","alignItems","marginTop","spacing","xs","marginBottom","children","_jsx","TableIcon","marginRight","color","colors","textSecondary","Typography","Text","size","Tag","componentId","textTransform","marginLeft","icons","rotateLeft","UndoIcon","rotateRight","RedoIcon","zoomIn","ZoomInIcon","zoomOut","ZoomOutIcon","close","CloseIcon","left","ArrowLeftIcon","right","ArrowRightIcon","ImagePreviewGroup","visible","onVisibleChange","getImagePreviewPopupContainer","useContext","MLflowImagePreviewContainer","RcImage","PreviewGroup","preview","getContainer","v","MIN_GRID_IMAGE_SIZE","ImagePlot","imageUrl","compressedImageUrl","imageSize","maxImageSize","previewVisible","setPreviewVisible","useState","imageLoading","setImageLoading","useEffect","img","window","Image","onload","onerror","src","backgroundColor","backgroundSecondary","aspectRatio","justifyContent","Spinner","maxWidth","maxHeight","cursor","ImagePlotWithHistory","metadataByStep","step","runUuid","textAlign","padding","md","ImageIcon","FormattedMessage","defaultMessage","getArtifactLocationUrl","filepath","compressed_filepath","_ref2","_ref3","_ref4","EmptyImageGridPlot","Title","level","HIGH_RESOLUTION_MEDIA_QUERY","RunColorPill","hidden","onChangeColor","colorValue","setColorValue","onChangeColorDebounced","debounce","boxSizing","borderRadius","flexShrink","border","background","position","opacity","visuallyHidden","disabled","type","onChange","target","list","COLORS_PALETTE_DATALIST_ID","Stages","NONE","STAGING","PRODUCTION","ARCHIVED","ACTIVE_STAGES","StageLabels","StageTagComponents","ActivityTypes","ModelVersionStatus","READY","DefaultModelVersionStatusMessages","modelVersionStatusIconTooltips","ModelVersionStatusIcons","ReadyIcon","MODEL_VERSION_STATUS_POLL_INTERVAL","REGISTERED_MODELS_PER_PAGE_COMPACT","MODEL_VERSIONS_PER_PAGE_COMPACT","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","REGISTERED_MODELS_SEARCH_NAME_FIELD","REGISTERED_MODELS_SEARCH_TIMESTAMP_FIELD","MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD","AntdTableSortOrder","ASC","DESC","archiveExistingVersionToolTipText","currentStage","values","mlflowAliasesLearnMoreLink","ExperimentViewDatasetSchemaTable","schema","filteredSchema","row","_","hasFilter","toLowerCase","includes","Table","scrollable","TableRow","isHeader","TableHeader","onWheel","stopPropagation","TableCell","idx","_ref5","_ref6","_ref7","_ref8","_ref9","ExperimentViewDatasetSchema","setFilter","Header","grey600","sm","form","TableFilterInput","placeholder","onClear","containerProps","overflow","mlflow_colspec","fontSize","lg","ExperimentViewDatasetLink","runTags","Button","icon","NewWindowIcon","href","CopyButton","CopyIcon","copyText","EXTERNAL","ExperimentViewDatasetSourceType","typeLabel","Hint","ExperimentViewDatasetSourceURL","whiteSpace","typography","fontSizeSm","columnGap","Link","openInNewTab","ExperimentViewDatasetDigest","ExperimentViewDatasetDrawerImpl","isOpen","setIsOpen","selectedDatasetWithRun","setSelectedDatasetWithRun","_datasetWithTags$tags","runData","fullProfile","profile","getRunColor","useGetExperimentRunColor","experimentId","Drawer","Root","open","onOpenChange","Content","to","Routes","getRunPageRoute","runLink","runName","footer","Spacer","borderTop","borderRight","paddingLeft","datasets","textDecoration","datasetA","datasetB","actionTertiaryBackgroundPress","paddingBottom","paddingTop","actionTertiaryBackgroundHover","onClick","areDatasetsEqual","gap","LegacyTooltip","ellipsis","substring","ExperimentViewDatasetDrawer","React","textOverflow"],"sourceRoot":""}