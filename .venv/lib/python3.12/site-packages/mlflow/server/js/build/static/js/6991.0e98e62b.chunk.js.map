{"version":3,"file":"static/js/6991.0e98e62b.chunk.js","mappings":"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","sources":["common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","shared/building_blocks/CopyButton.tsx","common/components/ScrollablePageWrapper.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { Control, useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper\n      // Subtract header height\n      css={{ height: 'calc(100% - 60px)' }}\n      className={className}\n    >\n      {children}\n    </PageWrapper>\n  );\n};\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["_ref","name","styles","getDropdownMenu","allAvailableTags","menu","intl","useIntl","theme","useDesignSystemTheme","searchValue","props","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","React","flattenOptions","data","value","disabled","style","color","colors","actionTertiaryTextDefault","actionDisabledText","children","_jsx","LegacyTooltip","title","undefined","formatMessage","id","defaultMessage","placement","_jsxs","css","PlusIcon","_css","marginRight","spacing","sm","tagKey","key","groupOption","DropdownMenu","_ref2","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","useState","selectRef","useRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","visible","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","map","tag","Option","getTagsMap","tags","Map","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","useCallback","editedEntity","current","reset","saveTags","async","setIsLoading","Array","from","values","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","Modal","componentId","destroyOnClose","FormattedMessage","onCancel","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","onClick","UnsavedTagPopoverTrigger","onSaveTask","loading","type","onSubmit","handleSubmit","trim","newEntries","set","display","alignItems","gap","md","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","xs","flexWrap","marginTop","KeyValueTag","isClosable","onClose","handleTagDelete","currentFinalTags","delete","_ref3","fullTagDisplay","truncate","length","shownText","Popover","Root","Trigger","asChild","Content","align","Typography","Paragraph","Close","marginLeft","Arrow","CopyButton","copyText","showLabel","buttonProps","showTooltip","setShowTooltip","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","ScrollablePageWrapper","className","PageWrapper","KeyValueTagFullViewModal","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundColor","backgroundPrimary","whiteSpace","wordBreak","tagValue","icon","CopyIcon","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","enableFullViewModal","charLimit","maxWidth","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","closable","Text","bold"],"sourceRoot":""}