{"version":3,"file":"static/js/8722.b1d1065a.chunk.js","mappings":"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","sources":["../node_modules/invariant/browser.js","common/utils/MarkdownUtils.ts","common/components/error-boundaries/SectionErrorBoundary.tsx","shared/building_blocks/PreviewBadge.tsx","shared/building_blocks/CopyButton.tsx","common/components/RequestStateWrapper.tsx","experiment-tracking/hooks/useExperimentQuery.tsx","../node_modules/use-debounce/src/useDebouncedCallback.ts","../node_modules/use-debounce/src/useDebounce.ts","../node_modules/@tanstack/query-core/src/queriesObserver.ts","../node_modules/@tanstack/react-query/src/useQueries.ts","shared/building_blocks/PageHeader.tsx","shared/web-shared/utils/coerceToEnum.ts","shared/web-shared/utils/unified-details/useResponsiveContainer.ts","shared/web-shared/utils/unified-details/index.tsx","experiment-tracking/hooks/logged-models/useRelatedRunsDataForLoggedModels.tsx","common/hooks/useArrayMemo.ts","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelPageWrapper.tsx","experiment-tracking/components/experiment-logged-models/hooks/useValidateLoggedModelSignature.ts","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsRegisterButton.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsHeader.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelDeleteModal.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsNav.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDescription.tsx","experiment-tracking/hooks/logged-models/usePatchLoggedModelsTags.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsTableRunCellRenderer.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsMetricsTable.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsRunsTable.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelAllDatasetsList.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsModelVersionsList.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelDetailsMetadataV2.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsOverview.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsArtifacts.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsTracesIntroductionText.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelDetailsTraces.tsx","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelDetailsPage.tsx","common/components/Spinner.tsx"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { useCallback } from 'react';\nimport sanitizeHtml from 'sanitize-html';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'show... Remove this comment to see the full error message\nimport { Converter } from 'showdown';\n\n// Use Github-like Markdown (i.e. support for tasklists, strikethrough,\n// simple line breaks, code blocks, emojis)\nconst DEFAULT_MARKDOWN_FLAVOR = 'github';\n\nlet _converter: Converter | null = null;\n\nexport const getMarkdownConverter = () => {\n  // Reuse the same converter instance if available\n  if (_converter) {\n    return _converter;\n  }\n  _converter = new Converter();\n  _converter.setFlavor(DEFAULT_MARKDOWN_FLAVOR);\n  return _converter;\n};\n\n// Options for HTML sanitizer.\n// See https://www.npmjs.com/package/sanitize-html#what-are-the-default-options for usage.\n// These options were chosen to be similar to Github's allowlist but simpler (i.e. we don't\n// do any transforms of the contained HTML and we disallow script entirely instead of\n// removing contents).\nconst sanitizerOptions = {\n  allowedTags: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'h7',\n    'h8',\n    'blockquote',\n    'p',\n    'a',\n    'ul',\n    'ol',\n    'nl',\n    'li',\n    'ins',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'strike',\n    'code',\n    'hr',\n    'br',\n    'div',\n    'table',\n    'thead',\n    'tbody',\n    'tr',\n    'th',\n    'td',\n    'pre',\n    'del',\n    'sup',\n    'sub',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'samp',\n    'var',\n    'hr',\n    'rt',\n    'rp',\n    'summary',\n    'iframe',\n    'img',\n    'caption',\n    'figure',\n  ],\n  allowedAttributes: {\n    a: ['href', 'name', 'target'],\n    img: ['src', 'longdesc'],\n    div: ['itemscope', 'itemtype'],\n  },\n};\n\nexport const sanitizeConvertedHtml = (dirtyHtml: any) => {\n  return sanitizeHtml(dirtyHtml, sanitizerOptions);\n};\n\nexport const forceAnchorTagNewTab = (html: any) => {\n  return html.replace(new RegExp('<a', 'g'), '<a target=\"_blank\"');\n};\n\nexport const useMarkdownConverter = () =>\n  useCallback((markdown?: string) => {\n    const converter = getMarkdownConverter();\n    const html = converter.makeHtml(markdown);\n    return sanitizeConvertedHtml(html);\n  }, []);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\nimport { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","import { gql, QueryHookOptions } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables } from '../../graphql/__generated__/graphql';\nimport { isArray } from 'lodash';\nimport { NotFoundError } from '@databricks/web-shared/errors';\n\nconst GET_EXPERIMENT_QUERY = gql`\n  query MlflowGetExperimentQuery($input: MlflowGetExperimentInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetExperiment(input: $input) {\n      apiError {\n        code\n        message\n      }\n      experiment {\n        artifactLocation\n        creationTime\n        experimentId\n        lastUpdateTime\n        lifecycleStage\n        name\n        tags {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetExperimentQueryResultExperiment = NonNullable<\n  MlflowGetExperimentQuery['mlflowGetExperiment']\n>['experiment'];\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const useGetExperimentQuery = ({\n  experimentId,\n  options = {},\n}: {\n  experimentId?: string;\n  options?: QueryHookOptions<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>;\n}) => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>(GET_EXPERIMENT_QUERY, {\n    variables: {\n      input: {\n        experimentId,\n      },\n    },\n    skip: !experimentId,\n    ...options,\n  });\n\n  // Extract the single experiment entity from the response\n  const experimentEntity: UseGetExperimentQueryResultExperiment | undefined = data?.mlflowGetExperiment?.experiment;\n\n  const getApiError = () => {\n    return data?.mlflowGetExperiment?.apiError;\n  };\n\n  return {\n    loading,\n    data: experimentEntity,\n    refetch,\n    apolloError: apolloError,\n    apiError: getApiError(),\n  } as const;\n};\n","import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(func: T, wait?: number, options?: Options): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const activeValue = useRef(value);\n  const [, forceUpdate] = useState({});\n  const debounced = useDebouncedCallback(\n    useCallback(\n      (value: T) => {\n        activeValue.current = value;\n        forceUpdate({});\n      },\n      [forceUpdate]\n    ),\n    delay,\n    options\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [activeValue.current as T, debounced];\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const matchingObserversSet = new Set(\n      matchingObservers.map((match) => match.observer),\n    )\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) => !matchingObserversSet.has(prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import 'client-only'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryFunction } from '@tanstack/query-core'\nimport { notifyManager, QueriesObserver } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  shouldSuspend,\n  fetchOptimistic,\n  willFetch,\n} from './suspense'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureStaleTime(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result, isRestoring),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const options = defaultedQueries[index]\n        const queryObserver = observer.getObservers()[index]\n\n        if (options && queryObserver) {\n          if (shouldSuspend(options, result, isRestoring)) {\n            return fetchOptimistic(options, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(options, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const observerQueries = observer.getQueries()\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n        query: observerQueries[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return optimisticResult as QueriesResults<T>\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-testid={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-testid=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","export function coerceToEnum<T extends Record<string, string>, K extends keyof T, V extends T[K] | undefined>(\n  enumObj: T,\n  value: any,\n  fallback: V,\n): V | T[keyof T] {\n  if (value === undefined || value === null || typeof value !== 'string') {\n    return fallback;\n  }\n  for (const v in enumObj) {\n    if (enumObj[v] === value) return enumObj[v];\n  }\n  return fallback;\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from 'react';\n\ninterface SizeMap {\n  [key: string]: number;\n}\n\nfunction useResponsiveContainer(ref: RefObject<HTMLElement>, sizeMap: SizeMap): string | null {\n  const [matchedSize, setMatchedSize] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (ref.current && sizeMap) {\n      const handleResize = () => {\n        if (!ref.current) {\n          return;\n        }\n        const elementWidth = ref.current.offsetWidth;\n        const matchedKey = Object.keys(sizeMap)\n          .filter((key) => sizeMap[key] >= elementWidth)\n          .sort((a, b) => sizeMap[a] - sizeMap[b])[0];\n\n        setMatchedSize(matchedKey);\n      };\n\n      handleResize();\n\n      const resizeObserver = new ResizeObserver(handleResize);\n      resizeObserver.observe(ref.current);\n\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, [ref, sizeMap]);\n\n  return matchedSize;\n}\n\nexport default useResponsiveContainer;\n","import { GenericSkeleton, ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { ReactNode } from 'react';\nimport { useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport useResponsiveContainer from './useResponsiveContainer';\n\nexport interface AsideSectionProps {\n  id: string;\n  title?: ReactNode;\n  content: ReactNode;\n  isTitleLoading?: boolean;\n}\n\nexport type MaybeAsideSection = AsideSectionProps | null;\nexport type AsideSections = Array<MaybeAsideSection>;\n\nconst SIDEBAR_WIDTHS = {\n  sm: 316,\n  lg: 480,\n} as const;\nconst VERTICAL_MARGIN_PX = 16;\nconst DEFAULT_MAX_WIDTH = 450;\n\nexport const OverviewLayout = ({\n  isLoading,\n  asideSections,\n  children,\n  isTabLayout = true,\n  sidebarSize = 'sm',\n  verticalStackOrder,\n}: {\n  isLoading?: boolean;\n  asideSections: AsideSections;\n  children: ReactNode;\n  isTabLayout?: boolean;\n  sidebarSize?: 'sm' | 'lg';\n  verticalStackOrder?: 'main-first' | 'aside-first';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const stackVertically = useResponsiveContainer(containerRef, { small: theme.responsive.breakpoints.lg }) === 'small';\n\n  // Determine vertical stack order, i.e. should the main content be on top or bottom\n  const verticalDisplayPrimaryContentOnTop = verticalStackOrder === 'main-first';\n\n  const totalSidebarWidth = SIDEBAR_WIDTHS[sidebarSize];\n  const innerSidebarWidth = totalSidebarWidth - VERTICAL_MARGIN_PX;\n\n  const secondaryStackedStyles = stackVertically\n    ? verticalDisplayPrimaryContentOnTop\n      ? { width: '100%' }\n      : { borderBottom: `1px solid ${theme.colors.border}`, width: '100%' }\n    : verticalDisplayPrimaryContentOnTop\n    ? {\n        width: innerSidebarWidth,\n      }\n    : {\n        paddingBottom: theme.spacing.sm,\n        width: innerSidebarWidth,\n      };\n\n  return (\n    <div\n      data-testid=\"entity-overview-container\"\n      ref={containerRef}\n      css={{\n        display: 'flex',\n        flexDirection: stackVertically ? (verticalDisplayPrimaryContentOnTop ? 'column' : 'column-reverse') : 'row',\n        gap: theme.spacing.lg,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexGrow: 1,\n          flexDirection: 'column',\n          gap: theme.spacing.md,\n          width: stackVertically ? '100%' : `calc(100% - ${totalSidebarWidth}px)`,\n        }}\n      >\n        {isLoading ? <GenericSkeleton /> : children}\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          ...(isTabLayout && { marginTop: -theme.spacing.md }), // remove the gap between tab list and sidebar content\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.lg,\n            ...secondaryStackedStyles,\n          }}\n        >\n          {isLoading && <GenericSkeleton />}\n          {!isLoading && <SidebarWrapper secondarySections={asideSections} />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SidebarWrapper = ({ secondarySections }: { secondarySections: AsideSections }) => {\n  return (\n    <div>\n      {secondarySections\n        .filter((section) => section !== null)\n        .filter((section) => section?.content !== null)\n        .map(({ title, isTitleLoading, content, id }, index) => (\n          <AsideSection title={title} isTitleLoading={isTitleLoading} content={content} key={id} index={index} />\n        ))}\n    </div>\n  );\n};\n\nexport const AsideSectionTitle = ({ children }: { children: ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Typography.Title\n      level={4}\n      style={{\n        whiteSpace: 'nowrap',\n        marginRight: theme.spacing.lg,\n        marginTop: 0,\n      }}\n    >\n      {children}\n    </Typography.Title>\n  );\n};\n\nconst AsideSection = ({\n  title,\n  content,\n  index,\n  isTitleLoading = false,\n}: Omit<AsideSectionProps, 'id'> & {\n  index: number;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const titleComponent = isTitleLoading ? (\n    <ParagraphSkeleton\n      label={\n        <FormattedMessage\n          defaultMessage=\"Section title loading\"\n          description=\"Loading skeleton label for overview page section title in Catalog Explorer\"\n        />\n      }\n    />\n  ) : title ? (\n    <AsideSectionTitle>{title}</AsideSectionTitle>\n  ) : null;\n\n  const compactStyles = { padding: `${theme.spacing.md}px 0 ${theme.spacing.md}px 0` };\n\n  return (\n    <div\n      css={{\n        ...compactStyles,\n        ...(index === 0 ? {} : { borderTop: `1px solid ${theme.colors.border}` }),\n      }}\n    >\n      {titleComponent}\n      {content}\n    </div>\n  );\n};\n\nexport const KeyValueProperty = ({\n  keyValue,\n  value,\n  maxWidth,\n}: {\n  keyValue: string;\n  value: React.ReactNode;\n  maxWidth?: number | string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        '&:has(+ div)': {\n          marginBottom: theme.spacing.xs,\n        },\n        maxWidth: maxWidth ?? DEFAULT_MAX_WIDTH,\n        wordBreak: 'break-word',\n        lineHeight: theme.typography.lineHeightLg,\n      }}\n    >\n      <div\n        css={{\n          color: theme.colors.textSecondary,\n          flex: 0.5,\n          alignSelf: 'start',\n        }}\n      >\n        {keyValue}\n      </div>\n      <div\n        css={{\n          flex: 1,\n          alignSelf: 'start',\n          overflow: 'hidden',\n        }}\n      >\n        {value}\n      </div>\n    </div>\n  );\n};\n\nexport const NoneCell = () => {\n  return (\n    <Typography.Text color=\"secondary\">\n      <FormattedMessage defaultMessage=\"None\" description=\"Cell value when there's no content\" />\n    </Typography.Text>\n  );\n};\n","import type { LoggedModelProto, RunEntity } from '../../types';\nimport { useEffect, useMemo } from 'react';\nimport { compact, sortBy, uniq } from 'lodash';\nimport { QueryFunctionContext, useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { useArrayMemo } from '../../../common/hooks/useArrayMemo';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS', { runUuid: string }];\n\nconst getQueryKey = (runUuid: string): UseRegisteredModelRelatedRunNamesQueryKey => [\n  'USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS',\n  { runUuid },\n];\n\nconst queryFn = async ({\n  queryKey: [, { runUuid }],\n}: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<RunEntity | null> => {\n  try {\n    const data = await MlflowService.getRun({ run_id: runUuid });\n    return data?.run;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Hook used to fetch necessary run data based on metadata found in logged models\n */\nexport const useRelatedRunsDataForLoggedModels = ({ loggedModels = [] }: { loggedModels?: LoggedModelProto[] }) => {\n  const runUuids = useMemo(() => {\n    // Extract all run ids found in metrics and source run ids\n    const allMetricRunUuids = compact(\n      loggedModels?.flatMap((loggedModel) => loggedModel?.data?.metrics?.map((metric) => metric.run_id)),\n    );\n    const allSourceRunUuids = compact(loggedModels?.map((loggedModel) => loggedModel?.info?.source_run_id));\n    const distinctRunUuids = sortBy(uniq([...allMetricRunUuids, ...allSourceRunUuids]));\n\n    return distinctRunUuids;\n  }, [loggedModels]);\n\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: getQueryKey(runUuid),\n      queryFn,\n      cacheTime: Infinity,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      retry: false,\n    })),\n  });\n\n  const loading = queryResults.some(({ isLoading }) => isLoading);\n  const error = queryResults.find(({ error }) => error)?.error as Error | undefined;\n\n  const memoizedQueryResults = useArrayMemo(queryResults.map(({ data }) => data));\n\n  const data = useMemo(\n    () => memoizedQueryResults.map((data) => data).filter(Boolean) as RunEntity[],\n    [memoizedQueryResults],\n  );\n\n  return {\n    data,\n    loading,\n    error,\n  };\n};\n","import { useRef } from 'react';\n\n/**\n * A custom hook that memoizes an array based on the reference of its elements, not the array itself.\n */\nexport function useArrayMemo<T>(array: T[]) {\n  // This holds reference to previous value\n  const ref = useRef<T[]>();\n  // Check if each element of the old and new array match\n  const areArraysConsideredTheSame =\n    ref.current && array.length === ref.current.length\n      ? array.every((element, i) => {\n          return element === ref.current?.[i];\n        })\n      : // Initially there's no old array defined/stored, so set to false\n        false;\n\n  if (!areArraysConsideredTheSame) {\n    ref.current = array;\n  }\n\n  return areArraysConsideredTheSame && ref.current ? ref.current : array;\n}\n","import { UserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { QueryClient, QueryClientProvider } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\n/**\n * Wrapper for all experiment logged model pages.\n * Provides error boundaries and user action error handling.\n */\nexport const ExperimentLoggedModelPageWrapper = ({\n  children,\n  resetKey,\n}: {\n  children: React.ReactNode;\n  resetKey?: unknown;\n}) => {\n  return (\n    <ErrorBoundary FallbackComponent={PageFallback} resetKeys={[resetKey]}>\n      <UserActionErrorHandler>{children}</UserActionErrorHandler>\n    </ErrorBoundary>\n  );\n};\n","import { useCallback } from 'react';\nimport { getArtifactBlob, getLoggedModelArtifactLocationUrl } from '../../../../common/utils/ArtifactUtils';\nimport { MLMODEL_FILE_NAME } from '../../../constants';\nimport type { LoggedModelProto } from '../../../types';\n\nconst lazyJsYaml = () => import('js-yaml');\n\nexport const useValidateLoggedModelSignature = (loggedModel?: LoggedModelProto | null) =>\n  useCallback(async () => {\n    if (!loggedModel?.info?.model_id || !loggedModel?.info?.artifact_uri) {\n      return true;\n    }\n\n    const artifactLocation = getLoggedModelArtifactLocationUrl(MLMODEL_FILE_NAME, loggedModel.info.model_id);\n    const blob = await getArtifactBlob(artifactLocation);\n\n    const yamlContent = (await lazyJsYaml()).load(await blob.text());\n\n    const isValid = yamlContent?.signature?.inputs !== undefined && yamlContent?.signature?.outputs !== undefined;\n\n    return isValid;\n  }, [loggedModel]);\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { LoggedModelProto } from '../../types';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { useCallback } from 'react';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '../../../shared/building_blocks/CopyButton';\nimport { CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useValidateLoggedModelSignature } from './hooks/useValidateLoggedModelSignature';\nimport Utils from '../../../common/utils/Utils';\n\nconst RegisterLoggedModelInUCCodeSnippet = ({ modelId }: { modelId: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const code = `import mlflow\n\nmlflow.set_registry_uri(\"databricks-uc\")\n\nmodel_uri = \"models:/${modelId}\"\nmodel_name = \"main.default.my_model\"\n\nmlflow.register_model(model_uri=model_uri, name=model_name)\n`;\n\n  return (\n    <div>\n      <Typography.Text>\n        <FormattedMessage\n          defaultMessage=\"In order to register model in Unity Catalog, copy and run the following code in the notebook:\"\n          description=\"Instruction to register model in Unity Catalog on the logged model details page\"\n        />\n      </Typography.Text>\n      <div css={{ position: 'relative' }}>\n        <CopyButton\n          css={{ zIndex: 1, position: 'absolute', top: theme.spacing.sm, right: theme.spacing.sm }}\n          showLabel={false}\n          copyText={code}\n          icon={<CopyIcon />}\n        />\n        <CodeSnippet\n          showLineNumbers\n          style={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n            marginTop: theme.spacing.md,\n            marginBottom: theme.spacing.md,\n          }}\n          language=\"python\"\n        >\n          {code}\n        </CodeSnippet>\n      </div>\n    </div>\n  );\n};\n\nexport const ExperimentLoggedModelDetailsRegisterButton = ({\n  loggedModel,\n  onSuccess,\n}: {\n  loggedModel?: LoggedModelProto | null;\n  onSuccess?: () => void;\n}) => {\n  const intl = useIntl();\n  const handleSuccess = useCallback(\n    (data?: { value: { status?: string } }) => {\n      onSuccess?.();\n      const successTitle = intl.formatMessage({\n        defaultMessage: 'Model registered successfully',\n        description: 'Notification title for model registration succeeded on the logged model details page',\n      });\n      Utils.displayGlobalInfoNotification(`${successTitle} ${data?.value?.status ?? ''}`);\n    },\n    [intl, onSuccess],\n  );\n\n  const handleError = useCallback(\n    (error?: Error | ErrorWrapper) => {\n      const errorTitle = intl.formatMessage({\n        defaultMessage: 'Error registering model',\n        description: 'Notification title for model registration failure on the logged model details page',\n      });\n      const message = (error instanceof ErrorWrapper ? error.getMessageField() : error?.message) ?? String(error);\n      Utils.displayGlobalErrorNotification(`${errorTitle} ${message}`);\n    },\n    [intl],\n  );\n\n  /**\n   * Function that validates that the model file is valid to be registered in UC (contains signature inputs and outputs),\n   * passed to the RegisterModel component.\n   */\n  const modelFileValidationFn = useValidateLoggedModelSignature(loggedModel);\n\n  if (!loggedModel?.info?.artifact_uri || !loggedModel.info.model_id) {\n    return null;\n  }\n\n  return (\n    <RegisterModel\n      modelPath={loggedModel.info.artifact_uri}\n      modelRelativePath=\"\"\n      disabled={false}\n      loggedModelId={loggedModel.info.model_id}\n      buttonType=\"primary\"\n      showButton\n      onRegisterSuccess={handleSuccess}\n      onRegisterFailure={handleError}\n    />\n  );\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { Link, useNavigate } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport {\n  Button,\n  DropdownMenu,\n  GenericSkeleton,\n  ModelsIcon,\n  OverflowIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { UseGetExperimentQueryResultExperiment } from '../../hooks/useExperimentQuery';\nimport type { LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelDetailsRegisterButton } from './ExperimentLoggedModelDetailsRegisterButton';\nimport { ExperimentPageTabName } from '../../constants';\nimport { useExperimentLoggedModelDeleteModal } from './hooks/useExperimentLoggedModelDeleteModal';\n\nexport const ExperimentLoggedModelDetailsHeader = ({\n  experimentId,\n  experiment,\n  loading = false,\n  loggedModel,\n  onSuccess,\n}: {\n  experimentId: string;\n  experiment?: UseGetExperimentQueryResultExperiment;\n  loading?: boolean;\n  loggedModel?: LoggedModelProto | null;\n  onSuccess?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const modelDisplayName = loggedModel?.info?.name;\n  const navigate = useNavigate();\n  const intl = useIntl();\n\n  const { modalElement: DeleteModalElement, openModal } = useExperimentLoggedModelDeleteModal({\n    loggedModel,\n    onSuccess: () => {\n      navigate(Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models));\n    },\n  });\n\n  const getExperimentName = () => {\n    if (experiment && 'name' in experiment) {\n      return experiment?.name;\n    }\n    return experimentId;\n  };\n\n  const breadcrumbs = [\n    // eslint-disable-next-line react/jsx-key\n    <Link to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models)}>\n      {getExperimentName()}\n    </Link>,\n    // eslint-disable-next-line react/jsx-key\n    <Link to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models)}>\n      <FormattedMessage\n        defaultMessage=\"Models\"\n        description=\"Breadcrumb for models tab of experiments page on the logged model details page\"\n      />\n    </Link>,\n  ];\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      {loading ? (\n        <ExperimentLoggedModelDetailsHeaderSkeleton />\n      ) : (\n        <PageHeader\n          title={\n            <>\n              <ExperimentLoggedModelDetailsHeaderIcon />\n              <>{modelDisplayName}</>\n            </>\n          }\n          dangerouslyAppendEmotionCSS={{ h2: { display: 'flex', gap: theme.spacing.sm }, wordBreak: 'break-word' }}\n          breadcrumbs={breadcrumbs}\n        >\n          <DropdownMenu.Root>\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"mlflow.logged_model.details.more_actions\"\n                icon={<OverflowIcon />}\n                aria-label={intl.formatMessage({\n                  defaultMessage: 'More actions',\n                  description: 'A label for the dropdown menu trigger on the logged model details page',\n                })}\n              />\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content align=\"end\">\n              <DropdownMenu.Item componentId=\"mlflow.logged_model.details.delete_button\" onClick={openModal}>\n                <FormattedMessage defaultMessage=\"Delete\" description=\"Delete action for logged model\" />\n              </DropdownMenu.Item>\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n          <ExperimentLoggedModelDetailsRegisterButton loggedModel={loggedModel} onSuccess={onSuccess} />\n        </PageHeader>\n      )}\n      {DeleteModalElement}\n    </div>\n  );\n};\nconst ExperimentLoggedModelDetailsHeaderIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme.colors.tagDefault,\n        width: theme.general.heightSm,\n        height: theme.general.heightSm,\n        borderRadius: theme.legacyBorders.borderRadiusMd,\n      }}\n    >\n      <ModelsIcon css={{ color: theme.colors.textSecondary }} />\n    </div>\n  );\n};\n\nconst ExperimentLoggedModelDetailsHeaderSkeleton = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ height: 2 * theme.general.heightSm, marginBottom: theme.spacing.sm }}>\n      <div css={{ height: theme.spacing.lg }}>\n        <GenericSkeleton css={{ width: 100, height: theme.spacing.md }} loading />\n      </div>\n      <div css={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div css={{ display: 'flex', gap: theme.spacing.sm, marginTop: theme.spacing.xs * 0.5 }}>\n          <GenericSkeleton css={{ width: theme.general.heightSm, height: theme.general.heightSm }} loading />\n          <GenericSkeleton css={{ width: 160, height: theme.general.heightSm }} loading />\n        </div>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <GenericSkeleton css={{ width: 100, height: theme.general.heightSm }} loading />\n          <GenericSkeleton css={{ width: 60, height: theme.general.heightSm }} loading />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { Alert, Modal, Spacer } from '@databricks/design-system';\nimport { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { loggedModelsDataRequest } from '../../../hooks/logged-models/request.utils';\nimport { LoggedModelProto } from '../../../types';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nexport const useExperimentLoggedModelDeleteModal = ({\n  loggedModel,\n  onSuccess,\n}: {\n  loggedModel?: LoggedModelProto | null;\n  onSuccess?: () => void | Promise<any>;\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const mutation = useMutation<\n    unknown,\n    Error,\n    {\n      loggedModelId: string;\n    }\n  >({\n    mutationFn: async ({ loggedModelId }) => {\n      await loggedModelsDataRequest(getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}`), 'DELETE');\n    },\n  });\n\n  const { mutate, isLoading, reset: resetMutation } = mutation;\n\n  const modalElement = (\n    <Modal\n      componentId=\"mlflow.logged_model.details.delete_modal\"\n      visible={open}\n      onCancel={() => setOpen(false)}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Delete logged model\"\n          description=\"A header of the modal used for deleting logged models\"\n        />\n      }\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"A confirmation label of the modal used for deleting logged models\"\n        />\n      }\n      okButtonProps={{ danger: true, loading: isLoading }}\n      onOk={async () => {\n        if (!loggedModel?.info?.model_id) {\n          setOpen(false);\n          return;\n        }\n        mutate(\n          {\n            loggedModelId: loggedModel.info.model_id,\n          },\n          {\n            onSuccess: () => {\n              onSuccess?.();\n              setOpen(false);\n            },\n          },\n        );\n      }}\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"A cancel label for the modal used for deleting logged models\"\n        />\n      }\n    >\n      {mutation.error?.message && (\n        <>\n          <Alert\n            componentId=\"mlflow.logged_model.details.delete_modal.error\"\n            closable={false}\n            message={mutation.error.message}\n            type=\"error\"\n          />\n          <Spacer />\n        </>\n      )}\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete this logged model?\"\n        description=\"A content of the delete logged model confirmation modal\"\n      />\n    </Modal>\n  );\n\n  const openModal = useCallback(() => {\n    resetMutation();\n    setOpen(true);\n  }, [resetMutation]);\n\n  return { modalElement, openModal };\n};\n","import { NavigationMenu } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentLoggedModelDetailsNav = ({\n  experimentId,\n  modelId,\n  activeTabName,\n}: {\n  experimentId: string;\n  modelId: string;\n  activeTabName?: string;\n}) => {\n  return (\n    <NavigationMenu.Root>\n      <NavigationMenu.List>\n        <NavigationMenu.Item key=\"overview\" active={!activeTabName}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId)}>\n            <FormattedMessage\n              defaultMessage=\"Overview\"\n              description=\"Label for the overview tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n        {/* TODO: Implement when available */}\n        {/* <NavigationMenu.Item key=\"evaluations\" active={activeTabName === 'evaluations'}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId, 'evaluations')}>\n            <FormattedMessage\n              defaultMessage=\"Evaluations\"\n              description=\"Label for the evaluations tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item> */}\n        <NavigationMenu.Item key=\"traces\" active={activeTabName === 'traces'}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId, 'traces')}>\n            <FormattedMessage\n              defaultMessage=\"Traces\"\n              description=\"Label for the traces tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n        <NavigationMenu.Item key=\"artifacts\" active={activeTabName === 'artifacts'}>\n          <Link to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId, modelId, 'artifacts')}>\n            <FormattedMessage\n              defaultMessage=\"Artifacts\"\n              description=\"Label for the artifacts tab on the logged model details page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n      </NavigationMenu.List>\n    </NavigationMenu.Root>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../common/components/EditableNote';\nimport type { LoggedModelProto } from '../../types';\nimport { NOTE_CONTENT_TAG } from '../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { usePatchLoggedModelsTags } from '../../hooks/logged-models/usePatchLoggedModelsTags';\nimport { useUserActionErrorHandler } from '@databricks/web-shared/metrics';\n\n/**\n * Displays editable description section in logged model detail overview.\n */\nexport const ExperimentLoggedModelDescription = ({\n  loggedModel,\n  onDescriptionChanged,\n}: {\n  loggedModel?: LoggedModelProto;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const descriptionContent = loggedModel?.info?.tags?.find((tag) => tag.key === NOTE_CONTENT_TAG)?.value ?? undefined;\n\n  const [showNoteEditor, setShowDescriptionEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { patch } = usePatchLoggedModelsTags({ loggedModelId: loggedModel?.info?.model_id });\n  const { handleError } = useUserActionErrorHandler();\n\n  const handleSubmitEditDescription = async (markdown: string) => {\n    try {\n      await patch({ [NOTE_CONTENT_TAG]: markdown });\n      await onDescriptionChanged();\n      setShowDescriptionEditor(false);\n    } catch (error: any) {\n      handleError(error);\n    }\n  };\n\n  const handleCancelEditDescription = () => setShowDescriptionEditor(false);\n\n  const isEmpty = !descriptionContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Label for descriptions section on the logged models details page\"\n        />\n        <Button\n          componentId=\"mlflow.logged_models.details.description.edit\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Label for the edit description button on the logged models details page',\n          })}\n          onClick={() => setShowDescriptionEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Placeholder text when no description is provided for the logged model displayed in the logged models details page\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={descriptionContent}\n          onSubmit={handleSubmitEditDescription}\n          onCancel={handleCancelEditDescription}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { entries } from 'lodash';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nexport const usePatchLoggedModelsTags = ({ loggedModelId }: { loggedModelId?: string }) => {\n  const { isLoading, error, mutateAsync } = useMutation<unknown, Error, Record<string, string>>({\n    mutationFn: async (variables) => {\n      const requestBody = {\n        tags: entries(variables).map(([key, value]) => ({ key, value })),\n      };\n\n      return loggedModelsDataRequest(\n        getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}/tags`),\n        'PATCH',\n        requestBody,\n      );\n    },\n  });\n\n  return {\n    isLoading,\n    error,\n    patch: mutateAsync,\n  } as const;\n};\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\nexport const ExperimentLoggedModelDetailsTableRunCellRenderer: ColumnDefTemplate<\n  CellContext<\n    unknown,\n    {\n      runId?: string | null;\n      runName?: string | null;\n      experimentId?: string | null;\n    }\n  >\n> = ({ getValue }) => {\n  const { runName, runId } = getValue() ?? {};\n\n  return <Link to={Routes.getDirectRunPageRoute(runId ?? '')}>{runName || runId}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableIcon,\n  TableRow,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  type CellContext,\n  type ColumnDef,\n  type ColumnDefTemplate,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport type { LoggedModelProto, LoggedModelMetricProto, RunEntity } from '../../types';\nimport { ExperimentLoggedModelDetailsTableRunCellRenderer } from './ExperimentLoggedModelDetailsTableRunCellRenderer';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\ninterface LoggedModelMetricWithRunData extends LoggedModelMetricProto {\n  experimentId?: string | null;\n  runName?: string | null;\n}\n\ntype MetricTableCellRenderer = ColumnDefTemplate<CellContext<LoggedModelMetricWithRunData, unknown>>;\ntype ColumnMeta = {\n  styles?: React.CSSProperties;\n};\n\nconst SingleDatasetCellRenderer = ({\n  getValue,\n}: CellContext<\n  LoggedModelMetricProto,\n  {\n    datasetName: string;\n    datasetDigest: string;\n    runId: string | null;\n  }\n>) => {\n  const { datasetDigest, datasetName, runId } = getValue();\n\n  if (!datasetName) {\n    return '-';\n  }\n\n  return <ExperimentLoggedModelDatasetButton datasetName={datasetName} datasetDigest={datasetDigest} runId={runId} />;\n};\n\nexport const ExperimentLoggedModelDetailsMetricsTable = ({\n  loggedModel,\n  relatedRunsData,\n  relatedRunsLoading,\n}: {\n  loggedModel?: LoggedModelProto;\n  relatedRunsData?: RunEntity[];\n  relatedRunsLoading?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const {\n    usingUnifiedDetailsLayout,\n    detailsPageTableStyles,\n    detailsPageNoEntriesStyles,\n    detailsPageNoResultsWrapperStyles,\n  } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const metricsWithRunData = useMemo(() => {\n    if (relatedRunsLoading) {\n      return [];\n    }\n    return (\n      loggedModel?.data?.metrics?.map((metric) => {\n        const runName = relatedRunsData?.find((run) => run.info?.runUuid === metric.run_id)?.info?.runName;\n        return {\n          ...metric,\n          experimentId: loggedModel.info?.experiment_id,\n          runName,\n        };\n      }) ?? []\n    );\n  }, [loggedModel, relatedRunsLoading, relatedRunsData]);\n\n  const filteredMetrics = useMemo(\n    () =>\n      metricsWithRunData.filter(({ key, dataset_name, dataset_digest, runName }) => {\n        const filterLower = filter.toLowerCase();\n        return (\n          key?.toLowerCase().includes(filterLower) ||\n          dataset_name?.toLowerCase().includes(filterLower) ||\n          dataset_digest?.toLowerCase().includes(filterLower) ||\n          runName?.toLowerCase().includes(filterLower)\n        );\n      }),\n    [filter, metricsWithRunData],\n  );\n\n  const columns = useMemo<ColumnDef<LoggedModelMetricWithRunData>[]>(\n    () => [\n      {\n        id: 'metric',\n        accessorKey: 'key',\n        header: intl.formatMessage({\n          defaultMessage: 'Metric',\n          description: 'Label for the metric column in the logged model details metrics table',\n        }),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'dataset',\n        header: intl.formatMessage({\n          defaultMessage: 'Dataset',\n          description: 'Label for the dataset column in the logged model details metrics table',\n        }),\n        accessorFn: ({ dataset_name: datasetName, dataset_digest: datasetDigest, run_id: runId }) => ({\n          datasetName,\n          datasetDigest,\n          runId,\n        }),\n        enableResizing: true,\n        cell: SingleDatasetCellRenderer as MetricTableCellRenderer,\n      },\n      {\n        id: 'sourceRun',\n        header: intl.formatMessage({\n          defaultMessage: 'Source run',\n          description:\n            \"Label for the column indicating a run being the source of the logged model's metric (i.e. source run). Displayed in the logged model details metrics table.\",\n        }),\n        accessorFn: ({ run_id: runId, runName, experimentId }) => ({\n          runId,\n          runName,\n          experimentId,\n        }),\n        enableResizing: true,\n        cell: ExperimentLoggedModelDetailsTableRunCellRenderer as MetricTableCellRenderer,\n      },\n      {\n        id: 'value',\n        header: intl.formatMessage({\n          defaultMessage: 'Value',\n          description: 'Label for the value column in the logged model details metrics table',\n        }),\n        accessorKey: 'value',\n        // In full-width layout, let \"Value\" fill the remaining space\n        enableResizing: !usingUnifiedDetailsLayout,\n        meta: usingUnifiedDetailsLayout\n          ? {\n              styles: {\n                minWidth: 120,\n              },\n            }\n          : {},\n      },\n    ],\n    [intl, usingUnifiedDetailsLayout],\n  );\n\n  const table = useReactTable({\n    data: filteredMetrics,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (row) => [row.key, row.dataset_digest, row.run_id].join('.') ?? '',\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (relatedRunsLoading) {\n      return <TableSkeleton lines={3} />;\n    }\n    if (!metricsWithRunData.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Placeholder text when no metrics are recorded for a logged model\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = filteredMetrics.length < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"mlflow.logged_model.details.metrics.table.search\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Placeholder text for the search input in the logged model details metrics table',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n        <Table\n          ref={(element) => element?.setAttribute('data-testid', 'logged-model-details-metrics-table')}\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={detailsPageNoResultsWrapperStyles}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the logged model details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header, index) => (\n              <TableHeader\n                componentId=\"mlflow.logged_model.details.metrics.table.header\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                css={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                  ...(header.column.columnDef.meta as ColumnMeta)?.styles,\n                }}\n                style={{\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {table.getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  key={cell.id}\n                  style={{\n                    flexGrow: cell.column.getCanResize() ? 0 : 1,\n                    flexBasis: cell.column.getCanResize() ? cell.column.getSize() : undefined,\n                  }}\n                  css={{\n                    ...(cell.column.columnDef.meta as ColumnMeta)?.styles,\n                  }}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </Table>\n      </>\n    );\n  };\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <Typography.Title level={4}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Header for the metrics table on the logged model details page. (Length) is the number of metrics currently displayed.\"\n          values={{ length: metricsWithRunData.length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import {\n  Empty,\n  Input,\n  Overflow,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport {\n  CellContext,\n  ColumnDef,\n  ColumnDefTemplate,\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { entries, groupBy, isEmpty, uniqBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { LoggedModelProto, RunEntity } from '../../types';\nimport { ExperimentLoggedModelDetailsTableRunCellRenderer } from './ExperimentLoggedModelDetailsTableRunCellRenderer';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\ninterface RunsTableRow {\n  experimentId?: string;\n  runName?: string;\n  runId: string;\n  datasets: {\n    datasetName: string;\n    datasetDigest: string;\n    runId: string;\n  }[];\n}\n\ntype RunsTableCellRenderer = ColumnDefTemplate<CellContext<RunsTableRow, unknown>>;\n\nconst DatasetListCellRenderer = ({ getValue }: CellContext<RunsTableRow, RunsTableRow['datasets']>) => {\n  const datasets = getValue() ?? [];\n\n  if (isEmpty(datasets)) {\n    return <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {datasets.map(({ datasetDigest, datasetName, runId }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={datasetName}\n          datasetDigest={datasetDigest}\n          runId={runId}\n          key={[datasetName, datasetDigest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n\nexport const ExperimentLoggedModelDetailsPageRunsTable = ({\n  loggedModel,\n  relatedRunsData,\n  relatedRunsLoading,\n}: {\n  loggedModel?: LoggedModelProto;\n  relatedRunsData?: RunEntity[];\n  relatedRunsLoading?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { detailsPageTableStyles, detailsPageNoEntriesStyles, detailsPageNoResultsWrapperStyles } =\n    useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  const runsWithDatasets = useMemo(() => {\n    if (relatedRunsLoading) {\n      return [];\n    }\n    const allMetrics = loggedModel?.data?.metrics ?? [];\n    const runsByDatasets = groupBy(allMetrics, 'run_id');\n    if (loggedModel?.info?.source_run_id && !runsByDatasets[loggedModel.info.source_run_id]) {\n      runsByDatasets[loggedModel.info.source_run_id] = [];\n    }\n    return entries(runsByDatasets).map(([runId, metrics]) => {\n      // Locate unique dataset entries\n      const distinctDatasets = uniqBy(metrics, 'dataset_name')\n        .map(({ dataset_digest, dataset_name }) => ({\n          datasetDigest: dataset_digest,\n          datasetName: dataset_name,\n          runId,\n        }))\n        .filter((dataset) => Boolean(dataset.datasetName) || Boolean(dataset.datasetDigest));\n\n      const runName = relatedRunsData?.find((run) => run.info?.runUuid === runId)?.info?.runName;\n      return {\n        runId,\n        runName,\n        datasets: distinctDatasets,\n        experimentId: loggedModel?.info?.experiment_id,\n      };\n    });\n  }, [loggedModel, relatedRunsLoading, relatedRunsData]);\n\n  const filteredRunsWithDatasets = useMemo(\n    () =>\n      runsWithDatasets.filter(({ runName, datasets }) => {\n        const filterLower = filter.toLowerCase();\n        return (\n          runName?.toLowerCase().includes(filterLower) ||\n          datasets.find((d) => d.datasetName?.toLowerCase().includes(filterLower))\n        );\n      }),\n    [filter, runsWithDatasets],\n  );\n\n  const columns = useMemo<ColumnDef<any>[]>(\n    () => [\n      {\n        id: 'run',\n        header: intl.formatMessage({\n          defaultMessage: 'Run',\n          description: 'Column header for the run name in the runs table on the logged model details page',\n        }),\n        enableResizing: true,\n        size: 240,\n        accessorFn: ({ runId, runName, experimentId }) => ({\n          runId,\n          runName,\n          experimentId,\n        }),\n        cell: ExperimentLoggedModelDetailsTableRunCellRenderer as RunsTableCellRenderer,\n      },\n      {\n        id: 'input',\n        header: intl.formatMessage({\n          defaultMessage: 'Input',\n          description: 'Column header for the input in the runs table on the logged model details page',\n        }),\n        accessorKey: 'datasets',\n        enableResizing: false,\n        cell: DatasetListCellRenderer as RunsTableCellRenderer,\n      },\n    ],\n    [intl],\n  );\n\n  const table = useReactTable({\n    data: filteredRunsWithDatasets,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (relatedRunsLoading) {\n      return <TableSkeleton lines={3} />;\n    }\n    if (!runsWithDatasets.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No runs\"\n                description=\"Placeholder text for the runs table on the logged model details page when there are no runs\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = filteredRunsWithDatasets.length < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"mlflow.logged_model.details.runs.table.search\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search runs',\n              description: 'Placeholder text for the search input in the runs table on the logged model details page',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n        <Table\n          scrollable\n          ref={(element) => element?.setAttribute('data-testid', 'logged-model-details-runs-table')}\n          empty={\n            areAllResultsFiltered ? (\n              <div css={detailsPageNoResultsWrapperStyles}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No runs match the search filter\"\n                      description=\"No results message for the runs table on the logged model details page\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header, index) => (\n              <TableHeader\n                componentId=\"mlflow.logged_model.details.runs.table.header\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                css={{\n                  flexGrow: header.column.getCanResize() ? 0 : 1,\n                }}\n                style={{\n                  flexBasis: header.column.getCanResize() ? header.column.getSize() : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {table.getRowModel().rows.map((row) => (\n            <TableRow key={row.id}>\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  key={cell.id}\n                  style={{\n                    flexGrow: cell.column.getCanResize() ? 0 : 1,\n                    flexBasis: cell.column.getCanResize() ? cell.column.getSize() : undefined,\n                  }}\n                  multiline\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </Table>\n      </>\n    );\n  };\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <Typography.Title css={{ fontSize: 16 }}>Runs</Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import { Overflow } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { type LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\n\nexport const ExperimentLoggedModelAllDatasetsList = ({\n  loggedModel,\n  empty,\n}: {\n  loggedModel: LoggedModelProto;\n  empty?: React.ReactElement;\n}) => {\n  const uniqueDatasets = useMemo(() => {\n    const allMetrics = loggedModel.data?.metrics ?? [];\n    return allMetrics.reduce<{ dataset_name: string; dataset_digest: string; run_id: string | undefined }[]>(\n      (aggregate, { dataset_digest, dataset_name, run_id }) => {\n        if (\n          dataset_name &&\n          dataset_digest &&\n          !aggregate.find(\n            (dataset) => dataset.dataset_name === dataset_name && dataset.dataset_digest === dataset_digest,\n          )\n        ) {\n          aggregate.push({ dataset_name, dataset_digest, run_id });\n        }\n        return aggregate;\n      },\n      [],\n    );\n  }, [loggedModel]);\n\n  if (!uniqueDatasets.length) {\n    return empty ?? <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {uniqueDatasets.map(({ dataset_digest, dataset_name, run_id }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={dataset_name}\n          datasetDigest={dataset_digest}\n          runId={run_id ?? null}\n          key={[dataset_name, dataset_digest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { type LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelRegisteredVersions } from './hooks/useExperimentLoggedModelRegisteredVersions';\nimport { isEmpty } from 'lodash';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { useMemo } from 'react';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\n\nexport const ExperimentLoggedModelDetailsModelVersionsList = ({\n  loggedModel,\n  empty,\n}: {\n  loggedModel: LoggedModelProto;\n  empty?: React.ReactElement;\n}) => {\n  const loggedModels = useMemo(() => [loggedModel], [loggedModel]);\n  const { theme } = useDesignSystemTheme();\n  const { modelVersions } = useExperimentLoggedModelRegisteredVersions({ loggedModels });\n\n  if (isEmpty(modelVersions)) {\n    return empty ?? <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {modelVersions?.map(({ displayedName, version, link }) => (\n        <Link\n          to={link}\n          key={`${displayedName}-${version}`}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <span css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm, wordBreak: 'break-all' }}>\n            <RegisteredModelOkIcon css={{ flexShrink: 0 }} /> {displayedName}{' '}\n          </span>\n          <Tag componentId=\"mlflow.logged_model.details.registered_model_version_tag\">v{version}</Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { GenericSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { LoggedModelProto, RunEntity } from '../../../types';\nimport { useIntl } from 'react-intl';\nimport { ExperimentLoggedModelTableDateCell } from '../ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from '../ExperimentLoggedModelStatusIndicator';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { KeyValueProperty, NoneCell, AsideSections } from '@databricks/web-shared/utils';\nimport { ExperimentLoggedModelSourceBox } from '../ExperimentLoggedModelSourceBox';\nimport { ExperimentLoggedModelAllDatasetsList } from '../ExperimentLoggedModelAllDatasetsList';\nimport { ExperimentLoggedModelDetailsModelVersionsList } from '../ExperimentLoggedModelDetailsModelVersionsList';\nimport { MLFLOW_LOGGED_MODEL_USER_TAG } from '../../../constants';\n\nenum ExperimentLoggedModelDetailsMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  MODEL_VERSIONS = 'MODEL_VERSIONS',\n}\n\nexport const useExperimentLoggedModelDetailsMetadataV2 = ({\n  loggedModel,\n  relatedRunsLoading,\n  relatedSourceRun,\n}: {\n  loggedModel?: LoggedModelProto;\n  relatedRunsLoading?: boolean;\n  relatedSourceRun?: RunEntity;\n}): AsideSections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const detailsContent = loggedModel && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Label for the creation timestamp of a logged model on the logged model details page',\n        })}\n        value={<ExperimentLoggedModelTableDateCell value={loggedModel?.info?.creation_timestamp_ms} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Label for the creator of a logged model on the logged model details page',\n        })}\n        value={loggedModel.info?.tags?.find((tag) => tag.key === MLFLOW_LOGGED_MODEL_USER_TAG)?.value ?? '-'}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Label for the status of a logged model on the logged model details page',\n        })}\n        value={<ExperimentLoggedModelStatusIndicator data={loggedModel} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Model ID',\n          description: 'Label for the model ID of a logged model on the logged model details page',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={loggedModel.info?.model_id ?? ''}\n            css={{\n              whiteSpace: 'nowrap',\n            }}\n          />\n        }\n      />\n      {loggedModel.info?.source_run_id &&\n        loggedModel.info?.experiment_id &&\n        (relatedRunsLoading || relatedSourceRun) && (\n          <KeyValueProperty\n            keyValue={intl.formatMessage({\n              defaultMessage: 'Source run',\n              description: 'Label for the source run name of a logged model on the logged model details page',\n            })}\n            value={\n              // Display a skeleton while loading\n              relatedRunsLoading ? (\n                <GenericSkeleton css={{ width: 200, height: theme.spacing.md }} />\n              ) : (\n                <Link to={Routes.getRunPageRoute(loggedModel.info?.experiment_id, loggedModel.info?.source_run_id)}>\n                  {relatedSourceRun?.info?.runName}\n                </Link>\n              )\n            }\n          />\n        )}\n      {loggedModel.info?.source_run_id && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Source run ID',\n            description: 'Label for the source run ID of a logged model on the logged model details page',\n          })}\n          value={\n            <DetailsOverviewCopyableIdBox\n              value={loggedModel.info?.source_run_id ?? ''}\n              element={\n                loggedModel.info?.experiment_id ? (\n                  <Link to={Routes.getRunPageRoute(loggedModel.info?.experiment_id, loggedModel.info?.source_run_id)}>\n                    {loggedModel.info?.source_run_id}\n                  </Link>\n                ) : undefined\n              }\n            />\n          }\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Logged from',\n          description:\n            'Label for the source (where it was logged from) of a logged model on the logged model details page. It can be e.g. a notebook or a file.',\n        })}\n        value={\n          <ExperimentLoggedModelSourceBox\n            loggedModel={loggedModel}\n            displayDetails\n            css={{ paddingTop: theme.spacing.xs, paddingBottom: theme.spacing.xs, wordBreak: 'break-all' }}\n          />\n        }\n      />\n    </>\n  );\n\n  return [\n    {\n      id: ExperimentLoggedModelDetailsMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this logged model',\n        description: 'Title for the details sidebar of a logged model on the logged model details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: ExperimentLoggedModelDetailsMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets used',\n        description: 'Label for the datasets used by a logged model on the logged model details page',\n      }),\n      content: loggedModel && <ExperimentLoggedModelAllDatasetsList loggedModel={loggedModel} empty={<NoneCell />} />,\n    },\n    {\n      id: ExperimentLoggedModelDetailsMetadataSections.MODEL_VERSIONS,\n      title: intl.formatMessage({\n        defaultMessage: 'Model versions',\n        description: 'Label for the model versions of a logged model on the logged model details page',\n      }),\n      content: loggedModel && (\n        <ExperimentLoggedModelDetailsModelVersionsList empty={<NoneCell />} loggedModel={loggedModel} />\n      ),\n    },\n  ];\n};\n","import { Alert, GenericSkeleton, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { LoggedModelProto } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { DetailsOverviewMetadataTable } from '../DetailsOverviewMetadataTable';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentLoggedModelTableDateCell } from './ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from './ExperimentLoggedModelStatusIndicator';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport { ExperimentLoggedModelDescription } from './ExperimentLoggedModelDescription';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { useMemo } from 'react';\nimport { isEmpty, keyBy } from 'lodash';\nimport { ExperimentLoggedModelDetailsMetricsTable } from './ExperimentLoggedModelDetailsMetricsTable';\nimport { ExperimentLoggedModelDetailsPageRunsTable } from './ExperimentLoggedModelDetailsRunsTable';\nimport { useRelatedRunsDataForLoggedModels } from '../../hooks/logged-models/useRelatedRunsDataForLoggedModels';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { ExperimentLoggedModelAllDatasetsList } from './ExperimentLoggedModelAllDatasetsList';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from './hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { ExperimentLoggedModelDetailsModelVersionsList } from './ExperimentLoggedModelDetailsModelVersionsList';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\nimport { ExperimentLoggedModelSourceBox } from './ExperimentLoggedModelSourceBox';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useExperimentLoggedModelDetailsMetadataV2 } from './hooks/useExperimentLoggedModelDetailsMetadataV2';\nimport { MLFLOW_LOGGED_MODEL_USER_TAG } from '../../constants';\n\nexport const ExperimentLoggedModelDetailsOverview = ({\n  onDataUpdated,\n  loggedModel,\n}: {\n  onDataUpdated: () => void | Promise<any>;\n  loggedModel?: LoggedModelProto;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { usingUnifiedDetailsLayout } = useExperimentTrackingDetailsPageLayoutStyles();\n\n  // Fetch related runs data for the logged model\n  const {\n    data: relatedRunsData,\n    loading: relatedRunsLoading,\n    error: relatedRunsDataError,\n  } = useRelatedRunsDataForLoggedModels({ loggedModels: loggedModel ? [loggedModel] : [] });\n\n  const relatedSourceRun = useMemo(\n    () => relatedRunsData?.find((r) => r.info?.runUuid === loggedModel?.info?.source_run_id),\n    [loggedModel?.info?.source_run_id, relatedRunsData],\n  );\n\n  const paramsDictionary = useMemo(\n    () =>\n      keyBy(\n        (loggedModel?.data?.params ?? []).filter(({ key, value }) => !isEmpty(key) && !isEmpty(value)),\n        'key',\n      ) as Record<string, KeyValueEntity>,\n    [loggedModel?.data?.params],\n  );\n\n  const renderDetails = () => {\n    if (!loggedModel) {\n      return null;\n    }\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Label for the creation timestamp of a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelTableDateCell value={loggedModel.info?.creation_timestamp_ms} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Label for the creator of a logged model on the logged model details page\"\n            />\n          }\n          value={loggedModel.info?.tags?.find((tag) => tag.key === MLFLOW_LOGGED_MODEL_USER_TAG)?.value ?? '-'}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Status\"\n              description=\"Label for the status of a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelStatusIndicator data={loggedModel} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Model ID\"\n              description=\"Label for the model ID of a logged model on the logged model details page\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={loggedModel.info?.model_id ?? ''} />}\n        />\n        {/* If the logged model has a source run, display the source run name after its loaded */}\n        {loggedModel.info?.source_run_id &&\n          loggedModel.info?.experiment_id &&\n          (relatedRunsLoading || relatedSourceRun) && (\n            <DetailsOverviewMetadataRow\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Source run\"\n                  description=\"Label for the source run name of a logged model on the logged model details page\"\n                />\n              }\n              value={\n                // Display a skeleton while loading\n                relatedRunsLoading ? (\n                  <GenericSkeleton css={{ width: 200, height: theme.spacing.md }} />\n                ) : (\n                  <Link to={Routes.getRunPageRoute(loggedModel.info?.experiment_id, loggedModel.info?.source_run_id)}>\n                    {relatedSourceRun?.info?.runName}\n                  </Link>\n                )\n              }\n            />\n          )}\n        {loggedModel.info?.source_run_id && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Source run ID\"\n                description=\"Label for the source run ID of a logged model on the logged model details page\"\n              />\n            }\n            value={<DetailsOverviewCopyableIdBox value={loggedModel.info?.source_run_id ?? ''} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Logged from\"\n              description=\"Label for the source (where it was logged from) of a logged model on the logged model details page. It can be e.g. a notebook or a file.\"\n            />\n          }\n          value={<ExperimentLoggedModelSourceBox loggedModel={loggedModel} displayDetails />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Label for the datasets used by a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelAllDatasetsList loggedModel={loggedModel} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Model versions\"\n              description=\"Label for the model versions of a logged model on the logged model details page\"\n            />\n          }\n          value={<ExperimentLoggedModelDetailsModelVersionsList loggedModel={loggedModel} />}\n        />\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const detailsSectionsV2 = useExperimentLoggedModelDetailsMetadataV2({\n    loggedModel,\n    relatedRunsLoading,\n    relatedSourceRun,\n  });\n\n  return (\n    <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      <DetailsPageLayout\n        css={{ flex: 1 }}\n        // Enable sidebar layout based on feature flag\n        usingSidebarLayout={usingUnifiedDetailsLayout}\n        secondarySections={detailsSectionsV2}\n      >\n        <ExperimentLoggedModelDescription loggedModel={loggedModel} onDescriptionChanged={onDataUpdated} />\n        {!usingUnifiedDetailsLayout && (\n          <>\n            <Typography.Title level={4}>\n              <FormattedMessage\n                defaultMessage=\"Details\"\n                description=\"Title for the details section on the logged model details page\"\n              />\n            </Typography.Title>\n            {renderDetails()}\n          </>\n        )}\n        {relatedRunsDataError?.message && (\n          <>\n            <Alert\n              closable={false}\n              message={\n                <FormattedMessage\n                  defaultMessage=\"Error when fetching related runs data: {error}\"\n                  description=\"Error message displayed when logged model details page couldn't fetch related runs data\"\n                  values={{\n                    error: relatedRunsDataError.message,\n                  }}\n                />\n              }\n              type=\"error\"\n              componentId=\"mlflow.logged_model.details.related_runs.error\"\n            />\n            <Spacer size=\"md\" />\n          </>\n        )}\n        <div\n          css={[\n            // Use different grid setup for unified details page layout\n            usingUnifiedDetailsLayout\n              ? {\n                  display: 'flex',\n                  flexDirection: 'column',\n                }\n              : {\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr',\n                  gridTemplateRows: '400px 400px',\n                  marginBottom: theme.spacing.md,\n                },\n            { gap: theme.spacing.lg, overflow: 'hidden' },\n          ]}\n        >\n          <ExperimentLoggedModelDetailsMetricsTable\n            loggedModel={loggedModel}\n            relatedRunsLoading={relatedRunsLoading}\n            relatedRunsData={relatedRunsData ?? undefined}\n          />\n          <DetailsOverviewParamsTable params={paramsDictionary} />\n          <ExperimentLoggedModelDetailsPageRunsTable\n            loggedModel={loggedModel}\n            relatedRunsLoading={relatedRunsLoading}\n            relatedRunsData={relatedRunsData ?? undefined}\n          />\n        </div>\n      </DetailsPageLayout>\n    </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n  );\n};\n","import type { LoggedModelProto } from '../../types';\nimport ArtifactPage from '../ArtifactPage';\n\nexport const ExperimentLoggedModelDetailsArtifacts = ({ loggedModel }: { loggedModel: LoggedModelProto }) => (\n  <div css={{ height: '100%', overflow: 'hidden', display: 'flex' }}>\n    <ArtifactPage\n      isLoggedModelsMode\n      loggedModelId={loggedModel.info?.model_id ?? ''}\n      artifactRootUri={loggedModel?.info?.artifact_uri ?? ''}\n      useAutoHeight\n      experimentId={loggedModel?.info?.experiment_id ?? ''}\n      entityTags={loggedModel?.info?.tags}\n    />\n  </div>\n);\n","import { Alert, CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { FormattedMessage } from 'react-intl';\nimport { CopyButton } from '../../../shared/building_blocks/CopyButton';\n\nexport const ExperimentLoggedModelDetailsTracesIntroductionText = ({ modelId }: { modelId: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const code = `import mlflow\n          \nmlflow.set_active_model(model_id=\"${modelId}\")`;\n\n  return (\n    <>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"This tab displays all the traces logged to this logged model. MLflow supports automatic tracing for many popular generative AI frameworks. Follow the steps below to log your first trace. For more information about MLflow Tracing, visit the <a>MLflow documentation</a>.\"\n          description=\"Message that explains the function of the 'Traces' tab in logged model page. This message is followed by a tutorial explaining how to get started with MLflow Tracing.\"\n          values={{\n            a: (text: string) => (\n              <Typography.Link\n                componentId=\"mlflow.logged_model.traces.traces_table.quickstart_docs_link\"\n                href=\"https://mlflow.org/docs/latest/llms/tracing/index.html\"\n                openInNewTab\n              >\n                {text}\n              </Typography.Link>\n            ),\n          }}\n        />\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"You can start logging traces to this logged model by calling {code} first:\"\n          description='Introductory text for the code example for logging traces to an existing logged model. The code contains reference to \"mlflow.set_active_model\" function call'\n          values={{\n            code: <code>mlflow.set_active_model</code>,\n          }}\n        />\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <div css={{ position: 'relative', width: 'min-content' }}>\n          <CopyButton\n            componentId=\"mlflow.logged_model.traces.traces_table.set_active_model_quickstart_snippet_copy\"\n            css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n            showLabel={false}\n            copyText={code}\n            icon={<CopyIcon />}\n          />\n          <CodeSnippet\n            showLineNumbers\n            theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n            style={{\n              padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n            }}\n            language=\"python\"\n          >\n            {code}\n          </CodeSnippet>\n        </div>\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"Next, you can log traces to this logged model depending on your framework:\"\n          description=\"Introductory text for the code example for logging traces to an existing logged model. This part is displayed after the code example for setting the active model.\"\n        />\n      </Typography.Paragraph>\n    </>\n  );\n};\n","import { useEffect, useMemo } from 'react';\nimport type { LoggedModelProto } from '../../types';\nimport { TracesView } from '../traces/TracesView';\nimport { ExperimentLoggedModelDetailsTracesIntroductionText } from './ExperimentLoggedModelDetailsTracesIntroductionText';\nimport { TracesViewTableNoTracesQuickstartContextProvider } from '../traces/quickstart/TracesViewTableNoTracesQuickstartContext';\n\nexport const ExperimentLoggedModelDetailsTraces = ({ loggedModel }: { loggedModel: LoggedModelProto }) => {\n  const experimentIds = useMemo(() => [loggedModel.info?.experiment_id ?? ''], [loggedModel.info?.experiment_id]);\n\n  if (!loggedModel.info?.experiment_id) {\n    return null;\n  }\n  return (\n    <div css={{ height: '100%', overflow: 'hidden' }}>\n      <TracesViewTableNoTracesQuickstartContextProvider\n        introductionText={\n          loggedModel.info?.model_id && (\n            <ExperimentLoggedModelDetailsTracesIntroductionText modelId={loggedModel.info.model_id} />\n          )\n        }\n        displayVersionWarnings={false}\n      >\n        <TracesComponent experimentIds={experimentIds} loggedModelId={loggedModel.info?.model_id} />\n      </TracesViewTableNoTracesQuickstartContextProvider>\n    </div>\n  );\n};\n\nconst TracesComponent = ({\n  experimentIds,\n  loggedModelId,\n}: {\n  experimentIds: string[];\n  loggedModelId: string | undefined;\n}) => {\n  return (\n    <TracesView\n      experimentIds={experimentIds}\n      loggedModelId={loggedModelId}\n      baseComponentId=\"mlflow.logged_model.traces\"\n    />\n  );\n};\n","import { Alert, PageWrapper, TableSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { ExperimentLoggedModelDetailsHeader } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsHeader';\nimport { ExperimentLoggedModelPageWrapper } from './ExperimentLoggedModelPageWrapper';\nimport { ExperimentLoggedModelDetailsNav } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsNav';\nimport { ExperimentLoggedModelDetailsOverview } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsOverview';\nimport { useGetLoggedModelQuery } from '../../hooks/logged-models/useGetLoggedModelQuery';\nimport { useGetExperimentQuery } from '../../hooks/useExperimentQuery';\nimport React from 'react';\nimport { ExperimentLoggedModelDetailsArtifacts } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsArtifacts';\nimport { useUserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentLoggedModelDetailsTraces } from '../../components/experiment-logged-models/ExperimentLoggedModelDetailsTraces';\n\n/**\n * Temporary \"in construction\" placeholder box, to be removed after implementing the actual content.\n */\nconst PlaceholderBox = ({ children }: { children: React.ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing.md,\n        border: `4px dashed ${theme.colors.border}`,\n        marginBottom: theme.spacing.md,\n        flex: 1,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst ExperimentLoggedModelDetailsPageImpl = () => {\n  const { experimentId, loggedModelId, tabName } = useParams();\n  const { clearUserActionError, currentUserActionError } = useUserActionErrorHandler();\n\n  invariant(experimentId, 'Experiment ID must be defined');\n  invariant(loggedModelId, 'Logged model ID must be defined');\n\n  const { theme } = useDesignSystemTheme();\n  const {\n    data: loggedModel,\n    isLoading: loggedModelLoading,\n    error: loggedModelLoadError,\n    refetch,\n  } = useGetLoggedModelQuery({ loggedModelId });\n  const {\n    data: experimentData,\n    loading: experimentLoading,\n    apiError: experimentApiError,\n    apolloError: experimentApolloError,\n  } = useGetExperimentQuery({ experimentId });\n\n  // If there is an unrecoverable error loading the model, throw it to be handled by the error boundary\n  if (loggedModelLoadError) {\n    throw loggedModelLoadError;\n  }\n\n  const experimentLoadError = experimentApiError ?? experimentApolloError;\n\n  const renderSelectedTab = () => {\n    if (loggedModelLoading) {\n      return <TableSkeleton lines={12} />;\n    }\n\n    // TODO: implement error handling\n    if (!loggedModel) {\n      return null;\n    }\n\n    if (tabName === 'traces') {\n      return <ExperimentLoggedModelDetailsTraces loggedModel={loggedModel} />;\n    } else if (tabName === 'artifacts') {\n      return <ExperimentLoggedModelDetailsArtifacts loggedModel={loggedModel} />;\n    }\n\n    return <ExperimentLoggedModelDetailsOverview onDataUpdated={refetch} loggedModel={loggedModel} />;\n  };\n\n  return (\n    <>\n      <ExperimentLoggedModelDetailsHeader\n        experimentId={experimentId}\n        experiment={experimentData}\n        loggedModel={loggedModel}\n        loading={loggedModelLoading || experimentLoading}\n        onSuccess={refetch}\n      />\n      {currentUserActionError && (\n        <Alert\n          componentId=\"mlflow.logged_model.details.user-action-error\"\n          css={{ marginBottom: theme.spacing.sm }}\n          type=\"error\"\n          message={currentUserActionError.displayMessage ?? currentUserActionError.message}\n          onClose={clearUserActionError}\n        />\n      )}\n      {experimentLoadError?.message && (\n        <Alert\n          componentId=\"mlflow.logged_model.details.experiment-error\"\n          css={{ marginBottom: theme.spacing.sm }}\n          type=\"error\"\n          message={\n            <FormattedMessage\n              defaultMessage=\"Experiment load error: {errorMessage}\"\n              description=\"Error message displayed on logged models page when experiment data fails to load\"\n              values={{ errorMessage: experimentLoadError.message }}\n            />\n          }\n          closable={false}\n        />\n      )}\n      <ExperimentLoggedModelDetailsNav experimentId={experimentId} modelId={loggedModelId} activeTabName={tabName} />\n      <div css={{ overflow: 'auto', flex: 1 }}>{renderSelectedTab()}</div>\n    </>\n  );\n};\n\nconst ExperimentLoggedModelDetailsPage = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <ExperimentLoggedModelPageWrapper>\n      <PageWrapper\n        css={{\n          paddingTop: theme.spacing.md,\n          display: 'flex',\n          paddingBottom: theme.spacing.md,\n          overflow: 'hidden',\n          height: '100%',\n          flexDirection: 'column',\n        }}\n      >\n        <ExperimentLoggedModelDetailsPageImpl />\n      </PageWrapper>\n    </ExperimentLoggedModelPageWrapper>\n  );\n};\n\nexport default ExperimentLoggedModelDetailsPage;\n","import spinner from '../static/mlflow-spinner.png';\nimport { Interpolation, keyframes, Theme } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","_converter","getMarkdownConverter","Converter","setFlavor","sanitizerOptions","allowedTags","allowedAttributes","img","div","sanitizeConvertedHtml","dirtyHtml","sanitizeHtml","forceAnchorTagNewTab","html","RegExp","useMarkdownConverter","useCallback","markdown","makeHtml","SectionErrorBoundary","React","constructor","state","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","props","showServerError","_jsxs","children","message","render","_jsx","className","css","classNames","wrapper","href","Utils","getSupportPageUrl","target","marginLeft","PreviewBadge","theme","useDesignSystemTheme","Tag","componentId","_css","spacing","xs","color","FormattedMessage","id","defaultMessage","_ref","styles","CopyButton","copyText","showLabel","buttonProps","showTooltip","setShowTooltip","useState","LegacyTooltip","title","dangerouslySetAntdProps","visible","Button","type","onClick","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","RequestStateWrapper","Component","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","filter","r","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","length","every","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","Spinner","defaultProps","connect","mapStateToProps","ownProps","getApis","requestIds","GET_EXPERIMENT_QUERY","gql","useGetExperimentQuery","experimentId","options","_data$mlflowGetExperi","data","loading","apolloError","refetch","useQuery","variables","input","skip","mlflowGetExperiment","experiment","apiError","getApiError","_data$mlflowGetExperi2","u","i","o","l","v","m","g","current","p","window","w","TypeError","s","leading","x","trailing","h","y","debounceOnServer","F","Math","max","maxWait","n","A","t","apply","cancelAnimationFrame","requestAnimationFrame","Date","now","min","slice","call","arguments","cancel","clearTimeout","isPending","flush","equalityFn","QueriesObserver","Subscribable","client","queries","super","result","observers","observersMap","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","prevObserversMap","Map","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","concat","sort","sortMatchesByOrderOfQueries","indexOf","replaceAt","listener","useQueries","context","queryClient","useQueryClient","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedQueries","_optimisticResults","query","ensureStaleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","optimisticResult","useSyncExternalStore","onStoreChange","batchCalls","suspensePromises","shouldSuspend","queryObserver","fetchOptimistic","willFetch","Promise","all","observerQueries","firstSingleResultWhichShouldThrow","find","_defaultedQueries$ind","_defaultedQueries$ind2","getHasError","useErrorBoundary","OverflowMenu","menu","overflowMenu","Menu","itemName","otherProps","Item","Dropdown","overlay","trigger","placement","arrow","icon","OverflowIcon","PageHeader","breadcrumbs","titleAddOns","preview","spacerSize","hideSpacer","dangerouslyAppendEmotionCSS","useIntl","_Fragment","Header","Breadcrumb","includeTrailingCaret","buttons","Spacer","flexShrink","display","coerceToEnum","enumObj","value","fallback","ref","sizeMap","matchedSize","setMatchedSize","useEffect","handleResize","elementWidth","offsetWidth","matchedKey","keys","key","resizeObserver","ResizeObserver","observe","disconnect","SIDEBAR_WIDTHS","sm","lg","OverviewLayout","isLoading","asideSections","isTabLayout","sidebarSize","verticalStackOrder","containerRef","useRef","stackVertically","useResponsiveContainer","small","responsive","breakpoints","verticalDisplayPrimaryContentOnTop","totalSidebarWidth","innerSidebarWidth","secondaryStackedStyles","width","borderBottom","colors","border","paddingBottom","flexDirection","gap","flexGrow","md","GenericSkeleton","style","marginTop","SidebarWrapper","secondarySections","section","content","isTitleLoading","AsideSection","AsideSectionTitle","Typography","Title","level","whiteSpace","marginRight","titleComponent","ParagraphSkeleton","label","compactStyles","padding","borderTop","KeyValueProperty","keyValue","maxWidth","alignItems","marginBottom","wordBreak","lineHeight","typography","lineHeightLg","textSecondary","flex","alignSelf","NoneCell","Text","getQueryKey","runUuid","queryFn","async","queryKey","MlflowService","getRun","run_id","run","useRelatedRunsDataForLoggedModels","loggedModels","_queryResults$find","runUuids","useMemo","allMetricRunUuids","compact","loggedModel","_loggedModel$data","_loggedModel$data$met","metrics","metric","allSourceRunUuids","_loggedModel$info","info","source_run_id","sortBy","uniq","queryResults","cacheTime","Infinity","staleTime","refetchOnWindowFocus","retry","memoizedQueryResults","array","areArraysConsideredTheSame","element","_ref$current","useArrayMemo","Boolean","PageFallback","_error$message","PageWrapper","Empty","description","image","DangerIcon","ExperimentLoggedModelPageWrapper","resetKey","ErrorBoundary","FallbackComponent","resetKeys","UserActionErrorHandler","useValidateLoggedModelSignature","_loggedModel$info2","_yamlContent$signatur","_yamlContent$signatur2","model_id","artifact_uri","artifactLocation","getLoggedModelArtifactLocationUrl","MLMODEL_FILE_NAME","blob","getArtifactBlob","yamlContent","load","text","signature","inputs","outputs","ExperimentLoggedModelDetailsRegisterButton","onSuccess","intl","handleSuccess","_data$value$status","_data$value","successTitle","formatMessage","displayGlobalInfoNotification","status","handleError","_ref2","errorTitle","ErrorWrapper","getMessageField","String","displayGlobalErrorNotification","RegisterModel","modelPath","modelRelativePath","disabled","loggedModelId","buttonType","showButton","onRegisterSuccess","onRegisterFailure","ExperimentLoggedModelDetailsHeader","modelDisplayName","navigate","useNavigate","modalElement","DeleteModalElement","openModal","useExperimentLoggedModelDeleteModal","_mutation$error","open","setOpen","mutation","useMutation","mutationFn","loggedModelsDataRequest","getAjaxUrl","mutate","reset","resetMutation","Modal","onCancel","okText","okButtonProps","danger","onOk","cancelText","Alert","closable","Routes","getExperimentPageTabRoute","ExperimentPageTabName","Models","Link","to","ExperimentLoggedModelDetailsHeaderSkeleton","ExperimentLoggedModelDetailsHeaderIcon","h2","DropdownMenu","Root","Trigger","asChild","Content","align","justifyContent","backgroundColor","tagDefault","general","heightSm","height","borderRadius","legacyBorders","borderRadiusMd","ModelsIcon","ExperimentLoggedModelDetailsNav","modelId","activeTabName","NavigationMenu","List","getExperimentLoggedModelDetailsPageRoute","ExperimentLoggedModelDescription","onDescriptionChanged","_loggedModel$info$tag","_loggedModel$info$tag2","_loggedModel$info$tag3","descriptionContent","tags","tag","NOTE_CONTENT_TAG","showNoteEditor","setShowDescriptionEditor","patch","usePatchLoggedModelsTags","mutateAsync","requestBody","entries","useUserActionErrorHandler","isEmpty","PencilIcon","Hint","EditableNote","defaultMarkdown","onSubmit","handleCancelEditDescription","showEditor","ExperimentLoggedModelDetailsTableRunCellRenderer","getValue","_getValue","runName","runId","getDirectRunPageRoute","SingleDatasetCellRenderer","datasetDigest","datasetName","ExperimentLoggedModelDatasetButton","ExperimentLoggedModelDetailsMetricsTable","relatedRunsData","relatedRunsLoading","usingUnifiedDetailsLayout","detailsPageTableStyles","detailsPageNoEntriesStyles","detailsPageNoResultsWrapperStyles","useExperimentTrackingDetailsPageLayoutStyles","setFilter","metricsWithRunData","_loggedModel$data$met2","_relatedRunsData$find","_relatedRunsData$find2","_run$info","experiment_id","filteredMetrics","dataset_name","dataset_digest","filterLower","toLowerCase","columns","accessorKey","header","enableResizing","accessorFn","cell","meta","minWidth","table","useReactTable","getCoreRowModel","getExpandedRowModel","getRowId","row","_join","join","enableColumnResizing","columnResizeMode","values","borderDecorative","borderRadiusBase","overflow","renderTableContent","TableSkeleton","lines","areAllResultsFiltered","Input","prefix","SearchIcon","placeholder","onChange","allowClear","Table","setAttribute","scrollable","empty","TableRow","isHeader","getLeafHeaders","_header$column$column","TableHeader","column","setColumnSizing","isResizing","getIsResizing","getCanResize","columnDef","flexBasis","getSize","flexRender","getContext","getRowModel","rows","getAllCells","_cell$column$columnDe","TableCell","DatasetListCellRenderer","datasets","Overflow","ExperimentLoggedModelDetailsPageRunsTable","runsWithDatasets","allMetrics","runsByDatasets","groupBy","distinctDatasets","uniqBy","dataset","filteredRunsWithDatasets","_d$datasetName","multiline","ExperimentLoggedModelAllDatasetsList","uniqueDatasets","reduce","aggregate","push","ExperimentLoggedModelDetailsModelVersionsList","modelVersions","useExperimentLoggedModelRegisteredVersions","displayedName","version","link","RegisteredModelOkIcon","ExperimentLoggedModelDetailsMetadataSections","ExperimentLoggedModelDetailsOverview","onDataUpdated","_loggedModel$data2","relatedRunsDataError","relatedSourceRun","_r$info","paramsDictionary","_loggedModel$data$par","keyBy","params","detailsSectionsV2","useExperimentLoggedModelDetailsMetadataV2","_loggedModel$info2$ta","_loggedModel$info2$ta2","_loggedModel$info$mod","_loggedModel$info3","_loggedModel$info4","_loggedModel$info5","_loggedModel$info6","_loggedModel$info7","_relatedSourceRun$inf","_loggedModel$info8","_loggedModel$info$sou","_loggedModel$info9","_loggedModel$info0","_loggedModel$info1","_loggedModel$info10","_loggedModel$info11","detailsContent","ExperimentLoggedModelTableDateCell","creation_timestamp_ms","MLFLOW_LOGGED_MODEL_USER_TAG","ExperimentLoggedModelStatusIndicator","DetailsOverviewCopyableIdBox","getRunPageRoute","ExperimentLoggedModelSourceBox","displayDetails","paddingTop","DETAILS","DATASETS","MODEL_VERSIONS","ExperimentLoggedModelOpenDatasetDetailsContextProvider","DetailsPageLayout","usingSidebarLayout","renderDetails","_loggedModel$info4$ta","_loggedModel$info4$ta2","DetailsOverviewMetadataTable","DetailsOverviewMetadataRow","gridTemplateColumns","gridTemplateRows","DetailsOverviewParamsTable","ExperimentLoggedModelDetailsArtifacts","_loggedModel$info$art","_loggedModel$info$exp","ArtifactPage","isLoggedModelsMode","artifactRootUri","useAutoHeight","entityTags","ExperimentLoggedModelDetailsTracesIntroductionText","code","Paragraph","openInNewTab","zIndex","position","top","right","CopyIcon","CodeSnippet","showLineNumbers","isDarkMode","language","ExperimentLoggedModelDetailsTraces","experimentIds","TracesViewTableNoTracesQuickstartContextProvider","introductionText","displayVersionWarnings","TracesComponent","TracesView","baseComponentId","ExperimentLoggedModelDetailsPageImpl","_currentUserActionErr","tabName","useParams","clearUserActionError","currentUserActionError","invariant","loggedModelLoading","loggedModelLoadError","useGetLoggedModelQuery","experimentData","experimentLoading","experimentApiError","experimentApolloError","experimentLoadError","displayMessage","onClose","errorMessage","ExperimentLoggedModelDetailsPage","showImmediately","spinner","alt","src","immediate","opacity","left","heightBase","animation","keyframes","animationDelay"],"sourceRoot":""}