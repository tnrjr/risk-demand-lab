{"version":3,"file":"static/js/7836.f2717175.chunk.js","mappings":"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","sources":["shared/web-shared/model-trace-explorer/ModelTraceExplorerResizablePane.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerSearchBox.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTree.utils.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerViewStateContext.tsx","shared/web-shared/model-trace-explorer/hooks/useModelTraceSearch.tsx","shared/web-shared/model-trace-explorer/constants.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerHighlightedCodeSnippet.tsx","shared/web-shared/genai-markdown-renderer/TableRenderer.tsx","shared/web-shared/genai-markdown-renderer/GenAIMarkdownRenderer.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCodeSnippetBody.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerHighlightedSnippetTitle.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCodeSnippet.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerAttributesTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatToolParam.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatTool.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessageHeader.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerToolCallMessage.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessage.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatRenderer.utils.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerConversation.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCollapsibleSection.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerDefaultSpanView.tsx","shared/web-shared/model-trace-explorer/key-value-tag/KeyValueTag.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocumentFull.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocumentPreview.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocument.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerRenderModeToggle.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverSpanView.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerContentTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerEventsTab.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerBadge.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentPaneToggle.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentsPane.utils.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.request.utils.tsx","shared/web-shared/model-trace-explorer/api.ts","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateForm.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateButton.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentActionsOverflowMenu.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentDeleteModal.tsx","shared/web-shared/model-trace-explorer/hooks/useUpdateAssessment.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentEditForm.tsx","shared/web-shared/model-trace-explorer/hooks/useOverrideAssessment.tsx","shared/web-shared/model-trace-explorer/assessments-pane/ExpectationValuePreview.tsx","shared/web-shared/model-trace-explorer/assessments-pane/SpanNameDetailViewLink.tsx","shared/web-shared/model-trace-explorer/assessments-pane/ExpectationItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentDisplayValue.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentSourceName.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentItemHeader.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackErrorItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackHistoryItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackHistoryModal.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackItemContent.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackValueGroupSourceCounts.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackValueGroup.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackGroup.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentsPane.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRightPaneTabs.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeFilterButton.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeHeader.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeHierarchyBars.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeSpanTooltip.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeNode.tsx","shared/web-shared/model-trace-explorer/timeline-tree/gantt/TimelineTreeGanttNode.tsx","shared/web-shared/model-trace-explorer/timeline-tree/gantt/TimelineTreeGanttBars.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTree.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerDetailView.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerErrorState.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerSkeleton.tsx","shared/web-shared/model-trace-explorer/hooks/useGetModelTraceInfoV3.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerChatToolsRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerRetrieverFieldRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerTextFieldRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerFieldRenderer.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryViewExceptionsSection.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryIntermediateNode.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummarySpans.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryView.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.tsx","shared/web-shared/global-settings/getUser.tsx","shared/web-shared/model-trace-explorer/chat-utils/autogen.ts","shared/web-shared/model-trace-explorer/chat-utils/bedrock.ts","shared/web-shared/model-trace-explorer/chat-utils/openai.ts","shared/web-shared/model-trace-explorer/chat-utils/llamaindex.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerIcon.tsx","shared/web-shared/model-trace-explorer/chat-utils/anthropic.ts","shared/web-shared/model-trace-explorer/chat-utils/gemini.ts","shared/web-shared/model-trace-explorer/chat-utils/langchain.ts","shared/web-shared/model-trace-explorer/chat-utils/dspy.ts"],"sourcesContent":["import { Global } from '@emotion/react';\nimport { clamp } from 'lodash';\nimport React, { forwardRef, useCallback, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { useResizeObserver } from '../hooks';\n\ninterface ModelTraceExplorerResizablePaneProps {\n  initialRatio: number;\n  paneWidth: number;\n  setPaneWidth: (paneWidth: number) => void;\n  leftChild: React.ReactNode;\n  leftMinWidth: number;\n  rightChild: React.ReactNode;\n  rightMinWidth: number;\n}\n\nexport interface ModelTraceExplorerResizablePaneRef {\n  updateRatio: (newPaneWidth: number) => void;\n}\n\n/**\n * This component takes a left and right child, and adds\n * a draggable handle between them to resize. It handles\n * logic such as preserving the ratio of the pane width\n * when the container/window is resized, and also ensures\n * that the left and right panes conform to specified min\n * widths.\n */\nconst ModelTraceExplorerResizablePane = forwardRef<\n  ModelTraceExplorerResizablePaneRef,\n  ModelTraceExplorerResizablePaneProps\n>(({ initialRatio, paneWidth, setPaneWidth, leftChild, leftMinWidth, rightChild, rightMinWidth }, ref) => {\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const containerWidth = useResizeObserver({ ref: containerRef })?.width;\n  // if container width is not available, don't set a max width\n  const maxWidth = (containerWidth ?? Infinity) - rightMinWidth;\n\n  const ratio = useRef(initialRatio);\n  const { theme } = useDesignSystemTheme();\n\n  const updateRatio = useCallback(\n    // used by the parent component to update the ratio when\n    // the pane is resized via the show/hide gantt button\n    (newPaneWidth: number) => {\n      if (containerWidth) {\n        ratio.current = newPaneWidth / containerWidth;\n      }\n    },\n    [containerWidth],\n  );\n\n  useImperativeHandle(ref, () => ({\n    updateRatio,\n  }));\n\n  useLayoutEffect(() => {\n    // preserve the ratio of the pane width when the container is resized\n    if (containerWidth) {\n      setPaneWidth(clamp(containerWidth * ratio.current, leftMinWidth, maxWidth));\n    }\n  }, [containerWidth, maxWidth, leftMinWidth, rightMinWidth, setPaneWidth]);\n\n  return (\n    <div\n      ref={containerRef}\n      css={{\n        display: 'flex',\n        flex: 1,\n        overflow: 'hidden',\n        flexDirection: 'row',\n      }}\n    >\n      {isResizing && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n      <ResizableBox\n        axis=\"x\"\n        width={paneWidth}\n        css={{ display: 'flex', flex: `0 0 ${paneWidth}px` }}\n        handle={\n          <div css={{ width: 0, position: 'relative' }}>\n            <div\n              css={{\n                position: 'relative',\n                width: theme.spacing.sm,\n                marginLeft: -theme.spacing.xs,\n                minHeight: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: `rgba(0,0,0,0)`,\n                zIndex: 1,\n                ':hover': {\n                  backgroundColor: `rgba(0,0,0,0.1)`,\n                },\n              }}\n            />\n          </div>\n        }\n        onResize={(e, { size }) => {\n          const clampedSize = clamp(size.width, leftMinWidth, maxWidth);\n          setPaneWidth(clampedSize);\n          if (containerWidth) {\n            ratio.current = clampedSize / containerWidth;\n          }\n        }}\n        onResizeStart={() => setIsResizing(true)}\n        onResizeStop={() => setIsResizing(false)}\n        minConstraints={[leftMinWidth, Infinity]}\n        maxConstraints={[maxWidth, Infinity]}\n      >\n        {leftChild}\n      </ResizableBox>\n      {rightChild}\n    </div>\n  );\n});\n\nexport default ModelTraceExplorerResizablePane;\n","import React, { useState } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Input,\n  SearchIcon,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\n\nconst ModelTraceExplorerSearchBox = ({\n  searchFilter,\n  setSearchFilter,\n  matchData,\n  handleNextSearchMatch,\n  handlePreviousSearchMatch,\n}: {\n  searchFilter: string;\n  setSearchFilter: (searchFilter: string) => void;\n  matchData: {\n    match: SearchMatch | null;\n    totalMatches: number;\n    currentMatchIndex: number;\n  };\n  handleNextSearchMatch: () => void;\n  handlePreviousSearchMatch: () => void;\n}) => {\n  const [searchValue, setSearchValue] = useState(searchFilter);\n  const debouncedSetSearchFilter = useDebouncedCallback(setSearchFilter, 350);\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Input\n        componentId=\"shared.model-trace-explorer.search-input\"\n        allowClear\n        placeholder=\"Search\"\n        value={searchValue}\n        onClear={() => {\n          setSearchFilter('');\n          setSearchValue('');\n        }}\n        onChange={(e) => {\n          setSearchValue(e.target.value);\n          debouncedSetSearchFilter(e.target.value.toLowerCase());\n        }}\n        prefix={<SearchIcon />}\n        css={{\n          width: '100%',\n          boxSizing: 'border-box',\n        }}\n      />\n      {matchData.match && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            marginLeft: theme.spacing.xs,\n            marginRight: theme.spacing.sm,\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text css={{ whiteSpace: 'nowrap', marginRight: theme.spacing.sm }}>\n            {matchData.currentMatchIndex + 1} / {matchData.totalMatches}\n          </Typography.Text>\n          <Button\n            data-testid=\"prev-search-match\"\n            icon={<ChevronUpIcon />}\n            onClick={handlePreviousSearchMatch}\n            componentId=\"shared.model-trace-explorer.prev-search-match\"\n          />\n          <Button\n            data-testid=\"next-search-match\"\n            icon={<ChevronDownIcon />}\n            onClick={handleNextSearchMatch}\n            componentId=\"shared.model-trace-explorer.next-search-match\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTraceExplorerSearchBox;\n","import { values } from 'lodash';\nimport { useState } from 'react';\n\nimport type { TimelineTreeNode } from './TimelineTree.types';\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\n\n// expand all nodes by default\nexport const DEFAULT_EXPAND_DEPTH = Infinity;\nexport const SPAN_INDENT_WIDTH = 16;\nexport const SPAN_ROW_HEIGHT = 32;\nexport const TimelineTreeZIndex = {\n  HIGH: 5,\n  NORMAL: 3,\n  LOW: 1,\n};\n\n// Gets the min and max start and end times of the tree\nexport const getTimelineTreeSpanConstraints = (\n  nodes: TimelineTreeNode[],\n  constraints = { min: Number.MAX_SAFE_INTEGER, max: 0 },\n) => {\n  nodes.forEach((node) => {\n    const { start, end, children } = node;\n    if (start < constraints.min) {\n      constraints.min = start;\n    }\n    if (end > constraints.max) {\n      constraints.max = end;\n    }\n    getTimelineTreeSpanConstraints(children ?? [], constraints);\n  });\n\n  return constraints;\n};\n\n// Gets a flat list of all expanded nodes in the tree\nexport const getTimelineTreeExpandedNodesList = <T extends TimelineTreeNode & { children?: T[] }>(\n  nodes: T[],\n  expandedKeys: Set<string | number>,\n) => {\n  const expandedNodesFlat: T[] = [];\n  const traverseExpanded = (traversedNode: T | undefined) => {\n    if (!traversedNode) {\n      return;\n    }\n    expandedNodesFlat.push(traversedNode);\n    if (expandedKeys.has(traversedNode.key)) {\n      traversedNode.children?.forEach(traverseExpanded);\n    }\n  };\n\n  nodes.forEach(traverseExpanded);\n  return expandedNodesFlat;\n};\n\n// Gets a flat list of all nodes in the tree (regardless of expansion status)\nexport const getTimelineTreeNodesList = <T extends TimelineTreeNode & { children?: T[] }>(nodes: T[]) => {\n  const expandedNodesFlat: T[] = [];\n  const traverseExpanded = (traversedNode: T | undefined) => {\n    if (!traversedNode) {\n      return;\n    }\n    expandedNodesFlat.push(traversedNode);\n    traversedNode.children?.forEach(traverseExpanded);\n  };\n\n  nodes.forEach(traverseExpanded);\n  return expandedNodesFlat;\n};\n\nexport const getTimelineTreeNodesMap = <T extends TimelineTreeNode & { children?: T[] }>(\n  nodes: T[],\n  expandDepth = Infinity,\n) => {\n  const nodesMap: { [nodeId: string]: T } = {};\n\n  const traverse = (traversedNode: T | undefined, depth: number) => {\n    if (!traversedNode || depth > expandDepth) {\n      return;\n    }\n    nodesMap[traversedNode.key] = traversedNode;\n    traversedNode.children?.forEach((child: T) => traverse(child, depth + 1));\n  };\n\n  nodes.forEach(traverse, 0);\n  return nodesMap;\n};\n\nexport const useTimelineTreeExpandedNodes = <T extends ModelTraceSpanNode & { children?: T[] }>(\n  params: {\n    rootNodes?: T[];\n    // nodes beyond this depth will be collapsed\n    initialExpandDepth?: number;\n  } = {},\n) => {\n  const [expandedKeys, setExpandedKeys] = useState<Set<string | number>>(() => {\n    if (params.rootNodes) {\n      const list = values(getTimelineTreeNodesMap(params.rootNodes, params.initialExpandDepth)).map((node) => node.key);\n      return new Set(list);\n    }\n    return new Set();\n  });\n\n  return {\n    expandedKeys,\n    setExpandedKeys,\n  };\n};\n\nexport const useTimelineTreeSelectedNode = () => {\n  const [selectedNode, setSelectedNode] = useState<ModelTraceSpanNode | undefined>(undefined);\n\n  return {\n    selectedNode,\n    setSelectedNode,\n  };\n};\n\nexport const spanTimeFormatter = (executionTimeUs: number) => {\n  // Convert to different units based on the time scale\n  if (executionTimeUs === 0) {\n    return '0s';\n  } else if (executionTimeUs >= 60 * 1e6) {\n    // More than or equal to 1 minute\n    const executionTimeMin = executionTimeUs / 1e6 / 60;\n    return `${executionTimeMin.toFixed(2)}m`;\n  } else if (executionTimeUs >= 1e5) {\n    // More than or equal to 0.1 second. this\n    // is to avoid showing 3-digit ms numbers\n    const executionTimeSec = executionTimeUs / 1e6;\n    return `${executionTimeSec.toFixed(2)}s`;\n  } else {\n    // Less than 0.1 second (milliseconds)\n    const executionTimeMs = executionTimeUs / 1e3;\n    return `${executionTimeMs.toFixed(2)}ms`;\n  }\n};\n\nexport const getActiveChildIndex = (node: ModelTraceSpanNode, activeNodeId: string): number => {\n  if (node.key === activeNodeId) {\n    return 0;\n  }\n\n  return (node.children ?? []).findIndex((child) => getActiveChildIndex(child, activeNodeId) > -1);\n};\n\nexport const getModelTraceSpanNodeDepth = (node: ModelTraceSpanNode): number => {\n  if (!node.children || node.children?.length === 0) {\n    return 0;\n  }\n\n  const childDepths = node.children.map(getModelTraceSpanNodeDepth);\n  return Math.max(...childDepths) + 1;\n};\n\nexport const getSpanNodeParentIds = (node: ModelTraceSpanNode, nodeMap: { [nodeId: string]: ModelTraceSpanNode }) => {\n  const parents = new Set<string | number>();\n\n  let currentNode = node;\n  while (currentNode && currentNode.parentId) {\n    parents.add(currentNode.parentId);\n    currentNode = nodeMap[currentNode.parentId];\n  }\n\n  return parents;\n};\n","import { createContext, useContext, useMemo, useState } from 'react';\n\nimport type { ModelTrace, ModelTraceExplorerTab, ModelTraceSpanNode } from './ModelTrace.types';\nimport { parseModelTraceToTree, searchTreeBySpanId } from './ModelTraceExplorer.utils';\nimport { getTimelineTreeNodesMap } from './timeline-tree/TimelineTree.utils';\n\nexport type ModelTraceExplorerViewState = {\n  rootNode: ModelTraceSpanNode | null;\n  nodeMap: Record<string, ModelTraceSpanNode>;\n  activeView: 'summary' | 'detail';\n  setActiveView: (view: 'summary' | 'detail') => void;\n  selectedNode: ModelTraceSpanNode | undefined;\n  setSelectedNode: (node: ModelTraceSpanNode | undefined) => void;\n  activeTab: ModelTraceExplorerTab;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n  showTimelineTreeGantt: boolean;\n  setShowTimelineTreeGantt: (show: boolean) => void;\n  assessmentsPaneExpanded: boolean;\n  setAssessmentsPaneExpanded: (expanded: boolean) => void;\n  assessmentsPaneEnabled: boolean;\n};\n\nexport const ModelTraceExplorerViewStateContext = createContext<ModelTraceExplorerViewState>({\n  rootNode: null,\n  nodeMap: {},\n  activeView: 'summary',\n  setActiveView: () => {},\n  selectedNode: undefined,\n  setSelectedNode: () => {},\n  activeTab: 'content',\n  setActiveTab: () => {},\n  showTimelineTreeGantt: false,\n  setShowTimelineTreeGantt: () => {},\n  assessmentsPaneExpanded: false,\n  setAssessmentsPaneExpanded: () => {},\n  assessmentsPaneEnabled: true,\n});\n\nexport const useModelTraceExplorerViewState = () => {\n  return useContext(ModelTraceExplorerViewStateContext);\n};\n\nexport const ModelTraceExplorerViewStateProvider = ({\n  modelTrace,\n  initialActiveView,\n  selectedSpanIdOnRender,\n  // assessments pane is disabled if\n  // the trace doesn't exist in the backend\n  // (i.e. if the traceinfo fetch fails)\n  assessmentsPaneEnabled,\n  children,\n}: {\n  modelTrace: ModelTrace;\n  initialActiveView: 'summary' | 'detail';\n  selectedSpanIdOnRender?: string;\n  children: React.ReactNode;\n  assessmentsPaneEnabled: boolean;\n}) => {\n  const rootNode = useMemo(() => parseModelTraceToTree(modelTrace), [modelTrace]);\n  const nodeMap = useMemo(() => (rootNode ? getTimelineTreeNodesMap([rootNode]) : {}), [rootNode]);\n  const selectedSpanOnRender = searchTreeBySpanId(rootNode, selectedSpanIdOnRender);\n  const defaultSelectedNode = selectedSpanOnRender ?? rootNode ?? undefined;\n  const hasAssessments = (defaultSelectedNode?.assessments?.length ?? 0) > 0;\n\n  const [activeView, setActiveView] = useState<'summary' | 'detail'>(initialActiveView);\n  const [selectedNode, setSelectedNode] = useState<ModelTraceSpanNode | undefined>(defaultSelectedNode);\n  const [activeTab, setActiveTab] = useState<ModelTraceExplorerTab>(selectedNode?.chatMessages ? 'chat' : 'content');\n  const [showTimelineTreeGantt, setShowTimelineTreeGantt] = useState(false);\n  const [assessmentsPaneExpanded, setAssessmentsPaneExpanded] = useState(hasAssessments);\n\n  const value = useMemo(\n    () => ({\n      rootNode,\n      nodeMap,\n      activeView,\n      setActiveView,\n      activeTab,\n      setActiveTab,\n      selectedNode,\n      setSelectedNode,\n      showTimelineTreeGantt,\n      setShowTimelineTreeGantt,\n      assessmentsPaneExpanded,\n      setAssessmentsPaneExpanded,\n      assessmentsPaneEnabled,\n    }),\n    [\n      activeView,\n      nodeMap,\n      activeTab,\n      rootNode,\n      selectedNode,\n      showTimelineTreeGantt,\n      setShowTimelineTreeGantt,\n      assessmentsPaneExpanded,\n      setAssessmentsPaneExpanded,\n      assessmentsPaneEnabled,\n    ],\n  );\n\n  return (\n    <ModelTraceExplorerViewStateContext.Provider value={value}>{children}</ModelTraceExplorerViewStateContext.Provider>\n  );\n};\n","import { compact, isNil } from 'lodash';\nimport { useCallback, useLayoutEffect, useMemo, useState } from 'react';\n\nimport type {\n  ModelTraceExplorerTab,\n  ModelTraceSpanNode,\n  SearchMatch,\n  SpanFilterState,\n  ModelTrace,\n} from '../ModelTrace.types';\nimport { searchTree } from '../ModelTraceExplorer.utils';\nimport {\n  getSpanNodeParentIds,\n  getTimelineTreeNodesList,\n  getTimelineTreeNodesMap,\n} from '../timeline-tree/TimelineTree.utils';\n\nconst getDefaultSpanFilterState = (treeNode: ModelTraceSpanNode | null): SpanFilterState => {\n  const spanTypeDisplayState: Record<string, boolean> = {};\n\n  // populate the spanTypeDisplayState with\n  // all span types that exist on the trace\n  if (treeNode) {\n    const allSpanTypes = compact(getTimelineTreeNodesList<ModelTraceSpanNode>([treeNode]).map((node) => node.type));\n    allSpanTypes.forEach((spanType) => {\n      spanTypeDisplayState[spanType] = true;\n    });\n  }\n\n  return {\n    showParents: true,\n    showExceptions: true,\n    spanTypeDisplayState,\n  };\n};\n\nconst getTabForMatch = (match: SearchMatch): ModelTraceExplorerTab => {\n  switch (match.section) {\n    case 'inputs':\n    case 'outputs':\n      return 'content';\n    case 'attributes':\n      return 'attributes';\n    case 'events':\n      return 'events';\n    default:\n      // shouldn't happen\n      return 'content';\n  }\n};\n\nexport const useModelTraceSearch = ({\n  treeNode,\n  selectedNode,\n  setSelectedNode,\n  setActiveTab,\n  setExpandedKeys,\n  modelTraceInfo,\n}: {\n  treeNode: ModelTraceSpanNode | null;\n  selectedNode: ModelTraceSpanNode | undefined;\n  setSelectedNode: (node: ModelTraceSpanNode) => void;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n  setExpandedKeys: React.Dispatch<React.SetStateAction<Set<string | number>>>;\n  modelTraceInfo: ModelTrace['info'] | null;\n}): {\n  searchFilter: string;\n  setSearchFilter: (filter: string) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matchData: {\n    match: SearchMatch | null;\n    totalMatches: number;\n    currentMatchIndex: number;\n  };\n  handleNextSearchMatch: () => void;\n  handlePreviousSearchMatch: () => void;\n} => {\n  const [searchFilter, setSearchFilter] = useState<string>('');\n  const [spanFilterState, setSpanFilterState] = useState<SpanFilterState>(() => getDefaultSpanFilterState(treeNode));\n  const [activeMatchIndex, setActiveMatchIndex] = useState(0);\n  const { filteredTreeNodes, matches } = useMemo(() => {\n    if (isNil(treeNode)) {\n      return {\n        filteredTreeNodes: [],\n        matches: [],\n      };\n    }\n\n    return searchTree(treeNode, searchFilter, spanFilterState);\n    // use the span ID to determine whether the state should be recomputed.\n    // using the whole object seems to cause the state to be reset at\n    // unexpected times.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [treeNode?.key, searchFilter, spanFilterState, modelTraceInfo]);\n\n  const nodeMap = useMemo(() => {\n    return getTimelineTreeNodesMap(filteredTreeNodes);\n  }, [filteredTreeNodes]);\n\n  const selectMatch = useCallback(\n    (newMatchIndex: number) => {\n      if (newMatchIndex >= matches.length || newMatchIndex < 0) {\n        return;\n      }\n      setActiveMatchIndex(newMatchIndex);\n      const match = matches[newMatchIndex];\n      setSelectedNode(match.span);\n      setActiveTab(getTabForMatch(match));\n      // Make sure parents are expanded\n      const parents = getSpanNodeParentIds(match.span, nodeMap);\n      setExpandedKeys((expandedKeys) => {\n        // set.union seems to not be available in all environments\n        return new Set([...expandedKeys, ...parents]);\n      });\n    },\n    [matches, setSelectedNode, setActiveTab, nodeMap, setExpandedKeys],\n  );\n\n  const handleNextSearchMatch = useCallback(() => {\n    selectMatch(activeMatchIndex + 1);\n  }, [activeMatchIndex, selectMatch]);\n\n  const handlePreviousSearchMatch = useCallback(() => {\n    selectMatch(activeMatchIndex - 1);\n  }, [activeMatchIndex, selectMatch]);\n\n  useLayoutEffect(() => {\n    if (filteredTreeNodes.length === 0) {\n      return;\n    }\n\n    // this case can trigger on two conditions:\n    // 1. the search term is cleared, therefore there are no matches\n    // 2. the search term only matches on span names, which don't count\n    //    as matches since we don't support jumping to them.\n    if (matches.length === 0) {\n      // if the selected node is no longer in the tree, then select\n      // the first node. this can occur from condition #2 above\n      const selectedNodeKey = selectedNode?.key ?? '';\n      if (!(selectedNodeKey in nodeMap)) {\n        const newSpan = filteredTreeNodes[0];\n        setSelectedNode(newSpan);\n        setActiveTab(newSpan?.chatMessages ? 'chat' : 'content');\n      } else {\n        // another reason the tree can change is if modelTraceInfo changes.\n        // (e.g. tags/assessments were updated). if this happens, we need\n        // to reselect the updated node from the node map, otherwise the\n        // updates will not be reflected in the UI.\n        setSelectedNode(nodeMap[selectedNodeKey]);\n      }\n\n      // otherwise, if search was cleared, then we don't want to\n      // do anything. this is to preserve the user's context\n      // (e.g. they've jumped to a span and now want to dive deeper)\n      return;\n    }\n\n    // when matches update, select the first match\n    setActiveMatchIndex(0);\n    setSelectedNode(matches[0].span);\n    setActiveTab(getTabForMatch(matches[0]));\n    // don't subscribe to selectedNode to prevent infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filteredTreeNodes, matches, setSelectedNode]);\n\n  return {\n    matchData: {\n      match: matches[activeMatchIndex] ?? null,\n      totalMatches: matches.length,\n      currentMatchIndex: activeMatchIndex,\n    },\n    searchFilter: searchFilter.toLowerCase().trim(),\n    setSearchFilter,\n    spanFilterState,\n    setSpanFilterState,\n    filteredTreeNodes,\n    handleNextSearchMatch,\n    handlePreviousSearchMatch,\n  };\n};\n","export const ACTIVE_HIGHLIGHT_COLOR = 'yellow500';\nexport const INACTIVE_HIGHLIGHT_COLOR = 'yellow200';\n","import React, { useCallback, useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { getHighlightedSpanComponents } from './ModelTraceExplorer.utils';\nimport { ACTIVE_HIGHLIGHT_COLOR, INACTIVE_HIGHLIGHT_COLOR } from './constants';\n\nexport const ModelTraceExplorerHighlightedCodeSnippet = ({\n  searchFilter,\n  data,\n  activeMatch,\n  containsActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatch: SearchMatch;\n  containsActiveMatch: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const scrollToActiveMatch = useCallback((node: HTMLElement | null) => {\n    node?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, []);\n\n  const spans = useMemo(() => {\n    if (!searchFilter) {\n      return [];\n    }\n\n    return getHighlightedSpanComponents({\n      data,\n      searchFilter,\n      activeMatchBackgroundColor: theme.colors[ACTIVE_HIGHLIGHT_COLOR],\n      inactiveMatchBackgroundColor: theme.colors[INACTIVE_HIGHLIGHT_COLOR],\n      containsActiveMatch,\n      activeMatch,\n      scrollToActiveMatch,\n    });\n  }, [searchFilter, data, theme, containsActiveMatch, activeMatch, scrollToActiveMatch]);\n\n  return (\n    <pre\n      css={{\n        whiteSpace: 'pre-wrap',\n        backgroundColor: theme.colors.backgroundSecondary,\n        padding: theme.spacing.sm,\n        fontSize: theme.typography.fontSizeSm,\n      }}\n    >\n      {spans}\n    </pre>\n  );\n};\n","import React from 'react';\nimport { useVirtual } from 'react-virtual';\n\nimport { Table, TableCell, TableHeader, TableRow, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ReactMarkdownProps } from './types';\n\nexport function useParsedTableComponents({ children }: ReactMarkdownProps<'table'>): {\n  header: React.ReactNode | undefined;\n  rows: React.ReactElement[];\n  isValid: boolean;\n} {\n  if (!children) {\n    return {\n      header: undefined,\n      rows: [],\n      isValid: false,\n    };\n  }\n\n  const childArray = React.Children.toArray(children);\n\n  const header = childArray[0] ?? undefined;\n\n  // Parse rows, expect all children after the header to be tbody element containing the rows\n  const rows: React.ReactElement[] = childArray.slice(1).flatMap((child) => {\n    if (React.isValidElement(child)) {\n      return React.Children.toArray(child.props.children).filter((c): c is React.ReactElement =>\n        React.isValidElement(c),\n      );\n    }\n    return [];\n  });\n\n  return {\n    header,\n    rows,\n    isValid: true,\n  };\n}\n\nconst BasicTable = ({ children }: ReactMarkdownProps<'table'>) => {\n  return (\n    // Tables with many columns were not scrollable but instead become squished rendering the content unreadable\n    // Fixed by wrapping the table in a div with overflow auto and setting the table to display inline-flex\n    <div data-testid=\"basic-table\" css={{ overflow: 'auto' }}>\n      {/* Table has a \"height: 100%\" style that causes layout issues in some cases */}\n      <Table\n        scrollable\n        css={{\n          height: 'auto',\n          minHeight: 'initial',\n          display: 'inline-flex',\n          // Tables in tool call responses were not taking up the full width of the container\n          minWidth: '100%',\n          zIndex: 0, // Ensure the raised header doesn't cover elements outside the table\n        }}\n        children={children}\n      />\n    </div>\n  );\n};\n\nexport const TableRenderer = ({ children, node }: ReactMarkdownProps<'table'>) => {\n  const { header, rows, isValid } = useParsedTableComponents({ children, node });\n\n  if (!isValid) {\n    // If for some reason the table is not valid, fall back to the basic table\n    return <BasicTable children={children} node={node} />;\n  }\n\n  return <VirtualizedTable header={header} rows={rows} />;\n};\n\nconst MAX_TABLE_HEIGHT = 420;\n\nconst OVERSCAN = 20;\n\nconst VirtualizedTable = ({ header, rows }: { header: React.ReactNode; rows: React.ReactNode[] }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const parentRef = React.useRef<HTMLDivElement>(null);\n\n  const rowVirtualizer = useVirtual({\n    size: rows.length,\n    parentRef,\n    overscan: OVERSCAN,\n  });\n\n  const { virtualItems, totalSize } = rowVirtualizer;\n\n  return (\n    <div\n      data-testid=\"virtualized-table\"\n      ref={parentRef}\n      css={{\n        overflow: 'auto',\n        maxHeight: MAX_TABLE_HEIGHT,\n        border: '1px solid',\n        borderColor: theme.colors.border,\n        borderRadius: theme.borders.borderRadiusMd,\n        marginBottom: theme.spacing.md,\n        zIndex: 0, // Ensure the raised header doesn't cover elements outside the table\n      }}\n    >\n      <Table\n        css={{\n          height: 'auto',\n          minHeight: 'initial',\n          display: 'inline-flex',\n          minWidth: '100%',\n        }}\n      >\n        {header}\n        <div\n          css={{\n            position: 'relative',\n            height: `${totalSize}px`,\n            width: '100%',\n            // Remove bottom border from the last row\n            '& > div:last-child [role=\"cell\"]': { borderBottom: 'none' },\n          }}\n        >\n          {virtualItems.map((virtualRow) => {\n            const rowIndex = virtualRow.index;\n            const rowElement = rows[rowIndex];\n\n            return (\n              <div\n                ref={virtualRow.measureRef}\n                key={rowIndex}\n                css={{\n                  position: 'absolute',\n                  top: `${virtualRow.start}px`,\n                  width: '100%',\n                }}\n              >\n                {rowElement}\n              </div>\n            );\n          })}\n        </div>\n      </Table>\n    </div>\n  );\n};\n\nexport const VirtualizedTableRow = ({ children, node }: ReactMarkdownProps<'tr'>) => {\n  const isHeader = node?.children.some((child) => child.tagName === 'th');\n  const { theme } = useDesignSystemTheme();\n  return (\n    <TableRow\n      style={\n        isHeader\n          ? { position: 'sticky', top: 0, zIndex: 1, backgroundColor: theme.colors.backgroundPrimary }\n          : undefined\n      }\n      children={children}\n      isHeader={isHeader}\n    />\n  );\n};\n\nexport const VirtualizedTableCell = ({ children, node }: ReactMarkdownProps<'td' | 'th'>) => {\n  const isHeader = node?.tagName === 'th';\n  const { theme } = useDesignSystemTheme();\n\n  if (isHeader) {\n    return (\n      <TableHeader\n        data-testid=\"virtualized-table-header\"\n        componentId=\"virtualized-table-header\"\n        css={{ paddingLeft: theme.spacing.sm, borderColor: theme.colors.border, color: theme.colors.textPrimary }}\n        children={children}\n      />\n    );\n  }\n\n  return <TableCell children={children} />;\n};\n","import React, { type ComponentType, useMemo } from 'react';\nimport type { Components, Options, UrlTransform } from 'react-markdown-10';\nimport ReactMarkdown, { defaultUrlTransform } from 'react-markdown-10';\nimport remarkGfm from 'remark-gfm-4';\n\nimport { TableCell, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { CodeSnippetLanguage } from '@databricks/web-shared/snippet';\nimport { CodeSnippet, SnippetCopyAction } from '@databricks/web-shared/snippet';\n\nimport { TableRenderer, VirtualizedTableCell, VirtualizedTableRow } from './TableRenderer';\nimport type { ReactMarkdownComponent, ReactMarkdownComponents, ReactMarkdownProps } from './types';\n\n/**\n * NOTE: react-markdown sanitizes urls by default, including `data:` urls, with the `urlTransform` prop, documented here: https://github.com/remarkjs/react-markdown?tab=readme-ov-file#defaulturltransformurl\n * It uses `micromark-util-sanitize-uri` package under the hood to escape urls and prevent injection: https://github.com/micromark/micromark/tree/main/packages/micromark-util-sanitize-uri#readme\n * We can allow jpeg and png data urls, and use the default transformer for everything else.\n */\nconst urlTransform: UrlTransform = (value) => {\n  if (value.startsWith('data:image/png') || value.startsWith('data:image/jpeg')) {\n    return value;\n  }\n  return defaultUrlTransform(value);\n};\n\nexport const GenAIMarkdownRenderer = (props: { children: string; components?: ExtendedComponents }) => {\n  const components: Components = useMemo(\n    () => getMarkdownComponents({ extensions: props.components }),\n    [props.components],\n  );\n  return (\n    <ReactMarkdown components={components} remarkPlugins={RemarkPlugins} urlTransform={urlTransform}>\n      {props.children}\n    </ReactMarkdown>\n  );\n};\n\nconst CodeMarkdownComponent = ({\n  codeBlock,\n  codeInline,\n  node,\n  ...codeProps\n}: Required<ExtededCodeRenderers> & ReactMarkdownProps<'code'>) => {\n  const language = React.useMemo(() => {\n    const match = /language-(\\w+)/.exec(codeProps.className ?? '');\n    return match && match[1] ? match[1] : undefined;\n  }, [codeProps.className]);\n\n  if (node?.position?.start.line === node?.position?.end.line) {\n    return React.createElement(codeInline, codeProps);\n  }\n\n  return React.createElement(codeBlock, { ...codeProps, language });\n};\n\nconst InlineCode = ({ children }: ReactMarkdownProps<'code'>) => <Typography.Text code>{children}</Typography.Text>;\n\n/**\n * Since this component is quite expensive to render we memoize it so if multiple\n * code blocks are being rendered, we only update the code blocks with changing props\n */\nconst CodeBlock = React.memo(({ children, language }: ReactMarkdownProps<'code'> & { language?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const code = String(children).replace(/\\n$/, '');\n  return (\n    <div css={{ position: 'relative' }}>\n      <CodeSnippet\n        actions={<SnippetCopyAction componentId=\"genai.util.markdown-copy-code-block\" copyText={code} />}\n        theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n        children={code}\n        language={language && isCodeSnippetLanguage(language) ? language : 'text'}\n        style={{\n          padding: '8px 0',\n          borderRadius: 8,\n          width: '100%',\n          boxSizing: 'border-box',\n          // Setting a reasonable max height to avoid long code blocks taking up the entire screen.\n          // Component handles scrolling inside it gracefully\n          maxHeight: 640,\n          // Using column-reverse flex layout so the scroll position will stick to the bottom\n          // as new content is streamed in.\n          display: 'flex',\n          flexDirection: 'column-reverse',\n        }}\n        showLineNumbers\n      />\n    </div>\n  );\n});\n\nconst RemarkPlugins: Options['remarkPlugins'] = [remarkGfm];\n\n// react-markdown handles both inline and block code rendering in the same component\n// however, we want to render them differently so we need to split them into two components.\n// This also allows callees to override the default renderers separately\ntype ExtededCodeRenderers = {\n  codeInline?: ReactMarkdownComponent<'code'>;\n  codeBlock?: ComponentType<Omit<ReactMarkdownProps<'code'>, 'ref'> & { language?: string }>;\n};\n\ntype ExtendedComponents = Omit<ReactMarkdownComponents, 'code'> & ExtededCodeRenderers;\n\nexport const getMarkdownComponents = (props: { extensions?: ExtendedComponents }) =>\n  ({\n    a: ({ href, children }) => (\n      <Typography.Link\n        componentId=\"codegen_webapp_js_genai_util_markdown.tsx_71\"\n        href={href}\n        // If the link is to the footnote (starts with #user-content-fn), set id so footnote can link back to it\n        id={\n          href?.startsWith('#user-content-fn-') ? href.replace('#user-content-fn-', 'user-content-fnref-') : undefined\n        }\n        disabled={href?.startsWith('.')}\n        // If the link is to the footnote, add brackets around the children to make it appear as a footnote reference\n        children={href?.startsWith('#user-content-fn-') ? <>[{children}]</> : children}\n        // If the link is an id link, don't open in new tab\n        openInNewTab={!(href && href.startsWith('#'))}\n      />\n    ),\n    code: (codeProps) => (\n      <CodeMarkdownComponent\n        {...codeProps}\n        codeBlock={props.extensions?.codeBlock ?? CodeBlock} // Optionally override the default code block renderer\n        codeInline={props.extensions?.codeInline ?? InlineCode} // Optionally override the default inline code renderer\n      />\n    ),\n    p: ({ children }) => <Typography.Paragraph children={children} />,\n    h1: ({ children }) => <Typography.Title level={1} children={children} />,\n    h2: ({ children }) => <Typography.Title level={2} children={children} />,\n    h3: ({ children }) => <Typography.Title level={3} children={children} />,\n    h4: ({ children }) => <Typography.Title level={4} children={children} />,\n    h5: ({ children }) => <Typography.Title level={5} children={children} />,\n    table: ({ children, node }) => <TableRenderer children={children} node={node} />,\n    tr: ({ children, node }) => <VirtualizedTableRow children={children} node={node} />,\n    th: ({ children, node }) => <VirtualizedTableCell children={children} node={node} />,\n    // Without the multiline prop, the table cell will add ellipsis to the text effictively hiding the content\n    // for long text. This is not the desired behavior for markdown tables.\n    td: ({ children }) => <TableCell children={children} multiline />,\n    // Design system's table does not use thead and tbody elements\n    thead: ({ children }) => <>{children}</>,\n    tbody: ({ children }) => <>{children}</>,\n    img: ({ src, alt }) => <img src={src} alt={alt} css={{ maxWidth: '100%' }} />,\n  } satisfies ReactMarkdownComponents);\n\nconst isCodeSnippetLanguage = (languageString: string): languageString is CodeSnippetLanguage => {\n  // Casting the string to string literal so we can exhaust the union\n  const typeCast = languageString as CodeSnippetLanguage;\n  switch (typeCast) {\n    case 'go':\n    case 'java':\n    case 'javascript':\n    case 'json':\n    case 'python':\n    case 'sql':\n    case 'text':\n    case 'yaml':\n      return true;\n    default:\n      return false;\n  }\n};\n","import { isNil, isString } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronUpIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { CodeSnippetRenderMode } from './ModelTrace.types';\nimport { ModelTraceExplorerHighlightedCodeSnippet } from './ModelTraceExplorerHighlightedCodeSnippet';\nimport { GenAIMarkdownRenderer } from '../genai-markdown-renderer';\n// eslint-disable-next-line import/no-deprecated\nimport { CodeSnippet, SnippetCopyAction } from '../snippet';\n\nconst MAX_LINES_FOR_PREVIEW = 4;\n// the `isContentLong` check does not work for\n// markdown rendering, since the content is wrapped\nconst MAX_CHARS_FOR_PREVIEW = 300;\n\nexport function ModelTraceExplorerCodeSnippetBody({\n  data,\n  searchFilter = '',\n  activeMatch = null,\n  containsActiveMatch = false,\n  renderMode = CodeSnippetRenderMode.JSON,\n}: {\n  data: string;\n  searchFilter?: string;\n  activeMatch?: SearchMatch | null;\n  containsActiveMatch?: boolean;\n  renderMode?: CodeSnippetRenderMode;\n}) {\n  const containsMatches = Boolean(searchFilter) && !isNil(activeMatch) && data.toLowerCase().includes(searchFilter);\n  const { theme } = useDesignSystemTheme();\n  const [isContentLong, setIsContentLong] = useState(renderMode === 'json');\n  const [expanded, setExpanded] = useState(containsMatches);\n  const snippetRef = useRef<HTMLPreElement>(null);\n  // if the data is rendered in text / markdown mode, then\n  // we need to parse it so that the newlines are unescaped\n  const dataToTruncate: string = useMemo(() => {\n    if (renderMode === 'json') {\n      return data;\n    }\n\n    const parsedData = JSON.parse(data);\n    if (isString(parsedData)) {\n      return parsedData;\n    }\n\n    return data;\n  }, [data, renderMode]);\n\n  const expandable =\n    isContentLong ||\n    dataToTruncate.split('\\n').length > MAX_LINES_FOR_PREVIEW ||\n    dataToTruncate.length > MAX_CHARS_FOR_PREVIEW;\n\n  // Truncate after first 3 lines if not expanded\n  const displayedData = useMemo(() => {\n    if (expandable && !expanded) {\n      const split = dataToTruncate.split('\\n').slice(0, MAX_LINES_FOR_PREVIEW).join('\\n');\n      return split.length > MAX_CHARS_FOR_PREVIEW ? split.slice(0, MAX_CHARS_FOR_PREVIEW) : split;\n    }\n\n    return dataToTruncate;\n  }, [dataToTruncate, expandable, expanded]);\n\n  useEffect(() => {\n    if (snippetRef.current) {\n      setIsContentLong(snippetRef.current.scrollWidth > snippetRef.current.clientWidth);\n    }\n  }, [data]);\n\n  // add a ref to the <pre> component within <CodeSnippet>.\n  // we use the ref to check whether the <pre>'s content is overflowing\n  const PreWithRef = useCallback((preProps: any) => <pre {...preProps} ref={snippetRef} />, []);\n\n  if (containsMatches) {\n    return (\n      // if the snippet contains matches, render the search-highlighted version\n      <ModelTraceExplorerHighlightedCodeSnippet\n        data={data}\n        searchFilter={searchFilter}\n        activeMatch={activeMatch}\n        containsActiveMatch={!activeMatch.isKeyMatch && containsActiveMatch}\n      />\n    );\n  }\n\n  return (\n    <div css={{ position: 'relative' }}>\n      {renderMode === 'markdown' ? (\n        <div\n          css={{\n            padding: theme.spacing.md,\n            backgroundColor: theme.colors.backgroundSecondary,\n            marginBottom: -theme.spacing.md,\n          }}\n        >\n          <GenAIMarkdownRenderer>{displayedData}</GenAIMarkdownRenderer>\n        </div>\n      ) : (\n        <>\n          <SnippetCopyAction\n            key=\"copy-snippet\"\n            componentId=\"shared.model-trace-explorer.copy-snippet\"\n            copyText={data}\n            size=\"small\"\n            css={{ position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs, zIndex: 1 }}\n          />\n          {/* eslint-disable-next-line import/no-deprecated */}\n          <CodeSnippet\n            PreTag={PreWithRef}\n            showLineNumbers\n            language={renderMode}\n            lineProps={{ style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' } }}\n            wrapLines={expanded}\n            theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n            style={{\n              backgroundColor: theme.colors.backgroundSecondary,\n              padding: theme.spacing.sm,\n              paddingBottom: expandable ? 0 : theme.spacing.sm,\n              paddingRight: theme.spacing.md * 2,\n              overflow: expanded ? 'auto' : 'hidden',\n              textOverflow: 'ellipsis',\n              fontSize: theme.typography.fontSizeSm,\n              lineHeight: theme.typography.lineHeightBase,\n            }}\n          >\n            {displayedData}\n          </CodeSnippet>\n        </>\n      )}\n      {expandable && (\n        <div css={{ backgroundColor: theme.colors.backgroundSecondary }}>\n          <Button\n            css={{ width: '100%', padding: 0 }}\n            componentId={\n              expanded ? 'shared.model-trace-explorer.snippet-see-less' : 'shared.model-trace-explorer.snippet-see-more'\n            }\n            icon={expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n            type=\"tertiary\"\n            onClick={() => setExpanded(!expanded)}\n          >\n            {expanded ? (\n              <FormattedMessage\n                defaultMessage=\"See less\"\n                description=\"Model trace explorer > selected span > code snippet > see less button\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See more\"\n                description=\"Model trace explorer > selected span > code snippet > see more button\"\n              />\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useCallback } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ACTIVE_HIGHLIGHT_COLOR, INACTIVE_HIGHLIGHT_COLOR } from './constants';\n\nexport const ModelTraceExplorerHighlightedSnippetTitle = ({\n  title,\n  searchFilter,\n  isActiveMatch,\n}: {\n  title: string;\n  searchFilter: string;\n  isActiveMatch: boolean;\n}): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n  const scrollToActiveMatch = useCallback((node: HTMLElement | null) => {\n    node?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, []);\n\n  const titleLower = title.toLowerCase();\n  if (!titleLower.includes(searchFilter)) {\n    return <div>{title}</div>;\n  }\n\n  const startIdx = titleLower.indexOf(searchFilter);\n  const endIdx = startIdx + searchFilter.length;\n  const backgroundColor = isActiveMatch ? theme.colors[ACTIVE_HIGHLIGHT_COLOR] : theme.colors[INACTIVE_HIGHLIGHT_COLOR];\n\n  return (\n    <div>\n      {title.slice(0, startIdx)}\n      <span ref={isActiveMatch ? scrollToActiveMatch : null} css={{ backgroundColor, scrollMarginTop: 50 }}>\n        {title.slice(startIdx, endIdx)}\n      </span>\n      {title.slice(endIdx)}\n    </div>\n  );\n};\n","import { isString } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ChevronDownIcon, DropdownMenu, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { CodeSnippetRenderMode } from './ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from './ModelTraceExplorerCodeSnippetBody';\nimport { ModelTraceExplorerHighlightedSnippetTitle } from './ModelTraceExplorerHighlightedSnippetTitle';\n\n// return the initial render mode if specified, otherwise\n// default to markdown for string data and json for non-string data\nfunction getInitialRenderMode(dataIsString: boolean, initialRenderMode?: CodeSnippetRenderMode) {\n  if (initialRenderMode) {\n    return initialRenderMode;\n  }\n\n  if (dataIsString) {\n    return CodeSnippetRenderMode.MARKDOWN;\n  }\n\n  return CodeSnippetRenderMode.JSON;\n}\n\nfunction getRenderModeDisplayText(renderMode: CodeSnippetRenderMode) {\n  switch (renderMode) {\n    case CodeSnippetRenderMode.JSON:\n      return 'JSON';\n    case CodeSnippetRenderMode.TEXT:\n      return 'Text';\n    case CodeSnippetRenderMode.MARKDOWN:\n      return 'Markdown';\n  }\n}\n\nexport function ModelTraceExplorerCodeSnippet({\n  title,\n  tokens,\n  data,\n  searchFilter = '',\n  activeMatch = null,\n  containsActiveMatch = false,\n  initialRenderMode,\n}: {\n  title: string;\n  tokens?: number;\n  data: string;\n  searchFilter?: string;\n  // the current active search match\n  activeMatch?: SearchMatch | null;\n  // whether the snippet being rendered contains the\n  // current active match (either in the key or value)\n  containsActiveMatch?: boolean;\n  initialRenderMode?: CodeSnippetRenderMode;\n}) {\n  const parsedData = useMemo(() => JSON.parse(data), [data]);\n  const dataIsString = isString(parsedData);\n  const { theme } = useDesignSystemTheme();\n  // string data can be rendered in multiple formats\n  const [renderMode, setRenderMode] = useState<CodeSnippetRenderMode>(\n    getInitialRenderMode(dataIsString, initialRenderMode),\n  );\n  const isTitleMatch = containsActiveMatch && (activeMatch?.isKeyMatch ?? false);\n  const shouldShowRenderModeDropdown = dataIsString && !searchFilter;\n\n  // we need to reset the render mode when the data changes\n  useEffect(() => {\n    setRenderMode(getInitialRenderMode(dataIsString, initialRenderMode));\n  }, [dataIsString, initialRenderMode]);\n\n  return (\n    <div\n      css={{\n        position: 'relative',\n      }}\n    >\n      <div\n        css={{\n          borderRadius: theme.borders.borderRadiusSm,\n          border: `1px solid ${theme.colors.border}`,\n          overflow: 'hidden',\n        }}\n      >\n        {(title || shouldShowRenderModeDropdown) && (\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: theme.spacing.sm,\n            }}\n          >\n            {/* TODO: support other types of formatting, e.g. markdown */}\n            <Typography.Title\n              css={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n              }}\n              level={4}\n              color=\"secondary\"\n              withoutMargins\n            >\n              <ModelTraceExplorerHighlightedSnippetTitle\n                title={title}\n                searchFilter={searchFilter}\n                isActiveMatch={isTitleMatch}\n              />\n            </Typography.Title>\n            <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n              {shouldShowRenderModeDropdown && (\n                <DropdownMenu.Root>\n                  <DropdownMenu.Trigger asChild>\n                    <Tag\n                      componentId=\"shared.model-trace-explorer.snippet-render-mode-tag\"\n                      css={{\n                        height: 'min-content',\n                        margin: 0,\n                      }}\n                    >\n                      {/* for some reason `cursor: pointer` doesn't work if you set it on the Tag css */}\n                      <div css={{ paddingLeft: theme.spacing.xs, marginRight: theme.spacing.xs, cursor: 'pointer' }}>\n                        <Typography.Text size=\"sm\" color=\"secondary\">\n                          {getRenderModeDisplayText(renderMode)}\n                        </Typography.Text>\n                        <ChevronDownIcon />\n                      </div>\n                    </Tag>\n                  </DropdownMenu.Trigger>\n                  <DropdownMenu.Content>\n                    <DropdownMenu.RadioGroup\n                      componentId=\"shared.model-trace-explorer.snippet-render-mode-radio\"\n                      value={renderMode}\n                      onValueChange={(value) => setRenderMode(value as CodeSnippetRenderMode)}\n                    >\n                      {Object.values(CodeSnippetRenderMode).map((mode) => (\n                        <DropdownMenu.RadioItem key={mode} value={mode}>\n                          <DropdownMenu.ItemIndicator />\n                          {getRenderModeDisplayText(mode)}\n                        </DropdownMenu.RadioItem>\n                      ))}\n                    </DropdownMenu.RadioGroup>\n                    <DropdownMenu.Arrow />\n                  </DropdownMenu.Content>\n                </DropdownMenu.Root>\n              )}\n            </div>\n          </div>\n        )}\n        <ModelTraceExplorerCodeSnippetBody\n          data={data}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n          containsActiveMatch={containsActiveMatch}\n          renderMode={renderMode}\n        />\n      </div>\n    </div>\n  );\n}\n","import { isNil, keys } from 'lodash';\n\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\n\nexport function ModelTraceExplorerAttributesTab({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const { attributes } = activeSpan;\n  const containsAttributes = keys(attributes).length > 0;\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  if (!containsAttributes || isNil(attributes)) {\n    return (\n      <div css={{ marginTop: theme.spacing.md }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No attributes found\"\n              description=\"Empty state for the attributes tab in the model trace explorer. Attributes are properties of a span that the user defines.\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        padding: theme.spacing.md,\n      }}\n    >\n      {Object.entries(attributes).map(([key, value]) => (\n        <ModelTraceExplorerCodeSnippet\n          key={key}\n          title={key}\n          data={JSON.stringify(value, null, 2)}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n          containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'attributes' && activeMatch.key === key}\n        />\n      ))}\n    </div>\n  );\n}\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceChatToolParamProperty } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerChatToolParam({\n  paramName,\n  paramProperties,\n  isRequired,\n}: {\n  paramName: string;\n  paramProperties: ModelTraceChatToolParamProperty;\n  isRequired: boolean;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  const { type, description, enum: enumValues } = paramProperties;\n\n  const hasAdditionalInfo = type || description || enumValues;\n\n  const borderStyles = hasAdditionalInfo\n    ? {\n        borderTopLeftRadius: theme.borders.borderRadiusMd,\n        borderTopRightRadius: theme.borders.borderRadiusMd,\n        borderBottom: `1px solid ${theme.colors.border}`,\n      }\n    : {\n        borderRadius: theme.borders.borderRadiusMd,\n      };\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusMd,\n        border: `1px solid ${theme.colors.border}`,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          gap: theme.spacing.sm,\n          ...borderStyles,\n        }}\n      >\n        <Typography.Title withoutMargins style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}>\n          {paramName}\n        </Typography.Title>\n        {isRequired && (\n          <Typography.Text withoutMargins color=\"error\">\n            <FormattedMessage\n              defaultMessage=\"required\"\n              description=\"Text displayed next to a function parameter to indicate that it is required\"\n            />\n          </Typography.Text>\n        )}\n      </div>\n      {hasAdditionalInfo && (\n        <div\n          css={{\n            display: 'grid',\n            gridTemplateColumns: 'auto 1fr',\n            gridTemplateRows: 'auto',\n            gap: theme.spacing.md,\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          }}\n        >\n          {type && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Type\"\n                  description=\"Row heading in a table that contains the type of a function parameter (e.g. string, boolean)\"\n                />\n              </Typography.Text>\n              <Typography.Text withoutMargins code>\n                {type}\n              </Typography.Text>\n            </>\n          )}\n          {description && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Description\"\n                  description=\"Row heading in a table that contains the description of a function parameter.\"\n                />\n              </Typography.Text>\n              <Typography.Text withoutMargins>{description}</Typography.Text>\n            </>\n          )}\n          {enumValues && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Enum Values\"\n                  description=\"Row heading in a table that contains the potential enum values that a function parameter can have.\"\n                />\n              </Typography.Text>\n              <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm, flexWrap: 'wrap' }}>\n                {enumValues.map((value) => (\n                  <Typography.Text withoutMargins code key={value}>\n                    {value}\n                  </Typography.Text>\n                ))}\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerChatToolParam } from './ModelTraceExplorerChatToolParam';\nimport type { ModelTraceChatTool } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerChatTool({ tool }: { tool: ModelTraceChatTool }) {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  const description = tool.function.description;\n  const paramProperties = tool.function.parameters?.properties;\n  const requiredParams = tool.function.parameters?.required ?? [];\n\n  // tools only need to have names, so it's\n  // possible that no additional info exists\n  const isExpandable = description || paramProperties;\n\n  const hoverStyles = isExpandable\n    ? { ':hover': { backgroundColor: theme.colors.actionIconBackgroundHover, cursor: 'pointer' } }\n    : {};\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusMd,\n        border: `1px solid ${theme.colors.border}`,\n        backgroundColor: theme.colors.backgroundPrimary,\n      }}\n      data-testid=\"model-trace-explorer-chat-tool\"\n    >\n      <div\n        role=\"button\"\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          borderBottom: isExpandable && expanded ? `1px solid ${theme.colors.border}` : 'none',\n          padding: theme.spacing.sm,\n          ...hoverStyles,\n        }}\n        onClick={() => setExpanded(!expanded)}\n        data-testid=\"model-trace-explorer-chat-tool-toggle\"\n      >\n        {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n        <Typography.Text\n          bold\n          withoutMargins\n          style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}\n        >\n          {tool.function.name}\n        </Typography.Text>\n      </div>\n      {isExpandable && expanded && (\n        <div css={{ padding: theme.spacing.sm }}>\n          {description && (\n            <Typography.Paragraph\n              style={{ whiteSpace: 'pre-wrap', marginBottom: theme.spacing.sm, padding: `0px ${theme.spacing.xs}px` }}\n            >\n              {tool.function.description}\n            </Typography.Paragraph>\n          )}\n          {paramProperties && (\n            <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n              {Object.keys(paramProperties).map((key) => (\n                <ModelTraceExplorerChatToolParam\n                  key={key}\n                  paramName={key}\n                  paramProperties={paramProperties[key]}\n                  isRequired={requiredParams.includes(key)}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  ChevronRightIcon,\n  ChevronDownIcon,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { ModelIconType } from '../ModelTrace.types';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nconst getRoleIcon = (role: string) => {\n  switch (role) {\n    case 'system':\n      return <ModelTraceExplorerIcon type={ModelIconType.SYSTEM} />;\n    case 'user':\n      return <ModelTraceExplorerIcon type={ModelIconType.USER} />;\n    case 'tool':\n    case 'function':\n      return <ModelTraceExplorerIcon type={ModelIconType.WRENCH} />;\n    default:\n      return <ModelTraceExplorerIcon type={ModelIconType.MODELS} />;\n  }\n};\n\nconst getRoleDisplayText = (message: ModelTraceChatMessage) => {\n  switch (message.role) {\n    case 'system':\n      return (\n        <FormattedMessage\n          defaultMessage=\"System\"\n          description=\"Display text for the 'system' role in a GenAI chat message.\"\n        />\n      );\n    case 'user':\n      return (\n        <FormattedMessage\n          defaultMessage=\"User\"\n          description=\"Display text for the 'user' role in a GenAI chat message.\"\n        />\n      );\n    case 'assistant':\n      return (\n        <FormattedMessage\n          defaultMessage=\"Assistant\"\n          description=\"Display text for the 'assistant' role in a GenAI chat message.\"\n        />\n      );\n    case 'tool':\n      if (message.name) {\n        return message.name;\n      }\n      return (\n        <FormattedMessage\n          defaultMessage=\"Tool\"\n          description=\"Display text for the 'tool' role in a GenAI chat message.\"\n        />\n      );\n    case 'function':\n      return (\n        <FormattedMessage\n          defaultMessage=\"Function\"\n          description=\"Display text for the 'function' role in a GenAI chat message.\"\n        />\n      );\n    default:\n      return message.role;\n  }\n};\n\nexport const ModelTraceExplorerChatMessageHeader = ({\n  isExpandable,\n  expanded,\n  setExpanded,\n  message,\n}: {\n  isExpandable: boolean;\n  expanded: boolean;\n  setExpanded: (expanded: boolean) => void;\n  message: ModelTraceChatMessage;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const hoverStyles = isExpandable\n    ? {\n        ':hover': {\n          backgroundColor: theme.colors.actionIconBackgroundHover,\n          cursor: 'pointer',\n        },\n      }\n    : {};\n\n  return (\n    <div\n      role=\"button\"\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: theme.spacing.sm,\n        gap: theme.spacing.sm,\n        ...hoverStyles,\n      }}\n      onClick={() => setExpanded(!expanded)}\n    >\n      {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n      {getRoleIcon(message.role)}\n      {message.tool_call_id ? (\n        <Typography.Text\n          color=\"secondary\"\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'inline-flex',\n            alignItems: 'center',\n            flex: 1,\n            minWidth: 0,\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"{toolName} was called in {toolCallId}\"\n            description=\"A message that shows the tool call ID of a tool call chat message.\"\n            values={{\n              toolName: (\n                <Typography.Text css={{ marginRight: theme.spacing.xs }} bold>\n                  {getRoleDisplayText(message)}\n                </Typography.Text>\n              ),\n              toolCallId: (\n                <Tooltip componentId=\"test\" content={message.tool_call_id}>\n                  <div\n                    css={{ display: 'inline-flex', flexShrink: 1, overflow: 'hidden', marginLeft: theme.spacing.xs }}\n                  >\n                    <Typography.Text css={{ textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }} code>\n                      {message.tool_call_id}\n                    </Typography.Text>\n                  </div>\n                </Tooltip>\n              ),\n            }}\n          />\n        </Typography.Text>\n      ) : (\n        <Typography.Text bold>{getRoleDisplayText(message)}</Typography.Text>\n      )}\n    </div>\n  );\n};\n","import { FunctionIcon, Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceToolCall } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from '../ModelTraceExplorerCodeSnippetBody';\n\nexport function ModelTraceExplorerToolCallMessage({ toolCall }: { toolCall: ModelTraceToolCall }) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div key={toolCall.id} css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n      <Typography.Text\n        color=\"secondary\"\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          padding: `0px ${theme.spacing.sm + theme.spacing.xs}px`,\n        }}\n      >\n        <FormattedMessage\n          defaultMessage=\"called {functionName} in {toolCallId}\"\n          description=\"A message that shows the tool calls that an AI assistant made. The full message reads (for example): 'Assistant called get_weather in id_123'.\"\n          values={{\n            functionName: (\n              <Tag\n                color=\"purple\"\n                componentId=\"shared.model-trace-explorer.function-name-tag\"\n                css={{ margin: `0px ${theme.spacing.xs}px` }}\n              >\n                <FunctionIcon />\n                <Typography.Text css={{ whiteSpace: 'nowrap', marginLeft: theme.spacing.xs }}>\n                  {toolCall.function.name}\n                </Typography.Text>\n              </Tag>\n            ),\n            toolCallId: (\n              <Tooltip componentId=\"test\" content={toolCall.id}>\n                <div css={{ display: 'inline-flex', flexShrink: 1, overflow: 'hidden', marginLeft: theme.spacing.xs }}>\n                  <Typography.Text\n                    css={{\n                      textOverflow: 'ellipsis',\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                    }}\n                    code\n                    color=\"secondary\"\n                  >\n                    {toolCall.id}\n                  </Typography.Text>\n                </div>\n              </Tooltip>\n            ),\n          }}\n        />\n      </Typography.Text>\n      <ModelTraceExplorerCodeSnippetBody data={toolCall.function.arguments} />\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronUpIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { ModelTraceExplorerChatMessageHeader } from './ModelTraceExplorerChatMessageHeader';\nimport { CONTENT_TRUNCATION_LIMIT } from './ModelTraceExplorerChatRenderer.utils';\nimport { ModelTraceExplorerToolCallMessage } from './ModelTraceExplorerToolCallMessage';\nimport { CodeSnippetRenderMode, type ModelTraceChatMessage } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from '../ModelTraceExplorerCodeSnippetBody';\n\nconst tryGetJsonContent = (content: string) => {\n  try {\n    return {\n      content: JSON.stringify(JSON.parse(content), null, 2),\n      isJson: true,\n    };\n  } catch (error) {\n    return {\n      content,\n      isJson: false,\n    };\n  }\n};\n\nfunction ModelTraceExplorerChatMessageContent({\n  content,\n  shouldDisplayCodeSnippet,\n}: {\n  content: string;\n  shouldDisplayCodeSnippet: boolean;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  if (!content) {\n    return null;\n  }\n\n  if (shouldDisplayCodeSnippet) {\n    return (\n      <ModelTraceExplorerCodeSnippetBody\n        data={content}\n        searchFilter=\"\"\n        activeMatch={null}\n        containsActiveMatch={false}\n        renderMode={CodeSnippetRenderMode.JSON}\n      />\n    );\n  }\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.sm,\n        paddingTop: 0,\n        // genai markdown renderer uses default paragraph sizing which has\n        // a bottom margin that we can't get rid of. workaround by setting\n        // negative margin in a wrapper.\n        marginBottom: -theme.typography.fontSizeBase,\n      }}\n    >\n      <GenAIMarkdownRenderer>{content}</GenAIMarkdownRenderer>\n    </div>\n  );\n}\n\nexport function ModelTraceExplorerChatMessage({\n  message,\n  className,\n}: {\n  message: ModelTraceChatMessage;\n  className?: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n  const { content, isJson } = tryGetJsonContent(message.content ?? '');\n\n  // tool call responses can be JSON, and in these cases\n  // it's more helpful to display the message as JSON\n  const shouldDisplayCodeSnippet = isJson && (message.role === 'tool' || message.role === 'function');\n  // if the content is JSON, truncation will be handled by the code\n  // snippet. otherwise, we need to truncate the content manually.\n  const isExpandable = !shouldDisplayCodeSnippet && content.length > CONTENT_TRUNCATION_LIMIT;\n\n  const displayedContent = isExpandable && !expanded ? `${content.slice(0, CONTENT_TRUNCATION_LIMIT)}...` : content;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusSm,\n        border: `1px solid ${theme.colors.border}`,\n        backgroundColor: theme.colors.backgroundPrimary,\n        overflow: 'hidden',\n      }}\n      className={className}\n    >\n      <ModelTraceExplorerChatMessageHeader\n        isExpandable={isExpandable}\n        expanded={expanded}\n        setExpanded={setExpanded}\n        message={message}\n      />\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n        {!isNil(message.tool_calls) &&\n          message.tool_calls.map((toolCall) => (\n            <ModelTraceExplorerToolCallMessage key={toolCall.id} toolCall={toolCall} />\n          ))}\n        <ModelTraceExplorerChatMessageContent\n          content={displayedContent}\n          shouldDisplayCodeSnippet={shouldDisplayCodeSnippet}\n        />\n      </div>\n      {isExpandable && (\n        <Button\n          componentId={\n            expanded\n              ? 'shared.model-trace-explorer.chat-message-see-less'\n              : 'shared.model-trace-explorer.chat-message-see-more'\n          }\n          icon={expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          type=\"tertiary\"\n          onClick={() => setExpanded(!expanded)}\n          css={{\n            display: 'flex',\n            width: '100%',\n            padding: theme.spacing.md,\n            borderRadius: '0px !important',\n          }}\n        >\n          {expanded ? (\n            <FormattedMessage\n              defaultMessage=\"See less\"\n              description=\"A button label in a message renderer that truncates long content when clicked.\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"See more\"\n              description=\"A button label in a message renderer that expands truncated content when clicked.\"\n            />\n          )}\n        </Button>\n      )}\n    </div>\n  );\n}\n","export const CONTENT_TRUNCATION_LIMIT = 300;\n","import { isNil } from 'lodash';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerChatMessage } from './ModelTraceExplorerChatMessage';\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerConversation({ messages }: { messages: ModelTraceChatMessage[] | null }) {\n  const { theme } = useDesignSystemTheme();\n\n  if (isNil(messages)) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {messages.map((message, index) => (\n        <ModelTraceExplorerChatMessage key={index} message={message} />\n      ))}\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ModelTraceExplorerCollapsibleSection = ({\n  sectionKey,\n  title,\n  children,\n  withBorder = false,\n  className,\n}: {\n  sectionKey: string;\n  title: React.ReactNode;\n  children: React.ReactNode;\n  withBorder?: boolean;\n  className?: string;\n}) => {\n  const [expanded, setExpanded] = useState(true);\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      className={className}\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: theme.borders.borderRadiusMd,\n      }}\n    >\n      <div\n        css={{\n          alignItems: 'center',\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.xs,\n          padding: withBorder ? theme.spacing.sm : 0,\n          background: withBorder ? theme.colors.backgroundSecondary : undefined,\n          borderTopLeftRadius: theme.borders.borderRadiusMd,\n          borderTopRightRadius: theme.borders.borderRadiusMd,\n          borderBottomLeftRadius: expanded ? 0 : theme.borders.borderRadiusMd,\n          borderBottomRightRadius: expanded ? 0 : theme.borders.borderRadiusMd,\n          border: withBorder ? `1px solid ${theme.colors.border}` : undefined,\n          marginBottom: withBorder ? 0 : theme.spacing.sm,\n        }}\n      >\n        <Button\n          size=\"small\"\n          componentId={`shared.model-trace-explorer.expand-${sectionKey}`}\n          type=\"tertiary\"\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n        />\n        <Typography.Title withoutMargins level={4} css={{ width: '100%' }}>\n          {title}\n        </Typography.Title>\n      </div>\n      {expanded && (\n        <div\n          css={{\n            border: withBorder ? `1px solid ${theme.colors.border}` : undefined,\n            borderTop: 'none',\n            borderBottomLeftRadius: withBorder ? theme.borders.borderRadiusMd : undefined,\n            borderBottomRightRadius: withBorder ? theme.borders.borderRadiusMd : undefined,\n            padding: withBorder ? theme.spacing.sm : 0,\n          }}\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerChatTool } from './ModelTraceExplorerChatTool';\nimport { ModelTraceExplorerConversation } from './ModelTraceExplorerConversation';\nimport type { ModelTraceChatMessage, ModelTraceChatTool } from '../ModelTrace.types';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerChatTab({\n  chatMessages,\n  chatTools,\n}: {\n  chatMessages: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        overflowY: 'auto',\n        padding: theme.spacing.md,\n      }}\n      data-testid=\"model-trace-explorer-chat-tab\"\n    >\n      {chatTools && (\n        <ModelTraceExplorerCollapsibleSection\n          css={{ marginBottom: theme.spacing.sm }}\n          title={\n            <FormattedMessage\n              defaultMessage=\"Tools\"\n              description=\"Section header in the chat tab that displays all tools that were available for the chat model to call during execution\"\n            />\n          }\n          sectionKey=\"messages\"\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {chatTools.map((tool) => (\n              <ModelTraceExplorerChatTool key={tool.function.name} tool={tool} />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n\n      <ModelTraceExplorerCollapsibleSection\n        title={\n          <FormattedMessage\n            defaultMessage=\"Messages\"\n            description=\"Section header in the chat tab that displays the message history between the user and the chat model\"\n          />\n        }\n        sectionKey=\"messages\"\n      >\n        <ModelTraceExplorerConversation messages={chatMessages} />\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerDefaultSpanView({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const inputList = useMemo(() => createListFromObject(activeSpan?.inputs), [activeSpan]);\n  const outputList = useMemo(() => createListFromObject(activeSpan?.outputs), [activeSpan]);\n\n  if (isNil(activeSpan)) {\n    return null;\n  }\n\n  const containsInputs = inputList.length > 0;\n  const containsOutputs = outputList.length > 0;\n\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  return (\n    <div data-testid=\"model-trace-explorer-default-span-view\">\n      {containsInputs && (\n        <ModelTraceExplorerCollapsibleSection\n          withBorder\n          css={{ marginBottom: theme.spacing.sm }}\n          sectionKey=\"input\"\n          title={\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                width: '100%',\n              }}\n            >\n              <FormattedMessage\n                defaultMessage=\"Inputs\"\n                description=\"Model trace explorer > selected span > inputs header\"\n              />\n            </div>\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {inputList.map(({ key, value }, index) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key || index}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'inputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n      {containsOutputs && (\n        <ModelTraceExplorerCollapsibleSection\n          withBorder\n          sectionKey=\"output\"\n          title={\n            <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%' }}>\n              <FormattedMessage\n                defaultMessage=\"Outputs\"\n                description=\"Model trace explorer > selected span > outputs header\"\n              />\n            </div>\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {outputList.map(({ key, value }) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'outputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n    </div>\n  );\n}\n","import type { Interpolation, Theme } from '@emotion/react';\n\nimport { Tag, Tooltip, Typography } from '@databricks/design-system';\n\n// max characters for key + value before truncation\nconst MAX_CHARS_LENGTH = 18;\n\nconst getTruncatedStyles = (shouldTruncate: boolean): Interpolation<Theme> =>\n  shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      }\n    : { whiteSpace: 'nowrap' };\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  itemKey,\n  itemValue,\n  charLimit = MAX_CHARS_LENGTH,\n  maxWidth = 150,\n  className,\n}: {\n  itemKey: string;\n  itemValue: string;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(itemKey, itemValue, charLimit);\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.key-value-tag.hover-tooltip\" content={`${itemKey}: ${itemValue}`}>\n      <Tag componentId=\"shared.model-trace-explorer.key-value-tag\" className={className}>\n        <span css={{ maxWidth, display: 'inline-flex' }}>\n          <Typography.Text bold css={getTruncatedStyles(shouldTruncateKey)} size=\"sm\">\n            {itemKey}\n          </Typography.Text>\n          :&nbsp;\n          <Typography.Text css={getTruncatedStyles(shouldTruncateValue)} size=\"sm\">\n            {itemValue}\n          </Typography.Text>\n        </span>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  key: string,\n  value: string,\n  charLimit: number,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n","import { Button, ChevronUpIcon, FileDocumentIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { GenAIMarkdownRenderer } from '../../genai-markdown-renderer';\nimport { KeyValueTag } from '../key-value-tag/KeyValueTag';\n\nexport function ModelTraceExplorerRetrieverDocumentFull({\n  text,\n  metadataTags,\n  setExpanded,\n  logDocumentClick,\n}: {\n  text: string;\n  metadataTags: { key: string; value: string }[];\n  setExpanded: (expanded: boolean) => void;\n  logDocumentClick?: (action: string) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column' }}>\n      <div\n        role=\"button\"\n        onClick={() => {\n          setExpanded(false);\n          logDocumentClick?.('collapse');\n        }}\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          cursor: 'pointer',\n          padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          height: theme.typography.lineHeightBase,\n          boxSizing: 'content-box',\n          '&:hover': {\n            backgroundColor: theme.colors.backgroundSecondary,\n          },\n        }}\n      >\n        <FileDocumentIcon />\n      </div>\n      <div css={{ padding: theme.spacing.md, paddingBottom: 0 }}>\n        <GenAIMarkdownRenderer>{text}</GenAIMarkdownRenderer>\n      </div>\n      <div css={{ padding: theme.spacing.md, paddingTop: 0 }}>\n        {metadataTags.map(({ key, value }) => (\n          <KeyValueTag key={key} itemKey={key} itemValue={value} />\n        ))}\n      </div>\n      <Button\n        css={{ width: '100%', padding: theme.spacing.sm }}\n        componentId=\"shared.model-trace-explorer.retriever-document-collapse\"\n        icon={<ChevronUpIcon />}\n        type=\"tertiary\"\n        onClick={() => setExpanded(false)}\n      >\n        <FormattedMessage\n          defaultMessage=\"See less\"\n          description=\"Model trace explorer > selected span > code snippet > see less button\"\n        />\n      </Button>\n    </div>\n  );\n}\n","import { FileDocumentIcon, Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { KeyValueTag } from '../key-value-tag/KeyValueTag';\n\nexport function ModelTraceExplorerRetrieverDocumentPreview({\n  text,\n  metadataTags,\n  setExpanded,\n  logDocumentClick,\n}: {\n  text: string;\n  metadataTags: { key: string; value: string }[];\n  setExpanded: (expanded: boolean) => void;\n  logDocumentClick?: (action: string) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      role=\"button\"\n      onClick={() => {\n        setExpanded(true);\n        logDocumentClick?.('expand');\n      }}\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        cursor: 'pointer',\n        '&:hover': {\n          backgroundColor: theme.colors.backgroundSecondary,\n        },\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          minWidth: 0,\n          flexShrink: 1,\n        }}\n      >\n        <FileDocumentIcon />\n        <Typography.Text ellipsis size=\"md\">\n          {text}\n        </Typography.Text>\n      </div>\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {metadataTags.length > 0 ? (\n          <KeyValueTag css={{ margin: 0 }} itemKey={metadataTags[0].key} itemValue={metadataTags[0].value} />\n        ) : null}\n        {metadataTags.length > 1 ? (\n          <Tooltip\n            componentId=\"shared.model-trace-explorer.tag-count.hover-tooltip\"\n            content={metadataTags.slice(1).map(({ key, value }) => (\n              <span key={key} css={{ display: 'inline-block' }}>\n                {`${key}: ${value}`}\n              </span>\n            ))}\n          >\n            <Tag componentId=\"shared.model-trace-explorer.tag-count\" css={{ whiteSpace: 'nowrap', margin: 0 }}>\n              +{metadataTags.length - 1}\n            </Tag>\n          </Tooltip>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","import { useCallback, useState } from 'react';\n\nimport { ModelTraceExplorerRetrieverDocumentFull } from './ModelTraceExplorerRetrieverDocumentFull';\nimport { ModelTraceExplorerRetrieverDocumentPreview } from './ModelTraceExplorerRetrieverDocumentPreview';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\n\nexport function ModelTraceExplorerRetrieverDocument({\n  text,\n  metadata,\n}: {\n  text: string;\n  metadata: { [key: string]: any };\n}) {\n  const [expanded, setExpanded] = useState(false);\n  const metadataTags = createListFromObject(metadata);\n\n  return expanded ? (\n    <ModelTraceExplorerRetrieverDocumentFull\n      // comment to prevent copybara formatting\n      text={text}\n      metadataTags={metadataTags}\n      setExpanded={setExpanded}\n    />\n  ) : (\n    <ModelTraceExplorerRetrieverDocumentPreview\n      // comment to prevent copybara formatting\n      text={text}\n      metadataTags={metadataTags}\n      setExpanded={setExpanded}\n    />\n  );\n}\n","import {\n  MIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  TextBoxIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport function ModelTraceExplorerRenderModeToggle({\n  shouldRenderMarkdown,\n  setShouldRenderMarkdown,\n}: {\n  shouldRenderMarkdown: boolean;\n  setShouldRenderMarkdown: (value: boolean) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <SegmentedControlGroup\n      data-testid=\"model-trace-explorer-render-mode-toggle\"\n      name=\"render-mode\"\n      size=\"small\"\n      componentId={`shared.model-trace-explorer.toggle-markdown-rendering-${!shouldRenderMarkdown}`}\n      value={shouldRenderMarkdown}\n      onChange={(event) => {\n        setShouldRenderMarkdown(event.target.value);\n      }}\n    >\n      <SegmentedControlButton data-testid=\"model-trace-explorer-render-raw-input-button\" value={false}>\n        <Tooltip\n          componentId=\"shared.model-trace-explorer.raw-input-rendering-tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Raw input\"\n              description=\"Tooltip content for a button that changes the render mode of the data to raw input (JSON)\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', alignItems: 'center' }}>\n            <TextBoxIcon css={{ fontSize: theme.typography.fontSizeLg }} />\n          </div>\n        </Tooltip>\n      </SegmentedControlButton>\n      <SegmentedControlButton data-testid=\"model-trace-explorer-render-default-button\" value>\n        <Tooltip\n          componentId=\"shared.model-trace-explorer.default-rendering-tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Default rendering\"\n              description=\"Tooltip content for a button that changes the render mode to default\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', alignItems: 'center' }}>\n            <MIcon css={{ fontSize: theme.typography.fontSizeLg }} />\n          </div>\n        </Tooltip>\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerRetrieverDocument } from './ModelTraceExplorerRetrieverDocument';\nimport type { ModelTraceSpanNode, RetrieverDocument, SearchMatch } from '../ModelTrace.types';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { ModelTraceExplorerRenderModeToggle } from '../ModelTraceExplorerRenderModeToggle';\n\nexport function ModelTraceExplorerRetrieverSpanView({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [shouldRenderMarkdown, setShouldRenderMarkdown] = useState(true);\n  const inputList = useMemo(() => createListFromObject(activeSpan.inputs), [activeSpan]);\n\n  const outputs = activeSpan.outputs as RetrieverDocument[];\n\n  const containsInputs = inputList.length > 0;\n\n  // search highlighting is not supported in markdown rendering, so\n  // if there is an active match in the documents, we have to render\n  // them as code snippets.\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n  const outputsContainsActiveMatch = isActiveMatchSpan && activeMatch.section === 'outputs';\n\n  return (\n    <div className={className} data-testid=\"model-trace-explorer-retriever-span-view\">\n      {containsInputs && (\n        <ModelTraceExplorerCollapsibleSection\n          sectionKey=\"input\"\n          css={{ marginBottom: theme.spacing.sm }}\n          title={\n            <FormattedMessage\n              defaultMessage=\"Inputs\"\n              description=\"Model trace explorer > selected span > inputs header\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {inputList.map(({ key, value }, index) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key || index}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'inputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n\n      <ModelTraceExplorerCollapsibleSection\n        sectionKey=\"output\"\n        title={\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: '100%',\n            }}\n          >\n            <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n              <FormattedMessage\n                defaultMessage=\"Documents\"\n                description=\"Model trace explorer > retriever span > documents header\"\n              />\n              <Tag componentId=\"shared.model-trace-explorer.document-count\">{outputs.length}</Tag>\n            </div>\n            {!outputsContainsActiveMatch && (\n              <ModelTraceExplorerRenderModeToggle\n                shouldRenderMarkdown={shouldRenderMarkdown}\n                setShouldRenderMarkdown={setShouldRenderMarkdown}\n              />\n            )}\n          </div>\n        }\n      >\n        {shouldRenderMarkdown && !outputsContainsActiveMatch ? (\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n            }}\n          >\n            {outputs.map((document, idx) => (\n              <div\n                key={idx}\n                css={{ borderBottom: idx !== outputs.length - 1 ? `1px solid ${theme.colors.border}` : '' }}\n              >\n                <ModelTraceExplorerRetrieverDocument\n                  key={idx}\n                  text={document.page_content}\n                  metadata={document.metadata}\n                />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n              padding: theme.spacing.md,\n            }}\n          >\n            <ModelTraceExplorerCodeSnippet\n              title=\"\"\n              data={JSON.stringify(outputs, null, 2)}\n              searchFilter={searchFilter}\n              activeMatch={activeMatch}\n              containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'outputs'}\n            />\n          </div>\n        )}\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerDefaultSpanView } from './ModelTraceExplorerDefaultSpanView';\nimport { ModelTraceExplorerRetrieverSpanView } from './ModelTraceExplorerRetrieverSpanView';\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { isRenderableRetrieverSpan } from '../ModelTraceExplorer.utils';\n\nexport function ModelTraceExplorerContentTab({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  if (!isNil(activeSpan) && isRenderableRetrieverSpan(activeSpan)) {\n    return (\n      <div\n        css={{\n          overflowY: 'auto',\n          padding: theme.spacing.md,\n        }}\n        className={className}\n        data-testid=\"model-trace-explorer-content-tab\"\n      >\n        <ModelTraceExplorerRetrieverSpanView\n          activeSpan={activeSpan}\n          className={className}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        overflowY: 'auto',\n        padding: theme.spacing.md,\n      }}\n      className={className}\n      data-testid=\"model-trace-explorer-content-tab\"\n    >\n      <ModelTraceExplorerDefaultSpanView\n        activeSpan={activeSpan}\n        className={className}\n        searchFilter={searchFilter}\n        activeMatch={activeMatch}\n      />\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { Empty, Typography, useDesignSystemTheme, XCircleIcon } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { CodeSnippetRenderMode, type ModelTraceSpanNode, type SearchMatch } from '../ModelTrace.types';\nimport { getEventAttributeKey } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerEventsTab({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const { events } = activeSpan;\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  if (!Array.isArray(events) || events.length === 0) {\n    return (\n      <div css={{ marginTop: theme.spacing.md }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No events found\"\n              description=\"Empty state for the events tab in the model trace explorer. Events are logs of arbitrary things (e.g. exceptions) that occur during the execution of a span, and can be user-defined.\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div css={{ padding: theme.spacing.md }}>\n      {events.map((event, index) => {\n        const attributes = event.attributes;\n        const title =\n          event.name === 'exception' ? (\n            <>\n              <XCircleIcon css={{ marginRight: theme.spacing.sm }} color=\"danger\" />\n              <Typography.Text color=\"error\" bold>\n                Exception\n              </Typography.Text>\n            </>\n          ) : (\n            event.name\n          );\n\n        if (!attributes) return null;\n\n        return (\n          <ModelTraceExplorerCollapsibleSection\n            key={`${event.name}-${index}`}\n            sectionKey={event.name}\n            title={title}\n            withBorder\n          >\n            <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n              {Object.keys(attributes).map((attribute) => {\n                const key = getEventAttributeKey(event.name, index, attribute);\n\n                return (\n                  <ModelTraceExplorerCodeSnippet\n                    key={key}\n                    title={attribute}\n                    data={JSON.stringify(attributes[attribute], null, 2)}\n                    searchFilter={searchFilter}\n                    activeMatch={activeMatch}\n                    containsActiveMatch={\n                      isActiveMatchSpan && activeMatch.section === 'events' && activeMatch.key === key\n                    }\n                    initialRenderMode={CodeSnippetRenderMode.TEXT}\n                  />\n                );\n              })}\n            </div>\n          </ModelTraceExplorerCollapsibleSection>\n        );\n      })}\n    </div>\n  );\n}\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function ModelTraceExplorerBadge({ count }: { count: number }) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: theme.typography.fontSizeBase,\n        height: theme.typography.fontSizeBase,\n        backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,\n        padding: theme.spacing.xs,\n        marginLeft: theme.spacing.xs,\n        boxSizing: 'border-box',\n      }}\n    >\n      <span css={{ color: theme.colors.actionPrimaryTextDefault, fontSize: 11 }}>{count}</span>\n    </div>\n  );\n}\n","import { GavelIcon, SegmentedControlGroup, SegmentedControlButton } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const AssessmentPaneToggle = () => {\n  const { assessmentsPaneExpanded, setAssessmentsPaneExpanded, assessmentsPaneEnabled } =\n    useModelTraceExplorerViewState();\n\n  return (\n    <SegmentedControlGroup\n      css={{ display: 'block' }}\n      name=\"shared.model-trace-explorer.assessments-pane-toggle\"\n      componentId=\"shared.model-trace-explorer.assessments-pane-toggle\"\n      value={assessmentsPaneExpanded}\n      size=\"small\"\n    >\n      <SegmentedControlButton\n        value\n        disabled={!assessmentsPaneEnabled}\n        icon={<GavelIcon />}\n        onClick={() => setAssessmentsPaneExpanded?.(!assessmentsPaneExpanded)}\n        css={{\n          '& > span': {\n            display: 'flex',\n            alignItems: 'center',\n          },\n        }}\n      >\n        {!assessmentsPaneExpanded && (\n          <FormattedMessage\n            defaultMessage=\"Assessments\"\n            description=\"Label for the assessments pane of the model trace explorer.\"\n          />\n        )}\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n};\n","import { FormattedMessage } from '@databricks/i18n';\n\nimport type { Expectation, Feedback } from '../ModelTrace.types';\n\nexport type AssessmentFormInputDataType = 'string' | 'boolean' | 'number' | 'json';\n\nexport const ASSESSMENT_PANE_MIN_WIDTH = 250;\n\n// assessment names from databricks judges can sometimes have several\n// prefixes that function like namespaces. for example:\n//\n// metric/global_guideline_adherence/api_code\n//\n// in this case, we only want to display the last element, as that\n// is the most helpful name to the user (and to save ui space).\n// if there are more slashes beyond that, we assume the user added\n// it themselves, so we retain them.\nexport const getAssessmentDisplayName = (name: string): string => {\n  const split = name.split('/');\n  if (split.length === 1) {\n    return name;\n  } else if (split.length === 2) {\n    return split[1];\n  }\n  return split.slice(2).join('/');\n};\n\n// forked from mlflow/web/js/src/common/utils/Utils.tsx\nexport const timeSinceStr = (date: any, referenceDate = new Date()) => {\n  const seconds = Math.max(0, Math.floor((referenceDate.getTime() - date) / 1000));\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 year} other {# years}} ago\"\n        description=\"Text for time in years since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 month} other {# months}} ago\"\n        description=\"Text for time in months since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 day} other {# days}} ago\"\n        description=\"Text for time in days since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 hour} other {# hours}} ago\"\n        description=\"Text for time in hours since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 minute} other {# minutes}} ago\"\n        description=\"Text for time in minutes since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  return (\n    <FormattedMessage\n      defaultMessage=\"{timeSince, plural, =1 {1 second} other {# seconds}} ago\"\n      description=\"Text for time in seconds since given date for MLflow views\"\n      values={{ timeSince: seconds }}\n    />\n  );\n};\n\nexport const getParsedExpectationValue = (expectation: Expectation) => {\n  if ('value' in expectation) {\n    return expectation.value;\n  }\n\n  try {\n    // at the moment, \"JSON_FORMAT\" is the only serialization format\n    // that is supported. in the future, we may switch on the\n    // expectation.serialized_value.serialization_format field\n    // to determine how to parse the value.\n    return JSON.parse(expectation.serialized_value.value);\n  } catch (e) {\n    return expectation.serialized_value.value;\n  }\n};\n\nexport const getCreateAssessmentPayloadValue = ({\n  formValue,\n  dataType,\n  isFeedback,\n}: {\n  formValue: string | boolean | number | null;\n  dataType: AssessmentFormInputDataType;\n  isFeedback: boolean;\n}): { feedback: Feedback } | { expectation: Expectation } => {\n  if (isFeedback) {\n    return { feedback: { value: formValue } };\n  }\n\n  if (dataType === 'json') {\n    return { expectation: { serialized_value: { value: String(formValue), serialization_format: 'JSON_FORMAT' } } };\n  }\n\n  return { expectation: { value: formValue } };\n};\n","import { matchPredefinedError } from '@databricks/web-shared/errors';\n\n// eslint-disable-next-line no-restricted-globals -- See go/spog-fetch\nconst fetchFn = fetch;\n\nfunction serializeRequestBody(payload: any | FormData | Blob) {\n  if (payload === undefined) {\n    return undefined;\n  }\n  return typeof payload === 'string' || payload instanceof FormData || payload instanceof Blob\n    ? payload\n    : JSON.stringify(payload);\n}\n\nexport const fetchAPI = async (url: string, method: 'POST' | 'GET' | 'PATCH' | 'DELETE' = 'GET', body?: any) => {\n  const response = await fetchFn(url, {\n    method,\n    body: serializeRequestBody(body),\n    headers: body ? { 'Content-Type': 'application/json' } : {},\n  });\n  if (!response.ok) {\n    const predefinedError = matchPredefinedError(response);\n    if (predefinedError) {\n      try {\n        // Attempt to use message from the response\n        const message = (await response.json()).message;\n        predefinedError.message = message ?? predefinedError.message;\n      } catch {\n        // If the message can't be parsed, use default one\n      }\n      throw predefinedError;\n    }\n  }\n  return response.json();\n};\n","import type { Assessment, Expectation, Feedback } from './ModelTrace.types';\nimport { fetchAPI } from './ModelTraceExplorer.request.utils';\n\nexport const deleteAssessment = ({ traceId, assessmentId }: { traceId: string; assessmentId: string }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}/assessments/${assessmentId}`, 'DELETE');\n\n// these fields are set by the server on create\nexport type CreateAssessmentPayload = {\n  assessment: Omit<Assessment, 'assessment_id' | 'create_time' | 'last_update_time'>;\n};\n\nexport const createAssessment = ({ payload }: { payload: CreateAssessmentPayload }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${payload.assessment.trace_id}/assessments`, 'POST', payload);\n\nexport const fetchTraceInfoV3 = ({ traceId }: { traceId: string }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}`);\n\nexport type UpdateAssessmentPayload = {\n  // we only support updating these fields\n  assessment: {\n    feedback?: Feedback;\n    expectation?: Expectation;\n    rationale?: string;\n    metadata?: Record<string, string>;\n  };\n  // comma-separated list of fields to update\n  update_mask: string;\n};\n\nexport const updateAssessment = ({\n  traceId,\n  assessmentId,\n  payload,\n}: {\n  traceId: string;\n  assessmentId: string;\n  payload: UpdateAssessmentPayload;\n}) => fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}/assessments/${assessmentId}`, 'PATCH', payload);\n","import { isNil } from 'lodash';\nimport { useCallback, useState } from 'react';\n\nimport {\n  Button,\n  FormUI,\n  Input,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  SimpleSelect,\n  SimpleSelectOption,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { AssessmentFormInputDataType } from './AssessmentsPane.utils';\nimport { getCreateAssessmentPayloadValue } from './AssessmentsPane.utils';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { CreateAssessmentPayload } from '../api';\nimport { createAssessment } from '../api';\n\nexport const AssessmentCreateForm = ({\n  assessmentName,\n  spanId,\n  traceId,\n  // used to close the form\n  // after the assessment is created\n  setExpanded,\n}: {\n  assessmentName?: string;\n  spanId?: string;\n  traceId: string;\n  setExpanded: (expanded: boolean) => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n  const { theme } = useDesignSystemTheme();\n\n  const [name, setName] = useState('');\n  const [assessmentType, setAssessmentType] = useState<'feedback' | 'expectation'>('feedback');\n  const [dataType, setDataType] = useState<AssessmentFormInputDataType>('boolean');\n  const [value, setValue] = useState<string | boolean | number>(true);\n  const [rationale, setRationale] = useState('');\n  const [valueError, setValueError] = useState<React.ReactNode | null>(null);\n\n  const { mutate: createAssessmentMutation, isLoading } = useMutation({\n    mutationFn: (payload: CreateAssessmentPayload) => createAssessment({ payload }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, traceId] });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to create assessment. Error: {error}',\n            description: 'Error message when creating an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n    },\n    onSettled: () => {\n      setExpanded(false);\n    },\n  });\n\n  const isNamePrefilled = !isNil(assessmentName);\n\n  const handleCreate = useCallback(async () => {\n    if (dataType === 'json') {\n      try {\n        // validate JSON\n        JSON.parse(value as string);\n      } catch (e) {\n        setValueError(\n          <FormattedMessage\n            defaultMessage=\"The provided value is not valid JSON\"\n            description=\"Error message for invalid JSON in an assessment creation form\"\n          />,\n        );\n        return;\n      }\n    }\n\n    const valueObj = getCreateAssessmentPayloadValue({\n      formValue: value,\n      dataType,\n      isFeedback: assessmentType === 'feedback',\n    });\n\n    const payload: CreateAssessmentPayload = {\n      assessment: {\n        assessment_name: isNamePrefilled ? assessmentName : name,\n        trace_id: traceId,\n        source: {\n          source_type: 'HUMAN',\n          source_id: getUser() ?? '',\n        },\n        span_id: spanId,\n        rationale,\n        ...valueObj,\n      },\n    };\n\n    createAssessmentMutation(payload);\n  }, [\n    dataType,\n    value,\n    assessmentType,\n    isNamePrefilled,\n    assessmentName,\n    name,\n    traceId,\n    spanId,\n    rationale,\n    createAssessmentMutation,\n  ]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        marginTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.sm,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      <Typography.Text size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Assessment Type\"\n          description=\"Field label for assessment type in a creation form\"\n        />\n      </Typography.Text>\n      <SimpleSelect\n        id=\"shared.model-trace-explorer.assessment-type-select\"\n        componentId=\"shared.model-trace-explorer.assessment-type-select\"\n        value={assessmentType}\n        disabled={isLoading}\n        onChange={(e) => setAssessmentType(e.target.value as 'feedback' | 'expectation')}\n      >\n        <SimpleSelectOption value=\"feedback\">\n          <FormattedMessage defaultMessage=\"Feedback\" description=\"Feedback select menu option for assessment type\" />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"expectation\">\n          <FormattedMessage\n            defaultMessage=\"Expectation\"\n            description=\"Expectation select menu option for assessment type\"\n          />\n        </SimpleSelectOption>\n      </SimpleSelect>\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Assessment Name\"\n          description=\"Field label for assessment name in a creation form\"\n        />\n      </Typography.Text>\n      {isNamePrefilled ? (\n        <Typography.Text>{assessmentName}</Typography.Text>\n      ) : (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-name-input\"\n          value={name}\n          disabled={isLoading}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => setName(e.target.value)}\n        />\n      )}\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Data Type\"\n          description=\"Field label for assessment data type in a creation form\"\n        />\n      </Typography.Text>\n      <SimpleSelect\n        id=\"shared.model-trace-explorer.assessment-data-type-select\"\n        componentId=\"shared.model-trace-explorer.assessment-data-type-select\"\n        value={dataType}\n        disabled={isLoading}\n        onChange={(e) => {\n          setDataType(e.target.value as AssessmentFormInputDataType);\n          setValueError(null);\n        }}\n      >\n        {assessmentType === 'expectation' && (\n          <SimpleSelectOption value=\"json\">\n            <FormattedMessage defaultMessage=\"JSON\" description=\"JSON select menu option for assessment data type\" />\n          </SimpleSelectOption>\n        )}\n        <SimpleSelectOption value=\"string\">\n          <FormattedMessage defaultMessage=\"String\" description=\"String select menu option for assessment data type\" />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"boolean\">\n          <FormattedMessage\n            defaultMessage=\"Boolean\"\n            description=\"Boolean select menu option for assessment data type\"\n          />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"number\">\n          <FormattedMessage defaultMessage=\"Number\" description=\"Numeric select menu option for assessment data type\" />\n        </SimpleSelectOption>\n      </SimpleSelect>\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage defaultMessage=\"Value\" description=\"Field label for assessment value in a creation form\" />\n      </Typography.Text>\n      {dataType === 'json' && (\n        <>\n          <Input.TextArea\n            componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n            value={String(value)}\n            autoSize={{ minRows: 1, maxRows: 5 }}\n            onKeyDown={(e) => e.stopPropagation()}\n            onChange={(e) => {\n              setValue(e.target.value);\n              setValueError(null);\n            }}\n            validationState={valueError ? 'error' : undefined}\n            disabled={isLoading}\n          />\n          {valueError && (\n            <FormUI.Message\n              id=\"shared.model-trace-explorer.assessment-edit-value-json-error\"\n              message={valueError}\n              type=\"error\"\n            />\n          )}\n        </>\n      )}\n      {dataType === 'string' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-value-string-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      {dataType === 'boolean' && (\n        <SegmentedControlGroup\n          componentId=\"shared.model-trace-explorer.assessment-value-boolean-input\"\n          name=\"shared.model-trace-explorer.assessment-value-boolean-input\"\n          value={value}\n          disabled={isLoading}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n        >\n          <SegmentedControlButton value>True</SegmentedControlButton>\n          <SegmentedControlButton value={false}>False</SegmentedControlButton>\n        </SegmentedControlGroup>\n      )}\n      {dataType === 'number' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-value-number-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value ? Number(e.target.value) : '');\n            setValueError(null);\n          }}\n          type=\"number\"\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Rationale\"\n          description=\"Field label for assessment rationale in a creation form\"\n        />\n      </Typography.Text>\n      <Input.TextArea\n        componentId=\"shared.model-trace-explorer.assessment-rationale-input\"\n        value={rationale}\n        autoSize={{ minRows: 1, maxRows: 5 }}\n        disabled={isLoading}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => setRationale(e.target.value)}\n      />\n      <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: theme.spacing.xs }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.assessment-create-button\"\n          disabled={isLoading}\n          onClick={() => setExpanded(false)}\n        >\n          <FormattedMessage\n            defaultMessage=\"Cancel\"\n            description=\"Button label for cancelling the creation of an assessment\"\n          />\n        </Button>\n        <Button\n          css={{ marginLeft: theme.spacing.sm }}\n          type=\"primary\"\n          componentId=\"shared.model-trace-explorer.assessment-create-button\"\n          onClick={handleCreate}\n          loading={isLoading}\n        >\n          <FormattedMessage defaultMessage=\"Create\" description=\"Button label for creating an assessment\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, PlusIcon } from '@databricks/design-system';\n\nimport { AssessmentCreateForm } from './AssessmentCreateForm';\n\nexport const AssessmentCreateButton = ({\n  title,\n  assessmentName,\n  spanId,\n  traceId,\n}: {\n  title: string;\n  assessmentName?: string;\n  spanId?: string;\n  traceId: string;\n}) => {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <div>\n      <Button\n        size=\"small\"\n        componentId=\"shared.model-trace-explorer.add-new-assessment\"\n        icon={<PlusIcon />}\n        onClick={() => setExpanded(true)}\n      >\n        {title}\n      </Button>\n      {expanded && (\n        <AssessmentCreateForm\n          assessmentName={assessmentName}\n          spanId={spanId}\n          traceId={traceId}\n          setExpanded={setExpanded}\n        />\n      )}\n    </div>\n  );\n};\n","import { PencilIcon, TrashIcon, OverflowIcon, Button, DropdownMenu } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport { shouldEnableAssessmentEditing } from '../FeatureUtils';\nimport type { Assessment } from '../ModelTrace.types';\n\nexport const AssessmentActionsOverflowMenu = ({\n  assessment,\n  setIsEditing,\n  setShowDeleteModal,\n}: {\n  assessment: Assessment;\n  setIsEditing?: (isEditing: boolean) => void;\n  setShowDeleteModal: (showDeleteModal: boolean) => void;\n}) => {\n  const isFeedback = 'feedback' in assessment;\n  const user = getUser() ?? '';\n  // humans are not allowed to edit other humans' assessments\n  const isEditEnabled = shouldEnableAssessmentEditing();\n  const doesUserHavePermissions =\n    user === assessment.source.source_id || (isFeedback && assessment.source.source_type !== 'HUMAN');\n  const showEditButton = isEditEnabled && doesUserHavePermissions && setIsEditing;\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button componentId=\"shared.model-trace-explorer.assessment-more-button\" icon={<OverflowIcon />} size=\"small\" />\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content minWidth={100}>\n        {showEditButton && (\n          <DropdownMenu.Item\n            componentId=\"shared.model-trace-explorer.assessment-edit-button\"\n            onClick={() => setIsEditing?.(true)}\n          >\n            <DropdownMenu.IconWrapper>\n              <PencilIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage defaultMessage=\"Edit\" description=\"Edit assessment menu item\" />\n          </DropdownMenu.Item>\n        )}\n        <DropdownMenu.Item\n          componentId=\"shared.model-trace-explorer.assessment-delete-button\"\n          onClick={() => setShowDeleteModal(true)}\n        >\n          <DropdownMenu.IconWrapper>\n            <TrashIcon />\n          </DropdownMenu.IconWrapper>\n          <FormattedMessage defaultMessage=\"Delete\" description=\"Delete assessment menu item\" />\n        </DropdownMenu.Item>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { Modal } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport { deleteAssessment } from '../api';\n\nexport const AssessmentDeleteModal = ({\n  assessment,\n  isModalVisible,\n  setIsModalVisible,\n}: {\n  assessment: Assessment;\n  isModalVisible: boolean;\n  setIsModalVisible: (isModalVisible: boolean) => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: deleteAssessmentMutation, isLoading } = useMutation({\n    mutationFn: () => deleteAssessment({ traceId: assessment.trace_id, assessmentId: assessment.assessment_id }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, assessment.trace_id] });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to delete assessment. Error: {error}',\n            description: 'Error message when deleting an assessment fails.',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n    },\n    onSettled: () => {\n      setIsModalVisible(false);\n    },\n  });\n\n  const handleDelete = useCallback(() => {\n    deleteAssessmentMutation();\n  }, [deleteAssessmentMutation]);\n\n  return (\n    <Modal\n      componentId=\"shared.model-trace-explorer.assessment-delete-modal\"\n      visible={isModalVisible}\n      onOk={handleDelete}\n      okButtonProps={{ danger: true, loading: isLoading }}\n      okText={<FormattedMessage defaultMessage=\"Delete\" description=\"Delete assessment modal button text\" />}\n      onCancel={() => {\n        setIsModalVisible(false);\n      }}\n      cancelText={<FormattedMessage defaultMessage=\"Cancel\" description=\"Delete assessment modal cancel button text\" />}\n      confirmLoading={isLoading}\n      title={<FormattedMessage defaultMessage=\"Delete assessment\" description=\"Delete assessments modal title\" />}\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete this assessment?\"\n        description=\"Delete assessments modal confirmation text\"\n      />\n    </Modal>\n  );\n};\n","import { useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { UpdateAssessmentPayload } from '../api';\nimport { updateAssessment } from '../api';\n\n// This API is used to update an assessment in place.\n// To override an assessment (preserving the original)\n// use `useOverrideAssessment` instead\nexport const useUpdateAssessment = ({\n  assessment,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  assessment: Assessment;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: updateAssessmentMutation, isLoading } = useMutation({\n    mutationFn: (payload: UpdateAssessmentPayload) =>\n      updateAssessment({ traceId: assessment.trace_id, assessmentId: assessment.assessment_id, payload }),\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to update assessment. Error: {error}',\n            description: 'Error message when updating an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, assessment.trace_id] });\n      onSuccess?.();\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    updateAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useCallback, useState } from 'react';\n\nimport {\n  Typography,\n  useDesignSystemTheme,\n  SimpleSelect,\n  SimpleSelectOption,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  Input,\n  Button,\n  FormUI,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport type { AssessmentFormInputDataType } from './AssessmentsPane.utils';\nimport { getCreateAssessmentPayloadValue } from './AssessmentsPane.utils';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { UpdateAssessmentPayload } from '../api';\nimport { useOverrideAssessment } from '../hooks/useOverrideAssessment';\nimport { useUpdateAssessment } from '../hooks/useUpdateAssessment';\n\n// default to the original type of the value if possible. however,\n// we only support editing simple types in the UI (i.e. not arrays / objects)\n// so if the value does not fit, we just default to boolean for simplicity\nconst getDefaultType = (value: any, isFeedback: boolean): AssessmentFormInputDataType => {\n  if (typeof value === 'string') {\n    // treat empty strings as null, default to boolean\n    if (value === '') {\n      return 'boolean';\n    }\n\n    if (isFeedback) {\n      return 'string';\n    }\n\n    try {\n      JSON.parse(value);\n      return 'json';\n    } catch (e) {\n      // not valid JSON, default to string\n      return 'string';\n    }\n  }\n\n  if (typeof value === 'boolean' || typeof value === 'number') {\n    return typeof value as 'boolean' | 'number';\n  }\n  return 'boolean';\n};\n\nconst getDefaultValue = (value: any): string | boolean | number | null => {\n  if (typeof value === 'string') {\n    // treat empty strings as null\n    return value || null;\n  }\n  if (typeof value === 'boolean' || typeof value === 'number') {\n    return value;\n  }\n  return null;\n};\n\nconst getAssessmentValue = (assessment: Assessment) => {\n  if ('feedback' in assessment) {\n    return assessment.feedback.value;\n  }\n\n  if ('value' in assessment.expectation) {\n    return assessment.expectation.value;\n  }\n\n  return assessment.expectation.serialized_value.value;\n};\n\nexport const AssessmentEditForm = ({\n  assessment,\n  onSuccess,\n  onSettled,\n  onCancel,\n}: {\n  assessment: Assessment;\n  onSuccess?: () => void;\n  onSettled?: () => void;\n  onCancel: () => void;\n}) => {\n  const isFeedback = 'feedback' in assessment;\n  const initialValue = getAssessmentValue(assessment);\n  const defaultType = getDefaultType(initialValue, isFeedback);\n  const defaultValue = getDefaultValue(initialValue);\n  const user = getUser() ?? '';\n\n  const { theme } = useDesignSystemTheme();\n  const [dataType, setDataType] = useState<AssessmentFormInputDataType>(defaultType);\n  const [value, setValue] = useState<string | boolean | number | null>(defaultValue);\n  const [rationale, setRationale] = useState(assessment.rationale);\n  const [valueError, setValueError] = useState<React.ReactNode | null>(null);\n\n  const { updateAssessmentMutation, isLoading: isUpdating } = useUpdateAssessment({\n    assessment,\n    onSuccess,\n    onSettled,\n  });\n\n  const { overrideAssessmentMutation, isLoading: isOverwriting } = useOverrideAssessment({\n    traceId: assessment.trace_id,\n    onSuccess,\n    onSettled,\n  });\n\n  const isLoading = isUpdating || isOverwriting;\n\n  const handleUpdate = useCallback(async () => {\n    if (dataType === 'json') {\n      try {\n        JSON.parse(value as string);\n      } catch (e) {\n        setValueError(\n          <FormattedMessage\n            defaultMessage=\"The provided value is not valid JSON\"\n            description=\"Error message for invalid JSON in an assessment edit form\"\n          />,\n        );\n        return;\n      }\n    }\n\n    const valueObj = getCreateAssessmentPayloadValue({\n      formValue: value,\n      dataType,\n      isFeedback,\n    });\n\n    // if a user edits their own assessment, we update it in\n    // place as they are likely just correcting a mistake.\n    // expectation edits should always call the update API\n    if (user === assessment.source.source_id || !isFeedback) {\n      const payload: UpdateAssessmentPayload = {\n        assessment: {\n          ...valueObj,\n          rationale,\n        },\n        update_mask: `${isFeedback ? 'feedback' : 'expectation'},rationale`,\n      };\n\n      updateAssessmentMutation(payload);\n    } else {\n      overrideAssessmentMutation({\n        oldAssessment: assessment,\n        value: valueObj,\n        ...(rationale ? { rationale } : {}),\n      });\n    }\n  }, [dataType, value, isFeedback, user, assessment, rationale, updateAssessmentMutation, overrideAssessmentMutation]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        marginTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.sm,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Data Type\"\n          description=\"Field label for assessment data type in an edit form\"\n        />\n      </Typography.Text>\n      <SimpleSelect\n        id=\"shared.model-trace-explorer.assessment-edit-data-type-select\"\n        componentId=\"shared.model-trace-explorer.assessment-edit-data-type-select\"\n        value={dataType}\n        disabled={isLoading}\n        onChange={(e) => {\n          setDataType(e.target.value as AssessmentFormInputDataType);\n          setValueError(null);\n        }}\n      >\n        {!isFeedback && (\n          <SimpleSelectOption value=\"json\">\n            <FormattedMessage defaultMessage=\"JSON\" description=\"JSON select menu option for assessment data type\" />\n          </SimpleSelectOption>\n        )}\n        <SimpleSelectOption value=\"string\">\n          <FormattedMessage defaultMessage=\"String\" description=\"String select menu option for assessment data type\" />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"boolean\">\n          <FormattedMessage\n            defaultMessage=\"Boolean\"\n            description=\"Boolean select menu option for assessment data type\"\n          />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"number\">\n          <FormattedMessage defaultMessage=\"Number\" description=\"Numeric select menu option for assessment data type\" />\n        </SimpleSelectOption>\n      </SimpleSelect>\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage defaultMessage=\"Value\" description=\"Field label for assessment value in an edit form\" />\n      </Typography.Text>\n      {dataType === 'json' && (\n        <>\n          <Input.TextArea\n            componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n            value={String(value)}\n            rows={3}\n            onKeyDown={(e) => e.stopPropagation()}\n            onChange={(e) => {\n              setValue(e.target.value);\n              setValueError(null);\n            }}\n            validationState={valueError ? 'error' : undefined}\n            disabled={isLoading}\n          />\n          {valueError && (\n            <FormUI.Message\n              id=\"shared.model-trace-explorer.assessment-edit-value-json-error\"\n              message={valueError}\n              type=\"error\"\n            />\n          )}\n        </>\n      )}\n      {dataType === 'string' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      {dataType === 'boolean' && (\n        <SegmentedControlGroup\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-boolean-input\"\n          name=\"shared.model-trace-explorer.assessment-edit-value-boolean-input\"\n          value={value}\n          disabled={isLoading}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n        >\n          <SegmentedControlButton value>True</SegmentedControlButton>\n          <SegmentedControlButton value={false}>False</SegmentedControlButton>\n        </SegmentedControlGroup>\n      )}\n      {dataType === 'number' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-number-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value ? Number(e.target.value) : '');\n            setValueError(null);\n          }}\n          type=\"number\"\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Rationale\"\n          description=\"Field label for assessment rationale in an edit form\"\n        />\n      </Typography.Text>\n      <Input.TextArea\n        componentId=\"shared.model-trace-explorer.assessment-edit-rationale-input\"\n        value={rationale}\n        autoSize={{ minRows: 1, maxRows: 5 }}\n        disabled={isLoading}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => setRationale(e.target.value)}\n      />\n      <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: theme.spacing.xs }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.assessment-edit-cancel-button\"\n          disabled={isLoading}\n          onClick={onCancel}\n        >\n          <FormattedMessage\n            defaultMessage=\"Cancel\"\n            description=\"Button label for cancelling the edit of an assessment\"\n          />\n        </Button>\n        <Button\n          css={{ marginLeft: theme.spacing.sm }}\n          type=\"primary\"\n          componentId=\"shared.model-trace-explorer.assessment-edit-save-button\"\n          onClick={handleUpdate}\n          loading={isLoading}\n        >\n          <FormattedMessage defaultMessage=\"Save\" description=\"Button label for saving an edit to an assessment\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { omit } from 'lodash';\n\nimport { useIntl } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment, Expectation, Feedback } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { CreateAssessmentPayload } from '../api';\nimport { createAssessment } from '../api';\n\nexport const useOverrideAssessment = ({\n  traceId,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  traceId: string;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: overrideAssessmentMutation, isLoading } = useMutation({\n    mutationFn: ({\n      oldAssessment,\n      value,\n      rationale,\n    }: {\n      oldAssessment: Assessment;\n      value: { feedback: Feedback } | { expectation: Expectation };\n      rationale?: string;\n    }) => {\n      const newAssessment: Assessment = {\n        ...oldAssessment,\n        ...value,\n        rationale,\n        source: {\n          source_id: getUser() ?? '',\n          source_type: 'HUMAN',\n        },\n        overrides: oldAssessment.assessment_id,\n      };\n      const payload: CreateAssessmentPayload = {\n        assessment: omit(newAssessment, 'assessment_id', 'create_time', 'last_update_time', 'overriddenAssessments'),\n      };\n      return createAssessment({ payload });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to override assessment. Error: {error}',\n            description: 'Error message when overriding an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, traceId] });\n      onSuccess?.();\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    overrideAssessmentMutation,\n    isLoading,\n  };\n};\n","import { isString } from 'lodash';\n\nimport { Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ExpectationValuePreview = ({ objectKey, value }: { objectKey?: string; value: any }) => {\n  const { theme } = useDesignSystemTheme();\n  const displayValue = isString(value) ? value : JSON.stringify(value);\n\n  return (\n    <Tooltip content={displayValue} componentId=\"shared.model-trace-explorer.expectation-value-preview-tooltip\">\n      <Tag\n        color=\"indigo\"\n        componentId=\"shared.model-trace-explorer.expectation-array-item-tag\"\n        css={{ width: 'min-content', maxWidth: '100%' }}\n      >\n        <Typography.Text css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n          {objectKey && (\n            <Typography.Text bold css={{ marginRight: theme.spacing.xs }}>\n              {objectKey}:\n            </Typography.Text>\n          )}\n          {displayValue}\n        </Typography.Text>\n      </Tag>\n    </Tooltip>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport { getIconTypeForSpan, getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const SpanNameDetailViewLink = ({ node }: { node: ModelTraceSpanNode }) => {\n  const { theme } = useDesignSystemTheme();\n  const { setSelectedNode, setActiveView, setShowTimelineTreeGantt } = useModelTraceExplorerViewState();\n  const hasException = getSpanExceptionCount(node) > 0;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        marginRight: theme.spacing.xs,\n        gap: theme.spacing.xs,\n        '&:hover': {\n          textDecoration: 'underline',\n          textDecorationColor: hasException\n            ? theme.colors.actionDangerDefaultTextDefault\n            : theme.colors.actionDefaultTextDefault,\n          cursor: 'pointer',\n        },\n      }}\n      onClick={() => {\n        setSelectedNode(node);\n        setActiveView('detail');\n        setShowTimelineTreeGantt(false);\n      }}\n    >\n      <ModelTraceExplorerIcon\n        hasException={hasException}\n        type={getIconTypeForSpan(node.type ?? ModelSpanType.UNKNOWN)}\n      />\n      <Typography.Text\n        color={hasException ? 'error' : 'primary'}\n        css={{ marginLeft: theme.spacing.xs, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n      >\n        {node.title}\n      </Typography.Text>\n    </div>\n  );\n};\n","import { isObject } from 'lodash';\nimport { useState } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { AssessmentActionsOverflowMenu } from './AssessmentActionsOverflowMenu';\nimport { AssessmentDeleteModal } from './AssessmentDeleteModal';\nimport { AssessmentEditForm } from './AssessmentEditForm';\nimport { getParsedExpectationValue } from './AssessmentsPane.utils';\nimport { ExpectationValuePreview } from './ExpectationValuePreview';\nimport { SpanNameDetailViewLink } from './SpanNameDetailViewLink';\nimport type { ExpectationAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nconst getValuePreview = (parsedValue: any) => {\n  if (Array.isArray(parsedValue)) {\n    return parsedValue.map((item, index) => <ExpectationValuePreview value={item} key={index} />);\n  }\n\n  if (isObject(parsedValue)) {\n    return Object.entries(parsedValue).map(([key, value]) => (\n      <ExpectationValuePreview key={key} objectKey={key} value={value} />\n    ));\n  }\n\n  return <ExpectationValuePreview value={parsedValue} />;\n};\n\nexport const ExpectationItem = ({ expectation }: { expectation: ExpectationAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const { nodeMap, activeView } = useModelTraceExplorerViewState();\n\n  const associatedSpan = expectation.span_id ? nodeMap[expectation.span_id] : null;\n  // the summary view displays all assessments regardless of span, so\n  // we need some way to indicate which span an assessment is associated with.\n  const showAssociatedSpan = activeView === 'summary' && associatedSpan;\n\n  const parsedValue = getParsedExpectationValue(expectation.expectation);\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.sm + theme.spacing.xs,\n        paddingTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n          {expectation.assessment_name}\n        </Typography.Text>\n        <AssessmentActionsOverflowMenu\n          assessment={expectation}\n          setIsEditing={setIsEditing}\n          setShowDeleteModal={setShowDeleteModal}\n        />\n        <AssessmentDeleteModal\n          assessment={expectation}\n          isModalVisible={showDeleteModal}\n          setIsModalVisible={setShowDeleteModal}\n        />\n      </div>\n      {isEditing ? (\n        <AssessmentEditForm\n          assessment={expectation}\n          onSuccess={() => setIsEditing(false)}\n          onCancel={() => setIsEditing(false)}\n        />\n      ) : (\n        getValuePreview(parsedValue)\n      )}\n      {showAssociatedSpan && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Span\" description=\"Label for the associated span of an assessment\" />\n          </Typography.Text>\n          <SpanNameDetailViewLink node={associatedSpan} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport type { TagColors } from '@databricks/design-system';\nimport {\n  CheckCircleIcon,\n  DangerIcon,\n  Tag,\n  Tooltip,\n  useDesignSystemTheme,\n  XCircleIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\n// displays a single JSON-strigified assessment value as a tag\nexport const AssessmentDisplayValue = ({ jsonValue }: { jsonValue: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  // treat empty strings as null\n  if (!jsonValue || jsonValue === '\"\"') {\n    return null;\n  }\n\n  let parsedValue: any;\n  try {\n    parsedValue = JSON.parse(jsonValue);\n  } catch (e) {\n    // if the value is not valid JSON, just use the string value\n    parsedValue = jsonValue;\n  }\n\n  let color: TagColors = 'default';\n  let children: React.ReactNode = JSON.stringify(parsedValue, null, 2);\n  if (parsedValue === 'yes') {\n    color = 'lime';\n    children = (\n      <>\n        <CheckCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"Yes\" description=\"Label for an assessment with a 'yes' value\" />\n      </>\n    );\n  } else if (parsedValue === 'no') {\n    color = 'coral';\n    children = (\n      <>\n        <XCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"No\" description=\"Label for an assessment with a 'no' value\" />\n      </>\n    );\n  } else if (typeof parsedValue === 'string') {\n    children = parsedValue;\n  } else if (parsedValue === null) {\n    // feedback can only have null values if they are errors\n    color = 'coral';\n    children = (\n      <>\n        <DangerIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"Error\" description=\"Label for an assessment with an error\" />\n      </>\n    );\n  } else if (parsedValue === true) {\n    color = 'lime';\n    children = (\n      <>\n        <CheckCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"True\" description=\"Label for an assessment with a 'true' boolean value\" />\n      </>\n    );\n  } else if (parsedValue === false) {\n    color = 'coral';\n    children = (\n      <>\n        <XCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"False\" description=\"Label for an assessment with a 'false' boolean value\" />\n      </>\n    );\n  }\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.assesment-value-tooltip\" content={children}>\n      <Tag\n        css={{ display: 'inline-flex', maxWidth: '100%', minWidth: theme.spacing.md, marginRight: 0 }}\n        componentId=\"shared.model-trace-explorer.assesment-value-tag\"\n        color={color}\n      >\n        <span\n          css={{\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            textWrap: 'nowrap',\n          }}\n        >\n          {children}\n        </span>\n      </Tag>\n    </Tooltip>\n  );\n};\n","import { Tooltip, useDesignSystemTheme, Typography } from '@databricks/design-system';\n\nimport type { AssessmentSource } from '../ModelTrace.types';\n\nexport const AssessmentSourceName = ({ source }: { source: AssessmentSource }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.assessment-source-name\" content={source.source_id}>\n      {/* wrap in span so the tooltip can show up */}\n      <span\n        css={{\n          flexShrink: 1,\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          textWrap: 'nowrap',\n          marginLeft: theme.spacing.sm,\n          minWidth: theme.spacing.md,\n        }}\n      >\n        <Typography.Text>\n          <span css={{ color: theme.colors.blue500 }}>{source.source_id}</span>\n        </Typography.Text>\n      </span>\n    </Tooltip>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDesignSystemTheme, Typography, SparkleIcon, UserIcon, CodeIcon } from '@databricks/design-system';\n\nimport { AssessmentActionsOverflowMenu } from './AssessmentActionsOverflowMenu';\nimport { AssessmentDeleteModal } from './AssessmentDeleteModal';\nimport { AssessmentSourceName } from './AssessmentSourceName';\nimport { timeSinceStr } from './AssessmentsPane.utils';\nimport type { Assessment } from '../ModelTrace.types';\n\nconst getSourceIcon = (source: Assessment['source']) => {\n  switch (source.source_type) {\n    case 'HUMAN':\n      return UserIcon;\n    case 'LLM_JUDGE':\n      return SparkleIcon;\n    default:\n      return CodeIcon;\n  }\n};\n\nexport const AssessmentItemHeader = ({\n  // connector is not displayed in history items\n  renderConnector = true,\n  assessment,\n  setIsEditing,\n}: {\n  renderConnector?: boolean;\n  assessment: Assessment;\n  setIsEditing?: (isEditing: boolean) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const SourceIcon = getSourceIcon(assessment.source);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n      {renderConnector && (\n        <div\n          css={{\n            position: 'absolute',\n            left: -1,\n            top: 0,\n            width: 10,\n            height: theme.typography.lineHeightBase,\n            boxSizing: 'border-box',\n            borderBottomLeftRadius: theme.borders.borderRadiusMd,\n            borderBottom: `1px solid ${theme.colors.border}`,\n            borderLeft: `1px solid ${theme.colors.border}`,\n          }}\n        />\n      )}\n      <SourceIcon\n        size={theme.typography.fontSizeSm}\n        css={{\n          padding: 2,\n          backgroundColor: theme.colors.actionIconBackgroundHover,\n          borderRadius: theme.borders.borderRadiusFull,\n        }}\n      />\n      <AssessmentSourceName source={assessment.source} />\n      <div\n        css={{\n          marginLeft: 'auto',\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          gap: theme.spacing.xs,\n        }}\n      >\n        {assessment.last_update_time && (\n          <Typography.Text\n            color=\"secondary\"\n            size=\"sm\"\n            css={{\n              marginLeft: theme.spacing.sm,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              textWrap: 'nowrap',\n            }}\n          >\n            {timeSinceStr(new Date(assessment.last_update_time))}\n          </Typography.Text>\n        )}\n        <AssessmentActionsOverflowMenu\n          assessment={assessment}\n          setIsEditing={setIsEditing}\n          setShowDeleteModal={setShowDeleteModal}\n        />\n        <AssessmentDeleteModal\n          assessment={assessment}\n          isModalVisible={showDeleteModal}\n          setIsModalVisible={setShowDeleteModal}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Alert, Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { CodeSnippetRenderMode, type AssessmentError } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\n\nexport const FeedbackErrorItem = ({ error }: { error: AssessmentError }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n      <Alert\n        type=\"error\"\n        closable={false}\n        message={error.error_code}\n        componentId=\"shared.model-trace-explorer.feedback-error-item\"\n        description={\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n            <span>{error.error_message}</span>\n            {error.stack_trace && (\n              <Typography.Link\n                componentId=\"shared.model-trace-explorer.feedback-error-item-stack-trace-link\"\n                onClick={() => setIsModalVisible(true)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"View stack trace\"\n                  description=\"Link to view the stack trace for an assessment error\"\n                />\n              </Typography.Link>\n            )}\n          </div>\n        }\n      />\n      {error.stack_trace && (\n        <Modal\n          title={\n            <FormattedMessage\n              defaultMessage=\"Error stack trace\"\n              description=\"Title of the assessment error stack trace modal\"\n            />\n          }\n          visible={isModalVisible}\n          componentId=\"shared.model-trace-explorer.feedback-error-stack-trace-modal\"\n          footer={null}\n          onCancel={() => setIsModalVisible(false)}\n        >\n          <ModelTraceExplorerCodeSnippet\n            data={JSON.stringify(error.stack_trace)}\n            title=\"\"\n            initialRenderMode={CodeSnippetRenderMode.TEXT}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { AssessmentItemHeader } from './AssessmentItemHeader';\nimport { FeedbackErrorItem } from './FeedbackErrorItem';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\n// this is mostly a copy of FeedbackItem, but with\n// different styling and no ability to edit.\nexport const FeedbackHistoryItem = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const value = feedback.feedback.value;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n      }}\n    >\n      <AssessmentItemHeader renderConnector={false} assessment={feedback} />\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n          marginLeft: 10,\n          paddingLeft: theme.spacing.md,\n          paddingTop: theme.spacing.sm,\n          paddingBottom: theme.spacing.md,\n          paddingRight: theme.spacing.lg,\n          borderLeft: `1px solid ${theme.colors.border}`,\n        }}\n      >\n        {!isNil(feedback.feedback.error) ? (\n          <FeedbackErrorItem error={feedback.feedback.error} />\n        ) : (\n          <>\n            <Typography.Text size=\"sm\" color=\"secondary\">\n              <FormattedMessage defaultMessage=\"Feedback\" description=\"Label for the value of an feedback assessment\" />\n            </Typography.Text>\n            <div>\n              <AssessmentDisplayValue jsonValue={JSON.stringify(value)} />\n            </div>\n          </>\n        )}\n        {feedback.rationale && (\n          <>\n            <Typography.Text size=\"sm\" color=\"secondary\" css={{ marginTop: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Rationale\"\n                description=\"Label for the rationale of an expectation assessment\"\n              />\n            </Typography.Text>\n            <GenAIMarkdownRenderer>{feedback.rationale}</GenAIMarkdownRenderer>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { Modal } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { FeedbackHistoryItem } from './FeedbackHistoryItem';\nimport type { Assessment, FeedbackAssessment } from '../ModelTrace.types';\n\n// helper function to traverse the linked list of overridden\n// assessments. this function handles cycles by keeping track\n// of the assessments we've seen. the backend should prevent\n// such cases from existing, but we should be defensive.\nconst flattenOverrides = (assessment: Assessment) => {\n  const seen = new Set<string>();\n  const flattened = [];\n\n  let currentAssessment: Assessment | undefined = assessment;\n  while (currentAssessment && !seen.has(currentAssessment.assessment_id)) {\n    seen.add(currentAssessment.assessment_id);\n    flattened.push(currentAssessment);\n    currentAssessment = currentAssessment.overriddenAssessment;\n  }\n\n  return flattened;\n};\n\nexport const FeedbackHistoryModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  feedback,\n}: {\n  isModalVisible: boolean;\n  setIsModalVisible: (isModalVisible: boolean) => void;\n  feedback: FeedbackAssessment;\n}) => {\n  const assessmentHistory = useMemo(() => flattenOverrides(feedback), [feedback]);\n\n  return (\n    <Modal\n      componentId=\"shared.model-trace-explorer.feedback-history-modal\"\n      visible={isModalVisible}\n      footer={null}\n      onCancel={() => {\n        setIsModalVisible(false);\n      }}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Edit history\"\n          description=\"Title of a modal that shows the edit history of an assessment\"\n        />\n      }\n    >\n      {assessmentHistory.map((assessment) =>\n        'feedback' in assessment ? <FeedbackHistoryItem key={assessment.assessment_id} feedback={assessment} /> : null,\n      )}\n    </Modal>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { FeedbackErrorItem } from './FeedbackErrorItem';\nimport { FeedbackHistoryModal } from './FeedbackHistoryModal';\nimport { SpanNameDetailViewLink } from './SpanNameDetailViewLink';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const FeedbackItemContent = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const [isHistoryModalVisible, setIsHistoryModalVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n  const { nodeMap, activeView } = useModelTraceExplorerViewState();\n\n  const value = feedback.feedback.value;\n\n  const associatedSpan = feedback.span_id ? nodeMap[feedback.span_id] : null;\n  // the summary view displays all assessments regardless of span, so\n  // we need some way to indicate which span an assessment is associated with.\n  const showAssociatedSpan = activeView === 'summary' && associatedSpan;\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginLeft: theme.spacing.lg }}>\n      {!isNil(feedback.feedback.error) && <FeedbackErrorItem error={feedback.feedback.error} />}\n      {showAssociatedSpan && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Span\" description=\"Label for the associated span of an assessment\" />\n          </Typography.Text>\n          <SpanNameDetailViewLink node={associatedSpan} />\n        </div>\n      )}\n      {isNil(feedback.feedback.error) && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Feedback\" description=\"Label for the value of an feedback assessment\" />\n          </Typography.Text>\n          <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n            <AssessmentDisplayValue jsonValue={JSON.stringify(value)} />\n            {feedback.overriddenAssessment && (\n              <>\n                <span onClick={() => setIsHistoryModalVisible(true)}>\n                  <Typography.Text\n                    css={{\n                      '&:hover': {\n                        textDecoration: 'underline',\n                        cursor: 'pointer',\n                      },\n                    }}\n                    color=\"secondary\"\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"(edited)\"\n                      description=\"Link text in an edited assessment that allows the user to click to see the previous value\"\n                    />\n                  </Typography.Text>\n                </span>\n                <FeedbackHistoryModal\n                  isModalVisible={isHistoryModalVisible}\n                  setIsModalVisible={setIsHistoryModalVisible}\n                  feedback={feedback}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      )}\n      {feedback.rationale && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Rationale\"\n              description=\"Label for the rationale of an expectation assessment\"\n            />\n          </Typography.Text>\n          <div css={{ '& > div:last-of-type': { marginBottom: 0 } }}>\n            <GenAIMarkdownRenderer>{feedback.rationale}</GenAIMarkdownRenderer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AssessmentEditForm } from './AssessmentEditForm';\nimport { AssessmentItemHeader } from './AssessmentItemHeader';\nimport { FeedbackItemContent } from './FeedbackItemContent';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackItem = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        paddingLeft: theme.spacing.lg / 2,\n        marginLeft: theme.spacing.lg / 2,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        position: 'relative',\n      }}\n    >\n      <AssessmentItemHeader assessment={feedback} setIsEditing={setIsEditing} />\n      {isEditing ? (\n        <AssessmentEditForm\n          assessment={feedback}\n          onSuccess={() => setIsEditing(false)}\n          onCancel={() => setIsEditing(false)}\n        />\n      ) : (\n        <FeedbackItemContent feedback={feedback} />\n      )}\n    </div>\n  );\n};\n","import { countBy } from 'lodash';\n\nimport { CodeIcon, SparkleIcon, Tag, Typography, useDesignSystemTheme, UserIcon } from '@databricks/design-system';\n\nimport type { AssessmentSourceType, FeedbackAssessment } from '../ModelTrace.types';\n\nconst getSourceTypeIcon = (sourceType: AssessmentSourceType) => {\n  const smallIconStyles = {\n    '& > svg': {\n      width: 12,\n      height: 12,\n    },\n  };\n  switch (sourceType) {\n    case 'HUMAN':\n      return <UserIcon css={smallIconStyles} />;\n    case 'LLM_JUDGE':\n      return <SparkleIcon css={smallIconStyles} />;\n    case 'CODE':\n      return <CodeIcon css={smallIconStyles} />;\n    default:\n      return null;\n  }\n};\n\nexport const FeedbackValueGroupSourceCounts = ({ feedbacks }: { feedbacks: FeedbackAssessment[] }) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (feedbacks.length < 2) {\n    return null;\n  }\n\n  const sourceCounts = countBy(feedbacks, (feedback) => feedback.source.source_type);\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center', marginLeft: theme.spacing.xs }}>\n      {Object.entries(sourceCounts).map(([sourceType, count]) => (\n        <Tag\n          componentId={`shared.model-trace-explorer.feedback-source-count-${sourceType}`}\n          css={{\n            margin: 0,\n          }}\n          key={sourceType}\n        >\n          <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n            {getSourceTypeIcon(sourceType as AssessmentSourceType)}\n            <Typography.Text>{count}</Typography.Text>\n          </div>\n        </Tag>\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { FeedbackItem } from './FeedbackItem';\nimport { FeedbackValueGroupSourceCounts } from './FeedbackValueGroupSourceCounts';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackValueGroup = ({\n  jsonValue,\n  feedbacks,\n}: {\n  jsonValue: string;\n  feedbacks: FeedbackAssessment[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column' }}>\n      <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.toggle-assessment-expanded\"\n          css={{ flexShrink: 0 }}\n          size=\"small\"\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n        />\n        <AssessmentDisplayValue jsonValue={jsonValue} />\n        <FeedbackValueGroupSourceCounts feedbacks={feedbacks} />\n      </div>\n      {expanded && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {feedbacks.map((feedback) =>\n            // don't display assessments that have been overridden\n            feedback?.valid === false ? null : <FeedbackItem feedback={feedback} key={feedback.assessment_id} />,\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { useDesignSystemTheme, Typography, Button, PlusIcon, Tooltip, DangerIcon } from '@databricks/design-system';\n\nimport { AssessmentCreateForm } from './AssessmentCreateForm';\nimport { getAssessmentDisplayName } from './AssessmentsPane.utils';\nimport { FeedbackValueGroup } from './FeedbackValueGroup';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackGroup = ({\n  name,\n  valuesMap,\n  traceId,\n  activeSpanId,\n}: {\n  name: string;\n  valuesMap: { [value: string]: FeedbackAssessment[] };\n  traceId: string;\n  activeSpanId?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const displayName = getAssessmentDisplayName(name);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const hasError = Object.values(valuesMap)\n    .flat()\n    .some((feedback) => !isNil(feedback.feedback.error));\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        marginBottom: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        padding: theme.spacing.sm + theme.spacing.xs,\n        paddingTop: theme.spacing.sm,\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm, flex: 1, minWidth: 0 }}>\n          <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis', textWrap: 'nowrap' }}>\n            {displayName}\n          </Typography.Text>\n          {hasError && <DangerIcon css={{ flexShrink: 0 }} color=\"danger\" />}\n        </div>\n        <Tooltip content=\"Add new feedback\" componentId=\"shared.model-trace-explorer.add-feedback-in-group-tooltip\">\n          <Button\n            componentId=\"shared.model-trace-explorer.add-feedback\"\n            css={{ flexShrink: 0, marginRight: -theme.spacing.xs }}\n            size=\"small\"\n            icon={<PlusIcon />}\n            onClick={() => setShowCreateForm(true)}\n          />\n        </Tooltip>\n      </div>\n      {Object.entries(valuesMap).map(([jsonValue, feedbacks]) => (\n        <FeedbackValueGroup jsonValue={jsonValue} feedbacks={feedbacks} key={jsonValue} />\n      ))}\n      {showCreateForm && (\n        <AssessmentCreateForm\n          assessmentName={name}\n          spanId={activeSpanId}\n          traceId={traceId}\n          setExpanded={setShowCreateForm}\n        />\n      )}\n    </div>\n  );\n};\n","import { isNil, partition } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Button, CloseIcon, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { AssessmentCreateButton } from './AssessmentCreateButton';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from './AssessmentsPane.utils';\nimport { ExpectationItem } from './ExpectationItem';\nimport { FeedbackGroup } from './FeedbackGroup';\nimport type { Assessment, FeedbackAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\ntype GroupedFeedbacksByValue = { [value: string]: FeedbackAssessment[] };\n\ntype GroupedFeedbacks = [assessmentName: string, feedbacks: GroupedFeedbacksByValue][];\n\nconst groupFeedbacks = (feedbacks: FeedbackAssessment[]): GroupedFeedbacks => {\n  const aggregated: Record<string, GroupedFeedbacksByValue> = {};\n  feedbacks.forEach((feedback) => {\n    if (feedback.valid === false) {\n      return;\n    }\n\n    let value = null;\n    if (feedback.feedback.value !== '') {\n      value = JSON.stringify(feedback.feedback.value);\n    }\n\n    const { assessment_name } = feedback;\n    if (!aggregated[assessment_name]) {\n      aggregated[assessment_name] = {};\n    }\n\n    const group = aggregated[assessment_name];\n    if (!isNil(value)) {\n      if (!group[value]) {\n        group[value] = [];\n      }\n      group[value].push(feedback);\n    }\n  });\n\n  return Object.entries(aggregated).toSorted(([leftName], [rightName]) => leftName.localeCompare(rightName));\n};\n\nexport const AssessmentsPane = ({\n  assessments,\n  traceId,\n  activeSpanId,\n}: {\n  assessments: Assessment[];\n  traceId: string;\n  activeSpanId?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { setAssessmentsPaneExpanded } = useModelTraceExplorerViewState();\n  const [feedbacks, expectations] = useMemo(\n    () => partition(assessments, (assessment) => 'feedback' in assessment),\n    [assessments],\n  );\n  const groupedFeedbacks = useMemo(() => groupFeedbacks(feedbacks), [feedbacks]);\n  const sortedExpectations = expectations.toSorted((left, right) =>\n    left.assessment_name.localeCompare(right.assessment_name),\n  );\n\n  return (\n    <div\n      data-testid=\"assessments-pane\"\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.sm,\n        paddingTop: theme.spacing.xs,\n        height: '100%',\n        borderLeft: `1px solid ${theme.colors.border}`,\n        overflowY: 'scroll',\n        minWidth: ASSESSMENT_PANE_MIN_WIDTH,\n        width: '100%',\n        boxSizing: 'border-box',\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n        <Typography.Text css={{ marginBottom: theme.spacing.sm }} bold>\n          <FormattedMessage defaultMessage=\"Assessments\" description=\"Label for the assessments pane\" />\n        </Typography.Text>\n        {setAssessmentsPaneExpanded && (\n          <Tooltip\n            componentId=\"shared.model-trace-explorer.close-assessments-pane-tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"Hide assessments\"\n                description=\"Tooltip for a button that closes the assessments pane\"\n              />\n            }\n          >\n            <Button\n              data-testid=\"close-assessments-pane-button\"\n              componentId=\"shared.model-trace-explorer.close-assessments-pane\"\n              size=\"small\"\n              icon={<CloseIcon />}\n              onClick={() => setAssessmentsPaneExpanded(false)}\n            />\n          </Tooltip>\n        )}\n      </div>\n      {groupedFeedbacks.map(([name, valuesMap]) => (\n        <FeedbackGroup key={name} name={name} valuesMap={valuesMap} traceId={traceId} activeSpanId={activeSpanId} />\n      ))}\n      {sortedExpectations.length > 0 && (\n        <>\n          <Typography.Text color=\"secondary\" css={{ marginBottom: theme.spacing.sm }}>\n            <FormattedMessage\n              defaultMessage=\"Expectations\"\n              description=\"Label for the expectations section in the assessments pane\"\n            />\n          </Typography.Text>\n          <div\n            css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginBottom: theme.spacing.sm }}\n          >\n            {sortedExpectations.map((expectation) => (\n              <ExpectationItem expectation={expectation} key={expectation.assessment_id} />\n            ))}\n          </div>\n        </>\n      )}\n      <AssessmentCreateButton title=\"Add new assessment\" spanId={activeSpanId} traceId={traceId} />\n    </div>\n  );\n};\n","import type { Interpolation, Theme } from '@emotion/react';\nimport { isNil } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { Empty, Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerAttributesTab } from './ModelTraceExplorerAttributesTab';\nimport { ModelTraceExplorerChatTab } from './ModelTraceExplorerChatTab';\nimport { ModelTraceExplorerContentTab } from './ModelTraceExplorerContentTab';\nimport { ModelTraceExplorerEventsTab } from './ModelTraceExplorerEventsTab';\nimport type { ModelTraceExplorerTab, ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerBadge } from '../ModelTraceExplorerBadge';\nimport ModelTraceExplorerResizablePane from '../ModelTraceExplorerResizablePane';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { AssessmentPaneToggle } from '../assessments-pane/AssessmentPaneToggle';\nimport { AssessmentsPane } from '../assessments-pane/AssessmentsPane';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from '../assessments-pane/AssessmentsPane.utils';\n\nexport const CONTENT_PANE_MIN_WIDTH = 250;\n// used by the parent component to set min-width on the resizable box\nexport const RIGHT_PANE_MIN_WIDTH = CONTENT_PANE_MIN_WIDTH + ASSESSMENT_PANE_MIN_WIDTH;\nconst DEFAULT_SPLIT_RATIO = 0.7;\n\nfunction ModelTraceExplorerRightPaneTabsImpl({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n  activeTab,\n  setActiveTab,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n  activeTab: ModelTraceExplorerTab;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [paneWidth, setPaneWidth] = useState(500);\n  const contentStyle: Interpolation<Theme> = { flex: 1, marginTop: -theme.spacing.md, overflowY: 'auto' };\n  const { assessmentsPaneExpanded, assessmentsPaneEnabled } = useModelTraceExplorerViewState();\n\n  if (isNil(activeSpan)) {\n    return <Empty description=\"Please select a span to view more information\" />;\n  }\n\n  const exceptionCount = getSpanExceptionCount(activeSpan);\n  const hasException = exceptionCount > 0;\n  const tabContent = (\n    <Tabs.Root\n      componentId=\"shared.model-trace-explorer.right-pane-tabs\"\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        minWidth: 200,\n        position: 'relative',\n      }}\n      value={activeTab}\n      onValueChange={(tab: string) => setActiveTab(tab as ModelTraceExplorerTab)}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          right: assessmentsPaneExpanded ? theme.spacing.xs : theme.spacing.md,\n          top: theme.spacing.xs,\n        }}\n      >\n        <AssessmentPaneToggle />\n      </div>\n      <Tabs.List\n        css={{\n          padding: 0,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.sm,\n          boxSizing: 'border-box',\n          width: '100%',\n        }}\n      >\n        {activeSpan.chatMessages && (\n          <Tabs.Trigger value=\"chat\">\n            <FormattedMessage defaultMessage=\"Chat\" description=\"Label for the chat tab of the model trace explorer.\" />\n          </Tabs.Trigger>\n        )}\n        <Tabs.Trigger value=\"content\">\n          <FormattedMessage\n            defaultMessage=\"Inputs / Outputs\"\n            description=\"Label for the inputs and outputs tab of the model trace explorer.\"\n          />\n        </Tabs.Trigger>\n        {/* no i18n for attributes and events as these are properties specified by code,\n            and it might be confusing for users to have different labels here */}\n        <Tabs.Trigger value=\"attributes\">Attributes</Tabs.Trigger>\n        <Tabs.Trigger value=\"events\">\n          Events {hasException && <ModelTraceExplorerBadge count={exceptionCount} />}\n        </Tabs.Trigger>\n      </Tabs.List>\n      {activeSpan.chatMessages && (\n        <Tabs.Content css={contentStyle} value=\"chat\">\n          <ModelTraceExplorerChatTab chatMessages={activeSpan.chatMessages} chatTools={activeSpan.chatTools} />\n        </Tabs.Content>\n      )}\n      <Tabs.Content css={contentStyle} value=\"content\">\n        <ModelTraceExplorerContentTab activeSpan={activeSpan} searchFilter={searchFilter} activeMatch={activeMatch} />\n      </Tabs.Content>\n      <Tabs.Content css={contentStyle} value=\"attributes\">\n        <ModelTraceExplorerAttributesTab\n          activeSpan={activeSpan}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n        />\n      </Tabs.Content>\n      <Tabs.Content css={contentStyle} value=\"events\">\n        <ModelTraceExplorerEventsTab activeSpan={activeSpan} searchFilter={searchFilter} activeMatch={activeMatch} />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n\n  return assessmentsPaneEnabled && assessmentsPaneExpanded ? (\n    <ModelTraceExplorerResizablePane\n      initialRatio={DEFAULT_SPLIT_RATIO}\n      paneWidth={paneWidth}\n      setPaneWidth={setPaneWidth}\n      leftChild={tabContent}\n      leftMinWidth={CONTENT_PANE_MIN_WIDTH}\n      rightChild={\n        <AssessmentsPane\n          assessments={activeSpan.assessments}\n          traceId={activeSpan.traceId}\n          activeSpanId={activeSpan.parentId ? String(activeSpan.key) : undefined}\n        />\n      }\n      rightMinWidth={ASSESSMENT_PANE_MIN_WIDTH}\n    />\n  ) : (\n    tabContent\n  );\n}\n\nexport const ModelTraceExplorerRightPaneTabs = React.memo(ModelTraceExplorerRightPaneTabsImpl);\n","import {\n  Button,\n  Checkbox,\n  FilterIcon,\n  InfoTooltip,\n  Popover,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { SpanFilterState } from '../ModelTrace.types';\nimport { getDisplayNameForSpanType, getIconTypeForSpan } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nexport const TimelineTreeFilterButton = ({\n  spanFilterState,\n  setSpanFilterState,\n}: {\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Popover.Root componentId=\"shared.model-trace-explorer.timeline-tree-filter-popover\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"shared.model-trace-explorer.timeline-tree-filter-button\"\n          icon={<FilterIcon />}\n          size=\"small\"\n        >\n          <FormattedMessage defaultMessage=\"Filter\" description=\"Label for the filter button in the trace explorer.\" />\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"start\">\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, paddingBottom: theme.spacing.xs }}>\n          <Typography.Text bold>\n            <FormattedMessage\n              defaultMessage=\"Filter\"\n              description=\"Label for the span filters popover in the trace explorer.\"\n            />\n          </Typography.Text>\n          <Typography.Text color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Span type\"\n              description=\"Section label for span type filters in the trace explorer.\"\n            />\n          </Typography.Text>\n          {Object.entries(spanFilterState.spanTypeDisplayState).map(([spanType, shouldDisplay]) => {\n            const icon = <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />;\n            return (\n              <Checkbox\n                key={spanType}\n                componentId={`shared.model-trace-explorer.toggle-span-filter_${spanType}-${!shouldDisplay}`}\n                style={{ width: '100%' }}\n                isChecked={shouldDisplay}\n                onChange={() =>\n                  setSpanFilterState({\n                    ...spanFilterState,\n                    spanTypeDisplayState: {\n                      ...spanFilterState.spanTypeDisplayState,\n                      [spanType]: !shouldDisplay,\n                    },\n                  })\n                }\n              >\n                {icon}\n                <Typography.Text css={{ marginLeft: theme.spacing.xs }}>\n                  {getDisplayNameForSpanType(spanType)}\n                </Typography.Text>\n              </Checkbox>\n            );\n          })}\n          <Typography.Text color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Settings\"\n              description=\"Section label for filter settings in the trace explorer.\"\n            />\n          </Typography.Text>\n          <Checkbox\n            componentId={`shared.model-trace-explorer.toggle-show-parents_${!spanFilterState.showParents}`}\n            style={{ width: '100%' }}\n            isChecked={spanFilterState.showParents}\n            onChange={() =>\n              setSpanFilterState({\n                ...spanFilterState,\n                showParents: !spanFilterState.showParents,\n              })\n            }\n          >\n            <Typography.Text css={{ marginRight: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Show all parent spans\"\n                description=\"Checkbox label for a setting that enables showing all parent spans in the trace explorer regardless of filter conditions.\"\n              />\n            </Typography.Text>\n            <InfoTooltip\n              componentId=\"shared.model-trace-explorer.show-parents-tooltip\"\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Always show parents of matched spans, regardless of filter conditions\"\n                  description=\"Tooltip for a span filter setting that enables showing parents of matched spans\"\n                />\n              }\n            />\n          </Checkbox>\n          <Checkbox\n            componentId={`shared.model-trace-explorer.toggle-show-parents_${!spanFilterState.showExceptions}`}\n            style={{ width: '100%' }}\n            isChecked={spanFilterState.showExceptions}\n            onChange={() =>\n              setSpanFilterState({\n                ...spanFilterState,\n                showExceptions: !spanFilterState.showExceptions,\n              })\n            }\n          >\n            <Typography.Text css={{ marginRight: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Show exceptions\"\n                description=\"Checkbox label for a setting that enables showing spans with exceptions in the trace explorer regardless of filter conditions.\"\n              />\n            </Typography.Text>\n            <InfoTooltip\n              componentId=\"shared.model-trace-explorer.show-exceptions-tooltip\"\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Always show spans with exceptions, regardless of filter conditions\"\n                  description=\"Tooltip for a span filter setting that enables showing spans with exceptions\"\n                />\n              }\n            />\n          </Checkbox>\n        </div>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n","import {\n  BarsAscendingVerticalIcon,\n  ListBorderIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { TimelineTreeFilterButton } from './TimelineTreeFilterButton';\nimport type { SpanFilterState } from '../ModelTrace.types';\n\nexport const TimelineTreeHeader = ({\n  showTimelineInfo,\n  setShowTimelineInfo,\n  spanFilterState,\n  setSpanFilterState,\n}: {\n  showTimelineInfo: boolean;\n  setShowTimelineInfo: (showTimelineInfo: boolean) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n        paddingBottom: 3,\n        borderBottom: `1px solid ${theme.colors.border}`,\n        boxSizing: 'border-box',\n        paddingLeft: theme.spacing.sm,\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Trace breakdown\"\n          description=\"Header for the span tree within the MLflow trace UI\"\n        />\n      </Typography.Text>\n      <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n        <TimelineTreeFilterButton spanFilterState={spanFilterState} setSpanFilterState={setSpanFilterState} />\n        <SegmentedControlGroup\n          name=\"size-story\"\n          value={showTimelineInfo}\n          onChange={(event) => {\n            setShowTimelineInfo(event.target.value);\n          }}\n          size=\"small\"\n          componentId=\"shared.model-trace-explorer.toggle-show-timeline\"\n        >\n          <SegmentedControlButton\n            data-testid=\"hide-timeline-info-button\"\n            icon={\n              <Tooltip\n                componentId=\"shared.model-trace-explorer.hide-timeline-info-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Show span tree\"\n                    description=\"Tooltip for a button that show the span tree view of the trace UI.\"\n                  />\n                }\n              >\n                <ListBorderIcon />\n              </Tooltip>\n            }\n            value={false}\n          />\n          <SegmentedControlButton\n            data-testid=\"show-timeline-info-button\"\n            icon={\n              <Tooltip\n                componentId=\"shared.model-trace-explorer.show-timeline-info-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Show execution timeline\"\n                    description=\"Tooltip for a button that shows execution timeline info in the trace UI.\"\n                  />\n                }\n              >\n                <BarsAscendingVerticalIcon />\n              </Tooltip>\n            }\n            value\n          />\n        </SegmentedControlGroup>\n      </div>\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { HierarchyBar } from './TimelineTree.types';\nimport { SPAN_INDENT_WIDTH, SPAN_ROW_HEIGHT, TimelineTreeZIndex } from './TimelineTree.utils';\n\nconst IconBottomConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        left: '100%',\n        bottom: 0,\n        // not sure why the +1 is necessary but\n        // there is a 1 pixel misalignment with the\n        // left connector otherwise\n        width: SPAN_INDENT_WIDTH / 2 + 1,\n        height: theme.spacing.md,\n        boxSizing: 'border-box',\n        borderTopRightRadius: theme.borders.borderRadiusMd,\n        borderTop: `1px solid ${borderColor}`,\n        borderRight: `1px solid ${borderColor}`,\n        zIndex: TimelineTreeZIndex.LOW, // render behind the span's icon\n      }}\n    />\n  );\n};\n\nconst IconLeftConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        left: '50%',\n        top: 0,\n        width: SPAN_INDENT_WIDTH / 2,\n        height: theme.spacing.md,\n        boxSizing: 'border-box',\n        borderBottomLeftRadius: theme.borders.borderRadiusMd,\n        borderBottom: `1px solid ${borderColor}`,\n        borderLeft: `1px solid ${borderColor}`,\n        zIndex: active ? TimelineTreeZIndex.NORMAL : TimelineTreeZIndex.LOW,\n      }}\n    />\n  );\n};\n\nconst VerticalConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        width: SPAN_INDENT_WIDTH / 2,\n        left: '50%',\n        height: SPAN_ROW_HEIGHT,\n        borderLeft: `1px solid ${borderColor}`,\n        boxSizing: 'border-box',\n        zIndex: active ? TimelineTreeZIndex.NORMAL : TimelineTreeZIndex.LOW,\n      }}\n    />\n  );\n};\n\n/**\n * This component renders the bars that represent the hierarchical\n * connections in the span tree.\n */\nexport const TimelineTreeHierarchyBars = ({\n  isActiveSpan,\n  isInActiveChain,\n  linesToRender,\n  hasChildren,\n  isExpanded,\n}: {\n  // whether or not the current span is active\n  isActiveSpan: boolean;\n  // true if the span is either active or a parent of the active span\n  isInActiveChain: boolean;\n  // an array of bars to render to the left of the span icon / name\n  linesToRender: Array<HierarchyBar>;\n  hasChildren: boolean;\n  isExpanded: boolean;\n}) => {\n  if (linesToRender.length === 0) {\n    return (\n      <div\n        css={{\n          width: 0,\n          height: SPAN_ROW_HEIGHT,\n          boxSizing: 'border-box',\n          position: 'relative',\n        }}\n      >\n        {hasChildren && <IconBottomConnector active={isInActiveChain && !isActiveSpan} />}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {linesToRender.map(({ shouldRender, isActive }, idx) => (\n        // for each depth level, render a spacer. depending on the span's\n        // position within the tree, the spacer might be empty or contain\n        // a vertical bar\n        <div\n          key={idx}\n          css={{\n            width: SPAN_INDENT_WIDTH,\n            height: SPAN_ROW_HEIGHT,\n            boxSizing: 'border-box',\n            position: 'relative',\n          }}\n        >\n          {shouldRender && (\n            // render a vertical bar in the middle of the spacer\n            <VerticalConnector active={isActive} />\n          )}\n          {idx === linesToRender.length - 1 && (\n            // at the last spacer, render a curved\n            // line that connects up to the parent\n            <>\n              <IconLeftConnector active={isInActiveChain} />\n              {hasChildren && isExpanded && <IconBottomConnector active={isInActiveChain && !isActiveSpan} />}\n            </>\n          )}\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { spanTimeFormatter } from './TimelineTree.utils';\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport { getIconTypeForSpan } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nexport const TimelineTreeSpanTooltip = ({\n  span,\n  children,\n}: {\n  span: ModelTraceSpanNode;\n  children: React.ReactNode;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const iconType = getIconTypeForSpan(span.type ?? ModelSpanType.UNKNOWN);\n  const primaryTextColor = theme.isDarkMode ? theme.colors.grey800 : theme.colors.grey100;\n  const secondaryTextColor = theme.isDarkMode ? theme.colors.grey500 : theme.colors.grey350;\n\n  return (\n    <Tooltip\n      componentId=\"shared.model-trace-explorer.timeline-tree-node-tooltip\"\n      hideWhenDetached={false}\n      content={\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: theme.spacing.xs,\n              alignItems: 'center',\n              overflow: 'hidden',\n              wordBreak: 'break-all',\n            }}\n          >\n            <ModelTraceExplorerIcon type={iconType} isInTooltip />\n            <span css={{ color: primaryTextColor }}>{span.title}</span>\n            <span\n              css={{ marginLeft: theme.spacing.xs, color: secondaryTextColor, fontSize: theme.typography.fontSizeSm }}\n            >\n              {spanTimeFormatter(span.end - span.start)}\n            </span>\n          </div>\n          <div css={{ display: 'flex', flexDirection: 'row', color: primaryTextColor }}>\n            <FormattedMessage defaultMessage=\"Start:\" description=\"Label for the start time of a span\" />{' '}\n            {spanTimeFormatter(span.start)}\n            {' | '}\n            <FormattedMessage defaultMessage=\"End:\" description=\"Label for the end time of a span\" />{' '}\n            {spanTimeFormatter(span.end)}\n          </div>\n        </div>\n      }\n      side=\"right\"\n      maxWidth={700}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","import {\n  Button,\n  Typography,\n  useDesignSystemTheme,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  Tag,\n  GavelIcon,\n} from '@databricks/design-system';\n\nimport type { HierarchyBar } from './TimelineTree.types';\nimport { getActiveChildIndex, TimelineTreeZIndex } from './TimelineTree.utils';\nimport { TimelineTreeHierarchyBars } from './TimelineTreeHierarchyBars';\nimport { TimelineTreeSpanTooltip } from './TimelineTreeSpanTooltip';\nimport { type ModelTraceSpanNode } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const TimelineTreeNode = ({\n  node,\n  selectedKey,\n  expandedKeys,\n  setExpandedKeys,\n  traceStartTime,\n  traceEndTime,\n  onSelect,\n  linesToRender,\n}: {\n  node: ModelTraceSpanNode;\n  selectedKey: string | number;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n  traceStartTime: number;\n  traceEndTime: number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  // a boolean array that signifies whether or not a vertical\n  // connecting line is supposed to in at the `i`th spacer. see\n  // TimelineTreeHierarchyBars for more details.\n  linesToRender: Array<HierarchyBar>;\n}) => {\n  const expanded = expandedKeys.has(node.key);\n  const { theme } = useDesignSystemTheme();\n  const hasChildren = (node.children ?? []).length > 0;\n  const { setAssessmentsPaneExpanded } = useModelTraceExplorerViewState();\n\n  const isActive = selectedKey === node.key;\n  const activeChildIndex = getActiveChildIndex(node, String(selectedKey));\n  // true if a span has active children OR is the active span\n  const isInActiveChain = activeChildIndex > -1;\n\n  const hasException = getSpanExceptionCount(node) > 0;\n\n  const backgroundColor = isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent';\n\n  return (\n    <>\n      <TimelineTreeSpanTooltip span={node}>\n        <div\n          data-testid={`timeline-tree-node-${node.key}`}\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            width: '100%',\n            cursor: 'pointer',\n            boxSizing: 'border-box',\n            backgroundColor,\n            ':hover': {\n              backgroundColor: theme.colors.actionDefaultBackgroundHover,\n            },\n            ':active': {\n              backgroundColor: theme.colors.actionDefaultBackgroundPress,\n            },\n          }}\n          onClick={() => {\n            onSelect?.(node);\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              // add padding to root nodes, because they have no connecting lines\n              padding: `0px ${theme.spacing.sm}px`,\n              justifyContent: 'space-between',\n              overflow: 'hidden',\n              flex: 1,\n            }}\n          >\n            <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center', overflow: 'hidden', flex: 1 }}>\n              {hasChildren ? (\n                <Button\n                  size=\"small\"\n                  data-testid={`toggle-span-expanded-${node.key}`}\n                  css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n                  icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n                  onClick={(event) => {\n                    // prevent the node from being selected when the expand button is clicked\n                    event.stopPropagation();\n                    const newExpandedKeys = new Set(expandedKeys);\n                    if (expanded) {\n                      newExpandedKeys.delete(node.key);\n                    } else {\n                      newExpandedKeys.add(node.key);\n                    }\n                    setExpandedKeys(newExpandedKeys);\n                  }}\n                  componentId=\"shared.model-trace-explorer.toggle-span\"\n                />\n              ) : (\n                <div css={{ width: 24, marginRight: theme.spacing.xs }} />\n              )}\n              <TimelineTreeHierarchyBars\n                isActiveSpan={isActive}\n                isInActiveChain={isInActiveChain}\n                linesToRender={linesToRender}\n                hasChildren={hasChildren}\n                isExpanded={expanded}\n              />\n              <span\n                css={{\n                  flexShrink: 0,\n                  marginRight: theme.spacing.xs,\n                  borderRadius: theme.borders.borderRadiusSm,\n                  border: `1px solid ${\n                    activeChildIndex > -1 ? theme.colors.blue500 : theme.colors.backgroundSecondary\n                  }`,\n                  zIndex: TimelineTreeZIndex.NORMAL,\n                }}\n              >\n                {node.icon}\n              </span>\n              <Typography.Text\n                color={hasException ? 'error' : 'primary'}\n                css={{\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                  flex: 1,\n                }}\n              >\n                {node.title}\n              </Typography.Text>\n              {node.assessments.length > 0 && (\n                <Tag\n                  color=\"indigo\"\n                  data-testid={`assessment-tag-${node.key}`}\n                  componentId=\"shared.model-trace-explorer.assessment-count\"\n                  css={{\n                    margin: 0,\n                    borderRadius: theme.borders.borderRadiusSm,\n                  }}\n                  onClick={() => setAssessmentsPaneExpanded?.(true)}\n                >\n                  <GavelIcon />\n                  <Typography.Text css={{ marginLeft: theme.spacing.xs }}>{node.assessments.length}</Typography.Text>\n                </Tag>\n              )}\n            </div>\n          </div>\n        </div>\n      </TimelineTreeSpanTooltip>\n      {expanded &&\n        node.children?.map((child, idx) => (\n          <TimelineTreeNode\n            key={child.key}\n            node={child}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n            selectedKey={selectedKey}\n            traceStartTime={traceStartTime}\n            traceEndTime={traceEndTime}\n            onSelect={onSelect}\n            linesToRender={linesToRender.concat({\n              // render the connecting line at this depth\n              // if there are more children to render\n              shouldRender: idx < (node.children?.length ?? 0) - 1,\n              // make the vertical line blue if the active span\n              // is below this child\n              isActive: idx < activeChildIndex,\n            })}\n          />\n        ))}\n    </>\n  );\n};\n","import { useLayoutEffect, useRef } from 'react';\n\nimport { useDesignSystemTheme, Typography, Button, ChevronDownIcon, ChevronRightIcon } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../../ModelTrace.types';\nimport { spanTimeFormatter, TimelineTreeZIndex } from '../TimelineTree.utils';\nimport { TimelineTreeSpanTooltip } from '../TimelineTreeSpanTooltip';\n\nexport const TimelineTreeGanttNode = ({\n  node,\n  selectedKey,\n  leftOffset,\n  width,\n  onSelect,\n  expandedKeys,\n  setExpandedKeys,\n}: {\n  node: ModelTraceSpanNode;\n  selectedKey: string | number;\n  leftOffset: number;\n  width: number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const titleInBarRef = useRef<HTMLSpanElement>(null);\n  const titleBesideBarRef = useRef<HTMLSpanElement>(null);\n  const isActive = selectedKey === node.key;\n  const backgroundColor = isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent';\n  const hasChildren = (node.children ?? []).length > 0;\n  const expanded = expandedKeys.has(node.key);\n\n  useLayoutEffect(() => {\n    if (!titleInBarRef.current || !titleBesideBarRef.current) {\n      return;\n    }\n\n    const spanWidth = Math.max(titleInBarRef.current.offsetWidth, titleBesideBarRef.current.offsetWidth);\n\n    if (spanWidth < width - theme.spacing.sm) {\n      titleInBarRef.current.style.display = 'inline';\n      titleBesideBarRef.current.style.display = 'none';\n    } else {\n      titleInBarRef.current.style.display = 'none';\n      titleBesideBarRef.current.style.display = 'inline';\n    }\n  }, [theme.spacing.sm, width]);\n\n  return (\n    <TimelineTreeSpanTooltip span={node}>\n      <div\n        key={node.key}\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          cursor: 'pointer',\n          boxSizing: 'border-box',\n          paddingLeft: theme.spacing.xs,\n          paddingRight: theme.spacing.sm,\n          paddingTop: theme.spacing.xs,\n          paddingBottom: theme.spacing.xs,\n          backgroundColor: backgroundColor,\n          alignItems: 'center',\n          ':hover': {\n            backgroundColor: theme.colors.actionDefaultBackgroundHover,\n          },\n          ':active': {\n            backgroundColor: theme.colors.actionDefaultBackgroundPress,\n          },\n          zIndex: TimelineTreeZIndex.NORMAL,\n        }}\n        onClick={() => onSelect?.(node)}\n      >\n        {hasChildren ? (\n          <Button\n            size=\"small\"\n            data-testid={`toggle-timeline-span-expanded-${node.key}`}\n            css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n            icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n            onClick={(event) => {\n              // prevent the node from being selected when the expand button is clicked\n              event.stopPropagation();\n              const newExpandedKeys = new Set(expandedKeys);\n              if (expanded) {\n                newExpandedKeys.delete(node.key);\n              } else {\n                newExpandedKeys.add(node.key);\n              }\n              setExpandedKeys(newExpandedKeys);\n            }}\n            componentId=\"shared.model-trace-explorer.toggle-timeline-span\"\n          />\n        ) : (\n          <div css={{ width: 24, marginRight: theme.spacing.xs }} />\n        )}\n        <div css={{ width: leftOffset, flexShrink: 0 }} />\n        <div\n          css={{\n            position: 'relative',\n            width,\n            height: theme.typography.lineHeightBase,\n            backgroundColor: theme.colors.blue600,\n            borderRadius: theme.borders.borderRadiusSm,\n            flexShrink: 0,\n          }}\n        >\n          <Typography.Text>\n            <span\n              ref={titleInBarRef}\n              css={{\n                marginLeft: theme.spacing.xs,\n                color: theme.colors.white,\n                display: 'none',\n              }}\n            >\n              {node.title}\n            </span>\n          </Typography.Text>\n        </div>\n        <div css={{ flex: 1, overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis' }}>\n          <Typography.Text>\n            <span\n              ref={titleBesideBarRef}\n              css={{\n                marginLeft: theme.spacing.xs,\n                color: theme.colors.textPrimary,\n              }}\n            >\n              {node.title}\n            </span>\n          </Typography.Text>\n          <Typography.Text css={{ marginLeft: theme.spacing.xs }} color=\"secondary\">\n            {spanTimeFormatter(node.end - node.start)}\n          </Typography.Text>\n        </div>\n      </div>\n    </TimelineTreeSpanTooltip>\n  );\n};\n","import { useMemo, useRef } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useResizeObserver } from '@databricks/web-shared/hooks';\n\nimport { TimelineTreeGanttNode } from './TimelineTreeGanttNode';\nimport type { ModelTraceSpanNode } from '../../ModelTrace.types';\nimport { spanTimeFormatter, TimelineTreeZIndex } from '../TimelineTree.utils';\n\n// the amount of space required to accomodate the collapse buttons\nconst TIMELINE_BAR_LEFT_OFFSET = 32;\n\n// this function generates an array of \"nice\" x-ticks (e.g. nearest 0.1, 0.2, 0.5 to the value)\nfunction getNiceXTicks(left: number, right: number, graphWidth: number, minPixelsBetweenTicks = 60): number[] {\n  const range = right - left;\n  if (range <= 0 || graphWidth <= 0) return [];\n\n  const maxTickCount = Math.floor(graphWidth / minPixelsBetweenTicks);\n  if (maxTickCount < 1) return [];\n\n  // Step 1: raw interval\n  const rawInterval = range / maxTickCount;\n\n  // Step 2: round to a \"nice\" interval\n  const magnitude = Math.pow(10, Math.floor(Math.log10(rawInterval)));\n  const residual = rawInterval / magnitude;\n\n  let niceFraction;\n  if (residual <= 1) niceFraction = 1;\n  else if (residual <= 2) niceFraction = 2;\n  else if (residual <= 5) niceFraction = 5;\n  else niceFraction = 10;\n\n  const niceInterval = niceFraction * magnitude;\n\n  // Step 3: extend right bound so we always overshoot it\n  // this guarantees that there will be enough space to\n  // render the span labels.\n  const extendedRight = right + 2 * niceInterval;\n\n  // Step 4: Generate tick positions\n  const firstTick = Math.ceil(left / niceInterval) * niceInterval;\n  const ticks: number[] = [];\n\n  for (let tick = firstTick; tick <= extendedRight; tick += niceInterval) {\n    ticks.push(Number(tick.toFixed(10))); // Avoid float errors\n  }\n\n  return ticks;\n}\n\n// converts timestamp numbers to real pixel values\nfunction scaleX(value: number, left: number, right: number, width: number) {\n  return ((value - left) / (right - left)) * width;\n}\n\nexport const TimelineTreeGanttBars = ({\n  nodes,\n  selectedKey,\n  onSelect,\n  traceStartTime,\n  traceEndTime,\n  expandedKeys,\n  setExpandedKeys,\n}: {\n  nodes: ModelTraceSpanNode[];\n  selectedKey: string | number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  traceStartTime: number;\n  traceEndTime: number;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const treeContainerRef = useRef<HTMLDivElement>(null);\n  const treeElementWidth = useResizeObserver({ ref: treeContainerRef })?.width ?? 0;\n  const initialXTicks = useMemo(\n    () => getNiceXTicks(traceStartTime, traceEndTime, treeElementWidth),\n    [traceEndTime, traceStartTime, treeElementWidth],\n  );\n  const left = Math.min(...initialXTicks);\n  // for the right limit of the graph, we take the average of the last\n  // two ticks so that the graph does not end directly on a line. if\n  // the graph ends on the line, the ticklabel at the top might render\n  // slightly off screen, which looks bad\n  const right = (initialXTicks[initialXTicks.length - 1] + initialXTicks[initialXTicks.length - 2]) / 2;\n  // pop the last tick since we will not render it (it's beyond the right limit)\n  const xTicks = initialXTicks.slice(0, -1);\n\n  const scaleDurationToTreeWidth = (value: number) => scaleX(value, left, right, treeElementWidth);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n        boxSizing: 'border-box',\n      }}\n    >\n      {/* gantt bar header with the tick labels */}\n      <div\n        ref={treeContainerRef}\n        css={{\n          display: 'flex',\n          width: '100%',\n          flexDirection: 'row',\n          height: theme.typography.lineHeightBase,\n          paddingLeft: TIMELINE_BAR_LEFT_OFFSET,\n          paddingRight: theme.spacing.lg,\n          boxSizing: 'border-box',\n          position: 'sticky',\n          top: 0,\n          backgroundColor: theme.colors.backgroundPrimary,\n          zIndex: TimelineTreeZIndex.HIGH,\n        }}\n      >\n        <div\n          data-testid=\"time-marker-area\"\n          css={{\n            position: 'relative',\n          }}\n        >\n          {xTicks.map((n) => (\n            <Typography.Text\n              css={{\n                position: 'absolute',\n                transform: `translateX(-50%)`,\n                left: scaleDurationToTreeWidth(n),\n                whiteSpace: 'nowrap',\n              }}\n              key={n}\n            >\n              {spanTimeFormatter(n)}\n            </Typography.Text>\n          ))}\n        </div>\n      </div>\n      {/* vertical gantt markers */}\n      <div\n        css={{\n          flex: 1,\n          pointerEvents: 'none',\n          zIndex: TimelineTreeZIndex.LOW,\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n          }}\n        >\n          {xTicks.map((n) => (\n            <div\n              key={n}\n              css={{\n                position: 'absolute',\n                left: scaleDurationToTreeWidth(n) + TIMELINE_BAR_LEFT_OFFSET,\n                borderRight: `1px solid ${theme.colors.border}`,\n                height: '100%',\n              }}\n            />\n          ))}\n        </div>\n      </div>\n      {/* colored horizontal gantt bars */}\n      {nodes.map((node) => {\n        const leftOffset = scaleDurationToTreeWidth(node.start);\n        const width = scaleDurationToTreeWidth(node.end) - leftOffset;\n        return (\n          <TimelineTreeGanttNode\n            key={node.key}\n            selectedKey={selectedKey}\n            onSelect={onSelect}\n            node={node}\n            leftOffset={leftOffset}\n            width={width}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import { useCallback, useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { getTimelineTreeExpandedNodesList } from './TimelineTree.utils';\nimport { TimelineTreeHeader } from './TimelineTreeHeader';\nimport { TimelineTreeNode } from './TimelineTreeNode';\nimport { TimelineTreeGanttBars } from './gantt/TimelineTreeGanttBars';\nimport type { ModelTraceSpanNode, SpanFilterState } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const TimelineTree = <NodeType extends ModelTraceSpanNode & { children?: NodeType[] }>({\n  rootNodes,\n  selectedNode,\n  setSelectedNode,\n  traceStartTime,\n  traceEndTime,\n  expandedKeys,\n  setExpandedKeys,\n  spanFilterState,\n  setSpanFilterState,\n  className,\n}: {\n  selectedNode?: NodeType;\n  setSelectedNode: (node: ModelTraceSpanNode) => void;\n  traceStartTime: number;\n  traceEndTime: number;\n  rootNodes: NodeType[];\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n  className?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const onSpanClick = useCallback(\n    (node) => {\n      setSelectedNode?.(node);\n    },\n    [\n      // comment to prevent prettier format after copybara\n      setSelectedNode,\n    ],\n  );\n\n  const { showTimelineTreeGantt: showTimelineInfo, setShowTimelineTreeGantt: setShowTimelineInfo } =\n    useModelTraceExplorerViewState();\n\n  const expandedNodesList = useMemo(\n    () => getTimelineTreeExpandedNodesList(rootNodes, expandedKeys),\n    [rootNodes, expandedKeys],\n  );\n\n  const treeElement = useMemo(\n    () => (\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n          minHeight: '100%',\n          boxSizing: 'border-box',\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        {showTimelineInfo ? (\n          <TimelineTreeGanttBars\n            nodes={expandedNodesList}\n            selectedKey={selectedNode?.key ?? ''}\n            onSelect={onSpanClick}\n            traceStartTime={traceStartTime}\n            traceEndTime={traceEndTime}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n          />\n        ) : (\n          rootNodes.map((node) => (\n            <TimelineTreeNode\n              key={node.key}\n              node={node}\n              expandedKeys={expandedKeys}\n              setExpandedKeys={setExpandedKeys}\n              selectedKey={selectedNode?.key ?? ''}\n              traceStartTime={traceStartTime}\n              traceEndTime={traceEndTime}\n              onSelect={onSpanClick}\n              linesToRender={[]}\n            />\n          ))\n        )}\n      </div>\n    ),\n    [\n      showTimelineInfo,\n      expandedNodesList,\n      selectedNode?.key,\n      onSpanClick,\n      traceStartTime,\n      traceEndTime,\n      rootNodes,\n      expandedKeys,\n      setExpandedKeys,\n    ],\n  );\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        borderRadius: theme.legacyBorders.borderRadiusMd,\n        overflow: 'hidden',\n        display: 'flex',\n      }}\n      className={className}\n    >\n      <div\n        css={{\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n          <TimelineTreeHeader\n            showTimelineInfo={showTimelineInfo}\n            setShowTimelineInfo={setShowTimelineInfo}\n            spanFilterState={spanFilterState}\n            setSpanFilterState={setSpanFilterState}\n          />\n          {rootNodes.length > 0 ? (\n            <div css={{ flex: 1, overflowY: 'auto', display: 'flex' }}>{treeElement}</div>\n          ) : (\n            <div\n              css={{\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'center',\n                padding: theme.spacing.md,\n                paddingTop: theme.spacing.lg,\n              }}\n            >\n              <FormattedMessage\n                defaultMessage=\"No results found. Try using a different search term.\"\n                description=\"Model trace explorer > no results found\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { values, isString } from 'lodash';\nimport { useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTrace, ModelTraceSpanNode } from './ModelTrace.types';\nimport type { ModelTraceExplorerResizablePaneRef } from './ModelTraceExplorerResizablePane';\nimport ModelTraceExplorerResizablePane from './ModelTraceExplorerResizablePane';\nimport ModelTraceExplorerSearchBox from './ModelTraceExplorerSearchBox';\nimport { useModelTraceExplorerViewState } from './ModelTraceExplorerViewStateContext';\nimport { useModelTraceSearch } from './hooks/useModelTraceSearch';\nimport { ModelTraceExplorerRightPaneTabs, RIGHT_PANE_MIN_WIDTH } from './right-pane/ModelTraceExplorerRightPaneTabs';\nimport { TimelineTree } from './timeline-tree';\nimport {\n  DEFAULT_EXPAND_DEPTH,\n  getModelTraceSpanNodeDepth,\n  getTimelineTreeNodesMap,\n  SPAN_INDENT_WIDTH,\n  useTimelineTreeExpandedNodes,\n} from './timeline-tree/TimelineTree.utils';\n\n// this is the number of large spacings we need in order to\n// properly calculate the min width for the left pane. it's:\n// - 1 for left and right padding\n// - 4 for the right collapse button + time marker\n// - 1 for span icon\n// - 1 for buffer (leave some space to render text)\nconst LEFT_PANE_MIN_WIDTH_LARGE_SPACINGS = 7;\nconst LEFT_PANE_HEADER_MIN_WIDTH_PX = 275;\n\nconst getDefaultSplitRatio = (): number => {\n  if (window.innerWidth <= 768) {\n    return 0.33;\n  }\n\n  return 0.25;\n};\n\nexport const ModelTraceExplorerDetailView = ({\n  modelTrace,\n  className,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const initialRatio = getDefaultSplitRatio();\n  const paneRef = useRef<ModelTraceExplorerResizablePaneRef>(null);\n  const [paneWidth, setPaneWidth] = useState(500);\n\n  const {\n    rootNode: treeNode,\n    selectedNode,\n    setSelectedNode,\n    activeTab,\n    setActiveTab,\n  } = useModelTraceExplorerViewState();\n\n  const { expandedKeys, setExpandedKeys } = useTimelineTreeExpandedNodes({\n    rootNodes: treeNode ? [treeNode] : [],\n    // nodes beyond this depth will be collapsed\n    initialExpandDepth: DEFAULT_EXPAND_DEPTH,\n  });\n\n  const {\n    matchData,\n    searchFilter,\n    setSearchFilter,\n    spanFilterState,\n    setSpanFilterState,\n    filteredTreeNodes,\n    handleNextSearchMatch,\n    handlePreviousSearchMatch,\n  } = useModelTraceSearch({\n    treeNode,\n    selectedNode,\n    setSelectedNode,\n    setActiveTab,\n    setExpandedKeys,\n    modelTraceInfo: modelTrace?.info,\n  });\n\n  const onSelectNode = (node?: ModelTraceSpanNode) => {\n    setSelectedNode(node);\n    // Open left most tab when a span is clicked\n    setActiveTab(node?.chatMessages ? 'chat' : 'content');\n    if (isString(node?.key)) {\n      onSelectSpan?.(node?.key);\n    }\n  };\n\n  // initial render\n  useLayoutEffect(() => {\n    // expand all nodes up to the default depth when the tree changes\n    const list = values(getTimelineTreeNodesMap(filteredTreeNodes, DEFAULT_EXPAND_DEPTH)).map((node) => node.key);\n    setExpandedKeys(new Set(list));\n  }, [filteredTreeNodes, setExpandedKeys]);\n\n  const leftPaneMinWidth = useMemo(() => {\n    // min width necessary to render all the spans in the tree accounting for indentation\n    const minWidthForSpans =\n      Math.max(...filteredTreeNodes.map(getModelTraceSpanNodeDepth)) * SPAN_INDENT_WIDTH +\n      LEFT_PANE_MIN_WIDTH_LARGE_SPACINGS * theme.spacing.lg;\n    // min width necessary to render the header, given that it has a bunch of buttons\n    return Math.max(LEFT_PANE_HEADER_MIN_WIDTH_PX, minWidthForSpans);\n  }, [filteredTreeNodes, theme.spacing.lg]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        minHeight: 0,\n      }}\n      className={className}\n    >\n      <div\n        css={{\n          padding: theme.spacing.xs,\n          borderBottom: `1px solid ${theme.colors.border}`,\n        }}\n      >\n        <ModelTraceExplorerSearchBox\n          searchFilter={searchFilter}\n          setSearchFilter={setSearchFilter}\n          matchData={matchData}\n          handleNextSearchMatch={handleNextSearchMatch}\n          handlePreviousSearchMatch={handlePreviousSearchMatch}\n        />\n      </div>\n      <ModelTraceExplorerResizablePane\n        ref={paneRef}\n        initialRatio={initialRatio}\n        paneWidth={paneWidth}\n        setPaneWidth={setPaneWidth}\n        leftChild={\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n              minWidth: leftPaneMinWidth,\n            }}\n          >\n            <TimelineTree\n              rootNodes={filteredTreeNodes}\n              selectedNode={selectedNode}\n              traceStartTime={treeNode?.start ?? 0}\n              traceEndTime={treeNode?.end ?? 0}\n              setSelectedNode={onSelectNode}\n              css={{ flex: 1 }}\n              expandedKeys={expandedKeys}\n              setExpandedKeys={setExpandedKeys}\n              spanFilterState={spanFilterState}\n              setSpanFilterState={setSpanFilterState}\n            />\n          </div>\n        }\n        leftMinWidth={leftPaneMinWidth}\n        rightChild={\n          <ModelTraceExplorerRightPaneTabs\n            activeSpan={selectedNode}\n            searchFilter={searchFilter}\n            activeMatch={matchData.match}\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n          />\n        }\n        rightMinWidth={RIGHT_PANE_MIN_WIDTH}\n      />\n    </div>\n  );\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport const ModelTraceExplorerErrorState = () => {\n  return (\n    <Empty\n      title={\n        <FormattedMessage\n          defaultMessage=\"Trace failed to render\"\n          description=\"Title for the error state in the model trace explorer\"\n        />\n      }\n      description={\n        <FormattedMessage\n          defaultMessage=\"Unfortunately, the trace could not be rendered due to an unknown error. You can reload the page to try again. If the problem persists, please contact support.\"\n          description=\"Description for the error state in the model trace explorer\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n};\n","import { TableSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ModelTraceExplorerSkeleton = ({ label }: { label?: React.ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'flex', height: '100%' }}>\n      <div css={{ flex: 1 }}>\n        <div css={{ padding: theme.spacing.sm, borderBottom: `1px solid ${theme.colors.border}` }}>\n          <TitleSkeleton label={label} />\n        </div>\n        <div\n          css={{\n            borderRadius: theme.legacyBorders.borderRadiusMd,\n            overflow: 'hidden',\n            display: 'flex',\n          }}\n        >\n          <div css={{ flex: 1, padding: theme.spacing.sm, borderRight: `1px solid ${theme.colors.border}` }}>\n            <TableSkeleton lines={5} />\n          </div>\n          <div css={{ flex: 2, padding: theme.spacing.sm }}>\n            <TableSkeleton lines={5} />\n          </div>\n        </div>\n      </div>\n      <div css={{ padding: theme.spacing.md, overflowY: 'auto', flex: 1 }}>\n        <TableSkeleton lines={12} />\n      </div>\n    </div>\n  );\n};\n","import { useQuery } from '@databricks/web-shared/query-client';\n\nimport type { ModelTrace } from '../ModelTrace.types';\nimport { FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport { fetchTraceInfoV3 } from '../api';\n\nexport const useGetModelTraceInfoV3 = ({\n  traceId,\n  setModelTrace,\n  setAssessmentsPaneEnabled,\n}: {\n  traceId: string;\n  setModelTrace: React.Dispatch<React.SetStateAction<ModelTrace>>;\n  setAssessmentsPaneEnabled: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const queryKey = [FETCH_TRACE_INFO_QUERY_KEY, traceId];\n\n  return useQuery({\n    queryKey,\n    queryFn: () => fetchTraceInfoV3({ traceId }),\n    onSuccess: (response) => {\n      setModelTrace((prevModelTrace: ModelTrace) => ({\n        data: prevModelTrace.data,\n        info: response?.trace?.trace_info ?? {},\n      }));\n      setAssessmentsPaneEnabled(true);\n    },\n    onError: () => {\n      setAssessmentsPaneEnabled(false);\n    },\n  });\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceChatTool } from '../ModelTrace.types';\nimport { ModelTraceExplorerChatTool } from '../right-pane/ModelTraceExplorerChatTool';\n\nexport const ModelTraceExplorerChatToolsRenderer = ({\n  title,\n  tools,\n}: {\n  title: string;\n  tools: ModelTraceChatTool[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        padding: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      {title && (\n        <Typography.Text css={{ marginLeft: theme.spacing.xs }} bold>\n          {title}\n        </Typography.Text>\n      )}\n      {tools.map((tool) => (\n        <ModelTraceExplorerChatTool key={tool.function.name} tool={tool} />\n      ))}\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { RetrieverDocument } from '../ModelTrace.types';\nimport { ModelTraceExplorerRetrieverDocument } from '../right-pane/ModelTraceExplorerRetrieverDocument';\n\nexport const ModelTraceExplorerRetrieverFieldRenderer = ({\n  title,\n  documents,\n}: {\n  title: string;\n  documents: RetrieverDocument[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        backgroundColor: theme.colors.backgroundPrimary,\n        borderRadius: theme.borders.borderRadiusSm,\n        border: `1px solid ${theme.colors.border}`,\n      }}\n    >\n      {title && (\n        <div\n          css={{\n            padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n            borderBottom: `1px solid ${theme.colors.border}`,\n          }}\n        >\n          <Typography.Text bold>{title}</Typography.Text>\n        </div>\n      )}\n      {documents.map((document, idx) => (\n        <div key={idx} css={{ borderBottom: idx !== documents.length - 1 ? `1px solid ${theme.colors.border}` : '' }}>\n          <ModelTraceExplorerRetrieverDocument key={idx} text={document.page_content} metadata={document.metadata} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nconst STRING_TRUNCATION_LIMIT = 400;\n\nexport const ModelTraceExplorerTextFieldRenderer = ({ title, value }: { title: string; value: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  const isExpandable = value.length > STRING_TRUNCATION_LIMIT;\n  const displayValue =\n    !expanded && value.length > STRING_TRUNCATION_LIMIT ? value.slice(0, STRING_TRUNCATION_LIMIT) + '...' : value;\n\n  const hoverStyles = isExpandable\n    ? { ':hover': { backgroundColor: theme.colors.actionIconBackgroundHover, cursor: 'pointer' } }\n    : {};\n\n  return (\n    <div\n      css={{\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      {title && (\n        <div\n          role=\"button\"\n          css={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: `${theme.spacing.sm}px ${theme.spacing.sm + theme.spacing.xs}px`,\n            ...hoverStyles,\n          }}\n          onClick={() => setExpanded(!expanded)}\n        >\n          <Typography.Text bold>{title}</Typography.Text>\n          {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n        </div>\n      )}\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n          paddingLeft: theme.spacing.sm + theme.spacing.xs,\n          paddingRight: theme.spacing.sm + theme.spacing.xs,\n          paddingTop: title ? 0 : theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n          // get rid of last margin in markdown renderer\n          '& > div:last-of-type': {\n            marginBottom: 0,\n          },\n        }}\n      >\n        <GenAIMarkdownRenderer>{displayValue}</GenAIMarkdownRenderer>\n        {isExpandable && (\n          <Typography.Link\n            onClick={() => setExpanded(!expanded)}\n            componentId=\"shared.model-trace-explorer.text-field-see-more-link\"\n          >\n            {expanded ? (\n              <FormattedMessage\n                defaultMessage=\"See less\"\n                description=\"Button to collapse a long text field in the trace explorer summary field renderer\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See more\"\n                description=\"Button to expand a long text field in the trace explorer summary field renderer\"\n              />\n            )}\n          </Typography.Link>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { every, isString } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { ModelTraceExplorerChatToolsRenderer } from './ModelTraceExplorerChatToolsRenderer';\nimport { ModelTraceExplorerRetrieverFieldRenderer } from './ModelTraceExplorerRetrieverFieldRenderer';\nimport { ModelTraceExplorerTextFieldRenderer } from './ModelTraceExplorerTextFieldRenderer';\nimport { CodeSnippetRenderMode } from '../ModelTrace.types';\nimport { isModelTraceChatTool, isRetrieverDocument, normalizeConversation } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerConversation } from '../right-pane/ModelTraceExplorerConversation';\n\nexport const ModelTraceExplorerFieldRenderer = ({\n  title,\n  data,\n  renderMode,\n}: {\n  title: string;\n  data: string;\n  renderMode: 'default' | 'json' | 'text';\n}) => {\n  const parsedData = useMemo(() => {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      return data;\n    }\n  }, [data]);\n\n  const dataIsString = isString(parsedData);\n  const chatMessages = normalizeConversation(parsedData);\n  const isChatTools = Array.isArray(parsedData) && parsedData.length > 0 && every(parsedData, isModelTraceChatTool);\n  const isRetrieverDocuments =\n    Array.isArray(parsedData) && parsedData.length > 0 && every(parsedData, isRetrieverDocument);\n\n  if (renderMode === 'json') {\n    return <ModelTraceExplorerCodeSnippet title={title} data={data} initialRenderMode={CodeSnippetRenderMode.JSON} />;\n  }\n\n  if (renderMode === 'text') {\n    return <ModelTraceExplorerCodeSnippet title={title} data={data} initialRenderMode={CodeSnippetRenderMode.TEXT} />;\n  }\n\n  if (dataIsString) {\n    return <ModelTraceExplorerTextFieldRenderer title={title} value={parsedData} />;\n  }\n\n  if (chatMessages && chatMessages.length > 0) {\n    return <ModelTraceExplorerConversation messages={chatMessages} />;\n  }\n\n  if (isChatTools) {\n    return <ModelTraceExplorerChatToolsRenderer title={title} tools={parsedData} />;\n  }\n\n  if (isRetrieverDocuments) {\n    return <ModelTraceExplorerRetrieverFieldRenderer title={title} documents={parsedData} />;\n  }\n\n  return <ModelTraceExplorerCodeSnippet title={title} data={data} />;\n};\n","import { Typography, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\n\nexport const ModelTraceExplorerSummaryViewExceptionsSection = ({ node }: { node: ModelTraceSpanNode }) => {\n  const { theme } = useDesignSystemTheme();\n  const exceptionEvents = getSpanExceptionEvents(node);\n  const isRoot = !node.parentId;\n  // to prevent excessive nesting, we only show the first exception.\n  // it is likely that any given span only has one exception,\n  // since execution usually stops after throwing.\n  const firstException = exceptionEvents[0];\n\n  if (!firstException) {\n    return null;\n  }\n\n  return (\n    <ModelTraceExplorerCollapsibleSection\n      css={{ marginBottom: isRoot ? theme.spacing.sm : 0 }}\n      withBorder={isRoot}\n      key={firstException.name}\n      sectionKey={firstException.name}\n      title={\n        <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n          <XCircleIcon color=\"danger\" />\n          <Typography.Text color=\"error\" bold>\n            Exception\n          </Typography.Text>\n        </div>\n      }\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n          paddingLeft: isRoot ? 0 : theme.spacing.lg,\n        }}\n      >\n        {Object.entries(firstException.attributes ?? {}).map(([attribute, value]) => (\n          <ModelTraceExplorerFieldRenderer\n            key={attribute}\n            title={attribute}\n            data={JSON.stringify(value, null, 2)}\n            renderMode=\"text\"\n          />\n        ))}\n      </div>\n    </ModelTraceExplorerCollapsibleSection>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { Button, ChevronRightIcon, ChevronDownIcon, useDesignSystemTheme, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummaryViewExceptionsSection } from './ModelTraceExplorerSummaryViewExceptionsSection';\nimport { type ModelTraceSpanNode } from '../ModelTrace.types';\nimport { createListFromObject, getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { SpanNameDetailViewLink } from '../assessments-pane/SpanNameDetailViewLink';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\nimport { spanTimeFormatter } from '../timeline-tree/TimelineTree.utils';\n\nconst CONNECTOR_WIDTH = 12;\nconst ROW_HEIGHT = 48;\n\nexport const ModelTraceExplorerSummaryIntermediateNode = ({\n  node,\n  renderMode,\n}: {\n  node: ModelTraceSpanNode;\n  renderMode: 'default' | 'json';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n  const inputList = useMemo(() => createListFromObject(node.inputs), [node]);\n  const outputList = useMemo(() => createListFromObject(node.outputs), [node]);\n  const exceptionEvents = getSpanExceptionEvents(node);\n\n  const hasException = exceptionEvents.length > 0;\n  const containsInputs = inputList.length > 0;\n  const containsOutputs = outputList.length > 0;\n\n  const { setSelectedNode, setActiveView, setShowTimelineTreeGantt } = useModelTraceExplorerViewState();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        minHeight: ROW_HEIGHT,\n        flexShrink: 0,\n      }}\n    >\n      <div css={{ height: ROW_HEIGHT, display: 'flex', alignItems: 'center' }}>\n        <Button\n          size=\"small\"\n          data-testid={`toggle-span-expanded-${node.key}`}\n          css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n          componentId=\"shared.model-trace-explorer.toggle-span\"\n        />\n      </div>\n      <div\n        css={{\n          position: 'relative',\n          boxSizing: 'border-box',\n          height: '100%',\n          borderLeft: `2px solid ${theme.colors.border}`,\n          width: CONNECTOR_WIDTH,\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            left: -2,\n            top: 14,\n            height: CONNECTOR_WIDTH,\n            width: CONNECTOR_WIDTH,\n            boxSizing: 'border-box',\n            borderBottomLeftRadius: theme.borders.borderRadiusMd,\n            borderBottom: `2px solid ${theme.colors.border}`,\n            borderLeft: `2px solid ${theme.colors.border}`,\n          }}\n        />\n      </div>\n      <div css={{ display: 'flex', flexDirection: 'column', flex: 1, minWidth: 0 }}>\n        <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography.Text color=\"secondary\" css={{ display: 'inline-flex', alignItems: 'center', height: ROW_HEIGHT }}>\n            <FormattedMessage\n              defaultMessage=\"{spanName} was called\"\n              description=\"Label for an intermediate node in the trace explorer summary view, indicating that a span/function was called in the course of execution.\"\n              values={{\n                spanName: <SpanNameDetailViewLink node={node} />,\n              }}\n            />\n          </Typography.Text>\n          <span\n            onClick={() => {\n              setSelectedNode(node);\n              setActiveView('detail');\n              setShowTimelineTreeGantt(true);\n            }}\n          >\n            <Typography.Text\n              css={{\n                '&:hover': {\n                  textDecoration: 'underline',\n                  cursor: 'pointer',\n                },\n              }}\n              color=\"secondary\"\n            >\n              {spanTimeFormatter(node.end - node.start)}\n            </Typography.Text>\n          </span>\n        </div>\n        {expanded && (\n          <div>\n            {hasException && <ModelTraceExplorerSummaryViewExceptionsSection node={node} />}\n            {containsInputs && (\n              <ModelTraceExplorerCollapsibleSection\n                sectionKey=\"input\"\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Inputs\"\n                    description=\"Model trace explorer > selected span > inputs header\"\n                  />\n                }\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                    paddingLeft: theme.spacing.lg,\n                    marginBottom: containsOutputs ? 0 : theme.spacing.sm,\n                  }}\n                >\n                  {inputList.map(({ key, value }, index) => (\n                    <ModelTraceExplorerFieldRenderer\n                      key={key || index}\n                      title={key}\n                      data={value}\n                      renderMode={renderMode}\n                    />\n                  ))}\n                </div>\n              </ModelTraceExplorerCollapsibleSection>\n            )}\n            {containsOutputs && (\n              <ModelTraceExplorerCollapsibleSection\n                sectionKey=\"output\"\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Outputs\"\n                    description=\"Model trace explorer > selected span > outputs header\"\n                  />\n                }\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                    paddingLeft: theme.spacing.lg,\n                    marginBottom: theme.spacing.sm,\n                  }}\n                >\n                  {outputList.map(({ key, value }) => (\n                    <ModelTraceExplorerFieldRenderer key={key} title={key} data={value} renderMode={renderMode} />\n                  ))}\n                </div>\n              </ModelTraceExplorerCollapsibleSection>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { SegmentedControlButton, SegmentedControlGroup, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummaryIntermediateNode } from './ModelTraceExplorerSummaryIntermediateNode';\nimport { ModelTraceExplorerSummaryViewExceptionsSection } from './ModelTraceExplorerSummaryViewExceptionsSection';\nimport type { ModelTraceExplorerRenderMode, ModelTraceSpanNode } from '../ModelTrace.types';\nimport { createListFromObject, getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { AssessmentPaneToggle } from '../assessments-pane/AssessmentPaneToggle';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\n\nexport const SUMMARY_SPANS_MIN_WIDTH = 400;\n\nexport const ModelTraceExplorerSummarySpans = ({\n  rootNode,\n  intermediateNodes,\n}: {\n  rootNode: ModelTraceSpanNode;\n  intermediateNodes: ModelTraceSpanNode[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [renderMode, setRenderMode] = useState<ModelTraceExplorerRenderMode>('default');\n\n  const rootInputs = rootNode.inputs;\n  const rootOutputs = rootNode.outputs;\n  const exceptions = getSpanExceptionEvents(rootNode);\n  const hasIntermediateNodes = intermediateNodes.length > 0;\n  const hasExceptions = exceptions.length > 0;\n\n  const inputList = createListFromObject(rootInputs);\n  const outputList = createListFromObject(rootOutputs);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        minHeight: 0,\n        padding: theme.spacing.md,\n        paddingTop: theme.spacing.sm,\n        overflow: 'auto',\n        minWidth: SUMMARY_SPANS_MIN_WIDTH,\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end', marginBottom: theme.spacing.sm }}>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <SegmentedControlGroup\n            name=\"render-mode\"\n            componentId=\"shared.model-trace-explorer.summary-view.render-mode\"\n            value={renderMode}\n            size=\"small\"\n            onChange={(event) => setRenderMode(event.target.value)}\n          >\n            <SegmentedControlButton value=\"default\">\n              <FormattedMessage\n                defaultMessage=\"Default\"\n                description=\"Label for the default render mode selector in the model trace explorer summary view\"\n              />\n            </SegmentedControlButton>\n            <SegmentedControlButton value=\"json\">\n              <FormattedMessage\n                defaultMessage=\"JSON\"\n                description=\"Label for the JSON render mode selector in the model trace explorer summary view\"\n              />\n            </SegmentedControlButton>\n          </SegmentedControlGroup>\n          <AssessmentPaneToggle />\n        </div>\n      </div>\n      {hasExceptions && <ModelTraceExplorerSummaryViewExceptionsSection node={rootNode} />}\n      <ModelTraceExplorerCollapsibleSection\n        withBorder\n        title={\n          <FormattedMessage\n            defaultMessage=\"Inputs\"\n            description=\"Model trace explorer > selected span > inputs header\"\n          />\n        }\n        css={{ marginBottom: hasIntermediateNodes ? 0 : theme.spacing.md }}\n        sectionKey=\"summary-inputs\"\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          {inputList.map(({ key, value }, index) => (\n            <ModelTraceExplorerFieldRenderer key={key || index} title={key} data={value} renderMode={renderMode} />\n          ))}\n        </div>\n      </ModelTraceExplorerCollapsibleSection>\n      {hasIntermediateNodes &&\n        intermediateNodes.map((node) => (\n          <ModelTraceExplorerSummaryIntermediateNode key={node.key} node={node} renderMode={renderMode} />\n        ))}\n      <ModelTraceExplorerCollapsibleSection\n        withBorder\n        title={\n          <FormattedMessage\n            defaultMessage=\"Outputs\"\n            description=\"Model trace explorer > selected span > outputs header\"\n          />\n        }\n        sectionKey=\"summary-outputs\"\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          {outputList.map(({ key, value }, index) => (\n            <ModelTraceExplorerFieldRenderer key={key || index} title={key} data={value} renderMode={renderMode} />\n          ))}\n        </div>\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummarySpans, SUMMARY_SPANS_MIN_WIDTH } from './ModelTraceExplorerSummarySpans';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport type { ModelTraceSpanNode, ModelTrace } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport ModelTraceExplorerResizablePane from '../ModelTraceExplorerResizablePane';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { AssessmentsPane } from '../assessments-pane/AssessmentsPane';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from '../assessments-pane/AssessmentsPane.utils';\nimport { getTimelineTreeNodesList } from '../timeline-tree/TimelineTree.utils';\n\nconst isNodeImportant = (node: ModelTraceSpanNode) => {\n  // root node is shown at top level, so we don't need to\n  // show it in the intermediate nodes list\n  if (!node.parentId) {\n    return false;\n  }\n\n  return (\n    [\n      ModelSpanType.AGENT,\n      ModelSpanType.RETRIEVER,\n      ModelSpanType.CHAT_MODEL,\n      ModelSpanType.TOOL,\n      ModelSpanType.LLM,\n    ].includes(node.type ?? ModelSpanType.UNKNOWN) || getSpanExceptionCount(node) > 0\n  );\n};\n\nexport const ModelTraceExplorerSummaryView = ({ modelTrace }: { modelTrace: ModelTrace }) => {\n  const { theme } = useDesignSystemTheme();\n  const [paneWidth, setPaneWidth] = useState(500);\n  const { rootNode, nodeMap, assessmentsPaneEnabled, assessmentsPaneExpanded } = useModelTraceExplorerViewState();\n\n  const allAssessments = useMemo(() => Object.values(nodeMap).flatMap((node) => node.assessments), [nodeMap]);\n\n  const intermediateNodes = useMemo(() => {\n    if (!rootNode) {\n      return [];\n    }\n\n    // the summary view is meant to be a high-level view of the trace,\n    // so we show \"important\" nodes as a flat list between the inputs\n    // and outputs of the root node.\n    const nodes = getTimelineTreeNodesList([rootNode]);\n    const intermediateNodes = nodes.filter(isNodeImportant);\n\n    return intermediateNodes;\n  }, [rootNode]);\n\n  if (!rootNode) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No span data to display\"\n              description=\"Title for the empty state in the model trace explorer summary view\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return assessmentsPaneEnabled && assessmentsPaneExpanded ? (\n    <ModelTraceExplorerResizablePane\n      initialRatio={0.75}\n      paneWidth={paneWidth}\n      setPaneWidth={setPaneWidth}\n      leftChild={<ModelTraceExplorerSummarySpans rootNode={rootNode} intermediateNodes={intermediateNodes} />}\n      rightChild={<AssessmentsPane assessments={allAssessments} traceId={rootNode.traceId} activeSpanId={undefined} />}\n      leftMinWidth={SUMMARY_SPANS_MIN_WIDTH}\n      rightMinWidth={ASSESSMENT_PANE_MIN_WIDTH}\n    />\n  ) : (\n    <ModelTraceExplorerSummarySpans rootNode={rootNode} intermediateNodes={intermediateNodes} />\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nimport { Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { shouldEnableSummaryView } from './FeatureUtils';\nimport type { ModelTrace } from './ModelTrace.types';\nimport { getModelTraceId } from './ModelTraceExplorer.utils';\nimport { ModelTraceExplorerDetailView } from './ModelTraceExplorerDetailView';\nimport { ModelTraceExplorerErrorState } from './ModelTraceExplorerErrorState';\nimport { ModelTraceExplorerSkeleton } from './ModelTraceExplorerSkeleton';\nimport {\n  ModelTraceExplorerViewStateProvider,\n  useModelTraceExplorerViewState,\n} from './ModelTraceExplorerViewStateContext';\nimport { useGetModelTraceInfoV3 } from './hooks/useGetModelTraceInfoV3';\nimport { ModelTraceExplorerSummaryView } from './summary-view/ModelTraceExplorerSummaryView';\n\nconst ModelTraceExplorerImpl = ({\n  modelTrace,\n  className,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const enableSummaryView = shouldEnableSummaryView();\n  const { activeView, setActiveView } = useModelTraceExplorerViewState();\n\n  if (!enableSummaryView) {\n    return (\n      <div css={{ display: 'flex', flexDirection: 'column', height: '100%', overflow: 'hidden' }}>\n        <ModelTraceExplorerDetailView\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Tabs.Root\n      componentId=\"model-trace-explorer\"\n      value={activeView}\n      onValueChange={(value) => setActiveView(value as 'summary' | 'detail')}\n      css={{\n        '& > div:first-of-type': {\n          marginBottom: 0,\n          flexShrink: 0,\n        },\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Tabs.List css={{ paddingLeft: theme.spacing.md, flexShrink: 0 }}>\n        <Tabs.Trigger value=\"summary\">\n          <FormattedMessage\n            defaultMessage=\"Summary\"\n            description=\"Label for the summary view tab in the model trace explorer\"\n          />\n        </Tabs.Trigger>\n        <Tabs.Trigger value=\"detail\">\n          <FormattedMessage\n            defaultMessage=\"Details & Timeline\"\n            description=\"Label for the details & timeline view tab in the model trace explorer\"\n          />\n        </Tabs.Trigger>\n      </Tabs.List>\n      <Tabs.Content\n        value=\"summary\"\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          minHeight: 0,\n        }}\n      >\n        <ModelTraceExplorerSummaryView modelTrace={modelTrace} />\n      </Tabs.Content>\n      <Tabs.Content\n        value=\"detail\"\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          minHeight: 0,\n        }}\n      >\n        <ModelTraceExplorerDetailView\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\nconst ContextProviders = ({ children }: { traceId: string; children: React.ReactNode }) => {\n  return <ErrorBoundary fallbackRender={ModelTraceExplorerErrorState}>{children}</ErrorBoundary>;\n};\n\nexport const ModelTraceExplorer = ({\n  modelTrace: initialModelTrace,\n  className,\n  initialActiveView = 'summary',\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  initialActiveView?: 'summary' | 'detail';\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const [modelTrace, setModelTrace] = useState(initialModelTrace);\n  const [assessmentsPaneEnabled, setAssessmentsPaneEnabled] = useState(true);\n  const traceId = getModelTraceId(initialModelTrace);\n\n  useGetModelTraceInfoV3({\n    traceId,\n    setModelTrace,\n    setAssessmentsPaneEnabled,\n  });\n\n  useEffect(() => {\n    setModelTrace(initialModelTrace);\n    // reset the model trace when the traceId changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [traceId]);\n\n  return (\n    <ContextProviders traceId={traceId}>\n      <ModelTraceExplorerViewStateProvider\n        modelTrace={modelTrace}\n        initialActiveView={initialActiveView}\n        selectedSpanIdOnRender={selectedSpanId}\n        assessmentsPaneEnabled={assessmentsPaneEnabled}\n      >\n        <ModelTraceExplorerImpl\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </ModelTraceExplorerViewStateProvider>\n    </ContextProviders>\n  );\n};\n\nModelTraceExplorer.Skeleton = ModelTraceExplorerSkeleton;\n","export const getUser = () => {\n  // return a dummy user as the OSS backend\n  // does not transmit user info to frontend\n  return 'User';\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\nimport { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\n// Type definitions for autogen messages\ninterface AutogenFunctionCall {\n  id: string;\n  name: string;\n  arguments: string;\n}\n\ninterface AutogenSystemMessage {\n  source: 'system';\n  content: string;\n}\n\ninterface AutogenUserMessage {\n  source: 'user';\n  content: string | any[];\n}\n\ninterface AutogenAssistantMessage {\n  source: 'assistant';\n  content: string | AutogenFunctionCall[];\n}\n\ninterface AutogenFunctionExecutionResultMessage {\n  source: 'function';\n  content: any;\n}\n\ntype AutogenMessage =\n  | AutogenSystemMessage\n  | AutogenUserMessage\n  | AutogenAssistantMessage\n  | AutogenFunctionExecutionResultMessage;\n\nconst isAutogenFunctionCall = (obj: unknown): obj is AutogenFunctionCall => {\n  return isObject(obj) && isString(get(obj, 'id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n};\n\nconst isAutogenMessage = (obj: unknown): obj is AutogenMessage => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  // Handle messages with 'type' field (new format)\n  const messageType = get(obj, 'type');\n  if (messageType) {\n    if (messageType === 'SystemMessage') {\n      return isString(get(obj, 'content'));\n    }\n    if (messageType === 'UserMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n    if (messageType === 'AssistantMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n    if (messageType === 'FunctionMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n  }\n\n  // Handle messages with 'source' field (old format)\n  if (has(obj, 'source') && ['system', 'user', 'assistant', 'function'].includes(get(obj, 'source'))) {\n    return has(obj, 'content');\n  }\n\n  return false;\n};\n\nconst convertAssistantMessageToChatMessage = (\n  content: string | AutogenFunctionCall[],\n): ModelTraceChatMessage | null => {\n  if (isString(content)) {\n    return prettyPrintChatMessage({ type: 'message', content, role: 'assistant' });\n  }\n\n  if (isArray(content) && content.every(isAutogenFunctionCall)) {\n    return {\n      role: 'assistant',\n      tool_calls: content.map((f) =>\n        prettyPrintToolCall({\n          id: f.id,\n          function: {\n            name: f.name,\n            arguments: f.arguments,\n          },\n        }),\n      ),\n    };\n  }\n\n  return null;\n};\n\nconst normalizeAutogenMessage = (message: any): ModelTraceChatMessage | null => {\n  // Handle messages with 'type' field (new format)\n  if (message.type === 'SystemMessage') {\n    return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'system' });\n  }\n\n  if (message.type === 'UserMessage') {\n    if (isString(message.content)) {\n      return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'user' });\n    }\n\n    if (isArray(message.content)) {\n      // Handle content that might be an array of text/image parts\n      const textParts = message.content\n        .filter((part: any) => isString(part) || (isObject(part) && (part as any).type === 'text'))\n        .map((part: any) => (isString(part) ? { type: 'text' as const, text: part } : part));\n\n      if (textParts.length > 0) {\n        return prettyPrintChatMessage({ type: 'message', content: textParts, role: 'user' });\n      }\n    }\n  }\n\n  if (message.type === 'AssistantMessage') {\n    return convertAssistantMessageToChatMessage(message.content);\n  }\n\n  if (message.type === 'FunctionMessage') {\n    // Function execution result messages are typically logged as user messages\n    return prettyPrintChatMessage({ type: 'message', content: JSON.stringify(message.content), role: 'user' });\n  }\n\n  // Handle messages with 'source' field (old format)\n  if (message.source === 'system') {\n    return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'system' });\n  }\n\n  if (message.source === 'user') {\n    if (isString(message.content)) {\n      return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'user' });\n    }\n\n    if (isArray(message.content)) {\n      // Handle content that might be an array of text/image parts\n      const textParts = message.content\n        .filter((part: any) => isString(part))\n        .map((part: any) => ({ type: 'text' as const, text: part }));\n\n      if (textParts.length > 0) {\n        return prettyPrintChatMessage({ type: 'message', content: textParts, role: 'user' });\n      }\n    }\n  }\n\n  if (message.source === 'assistant') {\n    return convertAssistantMessageToChatMessage(message.content);\n  }\n\n  if (message.source === 'function') {\n    // Function execution result messages are typically logged as user messages\n    return prettyPrintChatMessage({ type: 'message', content: JSON.stringify(message.content), role: 'user' });\n  }\n\n  return null;\n};\n\nexport const normalizeAutogenChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where input is directly an array of messages\n  if (isArray(obj) && obj.length > 0 && obj.every(isAutogenMessage)) {\n    return compact(obj.map(normalizeAutogenMessage));\n  }\n\n  // Handle case where input is wrapped in an object with 'messages' key\n  if (isObject(obj) && 'messages' in obj) {\n    const messages = (obj as any).messages;\n    if (isArray(messages) && messages.length > 0 && messages.every(isAutogenMessage)) {\n      return compact(messages.map(normalizeAutogenMessage));\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeAutogenChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where output is directly an array of messages\n  if (isArray(obj) && obj.length > 0 && obj.every(isAutogenMessage)) {\n    return compact(obj.map(normalizeAutogenMessage));\n  }\n\n  // Handle case where output is wrapped in an object with 'messages' key\n  if (isObject(obj) && 'content' in obj) {\n    const message = prettyPrintChatMessage({ role: 'assistant', content: obj.content as string, type: 'message' });\n    return message ? [message] : null;\n  }\n\n  return null;\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\nimport { ModelTraceChatMessage, ModelTraceContentParts } from '../ModelTrace.types';\nimport { prettyPrintChatMessage, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\n// Type definitions for Bedrock messages\ninterface BedrockToolUse {\n  toolUseId: string;\n  name: string;\n  input: string | Record<string, any>;\n}\n\ninterface BedrockToolResult {\n  toolUseId: string;\n  content: BedrockContentBlock[];\n}\n\ninterface BedrockContentBlock {\n  text?: string;\n  json?: any;\n  image?: {\n    source: {\n      bytes: string | Uint8Array;\n    };\n    format: string;\n  };\n  toolUse?: BedrockToolUse;\n  toolResult?: BedrockToolResult;\n}\n\ninterface BedrockMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: BedrockContentBlock[];\n}\n\nconst parseBedrockContent = (content: BedrockContentBlock): ModelTraceContentParts | null => {\n  if (content.text) {\n    return { type: 'text', text: content.text };\n  }\n\n  if (content.json) {\n    return { type: 'text', text: JSON.stringify(content.json) };\n  }\n\n  if (content.image) {\n    const bytes = content.image.source.bytes;\n    const format = content.image.format;\n    let data: string;\n\n    if (typeof bytes === 'string') {\n      data = bytes;\n    } else {\n      // Convert Uint8Array to base64 string\n      const buffer = Buffer.from(bytes);\n      data = buffer.toString('base64');\n    }\n\n    const imageFormat = `image/${format}`;\n    return {\n      type: 'image_url',\n      image_url: { url: `data:${imageFormat};base64,${data}` },\n    };\n  }\n\n  // Unsupported content types (video, document) are ignored\n  return null;\n};\n\nconst convertBedrockMessageToChatMessage = (message: BedrockMessage): ModelTraceChatMessage => {\n  let role: 'user' | 'assistant' | 'system' | 'tool' = message.role;\n  const contents: ModelTraceContentParts[] = [];\n  const toolCalls: any[] = [];\n  let toolCallId: string | undefined;\n\n  for (const content of message.content) {\n    if (content.toolUse) {\n      const toolCall = content.toolUse;\n      const input = typeof toolCall.input === 'string' ? toolCall.input : JSON.stringify(toolCall.input);\n\n      toolCalls.push(\n        prettyPrintToolCall({\n          id: toolCall.toolUseId,\n          function: {\n            name: toolCall.name,\n            arguments: input,\n          },\n        }),\n      );\n    } else if (content.toolResult) {\n      toolCallId = content.toolResult.toolUseId;\n      role = 'tool';\n\n      for (const resultContent of content.toolResult.content) {\n        const parsedContent = parseBedrockContent(resultContent);\n        if (parsedContent) {\n          contents.push(parsedContent);\n        }\n      }\n    } else {\n      const parsedContent = parseBedrockContent(content);\n      if (parsedContent) {\n        contents.push(parsedContent);\n      }\n    }\n  }\n\n  // Convert content parts to string\n  let contentString = '';\n  if (contents.length > 0) {\n    contentString = contents\n      .map((part) => {\n        if (part.type === 'text') {\n          return part.text;\n        } else if (part.type === 'image_url') {\n          return `[Image: ${part.image_url.url}]`;\n        }\n        return '';\n      })\n      .filter((text) => text.length > 0)\n      .join(' ');\n  }\n\n  const chatMessage: ModelTraceChatMessage = {\n    role: role,\n    content: contentString,\n  };\n\n  if (toolCalls.length > 0) {\n    chatMessage.tool_calls = toolCalls;\n  }\n\n  if (toolCallId) {\n    chatMessage.tool_call_id = toolCallId;\n  }\n\n  return chatMessage;\n};\n\nconst isBedrockMessage = (obj: unknown): obj is BedrockMessage => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  const hasRole = has(obj, 'role') && isString(obj.role) && ['user', 'assistant', 'system'].includes(obj.role);\n  const hasContent = has(obj, 'content') && isArray(obj.content);\n\n  return hasRole && hasContent;\n};\n\nexport const normalizeBedrockChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where input has 'messages' key\n  if (isObject(obj) && 'messages' in obj) {\n    const messages = (obj as any).messages;\n    if (isArray(messages) && messages.length > 0 && messages.every(isBedrockMessage)) {\n      return compact(messages.map(convertBedrockMessageToChatMessage));\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeBedrockChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where output has 'output' -> 'message' structure\n  if (isObject(obj) && 'output' in obj) {\n    const output = (obj as any).output;\n    if (isObject(output) && 'message' in output) {\n      const message = output.message;\n      if (isBedrockMessage(message)) {\n        return [convertBedrockMessageToChatMessage(message)];\n      }\n    }\n  }\n\n  return null;\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\nimport { ModelTraceChatMessage } from '../ModelTrace.types';\nimport {\n  isModelTraceChatResponse,\n  isModelTraceChoices,\n  isRawModelTraceChatMessage,\n  prettyPrintChatMessage,\n  prettyPrintToolCall,\n} from '../ModelTraceExplorer.utils';\nimport {\n  OpenAIResponsesInput,\n  OpenAIResponsesInputFile,\n  OpenAIResponsesInputImage,\n  OpenAIResponsesInputMessage,\n  OpenAIResponsesInputMessageRole,\n  OpenAIResponsesInputText,\n  OpenAIResponsesOutputItem,\n} from '../chat-utils/openai.types';\n\n// normalize the OpenAI chat input format (object with 'messages' or 'input' key)\nexport const normalizeOpenAIChatInput = (obj: any): ModelTraceChatMessage[] | null => {\n  if (!obj) {\n    return null;\n  }\n\n  const messages = obj.messages ?? obj.input;\n  if (!Array.isArray(messages) || messages.length === 0 || !messages.every(isRawModelTraceChatMessage)) {\n    return null;\n  }\n\n  return compact(messages.map(prettyPrintChatMessage));\n};\n\n// normalize the OpenAI chat response format (object with 'choices' key)\nexport const normalizeOpenAIChatResponse = (obj: any): ModelTraceChatMessage[] | null => {\n  if (isModelTraceChoices(obj)) {\n    return obj.map((choice) => ({\n      ...choice.message,\n      tool_calls: choice.message.tool_calls?.map(prettyPrintToolCall),\n    }));\n  }\n\n  if (!isModelTraceChatResponse(obj)) {\n    return null;\n  }\n\n  return obj.choices.map((choice) => ({\n    ...choice.message,\n    tool_calls: choice.message.tool_calls?.map(prettyPrintToolCall),\n  }));\n};\n\nconst isOpenAIResponsesInputMessage = (obj: unknown): obj is OpenAIResponsesInputMessage => {\n  if (has(obj, 'role') && has(obj, 'content') && ['user', 'assistant', 'system', 'developer'].includes(obj.role)) {\n    return (\n      isString(obj.content) ||\n      (isArray(obj.content) &&\n        obj.content.every(\n          (item: unknown) => has(item, 'type') && ['input_text', 'input_image', 'input_file'].includes(item.type),\n        ))\n    );\n  }\n\n  return false;\n};\n\nexport const isOpenAIResponsesInput = (obj: unknown): obj is OpenAIResponsesInput => {\n  return isString(obj) || isOpenAIResponsesInputMessage(obj);\n};\n\nexport const isOpenAIResponsesOutputItem = (obj: unknown): obj is OpenAIResponsesOutputItem => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  if (get(obj, 'type') === 'message') {\n    return isRawModelTraceChatMessage(obj);\n  }\n\n  if (get(obj, 'type') === 'function_call') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n  }\n\n  if (get(obj, 'type') === 'function_call_output') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'output'));\n  }\n\n  if (get(obj, 'type') === 'image_generation_call') {\n    const outputFormat = get(obj, 'output_format');\n    return isString(get(obj, 'result')) && isString(outputFormat) && ['png', 'jpeg', 'webp'].includes(outputFormat);\n  }\n\n  if (get(obj, 'type') === 'reasoning') {\n    return has(obj, 'id') && isArray(get(obj, 'summary'));\n  }\n\n  return false;\n};\n\nconst normalizeOpenAIResponsesInputItem = (\n  obj: OpenAIResponsesInputText | OpenAIResponsesInputFile | OpenAIResponsesInputImage,\n  role: OpenAIResponsesInputMessageRole,\n): ModelTraceChatMessage | null => {\n  const text = get(obj, 'text');\n  if (get(obj, 'type') === 'input_text' && isString(text)) {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'text', text }],\n      role: role,\n    });\n  }\n\n  const imageUrl = get(obj, 'image_url');\n  if (get(obj, 'type') === 'input_image' && isString(imageUrl)) {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'image_url', image_url: { url: imageUrl } }],\n      role: role,\n    });\n  }\n\n  // TODO: file input not supported yet\n  // if ('type' in obj && obj.type === 'input_file') {\n  //   return prettyPrintChatMessage({ type: 'message', content: obj.file_url, role: role });\n  // }\n\n  return null;\n};\n\nconst normalizeOpenAIResponsesInputMessage = (obj: OpenAIResponsesInputMessage): ModelTraceChatMessage[] | null => {\n  if (isString(obj.content)) {\n    const message = prettyPrintChatMessage({ type: 'message', content: obj.content, role: obj.role });\n    return message && [message];\n  } else {\n    return obj.content.map((item) => normalizeOpenAIResponsesInputItem(item, obj.role)).filter((item) => item !== null);\n  }\n};\n\nexport const normalizeOpenAIResponsesInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  const input: unknown = get(obj, 'input');\n\n  if (isString(input)) {\n    const message = prettyPrintChatMessage({ type: 'message', content: input, role: 'user' });\n    return message && [message];\n  }\n\n  if (isArray(input) && input.every(isOpenAIResponsesInputMessage)) {\n    return compact(input.flatMap(normalizeOpenAIResponsesInputMessage));\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIResponsesOutputItem = (obj: OpenAIResponsesOutputItem): ModelTraceChatMessage | null => {\n  if (obj.type === 'message') {\n    return prettyPrintChatMessage(obj);\n  }\n\n  if (obj.type === 'function_call') {\n    return {\n      role: 'assistant',\n      tool_calls: [\n        prettyPrintToolCall({\n          id: obj.call_id,\n          function: {\n            arguments: obj.arguments,\n            name: obj.name,\n          },\n        }),\n      ],\n    };\n  }\n\n  if (obj.type === 'function_call_output') {\n    return {\n      role: 'tool',\n      tool_call_id: obj.call_id,\n      content: obj.output,\n    };\n  }\n\n  if (obj.type === 'image_generation_call') {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'image_url', image_url: { url: `data:image/${obj.output_format};base64,${obj.result}` } }],\n      role: 'tool',\n    });\n  }\n\n  if (obj.type === 'reasoning') {\n    // Skip reasoning entries as they don't translate to chat messages\n    return null;\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIResponsesOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  const output: unknown = get(obj, 'output');\n\n  // list of output items\n  if (isArray(output) && output.length > 0 && output.every(isOpenAIResponsesOutputItem)) {\n    return compact(output.map(normalizeOpenAIResponsesOutputItem).filter(Boolean));\n  }\n\n  // list of output chunks\n  if (\n    isArray(output) &&\n    output.length > 0 &&\n    output.every((chunk) => chunk.type === 'response.output_item.done' && isOpenAIResponsesOutputItem(chunk.item))\n  ) {\n    return compact(output.map((chunk) => normalizeOpenAIResponsesOutputItem(chunk.item)));\n  }\n\n  return null;\n};\n\n// New functions for OpenAI agent chat pattern\n\nconst isOpenAIAgentMessage = (obj: unknown): boolean => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  // Check for regular message format (with optional id, status, type fields)\n  if (has(obj, 'role') && has(obj, 'content') && ['user', 'assistant', 'system', 'tool'].includes(obj.role)) {\n    return true;\n  }\n\n  // Check for function call format (with optional id, status fields)\n  if (get(obj, 'type') === 'function_call') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n  }\n\n  // Check for function call output format\n  if (get(obj, 'type') === 'function_call_output') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'output'));\n  }\n\n  return false;\n};\n\nconst normalizeOpenAIAgentMessage = (obj: any): ModelTraceChatMessage | null => {\n  // Handle regular message format\n  if (has(obj, 'role') && has(obj, 'content')) {\n    // Handle content that might be an array with output_text objects\n    if (isArray(obj.content)) {\n      const textContent = obj.content\n        .filter((item: any) => item.type === 'output_text' && isString(item.text))\n        .map((item: any) => item.text)\n        .join(' ');\n\n      if (textContent) {\n        return prettyPrintChatMessage({\n          ...obj,\n          content: textContent,\n        });\n      }\n    }\n\n    // Fall back to regular prettyPrintChatMessage for string content\n    return prettyPrintChatMessage(obj);\n  }\n\n  // Handle function call format\n  if (get(obj, 'type') === 'function_call') {\n    const callId = get(obj, 'call_id');\n    const arguments_ = get(obj, 'arguments');\n    const name = get(obj, 'name');\n\n    if (isString(callId) && isString(arguments_) && isString(name)) {\n      return {\n        role: 'assistant',\n        tool_calls: [\n          prettyPrintToolCall({\n            id: callId,\n            function: {\n              arguments: arguments_,\n              name: name,\n            },\n          }),\n        ],\n      };\n    }\n  }\n\n  // Handle function call output format\n  if (get(obj, 'type') === 'function_call_output') {\n    const callId = get(obj, 'call_id');\n    const output = get(obj, 'output');\n\n    if (isString(callId) && isString(output)) {\n      return {\n        role: 'tool',\n        tool_call_id: callId,\n        content: output,\n      };\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIAgentInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle array of messages directly\n  if (isArray(obj) && obj.length > 0 && obj.every(isOpenAIAgentMessage)) {\n    return compact(obj.map(normalizeOpenAIAgentMessage));\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIAgentOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle array of messages directly\n  if (isArray(obj) && obj.length > 0 && obj.every(isOpenAIAgentMessage)) {\n    return compact(obj.map(normalizeOpenAIAgentMessage));\n  }\n\n  return null;\n};\n","import { compact, get, isArray, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type LlamaIndexChatResponse = {\n  message: LlamaIndexChatMessage;\n};\n\ntype LlamaIndexChatMessage = {\n  role: 'assistant' | 'system' | 'user';\n  blocks: LlamaIndexChatMessageBlock[];\n};\n\ntype LlamaIndexChatMessageBlock = {\n  block_type: 'text';\n  text: 'string';\n};\n\nexport type LlamaIndexChatInput = {\n  messages: LlamaIndexChatMessage[];\n};\n\nconst isLlamaIndexChatMessageBlock = (obj: unknown): obj is LlamaIndexChatMessageBlock => {\n  const text = get(obj, 'text');\n  return get(obj, 'block_type') === 'text' && isString(text);\n};\n\nconst isLlamaIndexChatMessage = (message: unknown): message is LlamaIndexChatMessage => {\n  const blocks: unknown = get(message, 'blocks');\n  const role: unknown = get(message, 'role');\n  return (\n    isString(role) &&\n    ['assistant', 'system', 'user'].includes(role) &&\n    isArray(blocks) &&\n    blocks.every(isLlamaIndexChatMessageBlock)\n  );\n};\n\nconst isLlamaIndexChatResponse = (obj: unknown): obj is LlamaIndexChatResponse => {\n  return isLlamaIndexChatMessage(get(obj, 'message'));\n};\n\nconst isLlamaIndexChatInput = (obj: unknown): obj is LlamaIndexChatInput => {\n  const messages: unknown = get(obj, 'messages');\n  return isArray(messages) && messages.every(isLlamaIndexChatMessage);\n};\n\nconst prettyPrintMessage = (message: LlamaIndexChatMessage) => {\n  return prettyPrintChatMessage({\n    role: message.role,\n    content: message.blocks.map((block) => ({ type: 'text', text: block.text })),\n  });\n};\n\nexport const normalizeLlamaIndexChatResponse = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isLlamaIndexChatResponse(obj)) {\n    return null;\n  }\n\n  const message = prettyPrintMessage(obj.message);\n  return message && [message];\n};\n\nexport const normalizeLlamaIndexChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isLlamaIndexChatInput(obj)) {\n    return null;\n  }\n\n  return compact(obj.messages.map(prettyPrintMessage));\n};\n","import {\n  ModelsIcon,\n  ConnectIcon,\n  FileDocumentIcon,\n  useDesignSystemTheme,\n  SortUnsortedIcon,\n  QuestionMarkIcon,\n  CodeIcon,\n  FunctionIcon,\n  NumbersIcon,\n  SearchIcon,\n  WrenchIcon,\n  UserSparkleIcon,\n  ChainIcon,\n  UserIcon,\n  GearIcon,\n  SaveIcon,\n} from '@databricks/design-system';\n\nimport { ModelIconType } from './ModelTrace.types';\n\nexport const ModelTraceExplorerIcon = ({\n  type = ModelIconType.CONNECT,\n  // tooltips have inverted colors so the icon should match it\n  isInTooltip = false,\n  hasException = false,\n  isRootSpan = false,\n}: {\n  type?: ModelIconType;\n  isInTooltip?: boolean;\n  hasException?: boolean;\n  isRootSpan?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // base icon colors depending on span attributes\n  let iconColor: 'ai' | 'danger' | undefined;\n  if (isRootSpan) {\n    iconColor = 'ai';\n  } else if (hasException) {\n    iconColor = 'danger';\n  }\n\n  const iconMap = {\n    [ModelIconType.MODELS]: <ModelsIcon color={iconColor} />,\n    [ModelIconType.DOCUMENT]: <FileDocumentIcon color={iconColor} />,\n    [ModelIconType.CONNECT]: <ConnectIcon color={iconColor} />,\n    [ModelIconType.CODE]: <CodeIcon color={iconColor} />,\n    [ModelIconType.FUNCTION]: <FunctionIcon color={iconColor} />,\n    [ModelIconType.NUMBERS]: <NumbersIcon color={iconColor} />,\n    [ModelIconType.SEARCH]: <SearchIcon color={iconColor} />,\n    [ModelIconType.SORT]: <SortUnsortedIcon color={iconColor} />,\n    [ModelIconType.UNKNOWN]: <QuestionMarkIcon color={iconColor} />,\n    [ModelIconType.WRENCH]: <WrenchIcon color={iconColor} />,\n    [ModelIconType.AGENT]: <UserSparkleIcon color={iconColor} />,\n    [ModelIconType.CHAIN]: <ChainIcon color={iconColor} />,\n    [ModelIconType.USER]: <UserIcon color={iconColor} />,\n    [ModelIconType.SYSTEM]: <GearIcon color={iconColor} />,\n    [ModelIconType.SAVE]: <SaveIcon color={iconColor} />,\n  };\n\n  // custom colors depending on span type\n  // these are not official props on the\n  // icon components, so they must be set\n  // via the `css` prop on the parent\n  let color: string = theme.colors.actionDefaultIconDefault;\n  let tooltipColor: string = theme.colors.actionPrimaryIcon;\n  let backgroundColor: string = theme.colors.backgroundSecondary;\n  switch (type) {\n    case ModelIconType.SEARCH:\n      color = theme.colors.textValidationSuccess;\n      tooltipColor = theme.colors.green500;\n      backgroundColor = theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n      break;\n    case ModelIconType.MODELS:\n      color = theme.isDarkMode ? theme.colors.blue500 : theme.colors.turquoise;\n      tooltipColor = theme.isDarkMode ? theme.colors.turquoise : theme.colors.blue500;\n      backgroundColor = theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n      break;\n    case ModelIconType.WRENCH:\n      color = theme.isDarkMode ? theme.colors.red500 : theme.colors.red700;\n      tooltipColor = theme.isDarkMode ? theme.colors.red700 : theme.colors.red500;\n      backgroundColor = theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n      break;\n  }\n\n  return (\n    <div\n      css={{\n        position: 'relative',\n        width: theme.general.iconSize,\n        height: theme.general.iconSize,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: theme.borders.borderRadiusSm,\n        background: isInTooltip ? theme.colors.tooltipBackgroundTooltip : backgroundColor,\n        color: isInTooltip ? tooltipColor : color,\n        svg: { width: theme.general.iconFontSize, height: theme.general.iconFontSize },\n        flexShrink: 0,\n      }}\n    >\n      {hasException && (\n        <div\n          css={{\n            position: 'absolute',\n            top: -theme.spacing.xs,\n            right: -theme.spacing.xs,\n            height: theme.spacing.sm,\n            width: theme.spacing.sm,\n            borderRadius: theme.borders.borderRadiusSm,\n            backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,\n            zIndex: 5,\n          }}\n        />\n      )}\n      {iconMap[type]}\n    </div>\n  );\n};\n","import { compact, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceContentParts } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type AnthropicMessagesInput = {\n  messages: AnthropicMessageParam[];\n};\n\nexport type AnthropicMessagesOutput = {\n  id: string;\n  content: AnthropicContentBlock[];\n  role: 'assistant';\n  type: 'message';\n  // model: Model;\n  // stop_reason: StopReason | null;\n  // stop_sequence: string | null;\n  // usage: Usage;\n};\n\ntype AnthropicContentBlock = AnthropicTextBlock | AnthropicToolUseBlock;\n// | ThinkingBlock\n// | RedactedThinkingBlock\n// | ServerToolUseBlock\n// | WebSearchToolResultBlock;\n\ntype AnthropicMessageParam = {\n  content: string | AnthropicContentBlockParam[];\n  role: 'user' | 'assistant';\n};\n\ntype AnthropicContentBlockParam =\n  | AnthropicTextBlockParam\n  | AnthropicImageBlockParam\n  | AnthropicToolUseBlockParam\n  | AnthropicToolResultBlockParam;\n// | DocumentBlockParam\n// | ThinkingBlockParam\n// | RedactedThinkingBlockParam\n// | ServerToolUseBlockParam\n// | WebSearchToolResultBlockParam;\n\ntype AnthropicTextBlockParam = {\n  text: string;\n  type: 'text';\n};\n\ntype AnthropicTextBlock = {\n  text: string;\n  type: 'text';\n};\n\ntype AnthropicImageBlockParam = {\n  source: AnthropicBase64ImageSource | AnthropicURLImageSource;\n  type: 'image';\n};\n\ntype AnthropicBase64ImageSource = {\n  type: 'base64';\n  data: string;\n  media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';\n};\n\ntype AnthropicURLImageSource = {\n  type: 'url';\n  url: string;\n};\n\ntype AnthropicToolUseBlockParam = {\n  id: string;\n  input: Record<string, any>;\n  name: string;\n  type: 'tool_use';\n};\n\ntype AnthropicToolUseBlock = {\n  id: string;\n  input: Record<string, any>;\n  name: string;\n  type: 'tool_use';\n};\n\ntype AnthropicToolResultBlockParam = {\n  content: string;\n  tool_use_id: string;\n  type: 'tool_result';\n};\n\nconst isAnthropicContentBlockParam = (obj: unknown): obj is AnthropicContentBlockParam => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (has(obj, 'type')) {\n    if (obj.type === 'text' && has(obj, 'text') && isString(obj.text)) {\n      return true;\n    }\n\n    if (obj.type === 'image' && has(obj, 'source') && has(obj.source, 'type')) {\n      if (\n        obj.source.type === 'base64' &&\n        has(obj.source, 'media_type') &&\n        isString(obj.source.media_type) &&\n        ['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(obj.source.media_type) &&\n        has(obj.source, 'data') &&\n        isString(obj.source.data)\n      ) {\n        return true;\n      }\n\n      if (obj.source.type === 'url' && has(obj.source, 'url') && isString(obj.source.url)) {\n        return true;\n      }\n    }\n\n    if (obj.type === 'tool_use' && has(obj, 'id') && has(obj, 'name') && has(obj, 'input')) {\n      return isString(obj.id) && isString(obj.name) && isObject(obj.input);\n    }\n\n    if (obj.type === 'tool_result' && has(obj, 'tool_use_id') && has(obj, 'content')) {\n      return isString(obj.tool_use_id) && isString(obj.content);\n    }\n  }\n  return false;\n};\n\nconst isAnthropicMessageParam = (obj: unknown): obj is AnthropicMessageParam => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  const hasRole = has(obj, 'role') && isString(obj.role) && ['user', 'assistant'].includes(obj.role);\n  const hasContent =\n    'content' in obj &&\n    (isString(obj.content) || (isArray(obj.content) && obj.content.every(isAnthropicContentBlockParam)));\n\n  return hasRole && hasContent;\n};\n\nconst normalizeAnthropicContentBlockParam = (item: AnthropicContentBlockParam): ModelTraceContentParts => {\n  switch (item.type) {\n    case 'text': {\n      return { type: 'text', text: item.text };\n    }\n    case 'image': {\n      switch (item.source.type) {\n        case 'base64': {\n          return {\n            type: 'image_url',\n            image_url: { url: `data:${item.source.media_type};base64,${item.source.data}` },\n          };\n        }\n        case 'url': {\n          return { type: 'image_url', image_url: { url: item.source.url } };\n        }\n      }\n    }\n  }\n  throw new Error(`Unsupported content block type: ${(item as any).type}`);\n};\n\nconst processAnthropicMessageContent = (\n  content: AnthropicContentBlockParam[],\n): {\n  messages: ModelTraceChatMessage[];\n  textParts: ModelTraceContentParts[];\n  toolCalls: any[];\n} => {\n  const messages: ModelTraceChatMessage[] = [];\n  const textParts: ModelTraceContentParts[] = [];\n  const toolCalls: any[] = [];\n\n  for (const item of content) {\n    if (item.type === 'text' || item.type === 'image') {\n      textParts.push(normalizeAnthropicContentBlockParam(item));\n    } else if (item.type === 'tool_use') {\n      toolCalls.push({\n        id: item.id,\n        function: {\n          name: item.name,\n          arguments: JSON.stringify(item.input),\n        },\n      });\n    } else if (item.type === 'tool_result') {\n      messages.push({\n        role: 'tool',\n        tool_call_id: item.tool_use_id,\n        content: item.content,\n      });\n    }\n  }\n\n  return { messages, textParts, toolCalls };\n};\n\nconst processAnthropicMessage = (message: AnthropicMessageParam): ModelTraceChatMessage[] => {\n  const messages: ModelTraceChatMessage[] = [];\n\n  if (typeof message.content === 'string') {\n    const chatMessage = prettyPrintChatMessage({\n      type: 'message',\n      content: message.content,\n      role: message.role,\n    });\n    if (chatMessage) messages.push(chatMessage);\n  } else {\n    const { messages: toolMessages, textParts, toolCalls } = processAnthropicMessageContent(message.content);\n    messages.push(...toolMessages);\n\n    if (textParts.length > 0 || toolCalls.length > 0) {\n      const chatMessage = prettyPrintChatMessage({\n        type: 'message',\n        content: textParts.length > 0 ? textParts : undefined,\n        role: message.role,\n        ...(toolCalls.length > 0 && { tool_calls: toolCalls }),\n      });\n      if (chatMessage) messages.push(chatMessage);\n    }\n  }\n\n  return messages;\n};\n\nexport const normalizeAnthropicChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('messages' in obj && isArray(obj.messages) && obj.messages.every(isAnthropicMessageParam)) {\n    const messages: ModelTraceChatMessage[] = [];\n\n    for (const message of obj.messages) {\n      messages.push(...processAnthropicMessage(message));\n    }\n\n    return messages;\n  }\n\n  return null;\n};\n\nexport const normalizeAnthropicChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if (has(obj, 'type') && obj.type === 'message' && isAnthropicMessageParam(obj)) {\n    return processAnthropicMessage(obj);\n  }\n\n  return null;\n};\n","import { compact, has, isArray, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type GeminiChatInput = {\n  contents: string | GeminiContent[];\n};\n\nexport type GeminiChatOutput = {\n  candidates: GeminiCandidate[];\n  // propmtFeedback: GeminiPropmptFeedback;\n  // usageMetadata: GeminiUsageMetadata;\n  modelVersion: string;\n  responseId: string;\n};\n\ntype GeminiCandidate = {\n  content: GeminiContent;\n  finishReason:\n    | 'FINISH_REASON_UNSPECIFIED'\n    | 'STOP'\n    | 'MAX_TOKENS'\n    | 'SAFETY'\n    | 'RECITATION'\n    | 'LANGUAGE'\n    | 'OTHER'\n    | 'BLOCKLIST'\n    | 'PROHIBITED_CONTENT'\n    | 'SPII'\n    | 'MALFORMED_FUNCTION_CAL'\n    | 'IMAGE_SAFETY'\n    | 'UNEXPECTED_TOOL_CAL';\n  // safetyRatings: GeminiSafetyRating[]\n  // citationMetadata: GeminiCitationMetadata\n  // tokenCount: number\n  // groundingAttributions: GeminiGroundingAttribution[]\n  // groundingMetadata: GeminiGroundingMetadata\n  // avgLogprobs: number\n  // logprobsResult: GeminiLogprobsResult\n  // urlContextMetadata: GeminiUrlContextMetadata\n  // index: number\n};\n\ntype GeminiContent = {\n  role: 'user' | 'model';\n  parts: GeminiContentPart[];\n};\n\ntype GeminiContentPart = { text: string };\n// | { inlineData: GeminiBlob }\n// | { functionCall: GeminiFunctionCall }\n// | { functionResponse: GeminiFunctionResponse }\n// | { fileData: GeminiFileData }\n// | { executableCode: GeminiExecutableCode }\n// | { codeExecutionResult: GeminiCodeExecutionResult };\n\n// type GeminiBlob = {\n//   mimeType: string;\n//   data: string;\n// };\n\n// type GeminiFunctionCall = {\n//   id: string;\n//   name: string;\n//   args: Record<string, string>;\n// };\n\n// type GeminiFunctionResponse = {\n//   id: string;\n//   name: string;\n//   response: Record<string, string>;\n//   willContinue: boolean;\n//   scheduling: 'SCHEDULING_UNSPECIFIED' | 'SILENT' | 'WHEN_IDLE' | 'INTERRUPT';\n// };\n\n// type GeminiFileData = {\n//   mimeType: string;\n//   fileUri: string;\n// };\n\n// type GeminiExecutableCode = {\n//   language: 'LANGUAGE_UNSPECIFIED' | 'PYTHON';\n//   code: string;\n// };\n\n// type GeminiCodeExecutionResult = {\n//   outcome: 'OUTCOME_UNSPECIFIED' | 'OUTCOME_OK' | 'OUTCOME_FAILED' | 'OUTCOME_DEADLINE_EXCEEDED';\n//   output: string;\n// };\n\nconst isGeminiContentPart = (obj: unknown): obj is GeminiContentPart => {\n  return isObject(obj) && 'text' in obj && isString(obj.text);\n};\n\nconst isGeminiContent = (obj: unknown): obj is GeminiContent => {\n  return (\n    isObject(obj) &&\n    'role' in obj &&\n    isString(obj.role) &&\n    ['user', 'model'].includes(obj.role) &&\n    has(obj, 'parts') &&\n    Array.isArray(obj.parts) &&\n    obj.parts.every(isGeminiContentPart)\n  );\n};\n\nconst isGeminiCandidate = (obj: unknown): obj is GeminiCandidate => {\n  return isObject(obj) && 'content' in obj && isGeminiContent(obj.content);\n};\n\nexport const normalizeGeminiChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('contents' in obj) {\n    if (isString(obj.contents)) {\n      const message = prettyPrintChatMessage({ type: 'message', content: obj.contents, role: 'user' });\n      return message && [message];\n    }\n\n    if (isArray(obj.contents) && obj.contents.every(isGeminiContent)) {\n      return compact(\n        obj.contents.map((item) => {\n          const role = item.role === 'model' ? 'assistant' : item.role;\n          return prettyPrintChatMessage({\n            type: 'message',\n            content: item.parts.map((part) => ({ type: 'text', text: part.text })),\n            role,\n          });\n        }),\n      );\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeGeminiChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('candidates' in obj && isArray(obj.candidates) && obj.candidates.every(isGeminiCandidate)) {\n    return compact(\n      obj.candidates\n        .flatMap((item) => item.content)\n        .map((item) => {\n          const role = item.role === 'model' ? 'assistant' : item.role;\n          return prettyPrintChatMessage({\n            type: 'message',\n            content: item.parts.map((part) => ({ type: 'text', text: part.text })),\n            role,\n          });\n        }),\n    );\n  }\n\n  return null;\n};\n","import { compact, has, isNil, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceToolCall } from '../ModelTrace.types';\nimport { isModelTraceToolCall, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ntype LangchainContentPart = {\n  type: 'text' | 'image_url';\n  text?: string;\n  image_url?: {\n    url: string;\n  };\n};\n\n// it has other fields, but we only care about these for now\nexport type LangchainBaseMessage = {\n  content?: string | LangchainContentPart[];\n  type: 'human' | 'user' | 'assistant' | 'ai' | 'system' | 'tool' | 'function';\n  tool_calls?: LangchainToolCallMessage[];\n  tool_call_id?: string;\n  additional_kwargs?: {\n    // some langchain models have tool_calls specified in additional_kwargs in\n    // OpenAI format. this appears to be a bug, but we should still try to handle it\n    tool_calls?: ModelTraceToolCall[];\n  };\n};\n\nexport type LangchainToolCallMessage = {\n  name: string;\n  // an object with the arguments to the tool call.\n  // should be stringified before display.\n  args: any;\n  id: string;\n};\n\nexport type LangchainChatGeneration = {\n  message: LangchainBaseMessage;\n};\n\nexport const langchainMessageToModelTraceMessage = (message: LangchainBaseMessage): ModelTraceChatMessage | null => {\n  let role: ModelTraceChatMessage['role'];\n  switch (message.type) {\n    case 'user':\n    case 'human':\n      role = 'user';\n      break;\n    case 'assistant':\n    case 'ai':\n      role = 'assistant';\n      break;\n    case 'system':\n      role = 'system';\n      break;\n    case 'tool':\n      role = 'tool';\n      break;\n    case 'function':\n      role = 'function';\n      break;\n    default:\n      return null;\n  }\n\n  // Handle content that could be a string or an array of content parts\n  let content: string | undefined;\n  if (isString(message.content)) {\n    content = message.content;\n  } else if (Array.isArray(message.content)) {\n    // Convert array of content parts to string representation\n    const contentParts = message.content\n      .map((part: any) => {\n        if (isString(part)) {\n          return part;\n        } else if (part.type === 'text' && part.text) {\n          return part.text;\n        } else if (part.type === 'image_url' && part.image_url?.url) {\n          // Convert to markdown image format with spacing\n          return `![](${part.image_url.url})`;\n        }\n        return '';\n      })\n      .filter(Boolean);\n\n    // Join with double line breaks for better visual separation\n    content = contentParts.join('\\n\\n');\n  } else {\n    content = undefined;\n  }\n\n  const normalizedMessage: ModelTraceChatMessage = {\n    content,\n    role,\n  };\n\n  const toolCalls = message.tool_calls;\n  const toolCallsFromKwargs = message.additional_kwargs?.tool_calls;\n\n  // attempt to parse tool calls from the top-level field,\n  // otherwise fall back to the additional_kwargs field if it exists\n  if (\n    !isNil(toolCalls) &&\n    Array.isArray(toolCalls) &&\n    toolCalls.length > 0 &&\n    toolCalls.every(isLangchainToolCallMessage)\n  ) {\n    // compact for typing. the coercion should not fail since we\n    // check that the type is correct in the if condition above\n    normalizedMessage.tool_calls = compact(toolCalls.map(normalizeLangchainToolCall));\n  } else if (\n    !isNil(toolCallsFromKwargs) &&\n    Array.isArray(toolCallsFromKwargs) &&\n    toolCallsFromKwargs.length > 0 &&\n    toolCallsFromKwargs.every(isModelTraceToolCall)\n  ) {\n    normalizedMessage.tool_calls = toolCallsFromKwargs.map(prettyPrintToolCall);\n  }\n\n  if (!isNil(message.tool_call_id)) {\n    normalizedMessage.tool_call_id = message.tool_call_id;\n  }\n\n  return normalizedMessage;\n};\n\nexport const normalizeLangchainToolCall = (toolCall: LangchainToolCallMessage): ModelTraceToolCall | null => {\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: JSON.stringify(toolCall.args, null, 2),\n      name: toolCall.name,\n    },\n  };\n};\n\nexport const isLangchainBaseMessage = (obj: any): obj is LangchainBaseMessage => {\n  if (!obj) {\n    return false;\n  }\n\n  // content can be undefined/null, string, or array of content parts\n  if (!isNil(obj.content) && !isString(obj.content) && !Array.isArray(obj.content)) {\n    return false;\n  }\n\n  // tool call validation is handled by the normalization function\n  return ['human', 'user', 'assistant', 'ai', 'system', 'tool', 'function'].includes(obj.type);\n};\n\nexport const isLangchainToolCallMessage = (obj: any): obj is LangchainToolCallMessage => {\n  return obj && isString(obj.name) && has(obj, 'args') && isString(obj.id);\n};\n\nexport const isLangchainChatGeneration = (obj: any): obj is LangchainChatGeneration => {\n  return obj && isLangchainBaseMessage(obj.message);\n};\n\n// normalize langchain chat input format\nexport const normalizeLangchainChatInput = (obj: any): ModelTraceChatMessage[] | null => {\n  // it could be a list of list of messages\n  if (\n    Array.isArray(obj) &&\n    obj.length === 1 &&\n    Array.isArray(obj[0]) &&\n    obj[0].length > 0 &&\n    obj[0].every(isLangchainBaseMessage)\n  ) {\n    const messages = obj[0].map(langchainMessageToModelTraceMessage);\n    // if we couldn't convert all the messages, then consider the input invalid\n    if (messages.some((message) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  // it could also be an object with the `messages` key\n  if (Array.isArray(obj?.messages) && obj.messages.length > 0 && obj.messages.every(isLangchainBaseMessage)) {\n    const messages = obj.messages.map(langchainMessageToModelTraceMessage);\n\n    if (messages.some((message: ModelTraceChatMessage[] | null) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  // it could also just be a plain array that is in the correct format\n  if (Array.isArray(obj) && obj.length > 0 && obj.every(isLangchainBaseMessage)) {\n    const messages = obj.map(langchainMessageToModelTraceMessage);\n\n    if (messages.some((message) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  return null;\n};\n\nconst isLangchainChatGenerations = (obj: any): obj is LangchainChatGeneration[][] => {\n  if (!Array.isArray(obj) || obj.length < 1) {\n    return false;\n  }\n\n  if (!Array.isArray(obj[0]) || obj[0].length < 1) {\n    return false;\n  }\n\n  // langchain chat generations are a list of lists of messages\n  return obj[0].every(isLangchainChatGeneration);\n};\n\nconst getMessagesFromLangchainChatGenerations = (\n  generations: LangchainChatGeneration[],\n): ModelTraceChatMessage[] | null => {\n  const messages = generations.map((generation: LangchainChatGeneration) =>\n    langchainMessageToModelTraceMessage(generation.message),\n  );\n\n  if (messages.some((message) => message === null)) {\n    return null;\n  }\n\n  return messages as ModelTraceChatMessage[];\n};\n\n// detect if an object is a langchain ChatResult, and normalize it to a list of messages\nexport const normalizeLangchainChatResult = (obj: any): ModelTraceChatMessage[] | null => {\n  if (isLangchainChatGenerations(obj)) {\n    return getMessagesFromLangchainChatGenerations(obj[0]);\n  }\n\n  if (\n    !Array.isArray(obj?.generations) ||\n    !(obj.generations.length > 0) ||\n    !obj.generations[0].every(isLangchainChatGeneration)\n  ) {\n    return null;\n  }\n\n  return getMessagesFromLangchainChatGenerations(obj.generations[0]);\n};\n","import { has, isArray, isString } from 'lodash';\nimport { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport const normalizeDspyChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  // Handle DSPy format with messages array\n  if (has(obj, 'messages') && isArray((obj as any).messages)) {\n    const messages = (obj as any).messages;\n    return messages\n      .map((msg: any) => prettyPrintChatMessage({ type: 'message', content: msg.content, role: msg.role }))\n      .filter(Boolean);\n  }\n\n  return null;\n};\n\nexport const normalizeDspyChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  // Handle DSPy format with array output\n  if (isArray(obj) && obj.length > 0 && obj.every(isString)) {\n    // Join all output strings into one assistant message\n    const content = obj.join('\\n');\n    const message = prettyPrintChatMessage({ type: 'message', content, role: 'assistant' });\n    return message && [message];\n  }\n\n  return null;\n};\n"],"names":["_ref","name","styles","_ref2","_ref3","forwardRef","initialRatio","paneWidth","setPaneWidth","leftChild","leftMinWidth","rightChild","rightMinWidth","ref","_useResizeObserver","isResizing","setIsResizing","useState","containerRef","useRef","containerWidth","useResizeObserver","width","maxWidth","Infinity","ratio","theme","useDesignSystemTheme","updateRatio","useCallback","newPaneWidth","current","useImperativeHandle","useLayoutEffect","clamp","_jsxs","css","children","_jsx","Global","ResizableBox","axis","_css","display","flex","handle","position","spacing","sm","marginLeft","xs","minHeight","cursor","backgroundColor","zIndex","onResize","e","size","clampedSize","onResizeStart","onResizeStop","minConstraints","maxConstraints","ModelTraceExplorerSearchBox","searchFilter","setSearchFilter","matchData","handleNextSearchMatch","handlePreviousSearchMatch","searchValue","setSearchValue","debouncedSetSearchFilter","useDebouncedCallback","flexDirection","justifyContent","gap","Input","componentId","allowClear","placeholder","value","onClear","onChange","target","toLowerCase","prefix","SearchIcon","match","marginRight","alignItems","Typography","Text","whiteSpace","currentMatchIndex","totalMatches","Button","icon","ChevronUpIcon","onClick","ChevronDownIcon","DEFAULT_EXPAND_DEPTH","TimelineTreeZIndex","getTimelineTreeNodesList","nodes","expandedNodesFlat","traverseExpanded","traversedNode","_traversedNode$childr2","push","forEach","getTimelineTreeNodesMap","expandDepth","nodesMap","traverse","depth","_traversedNode$childr3","key","child","spanTimeFormatter","executionTimeUs","toFixed","getActiveChildIndex","node","activeNodeId","_node$children","findIndex","getModelTraceSpanNodeDepth","_node$children2","length","childDepths","map","Math","max","ModelTraceExplorerViewStateContext","createContext","rootNode","nodeMap","activeView","setActiveView","selectedNode","undefined","setSelectedNode","activeTab","setActiveTab","showTimelineTreeGantt","setShowTimelineTreeGantt","assessmentsPaneExpanded","setAssessmentsPaneExpanded","assessmentsPaneEnabled","useModelTraceExplorerViewState","useContext","ModelTraceExplorerViewStateProvider","modelTrace","initialActiveView","selectedSpanIdOnRender","_defaultSelectedNode$","_defaultSelectedNode$2","useMemo","parseModelTraceToTree","selectedSpanOnRender","searchTreeBySpanId","defaultSelectedNode","hasAssessments","assessments","chatMessages","Provider","getTabForMatch","section","useModelTraceSearch","treeNode","setExpandedKeys","modelTraceInfo","_matches$activeMatchI","spanFilterState","setSpanFilterState","spanTypeDisplayState","compact","type","spanType","showParents","showExceptions","getDefaultSpanFilterState","activeMatchIndex","setActiveMatchIndex","filteredTreeNodes","matches","isNil","searchTree","selectMatch","newMatchIndex","span","parents","getSpanNodeParentIds","Set","currentNode","parentId","add","expandedKeys","_selectedNode$key","selectedNodeKey","newSpan","trim","ACTIVE_HIGHLIGHT_COLOR","INACTIVE_HIGHLIGHT_COLOR","ModelTraceExplorerHighlightedCodeSnippet","data","activeMatch","containsActiveMatch","scrollToActiveMatch","scrollIntoView","block","inline","spans","getHighlightedSpanComponents","activeMatchBackgroundColor","colors","inactiveMatchBackgroundColor","backgroundSecondary","padding","fontSize","typography","fontSizeSm","BasicTable","Table","scrollable","TableRenderer","header","rows","isValid","_childArray$","childArray","React","toArray","slice","flatMap","props","filter","c","useParsedTableComponents","VirtualizedTable","parentRef","rowVirtualizer","useVirtual","overscan","virtualItems","totalSize","overflow","maxHeight","border","borderColor","borderRadius","borders","borderRadiusMd","marginBottom","md","height","borderBottom","virtualRow","rowIndex","index","rowElement","measureRef","top","start","VirtualizedTableRow","isHeader","some","tagName","TableRow","style","backgroundPrimary","VirtualizedTableCell","TableHeader","paddingLeft","color","textPrimary","TableCell","urlTransform","startsWith","defaultUrlTransform","GenAIMarkdownRenderer","components","getMarkdownComponents","extensions","ReactMarkdown","remarkPlugins","RemarkPlugins","CodeMarkdownComponent","codeBlock","codeInline","codeProps","_node$position","_node$position2","language","_codeProps$className","exec","className","line","end","InlineCode","code","CodeBlock","String","replace","CodeSnippet","actions","SnippetCopyAction","copyText","isDarkMode","isCodeSnippetLanguage","boxSizing","showLineNumbers","remarkGfm","a","href","Link","id","disabled","_Fragment","openInNewTab","_props$extensions$cod","_props$extensions","_props$extensions$cod2","_props$extensions2","p","Paragraph","h1","Title","level","h2","h3","h4","h5","table","tr","th","td","multiline","thead","tbody","img","src","alt","languageString","ModelTraceExplorerCodeSnippetBody","renderMode","CodeSnippetRenderMode","JSON","containsMatches","Boolean","includes","isContentLong","setIsContentLong","expanded","setExpanded","snippetRef","dataToTruncate","parsedData","parse","isString","expandable","split","displayedData","join","useEffect","scrollWidth","clientWidth","PreWithRef","preProps","isKeyMatch","right","PreTag","lineProps","wordBreak","wrapLines","paddingBottom","paddingRight","textOverflow","lineHeight","lineHeightBase","FormattedMessage","defaultMessage","ModelTraceExplorerHighlightedSnippetTitle","title","isActiveMatch","titleLower","startIdx","indexOf","endIdx","scrollMarginTop","getInitialRenderMode","dataIsString","initialRenderMode","MARKDOWN","getRenderModeDisplayText","TEXT","_ref4","ModelTraceExplorerCodeSnippet","tokens","_activeMatch$isKeyMat","setRenderMode","isTitleMatch","shouldShowRenderModeDropdown","borderRadiusSm","withoutMargins","DropdownMenu","Root","Trigger","asChild","Tag","Content","RadioGroup","onValueChange","Object","values","mode","RadioItem","ItemIndicator","Arrow","ModelTraceExplorerAttributesTab","activeSpan","attributes","containsAttributes","keys","isActiveMatchSpan","marginTop","Empty","description","entries","stringify","ModelTraceExplorerChatToolParam","paramName","paramProperties","isRequired","enum","enumValues","hasAdditionalInfo","borderStyles","borderTopLeftRadius","borderTopRightRadius","gridTemplateColumns","gridTemplateRows","bold","flexWrap","ModelTraceExplorerChatTool","tool","_tool$function$parame","_tool$function$parame2","_tool$function$parame3","function","parameters","properties","requiredParams","required","isExpandable","hoverStyles","actionIconBackgroundHover","role","ChevronRightIcon","getRoleIcon","ModelTraceExplorerIcon","ModelIconType","SYSTEM","USER","WRENCH","MODELS","getRoleDisplayText","message","ModelTraceExplorerChatMessageHeader","tool_call_id","toolName","toolCallId","Tooltip","content","flexShrink","ModelTraceExplorerToolCallMessage","toolCall","functionName","margin","FunctionIcon","arguments","ModelTraceExplorerChatMessageContent","shouldDisplayCodeSnippet","paddingTop","fontSizeBase","ModelTraceExplorerChatMessage","_message$content","isJson","error","tryGetJsonContent","displayedContent","tool_calls","ModelTraceExplorerConversation","messages","ModelTraceExplorerCollapsibleSection","sectionKey","withBorder","background","borderBottomLeftRadius","borderBottomRightRadius","borderTop","ModelTraceExplorerChatTab","chatTools","overflowY","ModelTraceExplorerDefaultSpanView","inputList","createListFromObject","inputs","outputList","outputs","containsInputs","containsOutputs","getTruncatedStyles","shouldTruncate","KeyValueTag","itemKey","itemValue","charLimit","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","ModelTraceExplorerRetrieverDocumentFull","text","metadataTags","logDocumentClick","FileDocumentIcon","ModelTraceExplorerRetrieverDocumentPreview","minWidth","ellipsis","ModelTraceExplorerRetrieverDocument","metadata","ModelTraceExplorerRenderModeToggle","shouldRenderMarkdown","setShouldRenderMarkdown","SegmentedControlGroup","event","SegmentedControlButton","TextBoxIcon","fontSizeLg","MIcon","ModelTraceExplorerRetrieverSpanView","outputsContainsActiveMatch","legacyBorders","document","idx","page_content","ModelTraceExplorerContentTab","isRenderableRetrieverSpan","ModelTraceExplorerEventsTab","events","Array","isArray","XCircleIcon","attribute","getEventAttributeKey","ModelTraceExplorerBadge","count","actionDangerPrimaryBackgroundDefault","actionPrimaryTextDefault","AssessmentPaneToggle","GavelIcon","ASSESSMENT_PANE_MIN_WIDTH","timeSinceStr","date","referenceDate","Date","seconds","floor","getTime","interval","timeSince","getCreateAssessmentPayloadValue","formValue","dataType","isFeedback","feedback","expectation","serialized_value","serialization_format","fetchFn","fetch","serializeRequestBody","payload","FormData","Blob","fetchAPI","async","url","method","body","response","headers","ok","predefinedError","matchPredefinedError","json","createAssessment","assessment","trace_id","AssessmentCreateForm","assessmentName","spanId","traceId","intl","useIntl","queryClient","useQueryClient","setName","assessmentType","setAssessmentType","setDataType","setValue","rationale","setRationale","valueError","setValueError","mutate","createAssessmentMutation","isLoading","useMutation","mutationFn","onSuccess","invalidateQueries","queryKey","FETCH_TRACE_INFO_QUERY_KEY","onError","displayErrorNotification","formatMessage","Error","onSettled","isNamePrefilled","handleCreate","_getUser","valueObj","assessment_name","source","source_type","source_id","getUser","span_id","SimpleSelect","SimpleSelectOption","onKeyDown","stopPropagation","TextArea","autoSize","minRows","maxRows","validationState","FormUI","Message","Number","loading","AssessmentCreateButton","PlusIcon","AssessmentActionsOverflowMenu","setIsEditing","setShowDeleteModal","user","isEditEnabled","shouldEnableAssessmentEditing","doesUserHavePermissions","showEditButton","OverflowIcon","Item","IconWrapper","PencilIcon","TrashIcon","AssessmentDeleteModal","isModalVisible","setIsModalVisible","deleteAssessmentMutation","deleteAssessment","assessmentId","assessment_id","handleDelete","Modal","visible","onOk","okButtonProps","danger","okText","onCancel","cancelText","confirmLoading","useUpdateAssessment","updateAssessmentMutation","updateAssessment","AssessmentEditForm","initialValue","getAssessmentValue","defaultType","getDefaultType","defaultValue","getDefaultValue","isUpdating","overrideAssessmentMutation","isOverwriting","useOverrideAssessment","oldAssessment","newAssessment","overrides","omit","handleUpdate","update_mask","ExpectationValuePreview","objectKey","displayValue","SpanNameDetailViewLink","_node$type","hasException","getSpanExceptionCount","textDecoration","textDecorationColor","actionDangerDefaultTextDefault","actionDefaultTextDefault","getIconTypeForSpan","ModelSpanType","UNKNOWN","getValuePreview","parsedValue","item","isObject","ExpectationItem","isEditing","showDeleteModal","associatedSpan","showAssociatedSpan","getParsedExpectationValue","AssessmentDisplayValue","jsonValue","CheckCircleIcon","DangerIcon","AssessmentSourceName","textWrap","blue500","AssessmentItemHeader","renderConnector","SourceIcon","UserIcon","SparkleIcon","CodeIcon","getSourceIcon","left","borderLeft","borderRadiusFull","last_update_time","FeedbackErrorItem","Alert","closable","error_code","error_message","stack_trace","footer","FeedbackHistoryItem","lg","FeedbackHistoryModal","assessmentHistory","seen","flattened","currentAssessment","has","overriddenAssessment","flattenOverrides","FeedbackItemContent","isHistoryModalVisible","setIsHistoryModalVisible","FeedbackItem","getSourceTypeIcon","sourceType","smallIconStyles","FeedbackValueGroupSourceCounts","feedbacks","sourceCounts","countBy","FeedbackValueGroup","valid","FeedbackGroup","valuesMap","activeSpanId","displayName","getAssessmentDisplayName","showCreateForm","setShowCreateForm","hasError","flat","AssessmentsPane","expectations","partition","groupedFeedbacks","aggregated","group","toSorted","leftName","rightName","localeCompare","groupFeedbacks","sortedExpectations","CloseIcon","ModelTraceExplorerRightPaneTabsImpl","contentStyle","exceptionCount","tabContent","Tabs","tab","List","ModelTraceExplorerResizablePane","ModelTraceExplorerRightPaneTabs","TimelineTreeFilterButton","Popover","FilterIcon","align","shouldDisplay","Checkbox","isChecked","getDisplayNameForSpanType","InfoTooltip","TimelineTreeHeader","showTimelineInfo","setShowTimelineInfo","ListBorderIcon","BarsAscendingVerticalIcon","IconBottomConnector","active","bottom","SPAN_INDENT_WIDTH","borderRight","IconLeftConnector","VerticalConnector","TimelineTreeHierarchyBars","isActiveSpan","isInActiveChain","linesToRender","hasChildren","isExpanded","shouldRender","isActive","TimelineTreeSpanTooltip","_span$type","iconType","primaryTextColor","grey800","grey100","secondaryTextColor","grey500","grey350","hideWhenDetached","isInTooltip","side","TimelineTreeNode","selectedKey","traceStartTime","traceEndTime","onSelect","activeChildIndex","actionDefaultBackgroundHover","actionDefaultBackgroundPress","newExpandedKeys","delete","_node$children$length","_node$children3","concat","TimelineTreeGanttNode","leftOffset","titleInBarRef","titleBesideBarRef","offsetWidth","blue600","white","TimelineTreeGanttBars","_useResizeObserver$wi","treeContainerRef","treeElementWidth","initialXTicks","graphWidth","minPixelsBetweenTicks","range","maxTickCount","rawInterval","magnitude","pow","log10","residual","niceFraction","niceInterval","extendedRight","ticks","tick","ceil","getNiceXTicks","min","xTicks","scaleDurationToTreeWidth","scaleX","n","transform","pointerEvents","TimelineTree","rootNodes","onSpanClick","expandedNodesList","getTimelineTreeExpandedNodesList","_traversedNode$childr","treeElement","_selectedNode$key2","ModelTraceExplorerDetailView","selectedSpanId","onSelectSpan","_treeNode$start","_treeNode$end","window","innerWidth","paneRef","useTimelineTreeExpandedNodes","params","list","initialExpandDepth","info","leftPaneMinWidth","minWidthForSpans","CONTENT_PANE_MIN_WIDTH","ModelTraceExplorerErrorState","image","useGetModelTraceInfoV3","setModelTrace","setAssessmentsPaneEnabled","useQuery","queryFn","fetchTraceInfoV3","prevModelTrace","_response$trace$trace","_response$trace","trace","trace_info","ModelTraceExplorerChatToolsRenderer","tools","ModelTraceExplorerRetrieverFieldRenderer","documents","ModelTraceExplorerTextFieldRenderer","ModelTraceExplorerFieldRenderer","normalizeConversation","isChatTools","every","isModelTraceChatTool","isRetrieverDocuments","isRetrieverDocument","ModelTraceExplorerSummaryViewExceptionsSection","_firstException$attri","exceptionEvents","getSpanExceptionEvents","isRoot","firstException","ModelTraceExplorerSummaryIntermediateNode","spanName","ModelTraceExplorerSummarySpans","intermediateNodes","rootInputs","rootOutputs","exceptions","hasIntermediateNodes","hasExceptions","isNodeImportant","AGENT","RETRIEVER","CHAT_MODEL","TOOL","LLM","ModelTraceExplorerSummaryView","allAssessments","ModelTraceExplorerImpl","enableSummaryView","shouldEnableSummaryView","ContextProviders","ErrorBoundary","fallbackRender","ModelTraceExplorer","initialModelTrace","getModelTraceId","Skeleton","ModelTraceExplorerSkeleton","label","TitleSkeleton","TableSkeleton","lines","isAutogenFunctionCall","obj","get","isAutogenMessage","messageType","convertAssistantMessageToChatMessage","prettyPrintChatMessage","f","prettyPrintToolCall","normalizeAutogenMessage","textParts","part","normalizeAutogenChatInput","normalizeAutogenChatOutput","parseBedrockContent","bytes","format","Buffer","from","toString","image_url","convertBedrockMessageToChatMessage","contents","toolCalls","toolUse","input","toolUseId","toolResult","resultContent","parsedContent","contentString","chatMessage","isBedrockMessage","hasRole","hasContent","normalizeBedrockChatInput","normalizeBedrockChatOutput","output","normalizeOpenAIChatInput","_obj$messages","isRawModelTraceChatMessage","normalizeOpenAIChatResponse","isModelTraceChoices","choice","_choice$message$tool_","isModelTraceChatResponse","choices","_choice$message$tool_2","isOpenAIResponsesInputMessage","isOpenAIResponsesOutputItem","outputFormat","normalizeOpenAIResponsesInputMessage","normalizeOpenAIResponsesInputItem","imageUrl","normalizeOpenAIResponsesInput","normalizeOpenAIResponsesOutputItem","call_id","output_format","result","normalizeOpenAIResponsesOutput","chunk","isOpenAIAgentMessage","normalizeOpenAIAgentMessage","textContent","callId","arguments_","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","isLlamaIndexChatMessageBlock","isLlamaIndexChatMessage","blocks","prettyPrintMessage","normalizeLlamaIndexChatResponse","isLlamaIndexChatResponse","normalizeLlamaIndexChatInput","isLlamaIndexChatInput","CONNECT","isRootSpan","iconColor","iconMap","ModelsIcon","DOCUMENT","ConnectIcon","CODE","FUNCTION","NUMBERS","NumbersIcon","SEARCH","SORT","SortUnsortedIcon","QuestionMarkIcon","WrenchIcon","UserSparkleIcon","CHAIN","ChainIcon","GearIcon","SAVE","SaveIcon","actionDefaultIconDefault","tooltipColor","actionPrimaryIcon","textValidationSuccess","green500","green800","green100","turquoise","blue800","blue100","red500","red700","red800","red100","general","iconSize","tooltipBackgroundTooltip","svg","iconFontSize","isAnthropicContentBlockParam","media_type","tool_use_id","isAnthropicMessageParam","normalizeAnthropicContentBlockParam","processAnthropicMessage","toolMessages","processAnthropicMessageContent","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","isGeminiContentPart","isGeminiContent","parts","isGeminiCandidate","normalizeGeminiChatInput","normalizeGeminiChatOutput","candidates","langchainMessageToModelTraceMessage","_message$additional_k","_part$image_url","normalizedMessage","toolCallsFromKwargs","additional_kwargs","isLangchainToolCallMessage","normalizeLangchainToolCall","isModelTraceToolCall","args","isLangchainBaseMessage","isLangchainChatGeneration","normalizeLangchainChatInput","getMessagesFromLangchainChatGenerations","generations","generation","normalizeLangchainChatResult","isLangchainChatGenerations","normalizeDspyChatInput","msg","normalizeDspyChatOutput"],"sourceRoot":""}